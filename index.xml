<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cbk的极乐世界</title>
    <link>https://chenbokaix250.github.io/</link>
    <description>Recent content on cbk的极乐世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 09 Apr 2020 16:36:23 +0800</lastBuildDate>
    
	<atom:link href="https://chenbokaix250.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo搭建博客记录</title>
      <link>https://chenbokaix250.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 09 Apr 2020 16:36:23 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</guid>
      <description>Hugo搭建私人博客 安装Hugo，安装比较简单，因为我的Mac电脑，使用Homebrew安装Hugo: brew install hugo
安装好以后创建名为blog的站点 hugo new site Blog
添加一个主题
cd blob;//本地博客根目录 git init; git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke; # 编辑你的 config.toml 配置文件使用该主题 echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml 添加一篇文章 hugo new posts/my-first-post.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;_const小结</title>
      <link>https://chenbokaix250.github.io/post/c&#43;&#43;_const%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Thu, 09 Apr 2020 15:45:00 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/c&#43;&#43;_const%E5%B0%8F%E7%BB%93/</guid>
      <description>C++ const 关键字小结 const 是 constant 的缩写，本意是不变的，不易改变的意思。在 C++ 中是用来修饰内置类型变量，自定义对象，成员函数，返回值，函数参数。
C++ const 允许指定一个语义约束，编译器会强制实施这个约束，允许程序员告诉编译器某值是保持不变的。如果在编程中确实有某个值保持不变，就应该明确使用const，这样可以获得编译器的帮助。
const 修饰普通类型的变量 const int a = 7; int b = a;//正确 a = 8; //错误 a被定义为一个常量,并且可以将 a 赋值给 b，但是不能给 a 再次赋值。对一个常量赋值是违法的事情，因为 a 被编译器认为是一个常量，其值不允许修改。 下面这个例子:</description>
    </item>
    
    <item>
      <title>Mxnet_learn</title>
      <link>https://chenbokaix250.github.io/post/mxnet_learn/</link>
      <pubDate>Thu, 09 Apr 2020 09:25:20 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/mxnet_learn/</guid>
      <description>Mxnet 笔记 MXnet中利用NDArray作为存储和变换数据的主要工具
NDArray提供了GPU计算和自动求梯度等功能,更适合深度学习中使用.
NDAarray支持大量的运算符
两个形状相同的NDArray按元素运算时,可能会触发广播机制(先适当复制元素使这两个NDArray形状相同后再按元素运算)
在NDArray中,索引从0开始逐一递增
可以利用Python中自带的id函数,查看对应的内存地址是否相同
可以通过array函数和asnumpy函数令数据在NDArray和Numpy格式之间互相变换
MXNet提供了autograd模块来自动求梯度
调用record函数后,MXNet会记录并计算梯度 默认情况下,autograd还会将运行模式从预测模式转为训练模式.可以通过调用is_training函数来查看
 关于在MXNet上查阅函数和类  想知道一个模块里面提供了哪些可以调用的函数和类的时候,可以使用dir函数 想了解某个函数或者类的具体用法时,可以使用help函数(利用q退出或者ctrl+z) 在jupyter记事本里,可以使用?来讲文档显示在另外一个窗口(nd.random?)  使用Gluon可以更简洁的实现模型
在Gluon中,data模块提供有关数据处理的工具,nn模块定义了大量神经网络的层,loss模块定义了各种损失
XMNet的initializer模块提供了模型参数初始化的各种方法
 正向传播
指对神经网络沿着输入层到输出层的顺序,依次计算并存储模型的中间变量
反向传播
计算神经网络参数提督的方法
依据微积分中的链式法则,沿着从输出层到输入层的顺序,依次计算并存储目标函数有关神经网络各层的中间变量以及参数的梯度.
深度学习模型中,正向传播和反向传播相互依赖
深度模型有关数值稳定性的典型问题是衰减(vanishing)和爆炸(explosion)</description>
    </item>
    
    <item>
      <title>Qt_learn</title>
      <link>https://chenbokaix250.github.io/post/qt_learn/</link>
      <pubDate>Thu, 09 Apr 2020 09:07:02 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/qt_learn/</guid>
      <description>Qt 之路 Qt 涉及的术语和名词 Project Project 的中文翻译是“项目”或者“工程”，这里的项目是指为实现某个相对独立功能的程序代码合,这些代码不单单是放在一块，而是有相互之间的关联性，并且有专门负责管理该项目的项目文件，比如：
 Qt 使用 .pro 文件管理项目； VC++ 则使用 .vcproj 作为项目文件。  集成开发环境通常都是依据项目文件（.pro/.vcproj）管理和构建项目。
Makefile 即生成脚本，虽然可以直接调用编译器如 g++ 编译程序，但是如果项目里的代码文件变多了，哪些代码文件更新了需要重新编译，哪些代码没有改不需要重新编译等等，靠程序员自己记忆去处理是比较麻烦的事，还有哪些代码需要预处理或是链接哪些库文件， 这些都是繁杂的过程。为了规范程序的编译生成过程，产生了规范化的生成脚本，就是 Makefile，生成器 make 可以依据规范的 Makefile 自动生成目标程序或库文件。
定义好 Makefile ，让程序员只需要去关注如何编写代码，而生成程序过程中的脏活累活都交给 make 程序。</description>
    </item>
    
    <item>
      <title>性能评价</title>
      <link>https://chenbokaix250.github.io/post/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/</link>
      <pubDate>Thu, 09 Apr 2020 01:16:59 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/</guid>
      <description>detecter 参考yolo评价  mAP(mean Averge Precision) 作为object detection中衡量检测精度的指标 &amp;gt;45% FPS(Frames Per Second) 每秒传输帧数 &amp;gt;35 IOU(交并比) 计算两个边界框交集和并集之比 &amp;gt;85%  参考kitti  moderate &amp;gt;70% Easy &amp;gt;80% Hard &amp;gt;60% Runtime &amp;lt;0.25s  tracking VOT评价体系 &amp;ndash; 主要有EAO指标和EFO指标  EAO是Expect Average Overlaprate(平均重叠率) &amp;gt;85% EFO是Equivalent Filter Operations(过滤器等效操作数) &amp;gt;30  MOTA16 评价体系(参考kitti)  MOTA(Multiple Object Tracking Accuracy) &amp;gt;75% MOTP(Multiple Object Tracking Precision) &amp;gt;75% MT(Mostly Tracked) 满足Ground Truth至少在80%的时间内都匹配成功的track 在所有追踪目标中所占的比例。&amp;gt;65% ML(Mostly Lost) 满足Ground Truth在小于20%的时间内匹配成功的track 在所有追踪目标中所占的比例。&amp;lt;15% Runtime 运行周期 &amp;lt;0.</description>
    </item>
    
    <item>
      <title>Git_learn</title>
      <link>https://chenbokaix250.github.io/post/git_learn/</link>
      <pubDate>Thu, 09 Apr 2020 00:46:40 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/git_learn/</guid>
      <description>Git 使用中的一些记录 今年需要输出一下相关的内容 准备用github托管一下
所以准备在git上记录相关内容
简要的Git入门一下
 先要生成ssh key 在github上配置ssh key $ ssh -T git@github.com来验证是否成功   要将本地仓库传到github上去,需要设置username和email
$ git config --global user.name &amp;#34;your name&amp;#34; $ git config --global user.email &amp;#34;your_email@youremail.</description>
    </item>
    
    <item>
      <title>第一篇 -&gt; 搭建</title>
      <link>https://chenbokaix250.github.io/post/blog/</link>
      <pubDate>Wed, 08 Apr 2020 23:52:51 +0800</pubDate>
      
      <guid>https://chenbokaix250.github.io/post/blog/</guid>
      <description>利用hugo搭建博客 并挂载github pages 利用chenboka</description>
    </item>
    
  </channel>
</rss>