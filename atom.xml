<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">极乐世界</title>
    <subtitle type="html">其实没什么!</subtitle>
    <updated>2022-03-21T15:31:00&#43;08:00</updated>
    <id>https://chenbokaix250.github.io/</id>
    <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://chenbokaix250.github.io/atom.xml" />
    <author>
            <name>chenbokai</name>
            <uri>https://chenbokaix250.github.io/</uri>
            
                <email>chenbokais3@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.89.1">Hugo</generator>
        <entry>
            <title type="text">C&#43;&#43;_primer_2面向对象</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;_primer_2/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;_primer_2/</id>
            <updated>2022-03-21T15:24:23&#43;08:00</updated>
            <published>2022-03-17T15:31:53&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C++ 进阶(面向对象) 如果既可以通过初始化,也可以通过赋值来设置对象的值,则应采用初始化……</summary>
            
                <content type="html">&lt;h1 id=&#34;c-进阶面向对象&#34;&gt;C++ 进阶(面向对象)&lt;/h1&gt;
&lt;p&gt;如果既可以通过初始化,也可以通过赋值来设置对象的值,则应采用初始化方式.通常这种方式的效率更高.&lt;/p&gt;
&lt;h2 id=&#34;this指针和const联合&#34;&gt;this指针和const联合&lt;/h2&gt;
&lt;p&gt;如果方法需要引用整个调用对象,则可以使用表达式&lt;code&gt;*this&lt;/code&gt;.在函数的括号后面使用const限定符将this限定为const,这样将不能使用this来修改对象的值.
this指针指向用来调用成员函数的对象(this被作为隐藏参数传递给方法)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;友元函数&#34;&gt;友元函数&lt;/h2&gt;
&lt;p&gt;使用非成员函数可以按所需的顺序获得操作数,但引发了一个新问题:非成员函数不能直接访问类的私有数据,至少常规非成员函数不能访问.特殊的成员函数可以访问类的私有成员--&lt;strong&gt;友元函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既不属于类的私有成员函数,又可以访问类的私有成员变量.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;构造函数在重载中的使用&#34;&gt;构造函数在重载中的使用&lt;/h2&gt;
&lt;p&gt;在类的函数运算符重载中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Vector Vector::operator+(const Vector &amp;amp; b) const
{
    return Vector(x + b.x,y + b.y);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码中将新的x分量和y分量传递给Vector构造函数,而后者将使用这些值来创建无名的新对象,并返回该对象的副本.这确保新的Vector对象是根据构造函数制定的标准规则创建的.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;自动转换关闭&#34;&gt;自动转换关闭&lt;/h2&gt;
&lt;p&gt;c++中 利用explicit用于关闭&lt;strong&gt;将构造函数用作自动类型转换函数&lt;/strong&gt;的特性.
构造函数用于某种类型到类类型的转换,如果要进行相反的转换,必须使用c++运算符函数--&lt;strong&gt;转换函数&lt;/strong&gt;
&lt;code&gt;double host = double(wolfe);&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;类中的运算符重载&#34;&gt;类中的运算符重载&lt;/h2&gt;
&lt;p&gt;大多数运算符都可以通过成员或非成员函数进行重载,但下面的运算符只能通过成员函数进行重载&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;=  赋值运算符
() 函数调用运算符
[] 下标运算符
-&amp;gt; 通过指针访问类成员的运算符
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;构造函数使用new时应该注意的问题&#34;&gt;构造函数使用new时应该注意的问题&lt;/h2&gt;
&lt;p&gt;使用new初始化对象的指针成员时,正确的做法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果构造函数中使用new来初始化指针成员,则应在析构函数中使用delete.&lt;/li&gt;
&lt;li&gt;new和delete必须相互兼容,成对出现.&lt;/li&gt;
&lt;li&gt;多个构造函数时,为了与delete对应,必须以相同的方式使用new.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;返回对象的说明&#34;&gt;返回对象的说明&lt;/h2&gt;
&lt;p&gt;当成员函数或独立的函数返回对象时,可以返回指向对象的引用/指向对象的const引用或const对象.四种情况:&lt;strong&gt;引用和非引用,const和非const&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;指针和对象小结&#34;&gt;指针和对象小结&lt;/h2&gt;
&lt;p&gt;使用对象指针,需要注意的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用常规表示法来声明指向对象的指针&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;String * glamour;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可以将指针初始化为指向已有的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;String * first = &amp;amp;sayings[0];&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;可以使用new来初始化指针,这将创建一个新的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;String * favorite = new String(sayings[choice]);&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;对类使用new将调用相应的类构造函数来初始化新创建的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;String * gleep = new String;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String * glop = new String(&amp;quot;my my my&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过不同的参数,调用不同的构造函数.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;delete可以与常规new运算符配合使用,但不能与定位new运算符配合使用.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定位new运算时,需要考虑buffer位置,进行移位操作.&lt;/p&gt;
&lt;p&gt;结束后,需要自行调用析构函数,完成析构操作.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Created by 博凯 Chen on 2022/3/21.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;new&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BUF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JustTesting&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;JustTesting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;constructed&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;destoryed&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SHow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;pc1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Heap1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;buffer: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;heap: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SHow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SHow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;


    &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Bad Idea&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Heap2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SHow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SHow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pc4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;pc3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bokaichen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_primer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placenew&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmake&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placenew&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;JustTestingconstructed&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Heap1constructed&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x7f97a8704290&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x60000377d140&lt;/span&gt;
&lt;span class=&#34;mh&#34;&gt;0x7f97a8704290&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JustTesting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mh&#34;&gt;0x60000377d140&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Heap1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Bad&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ideaconstructed&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Heap2constructed&lt;/span&gt;
&lt;span class=&#34;mh&#34;&gt;0x7f97a87042b0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bad&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Idea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mh&#34;&gt;0x60000377d160&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Heap2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Heap1destoryed&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Heap2destoryed&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Bad&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ideadestoryed&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;JustTestingdestoryed&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;finished&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;成员初始化列表&#34;&gt;成员初始化列表&lt;/h2&gt;
&lt;p&gt;对于const类成员,必须使用成员初始化列表,而且必须在构造函数中使用.对于被声明为引用的类成员,也必须使用这种语法.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Agency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{...};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Agent&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  	&lt;span class=&#34;n&#34;&gt;Agency&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;belong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Agent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Agent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Agency&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;belong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;不能将成员初始化列表用于构造函数之外的其他类方法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种格式只嗯呢该用于构造函数&lt;/li&gt;
&lt;li&gt;必须用这种格式来初始化非静态const数据成员&lt;/li&gt;
&lt;li&gt;必须用这种格式来初始化引用数据成员&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;访问基类的私有部分&#34;&gt;访问基类的私有部分&lt;/h2&gt;
&lt;p&gt;基类的私有部分也将成为派生类的一部分,但是只能通过基类的公有和保护防范访问.&lt;/p&gt;
&lt;p&gt;派生类不能直接访问基类的私有成员,必须通过基类方法进行访问.&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C&#43;&#43;_primer查漏补缺</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;_primer%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;_primer%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
            <updated>2022-03-17T14:54:20&#43;08:00</updated>
            <published>2022-03-17T14:17:44&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C++_PRIMER 整理总结 地址 数组的地址 数组名被解释为其第一个元素的地址,而对数组名应用地址运算符时……</summary>
            
                <content type="html">&lt;h1 id=&#34;c_primer-整理总结&#34;&gt;C++_PRIMER 整理总结&lt;/h1&gt;
&lt;h2 id=&#34;地址&#34;&gt;地址&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数组的地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组名被解释为其第一个元素的地址,而对数组名应用地址运算符时,得到的是整个数组的地址&lt;/p&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/aAvbCdRE8m5QMgK.jpg&#34; alt=&#34;p1.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/keQErAYgDtIP3v5.jpg&#34; alt=&#34;p2.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;hr&gt;
&lt;h2 id=&#34;运算符&#34;&gt;运算符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;运算符区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;箭头成员运算符(-&amp;gt;) 配合结构体指针使用&lt;/p&gt;
&lt;p&gt;.运算符配合结构体名称使用&lt;/p&gt;
&lt;p&gt;ps是指向结构体的指针,则*ps就是被指向的值--结构本身&lt;/p&gt;
&lt;p&gt;*ps是一个结构,&lt;code&gt;(*ps).price&lt;/code&gt;是该结构的price成员&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;结合&#34;&gt;结合&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;指针与运算符的结合&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/FxySP2KHvIAwTRO.jpg&#34; alt=&#34;p3.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/S2Rl64PvuyMZBAV.jpg&#34; alt=&#34;p4.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;hr&gt;
&lt;p&gt;指针(包括数组名)加1,实际上是加上了一个与指针指向的类型的长度相等的值.&lt;/p&gt;
&lt;p&gt;数组与指针对应的优势:将数组地址作为参数可以节省复制整个数组所需的时间和内存.&lt;/p&gt;
&lt;p&gt;P214 整理 数组与指针&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;const&#34;&gt;const&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;常量指针与指针常量的区别&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/oEyiJztPjdsMUrR.jpg&#34; alt=&#34;p6.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;指针指向的内容,不能通过指针来进行改动.但是能通过其他方式改动值.&lt;/p&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/kzrfmLjRYHKAq4N.jpg&#34; alt=&#34;p7.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;此时pt指针的值可以修改,但是只能指向一个变量.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;const在&lt;code&gt;*&lt;/code&gt;前面,表示不能通过pt指针修改值,const指针在&lt;code&gt;*&lt;/code&gt;后面,标志pt指针不能修改指向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;出现&lt;code&gt;const int *const pt&lt;/code&gt;的情况,即不能修改const指针的值,又不能修改其指向.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;函数指针&#34;&gt;函数指针&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;函数指针&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1112.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1542.6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2227.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//part1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//函数指针 p1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;part1----------------&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Address        Value&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//part2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//pa(pb) 指针构成的数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;part2----------------&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//part3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//pc(pd) 指针，指向函数指针构成的数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;part3----------------&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Address        Value&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;av&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//指针表示法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//数组表示法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;img src=&#34;https://s2.loli.net/2022/03/17/OfY1c4QV37hrekF.jpg&#34; alt=&#34;p8.jpeg&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;区别于混淆&#34;&gt;区别于混淆&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;(*pa[2])(av,3) &lt;/code&gt;与&lt;code&gt;*pa[2](av,3)&lt;/code&gt;的区别&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(*pa[2])(av,3) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据结合性 &lt;code&gt;[]&lt;/code&gt;优先级高于&lt;code&gt;*&lt;/code&gt;,优先与pa结合&lt;/p&gt;
&lt;p&gt;pa是数组,pa[2]是数组的第三个元素,这个元素是一个函数指针,指向f3的函数指针,&lt;code&gt;*pa[2]&lt;/code&gt;是f3函数本身,f3(av,3)则是返回其第三个元素的地址&lt;/p&gt;
&lt;p&gt;结果:&lt;strong&gt;第三个元素的地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*pa[2](av,3)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据结合性&lt;code&gt;pa[2](av,3)&lt;/code&gt;先结合 再与指针结合&lt;/p&gt;
&lt;p&gt;pa[2]是指向f3的指针,结合后是f3(av,3),重点&lt;strong&gt;对于函数指针,&lt;code&gt;f3()&lt;/code&gt;与&lt;code&gt;*f3()&lt;/code&gt;是完全一致的&lt;/strong&gt;,f3(av,3)计算了数组中第三个元素的地址,再结合*,就是第三个元素返回的的值&lt;/p&gt;
&lt;p&gt;结果:&lt;strong&gt;第三个元素的值&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;p&gt;引用经常被用作函数参数,使得函数中的变量名成为调用程序中的变量的别名.这种传递参数的方法称为&lt;strong&gt;按引用传递&lt;/strong&gt;.按引用传递允许被调用的函数能够访问调用函数中的变量.&lt;/p&gt;
&lt;p&gt;如果声明将引用指定为const,c++将在必要时生成临时变量.&lt;/p&gt;
&lt;p&gt;使用引用参数的主要原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能够修改调用函数中的数据对象&lt;/li&gt;
&lt;li&gt;通过传递引用而不是整个数据对象,可以提高程序的运行速度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;按值传递的指导原则:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/03/17/Ob2EM6iKITknrFD.jpg&#34; alt=&#34;p5.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;传递在使用时的技巧:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果传递的是数组,就用指针&lt;/li&gt;
&lt;li&gt;如果传递的是类,就用引用&lt;/li&gt;
&lt;li&gt;如果传递的是结构体,指针和引用都可以&lt;/li&gt;
&lt;li&gt;如果要传递一个基本类型,这个值不想修改就按值传,如果想修改就用指针.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;右值引用&#34;&gt;右值引用&lt;/h2&gt;
&lt;p&gt;能用取地址值&lt;code&gt;&amp;amp;&lt;/code&gt;操作的 就是左值,不能的是右值.&lt;/p&gt;
&lt;p&gt;如果想使用左值引用,但是等号右侧的值,无法取地址操作,使用&lt;code&gt;const&lt;/code&gt;常引用.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;只能通过引用来读取数据,不能通过引用来修改数据.&lt;/p&gt;
&lt;p&gt;c++11引入了右值引用的概念 两个&amp;amp;&amp;amp;符号定义右值引用.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;重载解析&#34;&gt;重载解析&lt;/h2&gt;
&lt;p&gt;对于函数重载/函数模板和函数模板重载,C++的策略&lt;/p&gt;
&lt;p&gt;从最佳到最差的匹配顺序:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完全匹配,但常规函数优先于模板&lt;/li&gt;
&lt;li&gt;提升转换&lt;/li&gt;
&lt;li&gt;标准转换&lt;/li&gt;
&lt;li&gt;用户定义的转换,如类声明中定义的转换&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python面向对象编程</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/" />
            <id>https://chenbokaix250.github.io/tech/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
            <updated>2022-03-11T10:30:38&#43;08:00</updated>
            <published>2022-03-11T10:30:16&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Python面向对象编程 区别 面向对象编程和函数式编程（面向过程编程）的区别 面向过程编……</summary>
            
                <content type="html">&lt;h1 id=&#34;python面向对象编程&#34;&gt;Python面向对象编程&lt;/h1&gt;
&lt;h2 id=&#34;区别&#34;&gt;区别&lt;/h2&gt;
&lt;p&gt;面向对象编程和函数式编程（面向过程编程）的区别&lt;/p&gt;
&lt;h3 id=&#34;面向过程编程&#34;&gt;面向过程编程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;导入各种外部库&lt;/li&gt;
&lt;li&gt;设计各种全局变量&lt;/li&gt;
&lt;li&gt;写一个函数完成某个功能&lt;/li&gt;
&lt;li&gt;写一个函数万能充某个功能&lt;/li&gt;
&lt;li&gt;。。。。&lt;/li&gt;
&lt;li&gt;写一个main函数作为程序入口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在多函数程序中，许多重要的数据被放置在全局数据区，这样它们可以被所有的函数访问。每个函数都可以具有它们自己的局部数据，将某些功能代码封装到函数中，日后便无需重复编写，仅调用函数即可。从代码的组织形式来看就是根据业务逻辑从上到下垒代码 。&lt;/p&gt;
&lt;h3 id=&#34;面向对象编程&#34;&gt;面向对象编程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;导入各种外部库&lt;/li&gt;
&lt;li&gt;设计各种全局变量&lt;/li&gt;
&lt;li&gt;决定你要的类&lt;/li&gt;
&lt;li&gt;给每个类提供完整的一组操作&lt;/li&gt;
&lt;li&gt;明确地使用继承来表现不同类之间的共同点&lt;/li&gt;
&lt;li&gt;根据需要，决定是否写一个main函数作为程序入口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;面向对象编程中，将函数和变量进一步封装成类，类才是程序的基本元素，它将数据和操作紧密地连结在一起，并保护数据不会被外界的函数意外地改变。类和和类的实例（也称对象）是面向对象的核心概念，是和面向过程编程、函数式编程的根本区别。&lt;/p&gt;
&lt;p&gt;并不是非要用面向对象编程，要看你的程序怎么设计方便，但是就目前来说，基本上都是在使用面向对象编程。&lt;/p&gt;
&lt;h2 id=&#34;类的基本用法&#34;&gt;类的基本用法&lt;/h2&gt;
&lt;p&gt;面向对象是通过定义class类来定义，这么说面向对象编程就是只使用class类，在class类中有封装，继承的功能，并且还可以构造要传入的参数，方便控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例一&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step1.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import sys 
import time 


class student:
    #定义一个类名为student
    def __init__(self,idx):
        #定义初始化构造,使用init,还有别的属性如erversed,iter之类的
        self.idx = idx
        #初始化变量,方便继承
    def runx(self):
        #定义运行函数,从上面继承变量
        print(self.idx)
        time.sleep(1)

a = student(&#39;abs&#39;)
a.runx()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;专业术语概念&#34;&gt;专业术语概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;类(Class): 用来描述具有相同属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。其中的对象被称作类的实例。&lt;/li&gt;
&lt;li&gt;实例：也称对象。通过类定义的初始化方法，赋予具体的值，成为一个”有血有肉的实体”。&lt;/li&gt;
&lt;li&gt;实例化：创建类的实例的过程或操作。&lt;/li&gt;
&lt;li&gt;实例变量：定义在实例中的变量，只作用于当前实例。&lt;/li&gt;
&lt;li&gt;类变量：类变量是所有实例公有的变量。类变量定义在类中，但在方法体之外。&lt;/li&gt;
&lt;li&gt;数据成员：类变量、实例变量、方法、类方法、静态方法和属性等的统称。&lt;/li&gt;
&lt;li&gt;方法：类中定义的函数。&lt;/li&gt;
&lt;li&gt;静态方法：不需要实例化就可以由类执行的方法&lt;/li&gt;
&lt;li&gt;类方法：类方法是将类本身作为对象进行操作的方法。&lt;/li&gt;
&lt;li&gt;方法重写：如果从父类继承的方法不能满足子类的需求，可以对父类的方法进行改写，这个过程也称override。&lt;/li&gt;
&lt;li&gt;封装：将内部实现包裹起来，对外透明，提供api接口进行调用的机制&lt;/li&gt;
&lt;li&gt;继承：即一个派生类（derived class）继承父类（base class）的变量和方法。&lt;/li&gt;
&lt;li&gt;多态：根据对象类型的不同以不同的方式进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;类与实例&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Step2.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-

import sys 
import time 

class cc:
    ccc = &#39;ccc&#39;
    # cc 就是类名,如果想要继承 就class cc(threading) 意思就是从threading继承
    def __init__(self,a,b,c):
        self.a = a 
        self.b = b 
        self.c = c
        #定义构造的过程就是实例化

    def runx(self):
        print(self.a*10)
        print(self.b*5)
        print(self.c*2)

    def runy(self):
        print(&#39;step2...&#39;)

e = cc(&amp;quot;AAA&amp;quot;,&amp;quot;CCC&amp;quot;,&amp;quot;EEE&amp;quot;)
e.runx()
e.runy()

print(e.c)
print(e.ccc)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;调用类的三种方法&#34;&gt;调用类的三种方法&lt;/h3&gt;
&lt;h4 id=&#34;实例方法&#34;&gt;实例方法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;step3.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding:utf-8 -*-

import sys 
import time 

class dd:
    def __init__(self,url):
        self.url = url 
    def runx(self):
        print(self.url)

a = dd(&amp;quot;www.google.com&amp;quot;)
a.runx()


# 实例方法
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;静态方法&#34;&gt;静态方法&lt;/h4&gt;
&lt;p&gt;静态方法由类调用，无默认参数。将实例方法参数中的self去掉，然后在方法定义上方加上@staticmethod，就成为静态方法。它属于类，和实例无关。建议使用类名.静态方法的调用方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step4.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-
import sys 

class ff:
    @staticmethod
    def runx():
        print(&amp;quot;static method!&amp;quot;)

ff.runx()

# 只在类中运行而不在实例中运行的方法

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法。比如更改环境变量或者修改其他类的属性等能用到静态方法。这种情况可以直接用函数解决，但这样同样会扩散类内部的代码，造成维护困难。&lt;/p&gt;
&lt;h4 id=&#34;类方法&#34;&gt;类方法&lt;/h4&gt;
&lt;p&gt;类方法由类调用，采用@classmethod装饰，至少传入一个cls参数。执行类方法时，自动将调用该方法的类赋值给cls。建议只使用类名.类方法的调用方式。&lt;/p&gt;
&lt;p&gt;如果需要构造一个类，接受一个网站和这个网站的状态码，然后打印出来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step5.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import sys 

class gg:
    def __init__(self,url,stat):
        self.url = url 
        self.stat = stat 
    def outer(self):
        print(self.url)
        print(self.stat)

a = gg(&amp;quot;google&amp;quot;,200)
a.outer()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需求是当传入的参数格式不正确，需要拆分整理时，就要使用类方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step6.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-

import sys 

class gg:
    url = 0
    stat = 0
    # 因为使用classmethod后会传入新的变量,所以一开始需要自己先定义类变量
    def __init__(self,url=0,stat=0):
    #这里按照正常的定义构造函数
        self.url = url
        self.stat = stat 
    @classmethod
    # 装饰器 立马执行下面的函数
    def split(cls,info):
        #这个函数接收两个参数,默认的cls就是这个类的init函数,info就是外面传入进来的
        url,stat = map(str,info.split(&#39;-&#39;))
        #这里转换成了格式化的结构
        data = cls(url,stat)
        # 然后执行这个类第一个方法,这个类构造函数需要传入两个参数,于是就传入了两个参数
        return data 
        #这里就直接返回了函数结果

    def outer(self):
        print(self.url)
        print(self.stat)

r = gg.split(&amp;quot;google-200&amp;quot;)
r.outer()
# 这里是调用类方法,与调用实例方法一样
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;类的特性&#34;&gt;类的特性&lt;/h3&gt;
&lt;h4 id=&#34;封装&#34;&gt;封装&lt;/h4&gt;
&lt;p&gt;封装是指将数据与具体操作的实现代码放在某个对象内部，外部无法访问。必须要先调用类的方法才能启动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Step7.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-
import sys 
class cc:
    ccc = &#39;ccc&#39;
    # cc就是类名 如果想要继承别的类 就class cc(threading) 意思就是从threading继承
    def __init__(self,a,b,c):
        self.a=a
        self.b=b
        self.c=c

e = cc(1,2,3)
print(e.ccc)
#类变量，在类里面找到定义的变量。
#print(ccc)
# 这里会报错，这就是封装。类中的函数同理。

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;继承&#34;&gt;继承&lt;/h4&gt;
&lt;p&gt;当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），被继承的class称为基类、父类或超类（Base class，Super class）。&lt;/p&gt;
&lt;p&gt;子类可以继承父类的全部功能。当子类和父类有相同的run方法时，会完成覆盖。&lt;/p&gt;
&lt;h4 id=&#34;多态&#34;&gt;多态&lt;/h4&gt;
&lt;p&gt;给Animal增加子类时，任何依赖Animal作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。&lt;/p&gt;
&lt;p&gt;对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：&lt;/p&gt;
&lt;p&gt;对扩展开放：允许新增Animal子类；
对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。
总结：继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写；
有了继承，才能有多态。在调用类实例方法的时候，尽量把变量视作父类类型，这样，所有子类类型都可以正常被接收；
旧的方式定义Python类允许不从object类继承，但这种编程方式已经严重不推荐使用。任何时候，如果没有合适的类可以继承，就继承自object类。&lt;/p&gt;
&lt;h3 id=&#34;魔法方法&#34;&gt;魔法方法&lt;/h3&gt;
&lt;p&gt;在上面有提到除了init之外还有iter，reverse的方法，这里就详细说下除了init初始化的别的方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;__init__ :      构造函数，在生成对象时调用
__del__ :       析构函数，释放对象时使用
__repr__ :      打印，转换
__setitem__ :   按照索引赋值
__getitem__:    按照索引获取值
__len__:        获得长度
__cmp__:        比较运算
__call__:       调用
__add__:        加运算
__sub__:        减运算
__mul__:        乘运算
__div__:        除运算
__mod__:        求余运算
__pow__:        幂
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;成员保护与访问机制&#34;&gt;成员保护与访问机制&lt;/h3&gt;
&lt;p&gt;有些对象你不想外部访问，即使是通过调用类对象也无法访问.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私有成员&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 加上双下划线的就是私有变量，只能在类的内部访问，外部无法访问&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;zhao&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在类中调用这个私有成员的方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;prin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 加上双下划线的就是私有变量，只能在类的内部访问，外部无法访问&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 如果要在类中调用，首先调用类方法&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 然后在使用&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;zhao&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 通过这样直接调用类中的私有变量&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;利用类方法进行调用&lt;/p&gt;
&lt;h3 id=&#34;propety装饰器&#34;&gt;Propety装饰器&lt;/h3&gt;
&lt;p&gt;把类的方法伪装成属性调用的方式，就是把类里面的一个函数，变成一个属性一样的东西.一开始调用类的方法要使用圆括号，现在变成了属性进行读取设置存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用的调用方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 讲这些设置成私有变量&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;set_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;非整数类型&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;del_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;delete over&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;langzi&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用装饰器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#把变量设置成私有&lt;/span&gt;
   &lt;span class=&#34;nd&#34;&gt;@property&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setter&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;非整数类型&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deleter&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;delete over&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;google&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;更加减半的使用property()函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了使用装饰器的方法将一个方法伪装成属性外,Python内置的builtins模块中的property()函数,为我们提供了另一种设置类属性的手段.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;People&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;
    
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;set_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;
      
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;del_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;删除年龄数据!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
  &lt;span class=&#34;c1&#34;&gt;# 核心&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;del_age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;年龄&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  
&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;People&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;jack&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过语句&lt;code&gt;age = property(get_age, set_age, del_age, “年龄”)&lt;/code&gt;将一个方法伪装成为属性。其效果和装饰器的方法是一样的。&lt;/p&gt;
&lt;p&gt;property()函数的参数：&lt;/p&gt;
&lt;p&gt;第一个参数是方法名，调用 实例.属性 时自动执行的方法 第二个参数是方法名，调用 实例.属性 ＝ XXX时自动执行的方法 第三个参数是方法名，调用 del 实例.属性 时自动执行的方法 第四个参数是字符串，调用 实例.属性&lt;code&gt;.__doc&lt;/code&gt;__时的描述信息。&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Qt类提升机制</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/qt%E7%B1%BB%E6%8F%90%E5%8D%87%E6%9C%BA%E5%88%B6/" />
            <id>https://chenbokaix250.github.io/tech/qt%E7%B1%BB%E6%8F%90%E5%8D%87%E6%9C%BA%E5%88%B6/</id>
            <updated>2022-03-02T17:08:56&#43;08:00</updated>
            <published>2022-03-02T15:29:12&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">QT类提升机制 远程遥控驾驶项目中 需要在视频图像上实现车道及引导线 QT中 使用QPain……</summary>
            
                <content type="html">&lt;h1 id=&#34;qt类提升机制&#34;&gt;QT类提升机制&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;远程遥控驾驶项目中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要在视频图像上实现车道及引导线&lt;/p&gt;
&lt;p&gt;QT中 使用QPainter绘制图片时,发现只能够在当前类中执行绘制操作&lt;/p&gt;
&lt;p&gt;但是当前类绘制时,只能绘制在MainWindow上 而绘制的内容会被上方QLabel的视频遮挡&lt;/p&gt;
&lt;p&gt;解决这个问题的办法是:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现在ui子控件中绘图&lt;/strong&gt; 然后将子控件放置在视频QLabel上方&lt;/p&gt;
&lt;h2 id=&#34;1创建&#34;&gt;1.创建&lt;/h2&gt;
&lt;p&gt;以QLabel为子控件,说明该创建过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在QT工程中新建一个PaintLabel,继承自QLabel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;paintlabel.h文件&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#ifndef PAINTLABEL_H
#define PAINTLABEL_H
#include &amp;lt;QLabel&amp;gt;
 
class PaintLabel:public QLabel
{
    Q_OBJECT
public:
    explicit PaintLabel(QWidget *parent = 0);
    void paintEvent(QPaintEvent *event);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;paintlabel.c文件&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;QPainter&amp;gt;
#include &amp;lt;QDebug&amp;gt;
#include &amp;lt;extern.h&amp;gt;
#include &amp;lt;QtWidgets/qframe.h&amp;gt;
#include &amp;lt;QWidget&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
PaintLabel::PaintLabel(QWidget *parent):QLabel(parent)
{
}
void PaintLabel::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    //进行绘制操作

}

&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在界面设计文件mainwindow.ui中拖入一个QLabel控件，右键-&amp;gt;提升为-&amp;gt;选择基类QLabel-&amp;gt;名称为PaintLabel-&amp;gt;输入h文件paintlabel.h-&amp;gt;选中-&amp;gt;提升&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/03/02/4np5fqodyOi7XJI.png&#34; alt=&#34;tis.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2问题&#34;&gt;2.问题&lt;/h2&gt;
&lt;p&gt;以上需要解决的问题仍有三个:&lt;/p&gt;
&lt;p&gt;1.提升类的路径问题 需要在&lt;code&gt;auto_generate&lt;/code&gt;中&lt;code&gt;paintlabel.h&lt;/code&gt;路径的问题&lt;/p&gt;
&lt;p&gt;需要跟实际的路径进行匹配 修改ui_mainwindow.h &lt;code&gt;src/paintlabel.h&lt;/code&gt;问题解决&lt;/p&gt;
&lt;p&gt;也可以在提升编辑时修改好 有待尝试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/03/02/A96TOnlICkh7Z8u.png&#34; alt=&#34;test1.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;paintEvent后仍需要update&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将paintlabel作为成员加入mainwindow类中
update需要放在主函数中 循环调度 并且 paintEvent的绘制坐标系以QLabel为准&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;paintEvent的数据 仍需要从mainwindow类中读取,所以需要全局变量来传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;extern的定义需要在类定义之外进行&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros/" term="ros" label="ros" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Socket,protobuf,rpc理解</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/socketprotobufrpc%E7%90%86%E8%A7%A3/" />
            <id>https://chenbokaix250.github.io/tech/socketprotobufrpc%E7%90%86%E8%A7%A3/</id>
            <updated>2022-02-18T17:09:56&#43;08:00</updated>
            <published>2022-02-18T15:37:25&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">socket protobuf rpc之间的理解 三者的定义 1.socket 套接字,与底层TCP/IP网络协议栈打交道的对象，直……</summary>
            
                <content type="html">&lt;h1 id=&#34;socket-protobuf-rpc之间的理解&#34;&gt;socket protobuf rpc之间的理解&lt;/h1&gt;
&lt;h2 id=&#34;三者的定义&#34;&gt;三者的定义&lt;/h2&gt;
&lt;h3 id=&#34;1socket&#34;&gt;1.socket&lt;/h3&gt;
&lt;p&gt;套接字,与底层TCP/IP网络协议栈打交道的对象，直接利用socket进行通信的，类似传统的TCP/UDP的通信，这种通信是以数据流的形式进行交换的，也就是我们称为的二进制数据。
那么当CS两端取得数据之后，也是由二进制数据，至于读出来的数据具体代表什么，需要用户自己去完成。&lt;/p&gt;
&lt;h3 id=&#34;2protobuf&#34;&gt;2.protobuf&lt;/h3&gt;
&lt;p&gt;google开源的一种序列化和反序列化工具，这个工具就是用户可以自己定义不同的数据类型，然后通过这个工具将不同数据类型转换为二进制，实际是一种编码的过程，然后通过网络传统，同样可以进行反序列化，得到用户自己定义的不同数据类型的数据。但是它只是一种数据序列化和反序列化的工具，对于序列化或者反序列化的数据有什么含义，具体做什么这些都不知道。&lt;/p&gt;
&lt;h3 id=&#34;3rpc&#34;&gt;3.rpc&lt;/h3&gt;
&lt;p&gt;远程调用框架，从本质上来说是一种框架，或者叫一种方法，通过这种方法可以访问远端机器上的进程或者服务，它其实底层是由上述的这几层来完成的，但是需要注意的是，因为在rpc调用过程中我们还需要定义更上层的数据协议，例如数据包有哪些组成，调用过程中的参数，返回值，堆栈信息等等这些，以及在多线程的调用，会不会出现这些阻塞现象，这些都需要额外的协议去封装，所以一般的rpc会在序列化工具（例如：protobuf）基础上进行封装一层用户自定义的协议，百度就是baidu-std,google的是gprc。通过这个协议来完成rpc的功能。&lt;/p&gt;
&lt;h2 id=&#34;分层理解&#34;&gt;分层理解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/18/d8rWMFUK3qyTtnV.png&#34; alt=&#34;rpc.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;grpc工作原理&#34;&gt;grpc工作原理&lt;/h2&gt;
&lt;p&gt;在 gRPC 里客户端应用可以像调用本地方法一样直接调用另一台机器上服务端应用的方法，这样我们就很容易创建分布式应用和服务。跟其他 RPC 系统类似，gRPC 也是基于以下理念：首先定义一个服务，定义能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个方法，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根，这个存根就是长得像服务端一样的方法（但是没有具体实现），客户端通过这个存根调用服务端的方法。&lt;/p&gt;
&lt;p&gt;grpc工作原理，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tizi365.com/wp-content/uploads/2019/09/grpc-1.png&#34; alt=&#34;gprc架构&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;protobuf例子&#34;&gt;Protobuf例子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建&lt;code&gt;.proto&lt;/code&gt;文件,定义数据结构&lt;/li&gt;
&lt;li&gt;安装ProtoBuf编译器&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;.proto&lt;/code&gt;文件,编译成制定语言类库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protoc -I=$SRC_DIR --python_out=$DST_DIR $SRC_DIR/your.proto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生成&lt;code&gt;_pb2.py&lt;/code&gt;文件就可以直接用在python脚本中&lt;/li&gt;
&lt;li&gt;然后在程序中&lt;code&gt;import addressbook_pb2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/arch/" term="Arch" label="Arch" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Libtorch在linux下的安装</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/libtorch%E5%9C%A8linux%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/" />
            <id>https://chenbokaix250.github.io/tech/libtorch%E5%9C%A8linux%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/</id>
            <updated>2022-02-10T14:03:54&#43;08:00</updated>
            <published>2022-02-09T17:03:40&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Pytorch1.7.1和LibTorch的安装 ubuntu: 18.04 Nvidia DriverVersion: 430.64 CUDA Version: 10.1 Cudnn: 7.6.5 Pytorch: 1.7.1 torch: 1.7.1 驱动安装……</summary>
            
                <content type="html">&lt;h1 id=&#34;pytorch171和libtorch的安装&#34;&gt;Pytorch1.7.1和LibTorch的安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu: 18.04&lt;/li&gt;
&lt;li&gt;Nvidia DriverVersion: 430.64&lt;/li&gt;
&lt;li&gt;CUDA Version: 10.1&lt;/li&gt;
&lt;li&gt;Cudnn: 7.6.5&lt;/li&gt;
&lt;li&gt;Pytorch: 1.7.1&lt;/li&gt;
&lt;li&gt;torch: 1.7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;驱动安装&#34;&gt;驱动安装&lt;/h2&gt;
&lt;p&gt;先进行驱动的安装&lt;/p&gt;
&lt;p&gt;驱动安装见&lt;a href=&#34;https://chenbokai.icu/tech/carla_1_step/&#34;&gt;https://chenbokai.icu/tech/carla_1_step/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前只能安装430版本&lt;/p&gt;
&lt;h2 id=&#34;cuda安装&#34;&gt;cuda安装&lt;/h2&gt;
&lt;p&gt;cuda对应版本通过&lt;code&gt;nvidia-smi&lt;/code&gt;查看&lt;/p&gt;
&lt;p&gt;安装时需注意将驱动安装去掉,否则会出现驱动版本不适配 无法启动的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/10/ic2IuXtDr78CGdW.png&#34; alt=&#34;20200630141504611.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vi ~/.bashrc
export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
sudo source  ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后利用&lt;code&gt;nvcc -V&lt;/code&gt;可以查看输出,确认安装成功&lt;/p&gt;
&lt;h2 id=&#34;cudnn安装&#34;&gt;cudnn安装&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo cp cuda/include/cudnn.h	/usr/local/cuda/include/
sudo cp cuda/lib64/libcudnn*	/usr/local/cuda/lib64/
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装版本为7.6.5 ,8版本以后安装后 不能成功打印输出 version.h的文件未找到&lt;/p&gt;
&lt;h2 id=&#34;pytorch安装&#34;&gt;Pytorch安装&lt;/h2&gt;
&lt;p&gt;安装libtorch之前,不按照pytorch 可能无法使用 无法找到caffe2的编译库问题&lt;/p&gt;
&lt;p&gt;安装对应cuda的torch版本
&lt;code&gt;pip install torch==1.7.1+cu101 torchvision==0.8.2+cu101 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装过程中有一个问题 因为zlib未安装导致Pillow无法解压 Pillow无法解压导致torchvision安装失败.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 
import torch
import torchvision
print(torch.cuda.is_available())//验证GPU
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;libtorch安装&#34;&gt;libtorch安装&lt;/h2&gt;
&lt;p&gt;libtorch下载地址
&lt;code&gt;https://download.pytorch.org/libtorch/cu101/libtorch-cxx11-abi-shared-with-deps-1.7.1%2Bcu101.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用官方例子进行验证&lt;/p&gt;
&lt;p&gt;CMakeLists.txt&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(example-app)
set(CMAKE_PREFIX_PATH &amp;quot;绝对路径/libtorch&amp;quot;)
find_package(Torch REQUIRED)
set(CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}&amp;quot;)

add_executable(example-app example-app.cpp)
target_link_libraries(example-app &amp;quot;${TORCH_LIBRARIES}&amp;quot;)
set_property(TARGET example-app PROPERTY CXX_STANDARD 14)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;example-app.cpp&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;torch/torch.h&amp;gt;
#include &amp;lt;iostream&amp;gt;

int main() {
  torch::Tensor tensor = torch::rand({2, 3});
  std::cout &amp;lt;&amp;lt; tensor &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行后效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/02/10/PRglseoS5qYZrfA.jpg&#34; alt=&#34;下载.jpeg&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C&#43;&#43;中&amp;的使用</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
            <updated>2022-01-24T16:32:04&#43;08:00</updated>
            <published>2022-01-24T15:56:53&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">c++中的&amp;quot;&amp;amp;&amp;quot;的使用 引用 引用就是某一变量的一个别名,对……</summary>
            
                <content type="html">&lt;h1 id=&#34;c中的的使用&#34;&gt;c++中的&amp;quot;&amp;amp;&amp;quot;的使用&lt;/h1&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;p&gt;引用就是某一变量的一个别名,对引用的操作与对变量直接操作完全一样.&lt;/p&gt;
&lt;p&gt;&amp;amp;作为引用的时候，必须在定义时候就进行初始化，若不进行初始化则会编译报错。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int N;
int &amp;amp;rN = N;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;后面对rN的操作,就是对N的操作.&lt;code&gt;rN-1&lt;/code&gt;,则N减少1&lt;/p&gt;
&lt;p&gt;函数中的形参&lt;code&gt;int &amp;amp;i&lt;/code&gt;也是引用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# example 1

int function(int i){
    i++
    return i;
}

int functionReference(int &amp;amp;i){
i++；
return i;
}

int x = 5;
function(x);		//返回值：6， x ：5
functionReference(x);	//返回值：6， x ：6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;取地址&#34;&gt;取地址&lt;/h2&gt;
&lt;p&gt;&amp;amp; 作为取地址用的时候,要跟指针联系在一起,因为指针就是用来存放地址的&lt;/p&gt;
&lt;p&gt;取地址就是想取某变量（形参或者实参）的地址就用&amp;amp;前置表示要取地址了，取的是该变量的内存地址。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int N = 100;
int *p;
p = &amp;amp;N;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两者区别&lt;/p&gt;
&lt;p&gt;引用的格式：
类型名  &amp;amp;  别名 = var;
1.定义的时候必须初始化，即&amp;amp; 前面有类名或类型名，&amp;amp;别名后面一定带 “=” （在= 左边）；
2.&amp;amp;后面的别名是新的名字，之前不存在。&lt;/p&gt;
&lt;p&gt;&amp;amp;取地址时：
如果&amp;amp;是取址运算符，也就意味着取一个变量的地址并付给指针变量。&amp;amp;后面紧跟的是变量（已存在）；&lt;/p&gt;
&lt;p&gt;&amp;amp;在变量定义区，表示引用，要注意它的用法，
&amp;amp;在变量操作区，表示取地址符，如：&lt;/p&gt;
&lt;p&gt;int x=10, *p=&amp;amp;x ;  //这里&amp;amp;作用在x上， 是取地址符
int &amp;amp;x  ;   //引用是C++引入的一个新特性，你要学的不是C++,则上述代码你是搞不懂的。 这里的&amp;amp;就表示引用。 一般这种形式会在形参中出现。&lt;/p&gt;
&lt;p&gt;LNode * &amp;amp;lst ;  中LNode * 是个整体，表示变量类型是LNode类指针， &amp;amp;lst中的&amp;amp;表明引用实参，即代表实参的一个别名。 操作引用变量就相当于操作实参变量&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;使用引用作为函数参数的效果对比&#34;&gt;使用引用作为函数参数的效果对比&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

void test(int x) {
	x = 1024;
	printf(&amp;quot;在函数中的 x = %d\n&amp;quot;,x);
}	

int main() {
	int x = 666;
	printf(&amp;quot;未经过函数的 x = %d\n&amp;quot;,x);
	test(x);
	printf(&amp;quot;经过函数的 x = %d\n&amp;quot;,x);
}

//未经过函数的 x = 666
//在函数中的 x = 1024
//经过函数的 x = 666
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

void test(int &amp;amp;x) {
	x = 1024;
	printf(&amp;quot;在函数中的 x = %d\n&amp;quot;,x);
}	

int main() {
	int x = 666;
	printf(&amp;quot;未经过函数的 x = %d\n&amp;quot;,x);
	test(x);
	printf(&amp;quot;经过函数的 x = %d\n&amp;quot;,x);
}
//未经过函数的 x = 666
//在函数中的 x = 1024
//经过函数的 x = 1024

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">PID控制及Python实现</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/pid%E6%8E%A7%E5%88%B6%E5%8F%8Apython%E5%AE%9E%E7%8E%B0/" />
            <id>https://chenbokaix250.github.io/tech/pid%E6%8E%A7%E5%88%B6%E5%8F%8Apython%E5%AE%9E%E7%8E%B0/</id>
            <updated>2022-01-22T01:51:49&#43;08:00</updated>
            <published>2022-01-22T01:10:46&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">PID控制及python实现 [toc] PID：比列(Proportion)，积分(Integ……</summary>
            
                <content type="html">&lt;h1 id=&#34;pid控制及python实现&#34;&gt;PID控制及python实现&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;PID：比列(Proportion)，积分(Integral)，微分(Differential)&lt;/p&gt;
&lt;p&gt;PID算法可以用来控制温度，压强，流量，化学成分，速度等等。汽车的定速巡航；伺服驱动器中的速度位置控制；冷却系统的温度；液压系统的压力等都可以通过PID算法实现，很好的保证系统的稳定性。&lt;/p&gt;
&lt;h2 id=&#34;pid算法的原理&#34;&gt;PID算法的原理&lt;/h2&gt;
&lt;p&gt;偏差 e：某时刻的系统的输出值(output)和目标值(target)之差&lt;/p&gt;
&lt;p&gt;Kp: 比列系数&lt;/p&gt;
&lt;p&gt;Ki: 积分系数&lt;/p&gt;
&lt;p&gt;Kd: 微分系数&lt;/p&gt;
&lt;p&gt;Ti: 积分时间&lt;/p&gt;
&lt;p&gt;Td: 微分时间&lt;/p&gt;
&lt;p&gt;原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/01/22/trlJWnLczY6pOb3.jpg&#34; alt=&#34;PID.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;当得到输出后，将输出和输入的差值作为偏差，将这个偏差信号经过比列，积分，微分3种运算方式叠加后再以一定的方式加入到输入中，从而控制最终的结果，达到想要的输出值。&lt;/p&gt;
&lt;p&gt;比例系数Kp:&lt;/p&gt;
&lt;p&gt;增大比例系数使系统反应灵敏，调节速度加快，并且可以减小稳态误差。但是比例系数过大会使超调量增大，振荡次数增加，调节时间加长，动态性能变坏，比例系数太大甚至会使闭环系统不稳定。&lt;/p&gt;
&lt;p&gt;比例控制不能消除稳态误差。&lt;/p&gt;
&lt;p&gt;积分系数Ki:&lt;/p&gt;
&lt;p&gt;使系统消除稳态误差,提高无差度。积分控制的作用是，只要系统有误差存在，积分调节就进行,积分控制器就不断地积累，输出控制量，直至无差,积分调节停止,积分调节输出一常值。因而，只要有足够的时间，积分控制将能完全消除误差，使系统误差为零，从而消除稳态误差。积分作用的强弱取决于积分时间常数Ti,Ti越小,积分作用就越强，积分作用太强会使系统超调加大，甚至使系统出现振荡，反之Ti大则积分作用弱。加入积分调节可使系统稳定性下降,动态响应变慢。&lt;/p&gt;
&lt;p&gt;微分系数Kd:&lt;/p&gt;
&lt;p&gt;微分控制可以减小超调量，克服振荡，使系统的稳定性提高，同时加快系统的动态响应速度，减小调整时间，从而改善系统的动态性能。&lt;/p&gt;
&lt;p&gt;微分的控制作用跟偏差的变化的速度有关，微分控制能够预测偏差，产生    超前的校正作用，有助于减少超调。&lt;/p&gt;
&lt;p&gt;PID的公式原理:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/01/22/PCsJNpQV3XLlnqA.jpg&#34; alt=&#34;PID公式.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;PID需要在计算机上实现,需要将其离散化:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/01/22/XCxIWG9ATHQdDO8.jpg&#34; alt=&#34;PID离散化.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出,某一个偏差的PID值只跟相邻的三个偏差相关.&lt;/p&gt;
&lt;h2 id=&#34;pidpy&#34;&gt;PID.py&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import time


class PID:
    def __init__(self, Ppar, Ipar, Dpar):
        self.Kp = Ppar
        self.Ki = Ipar
        self.Kd = Dpar
        self.sample_time = 0.00
        self.current_time = time.time()
        self.last_time = self.current_time

        self.SetPoint = 0.0
        self.PTerm = 0.0
        self.ITerm = 0.0
        self.DTerm = 0.0
        self.last_error = 0.0
        self.int_error = 0
        self.output = 0.0

    def update(self, feedback_value):
        error = self.SetPoint - feedback_value
        self.current_time = time.time()
        delta_time = self.current_time - self.last_time
        delta_error = error - self.last_error
        if delta_time &amp;gt;= self.sample_time:
            self.PTerm = self.Kp * error
            self.ITerm += error * delta_time
            self.DTerm = 0.0
            if delta_time &amp;gt; 0:
                self.DTerm = delta_error / delta_time
            self.last_time = self.current_time
            self.last_error = error
            self.output = self.PTerm + (self.Ki * self.ITerm)

    def setSampleTime(self, sample_time):
        self.sample_time = sample_time

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;test_pidpy&#34;&gt;test_pid.py&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python3
# -*- coding: utf-8 -*-
&#39;&#39;&#39;
@Time    : 2022/1/22 1:33 AM
@Author  : chenbokai
@File    : test_pid.py
&#39;&#39;&#39;

import PID
import time
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import make_interp_spline

def test_pid(P,I,D,L):
    pid = PID.PID(P,I,D)

    pid.SetPoint=1.1
    pid.setSampleTime(0.01)

    END = L
    feedback = 0
    feedback_list = []
    time_list = []
    setpoint_list = []

    for i in range(1,END):
        pid.update(feedback)
        output= pid.output
        feedback += output
        time.sleep(0.01)
        feedback_list.append(feedback)
        setpoint_list.append(pid.SetPoint)
        time_list.append(i)

    time_sm = np.array(time_list)
    time_smooth = np.linspace(time_sm.min(), time_sm.max(), 300)
    feedback_smooth = make_interp_spline(time_list, feedback_list) (time_smooth)
    plt.figure(0)
    plt.grid(True)
    plt.plot(time_smooth, feedback_smooth, &#39;b-&#39;)
    plt.plot(time_list, setpoint_list, &#39;r&#39;)
    plt.xlim((0, L))
    plt.ylim((min(feedback_list) - 0.5, max(feedback_list) + 0.5))
    plt.xlabel(&#39;time (s)&#39;)
    plt.ylabel(&#39;PID (PV)&#39;)
    plt.title(&#39;PythonTEST PID--cbk&#39;, fontsize=15)

    plt.ylim((1 - 0.5, 1 + 0.5))

    plt.grid(True)
    plt.show()

if __name__ == &amp;quot;__main__&amp;quot;:
    test_pid(1.2, 1, 0.001, L=100)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/01/22/jtC2J5mdnRzHchP.png&#34; alt=&#34;result.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;红色线是目标值(setpoint)，蓝色线是在当前Kp，Ki，Kd参数下的震荡结果，最终趋于目标值，实现了控制。&lt;/p&gt;
&lt;h2 id=&#34;pid调试的原则&#34;&gt;PID调试的原则&lt;/h2&gt;
&lt;p&gt;在输出不震荡时，增大比例增益；&lt;/p&gt;
&lt;p&gt;在输出不震荡时，减少积分时间常数；&lt;/p&gt;
&lt;p&gt;在输出不震荡时，增大微分时间常数&lt;/p&gt;
&lt;h2 id=&#34;pid调节口诀&#34;&gt;PID调节口诀&lt;/h2&gt;
&lt;p&gt;参数整定找最佳，从小到大顺序查&lt;/p&gt;
&lt;p&gt;先是比例后积分，最后再把微分加&lt;/p&gt;
&lt;p&gt;曲线振荡很频繁，比例度盘要放大&lt;/p&gt;
&lt;p&gt;曲线漂浮绕大湾，比例度盘往小扳&lt;/p&gt;
&lt;p&gt;曲线偏离回复慢，积分时间往下降&lt;/p&gt;
&lt;p&gt;曲线波动周期长，积分时间再加长&lt;/p&gt;
&lt;p&gt;曲线振荡频率快，先把微分降下来&lt;/p&gt;
&lt;p&gt;动差大来波动慢，微分时间应加长&lt;/p&gt;
&lt;p&gt;理想曲线两个波，前高后低四比一&lt;/p&gt;
&lt;p&gt;一看二调多分析，调节质量不会低&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Eigen官方文档</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/eigen%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/" />
            <id>https://chenbokaix250.github.io/tech/eigen%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</id>
            <updated>2022-01-21T02:48:25&#43;08:00</updated>
            <published>2022-01-21T02:26:27&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">[toc] Eigen官方文档摘要 安装与使用 linux下安装 sudo apt-get install libeigen3-dev mac下安装 brew install eigen CMak……</summary>
            
                <content type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;eigen官方文档摘要&#34;&gt;Eigen官方文档摘要&lt;/h1&gt;
&lt;h2 id=&#34;安装与使用&#34;&gt;安装与使用&lt;/h2&gt;
&lt;p&gt;linux下安装
&lt;code&gt;sudo apt-get install libeigen3-dev&lt;/code&gt;
mac下安装
&lt;code&gt;brew install eigen&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;cmakeliststxt的编写&#34;&gt;CMakeLists.txt的编写&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Eigen头文件及类的列表
&lt;img src=&#34;https://s2.loli.net/2022/01/21/JEvIRXNVYLkprZe.png&#34; alt=&#34;eigen头文件.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;一般为了省事,直接导入
&lt;code&gt;#include &amp;lt;Eigen/Dense&amp;gt;&lt;/code&gt;或者
&lt;code&gt;#include &amp;lt;Eigen/Eigen&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;eigen官方文档&#34;&gt;Eigen官方文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://eigen.tuxfamily.org/dox/&#34;&gt;文档链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;eigen基础使用&#34;&gt;Eigen基础使用&lt;/h2&gt;
&lt;h3 id=&#34;example-1&#34;&gt;example 1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;Eigen/Dense&amp;gt;    // Eigen头文件，&amp;lt;Eigen/Dense&amp;gt;包含Eigen库里面所有的函数和类
 
int main()
{
  Eigen::MatrixXd m(2,2);   // MatrixXd 表示的是动态数组，初始化的时候指定数组的行数和列数
  m(0,0) = 3;               //m(i,j) 表示第i行第j列的值，这里对数组进行初始化
  m(1,0) = 2.5;
  m(0,1) = -1;
  m(1,1) = m(1,0) + m(0,1);
  std::cout &amp;lt;&amp;lt; m &amp;lt;&amp;lt; std::endl;     // eigen重载了&amp;lt;&amp;lt;运算符，可以直接输出eigen矩阵的值
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  3  -1
2.5 1.5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;example-2&#34;&gt;example 2&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//
// Created by fuhong on 20-7-12.
//

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;Eigen/Dense&amp;gt;

using namespace Eigen;
using namespace std;

int main() {
    MatrixXd m = MatrixXd::Random(3, 3);            //初始化动态矩阵m,使用Random函数,初始化的值在[-1,1]区间内,矩阵大小3X3
    m = (m + MatrixXd::Constant(3, 3, 1.2)) * 50;   // MatrixXd::Constant(3, 3, 1.2)初始化3X3矩阵,矩阵里面的数值为常量,全部为1.2
    // Eigen重载了+ 运算符，两个矩阵有相同的行数和列数即可相加,对应位置上的值相加
    cout &amp;lt;&amp;lt; &amp;quot;m =&amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; m &amp;lt;&amp;lt; endl;
    VectorXd v(3);
    v &amp;lt;&amp;lt; 1, 2, 3;                                   //逗号初始化，英文：comma-initializer,Eigen未提供c++11 的{}初始化方式
    cout &amp;lt;&amp;lt; &amp;quot;m * v =&amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; m * v &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;m =
94.0188  89.844 43.5223
49.4383 101.165  86.823
88.3099 29.7551 37.7775
m * v =
404.274
512.237
261.153
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;逗号初始化&#34;&gt;逗号初始化&lt;/h3&gt;
&lt;p&gt;Eigen提供了一种逗号初始化器语法，该语法使用户可以轻松设置矩阵，向量或数组的所有系数。只需列出系数，从左上角开始，从左到右，从上到下移动。需要预先指定对象的大小。如果列出的系数太少或太多，编译器就会报错。
此外，初始化列表的元素本身可以是向量或矩阵。通常的用途是将向量或矩阵连接在一起。例如，这是如何将两个行向量连接在一起。请记住，必须先设置大小，然后才能使用逗号初始化程序。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;RowVectorXd vec1(3);
vec1 &amp;lt;&amp;lt; 1, 2, 3;
std::cout &amp;lt;&amp;lt; &amp;quot;vec1 = &amp;quot; &amp;lt;&amp;lt; vec1 &amp;lt;&amp;lt; std::endl;
 
RowVectorXd vec2(4);
vec2 &amp;lt;&amp;lt; 1, 4, 9, 16;
std::cout &amp;lt;&amp;lt; &amp;quot;vec2 = &amp;quot; &amp;lt;&amp;lt; vec2 &amp;lt;&amp;lt; std::endl;
 
RowVectorXd joined(7);
joined &amp;lt;&amp;lt; vec1, vec2;
std::cout &amp;lt;&amp;lt; &amp;quot;joined = &amp;quot; &amp;lt;&amp;lt; joined &amp;lt;&amp;lt; std::endl;

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C&#43;&#43;协程</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;%E5%8D%8F%E7%A8%8B/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;%E5%8D%8F%E7%A8%8B/</id>
            <updated>2022-01-21T00:17:59&#43;08:00</updated>
            <published>2022-01-20T22:23:37&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">深入理解协程 什么是协程 协程是一种函数对象，可以设置锚点做暂停，然后再该锚点恢复继续运……</summary>
            
                <content type="html">&lt;h1 id=&#34;深入理解协程&#34;&gt;深入理解协程&lt;/h1&gt;
&lt;h2 id=&#34;什么是协程&#34;&gt;什么是协程&lt;/h2&gt;
&lt;p&gt;协程是一种函数对象，可以设置锚点做暂停，然后再该锚点恢复继续运行，我觉得这是最合适的定义，用户态线程，轻量级线程，可中断恢复的函数&lt;/p&gt;
&lt;p&gt;boost中的例子&lt;/p&gt;
&lt;h3 id=&#34;mac下boost在clion中的配置&#34;&gt;mac下boost在Clion中的配置&lt;/h3&gt;
&lt;p&gt;利用&lt;code&gt;brew install boost&lt;/code&gt;完成安装&lt;/p&gt;
&lt;p&gt;使用CMake进行构建&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.19)
project(coroutine_test)

set(CMAKE_CXX_STANDARD 20)

add_executable(coroutine_test main.cpp)

find_package(Boost 1.76.0 COMPONENTS system filesystem REQUIRED)

find_package(Boost COMPONENTS thread REQUIRED)
if(NOT Boost_FOUND)
    message(FATAL_ERROR &amp;quot;Could not find boost!&amp;quot;)
endif()
include_directories(${Boost_INCLUDE_DIRS})

target_link_libraries(coroutine_test ${Boost_LIBRARIES})
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;c协程&#34;&gt;C++协程&lt;/h2&gt;
&lt;h3 id=&#34;asio中的协程&#34;&gt;asio中的协程&lt;/h3&gt;
&lt;h3 id=&#34;c20的协程&#34;&gt;c++20的协程&lt;/h3&gt;
&lt;h2 id=&#34;协程的应用场景&#34;&gt;协程的应用场景&lt;/h2&gt;
&lt;h2 id=&#34;协程的分类&#34;&gt;协程的分类&lt;/h2&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C&#43;&#43;创建动态对象</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1/</id>
            <updated>2022-01-19T02:52:38&#43;08:00</updated>
            <published>2022-01-19T01:29:22&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">c++ 创建动态对象 C++没有反射,但在apolloAUTO中出现了很多读取配置文件然后实……</summary>
            
                <content type="html">&lt;h1 id=&#34;c-创建动态对象&#34;&gt;c++ 创建动态对象&lt;/h1&gt;
&lt;p&gt;C++没有反射,但在apolloAUTO中出现了很多读取配置文件然后实例化对象的情况,因此探究了一下用C++动态创建对象,这对理解Java的getInstanceByName也有好处&lt;/p&gt;
&lt;h2 id=&#34;1思想&#34;&gt;1.思想&lt;/h2&gt;
&lt;p&gt;三层结构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class: 实现具体功能(实现类)&lt;/li&gt;
&lt;li&gt;ClassRegister: 实现NewInstance接口(注册类)&lt;/li&gt;
&lt;li&gt;Factory: 实现getInstanceByName,通过map结构,实现一对多(工厂类)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个Class对应一个ClassRegister,一个Factory对应了多个ClassRegister.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 调用Factory.getInstanceByName(&amp;quot;ClassA&amp;quot;)
2. 查找map,Factory返回ClassARegister
3. 调用ClassARegister的NewInstance接口,返回具体的A对象的指针
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2实现&#34;&gt;2.实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//Shape.h
// 具体的功能实现类
#ifndef _SHAPE_H_
#define _SHAPE_H_

class Shape
{
public:
    virtual void Draw() = 0;
    virtual ~Shape() {}
};

class Circle : public Shape
{
public:
    void Draw();
    ~Circle(){};
};

class Square : public Shape
{
public:
    void Draw();
    ~Square(){};
};

class Rectangle : public Shape
{
public:
    void Draw();
    ~Rectangle(){};
};

#endif // _SHAPE_H_
//Shape.cpp
#include &amp;quot;Shape.h&amp;quot;
#include &amp;quot;DynBase.h&amp;quot;
#include &amp;lt;iostream&amp;gt;

void Circle::Draw()
{
    std::cout &amp;lt;&amp;lt; &amp;quot;Circle&amp;quot; &amp;lt;&amp;lt; std::endl;
}

void Square::Draw()
{
    std::cout &amp;lt;&amp;lt; &amp;quot;Square&amp;quot; &amp;lt;&amp;lt; std::endl;
}

void Rectangle::Draw()
{
    std::cout &amp;lt;&amp;lt; &amp;quot;Rectangle&amp;quot; &amp;lt;&amp;lt; endl;
}

// 这里使用了DynBase.h中的宏,注册具体的实现类
REGISTER_CLASS(Circle);
REGISTER_CLASS(Square);
REGISTER_CLASS(Rectangle);
//DynBase.h
#ifndef _DYN_BASE_H_
#define _DYN_BASE_H_

#include &amp;lt;map&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

// 函数指针
typedef void *(*CREATE_FUNC)();

class DynObjectFactory
{
public:
    // 通过map寻找对应的注册类
    static void *CreateObject(const string &amp;amp;name)
    {
        map&amp;lt;string, CREATE_FUNC&amp;gt;::const_iterator it;
        it = mapCls_.find(name);
        if (it == mapCls_.end())
            return 0;
        else
            return it-&amp;gt;second(); //func();
    }
    //在工厂类中注册[注册类]
    static void Register(const string &amp;amp;name, CREATE_FUNC func)
    {
        mapCls_[name] = func;
    }
private:
    static map&amp;lt;string, CREATE_FUNC&amp;gt; mapCls_;
};

class Register
{
public:
    // 一个trick,初始化Register类,实际上是对工厂类注册[注册类]
    Register(const string &amp;amp;name, CREATE_FUNC func)
    {
        DynObjectFactory::Register(name, func);
    }
};

// 每次执行一次宏,都会生成一个[注册类],如CircleRegister
// 同时初始化这个类的静态成员reg_,初始的时候调用了动态工厂的Register方法,完成[注册类]自己的注册
#define REGISTER_CLASS(class_name) \
class class_name##Register { \
public: \
    static void* NewInstance() \
    { \
        return new class_name; \
    } \
private: \
    static Register reg_; \
}; \
Register class_name##Register::reg_(#class_name, class_name##Register::NewInstance)

#endif // _DYN_BASE_H_
//DynBase.cpp
#include &amp;quot;DynBase.h&amp;quot;

map&amp;lt;string, CREATE_FUNC&amp;gt; DynObjectFactory::mapCls_;
//main.cpp
#include &amp;quot;Shape.h&amp;quot;
#include &amp;quot;DynBase.h&amp;quot;

int main(void)
{
    Shape *ps;
    ps = static_cast&amp;lt;Shape *&amp;gt;(DynObjectFactory::CreateObject(&amp;quot;Circle&amp;quot;));
    ps-&amp;gt;Draw();
    delete ps;

    ps = static_cast&amp;lt;Shape *&amp;gt;(DynObjectFactory::CreateObject(&amp;quot;Square&amp;quot;));
    ps-&amp;gt;Draw();
    delete ps;

    ps = static_cast&amp;lt;Shape *&amp;gt;(DynObjectFactory::CreateObject(&amp;quot;Rectangle&amp;quot;));
    ps-&amp;gt;Draw();
    delete ps;

    return 0;
}
#CMakeLists.txt
add_executable(demo DynTest.cpp DynBase.h DynBase.cpp Shape.h Shape.cpp)

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3小结&#34;&gt;3.小结&lt;/h2&gt;
&lt;p&gt;其实从本质上可以自己定义每种Shape对应的Register类,这里使用宏很巧妙地节省了代码,另外,借助每个注册类的静态成员的初始化工厂类,非常巧妙&lt;/p&gt;
&lt;p&gt;将类名和创建的函数保存成一个map，然后创建对象时根据类型匹配创建函数即可&lt;/p&gt;
&lt;h2 id=&#34;4进阶&#34;&gt;4.进阶&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/heyuhang112/article/details/51729435?spm=1001.2101.3001.6650.1&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_aa&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.pc_relevant_aa&amp;amp;utm_relevant_index=2&#34;&gt;博文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用泛型 支持自定义的结构体（非模板），类（非模板）、枚举、联合
解析类型名称（转换为 A::B::C 的形式）&lt;/p&gt;
&lt;p&gt;使功能更加强大&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">我是爱知乎的，但我们不能假装一切都没有发生</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E6%88%91%E6%98%AF%E7%88%B1%E7%9F%A5%E4%B9%8E%E7%9A%84%E4%BD%86%E6%88%91%E4%BB%AC%E4%B8%8D%E8%83%BD%E5%81%87%E8%A3%85%E4%B8%80%E5%88%87%E9%83%BD%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F/" />
            <id>https://chenbokaix250.github.io/life/%E6%88%91%E6%98%AF%E7%88%B1%E7%9F%A5%E4%B9%8E%E7%9A%84%E4%BD%86%E6%88%91%E4%BB%AC%E4%B8%8D%E8%83%BD%E5%81%87%E8%A3%85%E4%B8%80%E5%88%87%E9%83%BD%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F/</id>
            <updated>2022-01-17T01:52:10&#43;08:00</updated>
            <published>2022-01-17T01:47:46&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">我是爱知乎的，但我们不能假装一切都没有发生 「如果我 all in 长期做空知乎，这可能就会成为一……</summary>
            
                <content type="html">&lt;h1 id=&#34;我是爱知乎的但我们不能假装一切都没有发生&#34;&gt;我是爱知乎的，但我们不能假装一切都没有发生&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/01/17/OM9fFS5urxAkvLb.jpg&#34; alt=&#34;人们为什么起身离开知乎，以及最后不想走的努力。&#34;&gt;&lt;/p&gt;
&lt;p&gt;「如果我 all in 长期做空知乎，这可能就会成为一个商业行为艺术：知乎和我只有一个能活。」&lt;/p&gt;
&lt;p&gt;说这句话的人，并不是知乎的竞争对手——事实上在今天的中文互联网上知乎并没有一个标准意义上的竞争对手。而是来自一名网名 Tianxi 的知乎用户。&lt;/p&gt;
&lt;p&gt;Tianxi 不是一名普通的知乎用户：他在知乎有将近 40 万的关注者、是 2017 年荣誉答主并受邀在当年的盐 Club 上演讲、摄影 / 艺术话题下的优秀答主、参与了两本知乎电子书的出版、还和知乎一起把过去几年里二十万字的回答集结成册出了一本实体书《匿名的风景》；并且知乎上市的晚宴上，他也在场并为欢庆的人们拍摄宝丽来照片。Tianxi 是最符合大家对知乎答主印象的那种用户：善于文字、有时间写长文章、深厚的专业功底却毫不吝啬分享这些多年的经验。知乎的 Slogan：与世界分享你的知识、经验和见解。Tianxi 都做到了。任何一个社区都会对这样的创作者梦寐以求。&lt;/p&gt;
&lt;p&gt;可就是这样的 Tianxi，现在的知乎签名变成了：已退乎。他的头像被自己换成了纯白色的以示对知乎的抗议；几十万字的回答被他删除到了只剩四句话。&lt;/p&gt;
&lt;p&gt;不像是微博这样绝对主流的平台，有很多一键删除插件可以用；绝大部分自动化删除知乎的插件早已无人维护，无法使用，新的更是没有。Tianxi 衡量了一下时间，发现与其自己重写个插件，还是一个个手动备份删除来的更快。于是他花了一晚上的时间，一条条备份删除自己的回答。这种机械性的工作把他从日常的烦杂工作里解放了出来，以至于最后甚至有点享受这个过程。&lt;/p&gt;
&lt;p&gt;作为旁观者，我见证了全过程。Tianxi 删除回答那天晚上，我正好出差顺路住在他家。聊着聊着天他突然决定把知乎回答全部删除，直到第二天早上我看到他空空如也的知乎，才应该过来这一切竟然都是真的。&lt;/p&gt;
&lt;p&gt;Tianxi 并不是个例。越来越多的人正在离开知乎，甚至声讨知乎。从旁观者的角度来看，这似乎只是任何一个社交网络都在发生的事情。从知乎开放注册以来，知乎「水化」之声就一直不绝于耳，可这并没有影响到知乎的发展。即使是在和今日头条的对决中，知乎也赢得很漂亮。&lt;/p&gt;
&lt;p&gt;所以不少人认为所谓知乎的问题，不过是老用户不适应新时代的耸人听闻。我们作为老用户的抱怨，亦老生常谈。但这是一种敷衍态度，试图在简化问题。原因很简单：如果知乎真的没有问题，走在正轨上，那它为什么和 B 站甚至小红书正在拉开差距？当年知乎希望取代百度成为用户搜索的入口、成为一个新时代的 Linkedin、希望通过 Live 建立百万级的专家服务网络，这些许诺哪个实现了呢？知乎说「聚焦创作者是长期战略」，那为什么有些创作者走了？&lt;/p&gt;
&lt;p&gt;知乎是很长一段时间是我最爱的网站。甚至知乎上市的时候，CEO 周源念了三篇回答，我的文字是其中之一。我是爱知乎的，但我们不能假装一切都没有发生。&lt;/p&gt;
&lt;p&gt;人们起身从知乎离开。&lt;/p&gt;
&lt;p&gt;一些人的退乎是轰轰烈烈的。更多人的退乎是悄无声息的。他们就是突然有一天决定不用了。过一段也许我会在时间线上会看到一个问题：「XXX 是退乎了嘛？」我点进他们的个人主页，可能最后一次点赞和回答已是几个月甚至一年前。&lt;/p&gt;
&lt;p&gt;有些人还在更新，却开始「自暴自弃」：比如知乎用户「不想上吊王承恩」，一名拥有十五万关注者的知乎大 V——虽然他从来不愿意别人如此称呼他。他曾以对时事新闻别开生面的评价而吸引关注，但现在，他主要的活动是回答情感问题。很难想象微博又或者是 B 站的头部用户有一天会开始搞这种非常当代的行为艺术。但是在知乎，这并不少见。&lt;/p&gt;
&lt;p&gt;也许对知乎目前状况最有意思的观察，可能来自知乎的「进站必看」：进站必看是知乎官方筛选的优秀回答。排序前十回答的答主里，除了一位非常可惜英年早逝的答主程浩之外，剩下九人里有一位超过一年没回答过问题；两位两年没回答过问题；还有两位超过三年没回答过问题。换句话说十个人里，有一半已经不能算作知乎的活跃创作者了。「进站必看」前三个回答来自张译、程浩和马伯庸，张译的微博更新一直没断过，马伯庸也是写作和出版不断。可他们的知乎已不再更新。&lt;/p&gt;
&lt;p&gt;知乎说这都是「压箱底」的回答，感觉创作者也把知乎当做了「压箱底」的回忆。&lt;/p&gt;
&lt;p&gt;作为对比，B 站入站必刷的「历史经典」区，排序前十名的 Up 主都还在更新。&lt;/p&gt;
&lt;p&gt;问题不仅仅停留在此，知乎的身份认同也出了问题。国内的大型社交平台，都会对头部用户有一个专属的称呼：比如微博的「大 V」、B 站的「大 UP 主」或者即刻这样的小众平台也有自己的专属称呼「大即」。知乎也有，只不过并不是独特的，而是「知乎大 V」这样一个缝合称号。知乎官方试图努力让用户称其为「答主」或者「新知答主」，但收效甚微。知乎头部用户被对外介绍的时候永远是「知乎大 V」。这有点像「网红」。为什么是网红？因为只在网上红；为什么是「知乎大 V」？因为只在知乎上是「大 V」。&lt;/p&gt;
&lt;p&gt;我的一个观察是如果一个「知乎大 V」但凡在其他平台也有影响力，那一般在被介绍的时候不会被称作「知乎大 V」。一个人如果同时是微博「大 V」和一本书的作者，那可能还要思考下介绍要不要把这两点都提了。如果是「知乎大 V」和「大 V」；「知乎大 V」和「作者」之间取舍，很有可能在知乎的身份就不会被提到。&lt;/p&gt;
&lt;p&gt;另一观察来自工业设计师，同时也是「知乎大 V」的苏志斌。他长期以来一直在知乎大量写作关于设计的内容，积累了十一万的粉丝。两年前，他开始制作视频发到 B 站上。他惊讶的发现即使他的 B 站关注者数量只有知乎的几分之一，他的观众也称他为 Up 主而不是答主；甚至在知乎站内，他的读者也都开始称他为 Up 主。他很好奇为什么只是发了几个月视频，所有人就都认为他是 Up 主，而积累多年的答主身份，在知乎内都是被无视的？&lt;/p&gt;
&lt;p&gt;在发现答主身份被无视之后，苏志斌的另一个疑惑是：「『知乎大 V』不知什么时候起成了一个贬义词。连中性都不是，这让我很困惑」。很多人在被介绍称呼其为「知乎大 V」的时候都会表示拒绝，甚至有人会说「你才是『知乎大 V』呢，你全家都是」。&lt;/p&gt;
&lt;p&gt;「人在美国，刚下航母」也成为了很多人嘲笑知乎常用的段子。人们普遍的想法是知乎只是我国众多社交网络中的一个，它并不重要。知乎和陌陌、探探、Soul 似乎也没什么区别。不值得被拿出来严肃讨论。&lt;/p&gt;
&lt;p&gt;我去年录了一期 Video Podcast 节目，叫《为什么我还在用知乎》。发到知乎因为时间线改版，就收到四个赞。这件事随后收到了我一些朋友的嘲笑，他们说知乎不值得被聊了。&lt;/p&gt;
&lt;p&gt;不，知乎异乎寻常的重要。如果没有知乎的诞生，今天的中文互联网肯定会不同。&lt;/p&gt;
&lt;p&gt;人们对知乎最大的误解，可能就是低估了知乎对中文互联网乃至现实世界的影响力。即使是一个从来没看过知乎的网民，今天也生活在知乎参与塑造的语境里。&lt;/p&gt;
&lt;p&gt;从「XXX 是怎样一种体验？」、「如何评价 XXX」再到「泻药（谢邀）」这样的句式；到「内卷」、「做题家」这样深入中国普通人生活的词，都和知乎直接相关。很多人在声讨知乎的时候，都不经意间用着知乎发明的概念。&lt;/p&gt;
&lt;p&gt;微博热搜有过几个阅读量过亿的话题：#如何看待大学专业都在劝退#、#想实名劝退的专业#和#最想劝退的专业#。它们的阅读量分别是 1.3 亿、1.6 亿和 1.4 亿。这三个话题其实都在聊一件事，那就是「劝退」：劝某些专业的学生转专业或行业，比如劝学生物的学生尽早转行计算机。&lt;/p&gt;
&lt;p&gt;劝退就是一个发扬自知乎的概念。严格来说在其他社交网站上也能找到劝退的内容，比如贴吧还流行的年代就已经有了关于劝退生物和化学的贴子。但劝退真正的大规模流行和发酵都是从知乎开始的。&lt;/p&gt;
&lt;p&gt;《劝退学导论》认为，直接劝退的目标，只有化学和生物大类——最多最多扩大到化（化学）环（环境）材（材料）生（生物）。作者的写作目标是：&lt;/p&gt;
&lt;p&gt;「为了让低年级学生从懵懂无知的迷梦中醒来，经过理性而客观的分析，判断出本身究竟适不适合在原来的道路上继续走下去——若是不适合则早做离开的打算；也是为了帮助高年级的学生，下定决心迈出相当重要，也尤其困难的第一步——只要迈出了第一步，后面的不少难题，终将迎刃而解。」&lt;/p&gt;
&lt;p&gt;《劝退学导论》的作者，同时也是该概念的主要参与者是知乎用户「到处挖坑蒋玉城」。一般大家都叫他蒋老师。蒋老师原本在国内一家一流高校学习化学，但他意识到了这个行业的问题：由于化环材生类学科更容易发影响因子比较高的 SCI 论文，所以各个学校都在争相开设此类学科——这与社会对此类专业人才的极低需求是不匹配的。直接导致大量毕业生找不到工作，只能跟风考研跟风读博，最后形成惨烈的就业局面。&lt;/p&gt;
&lt;p&gt;蒋老师决定不能坐以待毙，于是积极准备转专业。最后他成为了一名人工智能方向的博士生，去了大厂做研究员。俗称「上岸了」。他以知乎为阵地，开始讨论转专业这件事。并且以自己的经历为内容，分享这其中的经验。他经常引用欧阳颀院士的一句话：「21 世纪是生物的世纪，但千万别去生物系。」&lt;/p&gt;
&lt;p&gt;从二零一六到一七年开始，蒋老师和其他几名知乎用户，比如弗兰克扬、霍华德、徐国曦等高学历熟知学术圈规则的人一起开始大规模的讨论劝退。并且在与反对者们的辩论之中，逐渐形成了一系列模式化的讨论和诸如「生化环材」、「提桶跑路」、「转码」等后来出圈的名词。&lt;/p&gt;
&lt;p&gt;但在另外两个概念面前，「劝退」就是小巫见大巫：内卷和做题家。它们都不是诞生自知乎，但却都因为知乎而融入了新的内涵，重新以不同的面貌进入了中文世界。&lt;/p&gt;
&lt;p&gt;「内卷（Involution）」原本是一个社会学概念，以形容「社会文化重复劳作、发展迟缓」。而「做题家」一词来自一名曾经的人人网友和论敌的辩论之中。这两个词如果有人格，绝对想不到有朝一日能在中文互联网如此流行；它们应该也想不到彼此能产生关联。&lt;/p&gt;
&lt;p&gt;被知乎网友称作「大佐」的曹丰泽也绝对不会想到这一切，更想不到这一切会和自己有关。&lt;/p&gt;
&lt;p&gt;不过在故事开始的时候，曹丰泽还不是曹大佐。他只是一名普通的学生，未来的「打灰人」——土木行业人员的自嘲，类似程序员自称「码农」。不过他也不普通，曾是黑龙江高考第七、清华本硕博连读的土木工程系优秀学生。&lt;/p&gt;
&lt;p&gt;可他到了进入另一个环境后，并不快乐。他发现他似乎进入了一个不属于他的地方。多年后他和我回忆起当时的感受时说到：「汉洋，你知道我难受在哪吗？如果现在有一个工作，一个轻松一个难。你猜有些人会选哪个？他们会选择难的那个。而且很多人会挤破头选这个，就是为了证明自己比别人强。这有意思吗？」&lt;/p&gt;
&lt;p&gt;他发现这个环境似乎很拧巴，主流的价值观是要做「人上人」，要比别人的排名更高。而至于谈论学习的乐趣乃至理想主义，连被人嘲笑的资格都没有。他为同龄人感到不甘，认为这些人原本可以有更多的可能性，去追求不同的未来。而不是都想去当「人上人」。&lt;/p&gt;
&lt;p&gt;于是他开始写文字抨击这个现象。他遇见了知乎，如鱼得水。他发现不只有他在怀疑这些事情，还有很多人提出了同样的问题。于是他知乎为主战场，抒发自己的观点。于是他想到了自己曾经用到过的概念「内卷」。他在 2015 年开始就已经在一些偏学术回答里使用了这个词。从 2017 年开始，「内卷」被他活用为来形容教育资源的错配和孩子们千句万马过独木桥：&lt;/p&gt;
&lt;p&gt;「多做有益之事，多育有益之人。内卷是没有尽头的。」&lt;/p&gt;
&lt;p&gt;在他的诸多回答之下，「内卷」这样一个学术概念开始发生转变。而在这个过程中，曹丰泽身边聚集了一帮和他有一样态度的人。他们将曹丰泽反内卷的逻辑称之为「曹学」。曹丰泽本人主动拥抱了这个网络谜因，并且开始进一步活用各种概念。&lt;/p&gt;
&lt;p&gt;在他的语境下，那些学习只为了高人一等做「人上人」的学生，最强的能力就做题。所以不如称之为「做题家」——这又是一个被他活用的词，原本来自早年的一位人人网用户。而曹丰泽却认为，人应该找到自己真正想做的事情；做题不过是学生阶段被动接受的技能，不能为了做题而做题。比如他的理想就是毕业去非洲，因为「虽然水电大坝对中国来说不是啥高科技，但对于非洲很多国家来说这就是足够举国之力来赌国运的高科技大工程」。所以他想去非洲。他建议人人都找到属于自己的「非洲」。&lt;/p&gt;
&lt;p&gt;「内卷」、「做题家」和「去非洲」开始逐渐在知乎流行开来。并且随着使用人数越来越多，变成了全网火爆的热词。到今天，「内卷」甚至脱离了「网红」词汇的属性，内化到了每个人在线下口语的交流中。&lt;/p&gt;
&lt;p&gt;这就是知乎影响力的高光时刻。它不光对中文互联网有影响，对中文都有影响。&lt;/p&gt;
&lt;p&gt;可知乎已经有一段没创造出这样的概念了。&lt;/p&gt;
&lt;p&gt;知乎的老用户，愿意用「氛围」变了来形容知乎。他们绝大多数认为正因为知乎的氛围越来越差，导致知乎的创作者越来越少。不论是「劝退学」还是「曹学」，都来自社区大量的互动和思想碰撞才能产生。如果讨论的质量变低，无法诞生出这种强势输出的概念。而知乎从以个人答主专业向回答为核心的内容调性，似乎变成以团队回答、付费故事、情感炒作和视频为导向的内容取向。&lt;/p&gt;
&lt;p&gt;开篇提到众多从知乎出走的核心用户，恰恰就是一群受「氛围」变化的影响最大的用户。「氛围」这件事一般会被互联网产品归类为玄学那类范畴。可也是「氛围」决定了社区产品的体验。当年今日头条悟空问答的失败，也有很多知乎用户归结于它抄的走问答形式但抄不走知乎的社区氛围。一个社区如果成功建立起自己的氛围，那会是它强大的护城河。&lt;/p&gt;
&lt;p&gt;可知乎正在用土把这条护城河埋上。很难说知乎是迷失了自我，它绝对知道自己的目标是什么：更高的 DAU、更高的用户粘性和 ARPU。知乎在回答里插入付费小说、强推视频并且将用户首页从关注变成推荐。这是知乎的数据需要的，却不是用户喜欢的。&lt;/p&gt;
&lt;p&gt;就拿视频来说，知乎真的需要如此强推视频吗？知乎的用户真的是来这里看视频的吗？如果和投资人交流，大部分都会认为这是个正确的选择：视频是未来的趋势，对增加用户时长和粘性有着莫大的帮助。一位已经离开知乎的早年员工曾对我说：「你有没有想过错的是我们？从管理层和投资人的角度来看，知乎的 DAU 一直在上涨，没有因为老用户的抱怨而降低。可能错的是你我这样的老用户，不是知乎的管理者。」&lt;/p&gt;
&lt;p&gt;我们不能把知乎看成一个整体：知乎的用户有很多不同的人；知乎也有很多不同的部门组成，一个部门的问题未必在另一个部门存在。对于任何大型互联网公司来说，都不能理所当然的将其视作一个整体。但有时候我甚至会怀疑知乎的一些部门到底用不用知乎、知不知道这个社区里在发生些什么。&lt;/p&gt;
&lt;p&gt;比如知乎小管家，虽然总被人骂，但平心而论就答复速度和态度来说在中文互联网里绝对算是上乘；可知乎会在主页上做「大专学历在北京能干什么？来知乎做小管家」这样的广告。知乎一些长期的运营依然会按照最原始的标准筛选高质量的内容，然后被与视频 Tab 里的土味视频呈现在一起。知乎用户选出好的问题，花几天的时间用心写了回答，发现排在自己前面的是知乎官方的盐选答案——并且写的是故事，甚至还要付费才能读。&lt;/p&gt;
&lt;p&gt;知乎折叠了。&lt;/p&gt;
&lt;p&gt;最极端的例子可能来自前文提到的曹丰泽和到处挖坑蒋玉城。他们俩作为知乎顶流中的顶流，这些年甚至没有一个运营加过他们、任何活动都没找过他们。而最令老用户们伤心的，还有官方那种若隐若现「家花不如野花香」的运营手段：知乎一些商业化部门的运营和出圈手段，都愿意依靠外部的名人和流量。&lt;/p&gt;
&lt;p&gt;比如前一段知乎十周年，作为代言人的新知答主是《奇葩说》辩手傅首尔。可傅首尔过去十年从来没有在知乎回答过问题。这让知乎的核心用户们怎么想？知乎曾经的代言人刘昊然稍微好点，虽然一个人没关注，但好歹回答过四个问题，疫情之后在知乎还有过两次（非虚指）动态更新。&lt;/p&gt;
&lt;p&gt;可问题也不都在知乎。&lt;/p&gt;
&lt;p&gt;从知乎身上能折射出当今互联网面对的另一个挑战：公域和私域讨论的混淆。知乎用户们曾经多次讨论过一个问题：答主有没有权力删除自己回答的评论？评论区是不是归答主所控制？&lt;/p&gt;
&lt;p&gt;这个讨论也挺知乎特色的，因为所有网站基本都默认发布人可以删除评论区的留言。但只有知乎把这个事情当作一回事讨论了一番。绝大部分知乎答主都同意评论区应该由写回答的答主控制。虽然讨论出了一个大家本来就是都这么做的结果，可毕竟认真就赢了。&lt;/p&gt;
&lt;p&gt;那么矛盾来了：如果评论区可以由答主控制，那么就代表评论区是一种类似朋友圈一样的私域讨论；用知乎讨论里的话说「这是答主的地盘」。私域讨论是私人的、非公开的、由少数人主导的。像是我们在家吃饭餐桌上的对话。&lt;/p&gt;
&lt;p&gt;可评论区要依附于回答而存在，回答是公共问题下的回答。这是一个彻底公域的讨论空间。就如同广场一样，所有用户都有资格来这里回答和讨论。&lt;/p&gt;
&lt;p&gt;「问题-回答-评论」是知乎讨论的基本结构。但因为评论变成了私域讨论，所以很多用户没办法把自己的想法写在评论里。这样用户只能在回答里进行讨论。回答从对问题的回答变成了对其他回答的反馈。经常会出现一个问题下面三十个回答，其中真正回答问题的只有寥寥几条，其他的回答都是针对某回答的评论。甚至会有专门的问题出现：如何评价 XXX 的某一条回答？&lt;/p&gt;
&lt;p&gt;一些知乎答主认为这极大降低了知乎的使用体验：时间线上充满了党同伐异的论战、对一个问题反复的争吵和无处不在对自己回答发问的杠精。这就是公域和私域讨论混淆所带来的结果。在一个公共问题下的回答，却希望所有人都遵守自己的设定的规则；如同在广场上大声疾呼后，期待的是餐桌上的对话。&lt;/p&gt;
&lt;p&gt;一位朋友曾经对我说：有些评论删除了，评论者还会跑到他其他回答下面评论甚至私信；到最后不如拉黑了事。他现在看到反对意见都随手一个拉黑。非常多的知乎用户甚至抱怨黑名单上限太低了，拉黑的数量不够用。可知乎作为公开的网站，我们在回答公开的问题，没有人能确保所有人都按照自己的想法来交流。评论区的可控与外界的时空成为了私域和公域矛盾冲突的体现。我们可以轻易地不让人来家里吃饭，无法不让人来广场上说话。现在，餐桌直接被摆在了广场上。于是一些不适应的答主选择离开。&lt;/p&gt;
&lt;p&gt;近年来很多互联网公司会愿意用这样一个叙事：以前的桌面互联网，都是精英在用；现在的移动互联网全国人都在用了，所以看学历就能感受到用户素质的下降。这个叙事折现出一个典型的论述：一旦平台氛围出现异动，大概率是用户更多平均素质下降了。这是一种「平台无责论」，错的不是公司，都是用户。&lt;/p&gt;
&lt;p&gt;这不过是在推卸责任。我们的物理世界普遍比二十年前生活的更好了、选择更多了、出行更方便了；可虚拟世界却更差了、更水了、素质更低了。而这都是用户越来越多的错。任何对这个问题的反驳，会被快速归结为：「太理想主义」，多少懒惰掩盖被一个「太」字掩盖。那我们作为从业者有什么资格到处输出互联网方法论，认为网络能让这个世界更好呢？&lt;/p&gt;
&lt;p&gt;这个叙事也发生在知乎，水化被归结于用户越来越多所带来的必然性。但我不认为知乎作为平台能推卸责任：一般来说知乎这种强讨论和兴趣的社区，都会选择做好用户区隔。像是 B 站，一个知识区的用户可能完全和舞蹈区没有交集。而在知乎，一个答主曾感叹：自己一个天文学优秀答主，为啥首页会天天被推送婆媳关系内容？&lt;/p&gt;
&lt;p&gt;知乎的创始人周源曾经参与过一个叫做 Apple4us 的网站，是中国最早的苹果爱好者网站。诸多之后名震一时的中国互联网人都参与过这个网站，王兴甚至还给 Apple4us 写过稿子。周源在参与过程中想能不能做一个 1000 倍的 Apple4us。后来他遇见了问答社区 Quora，认为这满足了他对「1000 倍 Apple4us」的想法。&lt;/p&gt;
&lt;p&gt;Apple4us 的特点是一群真正喜欢苹果和技术的人，聚在一起进行小圈子的高质量交流。创立知乎后，周源也说：「社区是由人组成的，他们有自己所信任的圈子，然后以此为中心在运转的。某种意义上，我们所谓的一个社区是指无数个小圈子组成，它围绕各自擅长的东西和兴趣进行沟通和交流。」&lt;/p&gt;
&lt;p&gt;知乎后来的运营思路，似乎没有延续周源从 Apple4us 上学习到的经验：知乎的组织形式看起来是以问题为核心的，而不是以圈子为核心。问题的推荐和扩散并不是小圈子内部的流通，而是全站的运营。天文学答主要加入哪个小圈子才能去回答婆媳关系的问题？可他的首页就是会被推送这样的内容。&lt;/p&gt;
&lt;p&gt;2014 年周源的一次自述里用了个章节小标题《尊重做社区的节奏：流量无用》，里面说：「量增加不等于社区成长，反而导致你没有预见的问题产生」。现在的知乎，反对曾经想成为好社区的知乎。&lt;/p&gt;
&lt;p&gt;这和常见的用户素质下降论调没有关系。当平台把所有人的注意力放在一起，把推荐、热榜和视频放在首页，自然就会出现这样的结果。知乎的答主流行一个词「德匹下」：德性终究获得与其相匹配的下场。&lt;/p&gt;
&lt;p&gt;社区平台的运营者总是不能明确的区分社区究竟是因平台而成功，还是因用户而成功。如果社区日活的增长并不必然隐含着一种用户体验上的进步，那么在一些情况下这种增长并不是一件好事。这会让社区的运营更加无视其中每个用户的重要性。&lt;/p&gt;
&lt;p&gt;我写知乎不光是因为我爱知乎，更是因为知乎几乎是中文互联网公域深度讨论最后的阵地。这是互联网生态系统中不可缺少的环节。公域深度讨论的意思是公开的、大规模的对一些问题进行长篇大论的交流、思考甚至是争吵。这让我们更好的思考我们这个时代和自身的局限。&lt;/p&gt;
&lt;p&gt;比如说内卷这个词，已经在全社会范围内引起了极大的讨论乃至政府在文件中也会提到；一些书店也有了以内卷为主题的书。打工人在思考自己打工的意义、公司在思考自己竞争的意义、活生生的人在思考自己生活的意义，内卷内化成为了思考坐标系的一部分。由此带来的结果是对 996 的批判、对做题的反思、对零和博弈的反感。作为社会学术语的「内卷」早就存在了，是新时代赋予了内卷不一样的含义。让它可以脱离原本学术的语境，在大众的视野里迸发出新的生命力。&lt;/p&gt;
&lt;p&gt;可内卷这个词不会凭空从教科书里蹦出来，赋予它生命力的不是这个词本身的含义，而是这个词背后极其大量的讨论（一些讨论读起来和吵架无异）。这些讨论给内卷带来了远超其原本含义的内容深度。不管是支持还是反对，都有充足的理论进行论证。这些深度的讨论将内卷这个词送出了「圈」——事实上如果仔细观察，会发现最开始出圈的就是这些讨论内卷的文章。&lt;/p&gt;
&lt;p&gt;任何一个概念都会伴随反对意见而生，而如何理论完备的说服绝大部分反方就成了出圈的基本要求。这需要深度的对话。播客《怪物尚志 MonsLog》的主播可达对此有一个贴切的比喻：「知乎就像是一个修罗场，名词破圈之前被拷打了无数遍、打了几十个补丁，从一个词变成了体系化的理论。放到其他领域有极大的战斗力。」这是知乎的独特价值，也只有知乎有能力批量生产这种讨论。&lt;/p&gt;
&lt;p&gt;这是知乎的意义。它是少数人们还在其中撰写、阅读和讨论长文字的平台。长文字写作的意义是无法被短视频所取代的。微信公共号有些撰写长文字，微博也有长文章，可长文字对长文字的交流，却是知乎真正的特色。&lt;/p&gt;
&lt;p&gt;一个社会需要公共性的讨论，这有助于帮助我们塑造共同体。桑德尔说这种共同体「不是把我们自己视为『他人』，而更多地把我们自己视为是一种公共身份的参与者，这个公共身份或是家庭，或是共同体，或是阶级，或是人民，或是民族。」&lt;/p&gt;
&lt;p&gt;当我们在知乎讨论一个问题的时候，答主会不自觉地参与到对大众话语体系的塑造之中。而通过来回的反驳与交流，我们更加明确了未来的道路。今天绝大多数网民都认为 996 是一种不合适的做法，之所以大家都这么想，有知乎上无数答主的奋笔疾书的功劳。&lt;/p&gt;
&lt;p&gt;共同体对未来的思考不可能靠单方面的灌输和短平快的结论。在 BBS、电视辩论已经消失的时代里，知乎拿到了接力棒。在很长一段时间里，知乎对于公域讨论的重要性被低估了。可在这场接力中，它似乎没有了下一棒。&lt;/p&gt;
&lt;p&gt;当我们在谈论知乎时，我们也在谈论中文互联网的未来。所有人都能够从一个良好的社区获益，但很少有人能通过维护一个好社区而获益，破坏这个社区倒是更容易快速攫取收益。知乎需要更件严肃的面对它究竟想打造什么样的社区这个问题。从知乎推知识付费、到首页时间流改版再到现在的强推视频。它似乎并不知道自己是要成为下一个得到、今日头条、抖音，还是真正的成为未来更好的知乎。&lt;/p&gt;
&lt;p&gt;知乎的核心竞争力是中文互联网公域讨论的核心地带，今天它还在乎这点吗？如果知乎还在乎，那如何做好对社区环境的维护、做好文字与视频的区隔？&lt;/p&gt;
&lt;p&gt;知乎官方肯定有比我更多的数据、更多的洞察和更充分的手段来让知乎变得更好。可我感觉他们现在需要做的事情很简单：至少保证知乎的每个员工都有一个知乎账户，一天刷至少一个小时回答，然后一周写一篇大于五百个字的回答、从平台上新认识十个以上的好友加几个群、积累超过一千名的关注者，最后试着发个视频。&lt;/p&gt;
&lt;p&gt;我曾经想要更多的关注者、更多的点赞、更多的荣誉；现在我想要一个尊重创作者、不只是嘴上说，而是真把用户当人看的平台。大平台们知道所有数据的价格，却不明白数据背后创造的价值，这是人在宇宙中给自己找的位置。&lt;/p&gt;
&lt;p&gt;知乎崛起于百度知道并没有满足人们对于寻找回答的追求、B 站的起步开始于 Acfun 的失误、快手的成功源于被长视频网站忽略的普通人。我们可以相信中文互联网：不是相信这些公司能做出什么，而是相信中国无数的网民会创造出更丰富的在线世界。如果我的相信失败了，那也不过是我的失败，而不是中文互联网的失败。因为还会有人继续相信并努力让它变得更好。&lt;/p&gt;
&lt;p&gt;文章地址: 晚点LatePost 王汉洋&lt;/p&gt;
&lt;p&gt;作者介绍：知乎 3132 天用户，全网 ID@MasterPa，他的签名是「读书只读前言，说话不接后语，我有问题」。&lt;/p&gt;
&lt;p&gt;题图：海鸥在冰冻的河面上享受作为战利品的死鱼。©️Tianxi&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Lock_guard相关知识</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/lock_guard%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/" />
            <id>https://chenbokaix250.github.io/tech/lock_guard%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
            <updated>2022-01-16T02:08:58&#43;08:00</updated>
            <published>2022-01-16T01:46:27&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">std::lock_guard相关的知识 [toc] std::lock_guard这个模板类,……</summary>
            
                <content type="html">&lt;h1 id=&#34;stdlock_guard相关的知识&#34;&gt;std::lock_guard相关的知识&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::lock_guard&lt;/code&gt;这个模板类,牵扯到很多重要的计算机基础:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;互斥&lt;/li&gt;
&lt;li&gt;锁&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;stdlock_guard-介绍&#34;&gt;std::lock_guard 介绍&lt;/h2&gt;
&lt;p&gt;这个类是一个互斥量的包装类，用来提供自动为互斥量上锁和解锁的功能，简化了多线程编程，用法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;mutex&amp;gt;

std::mutex kMutex;

void function() {
  // 构造时自动加锁
  std::lock_guard&amp;lt;std::mutex&amp;gt; (kMutex);
  
  // 离开局部作用域，析构函数自动完成解锁功能
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用法非常简单，只需在保证线程安全的函数开始处加上一行代码即可，其他的都在这个类的构造函数和析构函数中自动完成。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;实现my_lock_guard借鉴&#34;&gt;实现my_lock_guard(借鉴)&lt;/h2&gt;
&lt;p&gt;这是自己实现的一个 &lt;code&gt;lock_guard&lt;/code&gt;，就是在构造和析构中完成加锁和解锁的操作，之所以会自动完成，是因为离开函数作用域会导致局部变量析构函数被调用，而我们又是手动构造了 &lt;code&gt;lock_guard&lt;/code&gt;，因此这两个函数都是自动被调用的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace myspace {
    template&amp;lt;typename T&amp;gt; class my_lock_guard {
    public:
        // 在 std::mutex 的定义中，下面两个函数被删除了
        // mutex(const mutex&amp;amp;) = delete;
        // mutex&amp;amp; operator=(const mutex&amp;amp;) = delete;
        // 因此这里必须传递引用
        my_lock_guard(T&amp;amp; mutex) :mutex_(mutex){
            // 构造加锁
            mutex_.lock();
        }

        ~my_lock_guard() {
            // 析构解锁
            mutex_.unlock();
        }
    private:
        // 不可赋值，不可拷贝
        my_lock_guard(my_lock_guard const&amp;amp;);
        my_lock_guard&amp;amp; operator=(my_lock_guard const&amp;amp;);
    private:
        T&amp;amp; mutex_;
    };

};

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;stdmutex&#34;&gt;std::mutex&lt;/h2&gt;
&lt;p&gt;不管是 &lt;code&gt;std::lock_guard&lt;/code&gt;，还是&lt;code&gt;my_lock_guard&lt;/code&gt;，都使用了一个 &lt;code&gt;std::mutex&lt;/code&gt; 作为构造函数的参数，这是因为我们的 &lt;code&gt;lock_guard&lt;/code&gt; 只是一个包装类，而实际的加锁和解锁的操作都还是 &lt;code&gt;std::mutex&lt;/code&gt; 完成的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::mutex &lt;/code&gt;其实是一个用于保护共享数据不会同时被多个线程访问的类，它叫做互斥量，你可以把它看作一把锁，它的基本使用方法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;mutex&amp;gt;

std::mutex kMutex;

void function() {
  //加锁
  kMutex.lock();
  //kMutex.try_lock();

  //do something that is thread safe...
  
  // 离开作用域解锁
  kMutex.unlock();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;什么是锁&#34;&gt;什么是锁&lt;/h2&gt;
&lt;p&gt;锁是用来保护共享资源（变量或者代码）不被并发访问的一种方法，它只是方法，实际的实现就是 &lt;code&gt;std::mutex&lt;/code&gt; 等等的类了。&lt;/p&gt;
&lt;p&gt;可以简单的理解为：&lt;/p&gt;
&lt;p&gt;当前线程访问一个变量之前，将这个变量放到盒子里锁住，并且当前线程拿着钥匙。这样一来，如果有其他的线程也要访问这个变量，则必须等待当前线程将盒子解锁之后才能访问，之后其他线程在访问这个变量之前也将会再次锁住这个变量。&lt;/p&gt;
&lt;p&gt;当前线程执行完后，就将该盒子解锁，这样其他的线程就可以拿到盒子的钥匙，并再次加锁访问这个变量了。&lt;/p&gt;
&lt;p&gt;这样就保证了同一时刻只有一个线程可以访问共享资源，解决了简单的线程安全问题。&lt;/p&gt;
&lt;h2 id=&#34;一个简单的线程安全的例子&#34;&gt;一个简单的线程安全的例子&lt;/h2&gt;
&lt;p&gt;主线程开启了 2 个子线程，每个子线程都修改共享的全局变量 &lt;code&gt;kData&lt;/code&gt;，如果没有增加必要的锁机制，那么每个子线程打印出的 &lt;code&gt;kData&lt;/code&gt; 就可能会出错。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;mutex&amp;gt;
#include &amp;lt;thread&amp;gt;

// 两个子线程共享的全局变量
int kData = 0;

// std::mutex 提供了一种防止共享数据被多个线程并发访问的简单同步方法
// 调用线程可以通过 lock 和 try_lock 来获取互斥量，使用 unlock() 释放互斥量
std::mutex kMutex;

namespace myspace {
    template&amp;lt;typename T&amp;gt; class my_lock_guard {
    public:
        // 在 std::mutex 的定义中，下面两个函数被删除了
        // mutex(const mutex&amp;amp;) = delete;
        // mutex&amp;amp; operator=(const mutex&amp;amp;) = delete;
        // 因此这里必须传递引用
        my_lock_guard(T&amp;amp; mutex) :mutex_(mutex){
            // 构造加锁
            mutex_.lock();
        }

        ~my_lock_guard() {
            // 析构解锁
            mutex_.unlock();
        }
    private:
        // 不可赋值，不可拷贝
        my_lock_guard(my_lock_guard const&amp;amp;);
        my_lock_guard&amp;amp; operator=(my_lock_guard const&amp;amp;);
    private:
        T&amp;amp; mutex_;
    };

};

void increment() {
    // 1.创建一个互斥量的包装类，用来自动管理互斥量的获取和释放
    // std::lock_guard&amp;lt;std::mutex&amp;gt; lock(kMutex);

    // 2.原生加锁
    // kMutex.lock();

    // 3.自己实现的 std::mutex 的包装类
    //myspace::my_lock_guard&amp;lt;std::mutex&amp;gt; lock(kMutex);

    for (int i = 0; i &amp;lt; 10; i++) {
        // 打印当前线程的 id : kData
        std::cout &amp;lt;&amp;lt; std::this_thread::get_id()
                  &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; kData++ &amp;lt;&amp;lt; std::endl;
    }

    // 2. 原生解锁
    //kMutex.unlock();

    // 离开局部作用域，局部锁解锁，释放互斥量

}


int main()
{
    // 打印当前函数名
    std::cout &amp;lt;&amp;lt; __FUNCTION__ &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; kData &amp;lt;&amp;lt; std::endl;

    // 开启两个线程
    std::thread t1(increment);
    std::thread t2(increment);

    // 主线程等待这两个线程完成操作之后再退出
    t1.join();
    t2.join();

    // 防止立刻退出
    getchar();
    return 0;

}

&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;使用 std::lock_guard&lt;/li&gt;
&lt;li&gt;使用 std::mutex 实现原生的加锁&lt;/li&gt;
&lt;li&gt;使用自己的 myspace::my_lock_guard&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不加锁的输出类似于(每次执行结果并不相同):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;main:0
0x70000fa48000:0x70000facb0000
0x70000fa48000:1
0x70000fa48000:2
0x70000fa48000:3
0x70000fa48000:4
0x70000fa48000:5
0x70000facb000:6
0x70000facb000:7
0x70000facb000:8
0x70000facb000:9
0x70000facb000:10
0x70000facb000:11
0x70000facb000:12
0x70000facb000:13
0x70000facb000:14
:15
0x70000fa48000:16
0x70000fa48000:17
0x70000fa48000:18
0x70000fa48000:19

Process finished with exit code 143 (interrupted by signal 15: SIGTERM)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;结果分析&#34;&gt;结果分析&lt;/h2&gt;
&lt;p&gt;首先线程是一种轻量级的进程，也存在调度，假设当前 CPU 使用的是基于时间片的轮转调度算法，为每个进程分配一段可执行的时间片，因此每个线程都得到一段可以执行的时间（这里只是简单概括，仔细研究其实是有点复杂的，涉及到内核线程和用户线程，这里就不多说了，不是这里讨论的重点），这就导致子线程 1 在修改并打印 kData 的时候，子线程 1 的时间片用完了，CPU 切换到子线程 2 去修改并打印 kData，这就导致了最终的打印结果不是预先的顺序，就是这个原理，简单的理解是不难的。&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">理解C&#43;&#43;的Memory_Order</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E7%90%86%E8%A7%A3c&#43;&#43;%E7%9A%84memory_order/" />
            <id>https://chenbokaix250.github.io/tech/%E7%90%86%E8%A7%A3c&#43;&#43;%E7%9A%84memory_order/</id>
            <updated>2022-01-15T03:13:05&#43;08:00</updated>
            <published>2022-01-15T03:07:55&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C++的Memory_Order [toc] 为什么需要 Memory Order 如果不使用任何同步机制（例如 mutex 或 at……</summary>
            
                <content type="html">&lt;h1 id=&#34;c的memory_order&#34;&gt;C++的Memory_Order&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;为什么需要-memory-order&#34;&gt;为什么需要 Memory Order&lt;/h2&gt;
&lt;p&gt;如果不使用任何同步机制（例如 mutex 或 atomic），在多线程中读写同一个变量，那么，程序的结果是难以预料的。简单来说，编译器以及 CPU 的一些行为，会影响到程序的执行结果：&lt;/p&gt;
&lt;p&gt;即使是简单的语句，C++ 也不保证是原子操作。
CPU 可能会调整指令的执行顺序。
在 CPU cache 的影响下，一个 CPU 执行了某个指令，不会立即被其它 CPU 看见。
原子操作说的是，一个操作的状态要么就是未执行，要么就是已完成，不会看见中间状态。例如，在 C++11 中，下面程序的结果是未定义的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int64_t i = 0;     // global variable
Thread-1:              Thread-2:
i = 100;               std::cout &amp;lt;&amp;lt; i;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;C++ 并不保证i = 100是原子操作，因为在某些 CPU Architecture 中，写入int64_t需要两个 CPU 指令，所以 Thread-2 可能会读取到i在赋值过程的中间状态。&lt;/p&gt;
&lt;p&gt;另一方面，为了优化程序的执行性能，CPU 可能会调整指令的执行顺序。为阐述这一点，下面的例子中，让我们假设所有操作都是原子操作：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int x = 0;     // global variable
int y = 0;     // global variable
		  
Thread-1:              Thread-2:
x = 100;               while (y != 200)
y = 200;                   ;
                       std::cout &amp;lt;&amp;lt; x;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果 CPU 没有乱序执行指令，那么 Thread-2 将输出100。然而，对于 Thread-1 来说，x = 100;和y = 200;这两个语句之间没有依赖关系，因此，Thread-1 允许调整语句的执行顺序：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Thread-1:&#34; data-lang=&#34;Thread-1:&#34;&gt;y = 200;
x = 100;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种情况下，Thread-2 将输出0或100。&lt;/p&gt;
&lt;p&gt;CPU cache 也会影响到程序的行为。下面的例子中，假设从时间上来讲，A 操作先于 B 操作发生：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-int&#34; data-lang=&#34;int&#34;&gt;		  
Thread-1:                      Thread-2:
x = 100;    // A               std::cout &amp;lt;&amp;lt; x;    // B
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尽管从时间上来讲，A 先于 B，但 CPU cache 的影响下，Thread-2 不能保证立即看到 A 操作的结果，所以 Thread-2 可能输出0或100。&lt;/p&gt;
&lt;p&gt;从上面的三个例子可以看到，多线程读写同一变量需要使用同步机制，最常见的同步机制就是std::mutex和std::atomic。然而，从性能角度看，通常使用std::atomic会获得更好的性能。
C++11 为std::atomic提供了 4 种 memory ordering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Relaxed ordering&lt;/li&gt;
&lt;li&gt;Release-Acquire ordering&lt;/li&gt;
&lt;li&gt;Release-Consume ordering&lt;/li&gt;
&lt;li&gt;Sequentially-consistent ordering
默认情况下，std::atomic使用的是 Sequentially-consistent ordering。但在某些场景下，合理使用其它三种 ordering，可以让编译器优化生成的代码，从而提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;relaxed-ordering&#34;&gt;Relaxed ordering&lt;/h2&gt;
&lt;p&gt;在这种模型下，std::atomic的load()和store()都要带上memory_order_relaxed参数。Relaxed ordering 仅仅保证load()和store()是原子操作，除此之外，不提供任何跨线程的同步。
先看看一个简单的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-std::atomic&lt;int&gt;&#34; data-lang=&#34;std::atomic&lt;int&gt;&#34;&gt;std::atomic&amp;lt;int&amp;gt; y = 0;     // global variable
		  
Thread-1:                                  Thread-2:
r1 = y.load(memory_order_relaxed); // A    r2 = x.load(memory_order_relaxed); // C
x.store(r1, memory_order_relaxed); // B    y.store(42, memory_order_relaxed); // D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完上面的程序，可能出现r1 == r2 == 42。理解这一点并不难，因为编译器允许调整 C 和 D 的执行顺序。如果程序的执行顺序是 D -&amp;gt; A -&amp;gt; B -&amp;gt; C，那么就会出现r1 == r2 == 42。&lt;/p&gt;
&lt;p&gt;如果某个操作只要求是原子操作，除此之外，不需要其它同步的保障，就可以使用 Relaxed ordering。程序计数器是一种典型的应用场景：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;cassert&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;atomic&amp;gt;
std::atomic&amp;lt;int&amp;gt; cnt = {0};
void f()
{
    for (int n = 0; n &amp;lt; 1000; ++n) {
        cnt.fetch_add(1, std::memory_order_relaxed);
    }
}
int main()
{
    std::vector&amp;lt;std::thread&amp;gt; v;
    for (int n = 0; n &amp;lt; 10; ++n) {
        v.emplace_back(f);
    }
    for (auto&amp;amp; t : v) {
        t.join();
    }
    assert(cnt == 10000);    // never failed
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;release-acquire-ordering&#34;&gt;Release-Acquire ordering&lt;/h2&gt;
&lt;p&gt;在这种模型下，store()使用memory_order_release，而load()使用memory_order_acquire。这种模型有两种效果，第一种是可以限制 CPU 指令的重排：&lt;/p&gt;
&lt;p&gt;在store()之前的所有读写操作，不允许被移动到这个store()的后面。
在load()之后的所有读写操作，不允许被移动到这个load()的前面。
除此之外，还有另一种效果：假设 Thread-1 store()的那个值，成功被 Thread-2 load()到了，那么 Thread-1 在store()之前对内存的所有写入操作，此时对 Thread-2 来说，都是可见的。
下面的例子阐述了这种模型的原理：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;thread&amp;gt;
#include &amp;lt;atomic&amp;gt;
#include &amp;lt;cassert&amp;gt;
#include &amp;lt;string&amp;gt;
std::atomic&amp;lt;bool&amp;gt; ready{ false };
int data = 0;
void producer()
{
    data = 100;                                       // A
    ready.store(true, std::memory_order_release);     // B
}
void consumer()
{
    while (!ready.load(std::memory_order_acquire))    // C
        ;
    assert(data == 100); // never failed              // D
}
int main()
{
    std::thread t1(producer);
    std::thread t2(consumer);
    t1.join();
    t2.join();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们分析一下这个过程：&lt;/p&gt;
&lt;p&gt;首先 A 不允许被移动到 B 的后面。
同样 D 也不允许被移动到 C 的前面。
当 C 从 while 循环中退出了，说明 C 读取到了 B store()的那个值，此时，Thread-2 保证能够看见 Thread-1 执行 B 之前的所有写入操作（也即是 A）。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">本地项目提交方法</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E6%96%B9%E6%B3%95/" />
            <id>https://chenbokaix250.github.io/tech/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E6%96%B9%E6%B3%95/</id>
            <updated>2022-01-14T02:19:26&#43;08:00</updated>
            <published>2022-01-14T02:17:08&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">提交步骤 1、先在远程仓库(如github)创建项目,为了避免错误,不要初始化 README, license, 或者……</summary>
            
                <content type="html">&lt;h1 id=&#34;提交步骤&#34;&gt;提交步骤&lt;/h1&gt;
&lt;p&gt;1、先在远程仓库(如github)创建项目,为了避免错误,不要初始化 README, license, 或者gitignore文件&lt;/p&gt;
&lt;p&gt;2、打开Terminal终端&lt;/p&gt;
&lt;p&gt;3、切换到你的本地项目目录&lt;/p&gt;
&lt;p&gt;4、初始化本地仓库
&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5、添加文件到本地仓库
&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6、提交文件
&lt;code&gt;git commit -m &amp;quot;First commit&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;7、到远程仓库的页面上,复制仓库地址 (笔者以配置好ssh,故复制ssh形式的仓库地址)&lt;/p&gt;
&lt;p&gt;8、添加远程仓库地址到本地仓库&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;# Sets the new remote
git remote -v
# Verifies the new remote URL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9、push到远程仓库&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;# Pushes the changes in your local repository up to the remote repository you specified as the origin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完毕!&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/git/" term="git" label="git" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Mac最常用的30个快捷键</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/mac%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%8430%E4%B8%AA%E5%BF%AB%E6%8D%B7%E9%94%AE/" />
            <id>https://chenbokaix250.github.io/life/mac%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%8430%E4%B8%AA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
            <updated>2022-01-11T03:07:34&#43;08:00</updated>
            <published>2022-01-11T02:58:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">常用快捷键汇总 [toc] Mac常用30个快捷键 1、return回车键=修改文件/文件夹名称。……</summary>
            
                <content type="html">&lt;h1 id=&#34;常用快捷键汇总&#34;&gt;常用快捷键汇总&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;mac常用30个快捷键&#34;&gt;Mac常用30个快捷键&lt;/h2&gt;
&lt;p&gt;1、return回车键=修改文件/文件夹名称。
2、空格键＝使用快速查看来预览所选项。
3、command+tab＝在打开的应用中切换到下一个最近使用的应用。
4、option=拖动文件复制。
5、command+delete=移到废纸篓。
6、command+空格键=显示/隐藏“聚焦”搜索栏。
7、command+点击标题=查看包含当前文件夹的文件夹。
8、command+F=打开“查找”窗口。
9、command+O=打开文件/文件夹。
10、command+N=打开一个新的窗口。
11、command+T=打开新的标签页。
12、command+A=全选各项。
13、command+C=将所选择拷贝到剪贴板。（剪贴板=打开访达→编辑→显示剪贴板）
14、command+X＝剪切所选择并拷贝到剪贴板。
15、command+V＝将剪贴板中的内容粘贴到当前文稿/应用中。
16、command+D=复制所选文件。（Mac中的复制=拷贝+粘贴）
17、command+I=显示所选文件的“显示简介”的窗口。
18、command+Z=撤销上一个命令。
19、shift+command+Z＝重做。
20、fn+delete=向后删除。
21、command+S=存储当前文稿。
22、command+上键头=打开包含当前文件夹的文件夹。
23、command+H=隐藏最前面的应用窗口。
24、option+command+H=要查看最前面的应用但隐藏所有其他应用。
25、command+M=将最前面的窗口最小化至程序坞。
26、command+W=关闭最前面的窗口。
27、option+command+W=要关闭应用的所有窗口。
28、command+Q=关闭应用程序。
29、command+逗号键=打开最前面的应用的偏好设置。
30、command+shift+4=截取屏幕区域。&lt;/p&gt;
&lt;h2 id=&#34;vscode常用23个快捷键&#34;&gt;vscode常用23个快捷键&lt;/h2&gt;
&lt;p&gt;VSCode中的每个命令也可以通过使用CTRL + SHIFT + P和搜索查询的命令提示符来执行。 但是知道直接快捷键速度会更快。&lt;/p&gt;
&lt;p&gt;1.CTRL+, 打开用户设置&lt;/p&gt;
&lt;p&gt;偶尔需要调整用户首选项，这是直接打开它们的方式。&lt;/p&gt;
&lt;p&gt;2.CTRL+K CTRL+S：显示快捷键
这是VSCode中的快捷方式的完整列表&lt;/p&gt;
&lt;p&gt;3.CTRL+R：切换工作区&lt;/p&gt;
&lt;p&gt;这将打开最近工作区的列表，并且是切换到另一个文件夹或项目的超快速方法。 请注意，如果在VS Code工作区中打开了一个终端，这会关闭当前的终端会话。&lt;/p&gt;
&lt;p&gt;4.ALT + Z : 切换自动换行
当我们希望看到完整的行而无需水平滚动时，它是一个方便的小帮手。&lt;/p&gt;
&lt;p&gt;5.CTRL + G ：转到行&lt;/p&gt;
&lt;p&gt;6.CTRL + P ：转到文件&lt;/p&gt;
&lt;p&gt;7.F8：转到下一个错误或警告
这是单键调试，还可以使用SHIFT+F8转到以前的错误或警告。&lt;/p&gt;
&lt;p&gt;8.CTRL + TAB：切换选项卡
不用鼠标切换已打开文件的最快方法。&lt;/p&gt;
&lt;p&gt;9.SHIFT + ALT + I : 在选定的每行末尾插入光标
这对于在选定区域中快速创建多个光标很有用。&lt;/p&gt;
&lt;p&gt;10.CTRL+L : 选择当前行&lt;/p&gt;
&lt;p&gt;11.CTRL + SHIFT + L :选择所有出现的当前选择&lt;/p&gt;
&lt;p&gt;该快捷方式确实节省了时间，因为不必在整个文件中按CTRL + D。&lt;/p&gt;
&lt;p&gt;12.CTRL + F2 :选择所有出现的当前单词
有了它，甚至不必选择任何东西，只需将光标放在要选择所有出现的单词上。&lt;/p&gt;
&lt;p&gt;13.CTRL + SHIFT + SPACE : 触发参数提示
如果我们不记得参数顺序，也不想通过查看文档来打断我们的流程，可以使用此命令。&lt;/p&gt;
&lt;p&gt;14.SHIFT + ALT + F : 格式化文档&lt;/p&gt;
&lt;p&gt;15.CTRL + K CTRL + F :格式选择的代码&lt;/p&gt;
&lt;p&gt;16.F12 :转到定义&lt;/p&gt;
&lt;p&gt;17.ALT+F12 : 查看定义
这只显示了变量或函数的相应定义，而不需要移动光标。&lt;/p&gt;
&lt;p&gt;18.F2 : 重命名变量&lt;/p&gt;
&lt;p&gt;19.CTRL + K CTRL + X : 删除尾部空格&lt;/p&gt;
&lt;p&gt;20.CTRL + K R : 在资源管理器中显示活动文件&lt;/p&gt;
&lt;p&gt;21.CTRL + SHIFT + H : 替换为文件&lt;/p&gt;
&lt;p&gt;22.CTRL + K V =在右侧打开Markdown预览&lt;/p&gt;
&lt;p&gt;23.Ctrl + K  Z : 进入Zen模式&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/mac/" term="mac" label="mac" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">华语乐坛的最后希望在宝岛</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E5%8D%8E%E8%AF%AD%E4%B9%90%E5%9D%9B%E7%9A%84%E6%9C%80%E5%90%8E%E5%B8%8C%E6%9C%9B%E5%9C%A8%E5%AE%9D%E5%B2%9B/" />
            <id>https://chenbokaix250.github.io/life/%E5%8D%8E%E8%AF%AD%E4%B9%90%E5%9D%9B%E7%9A%84%E6%9C%80%E5%90%8E%E5%B8%8C%E6%9C%9B%E5%9C%A8%E5%AE%9D%E5%B2%9B/</id>
            <updated>2022-01-01T02:20:08&#43;08:00</updated>
            <published>2022-01-01T02:18:51&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1 、美秀集团 S 级 ——《米儿》《生活袂晓过》 A 级 —— 《细粒的目睭》《小老婆》《挡一根》……</summary>
            
                <content type="html">&lt;p&gt;1 、美秀集团
S 级 ——《米儿》《生活袂晓过》
A 级 —— 《细粒的目睭》《小老婆》《挡一根》《卷烟》《做事人》《马克吐温》
第一次听他们的歌曲可能会觉得这是城乡结合部的杀马特土嗨乐队，而且主唱的发型、长相和嗓音都有点像面筋哥。但是只要你接受了他们的风格，就会发现他们真的很牛逼（面筋哥其实也很牛逼）。&lt;/p&gt;
&lt;p&gt;2 、浅堤
S 级 ——《怪手》《多崎作》《高雄》
A 级 ——《树影》《月光》《青春咱的梦》《叨位是你的厝》
一个轻快、清新的乐队，刚发了新专辑。听他们的快歌会让你觉得来到了阳光明媚的周六上午。但是轻快的歌曲可能在讲一个沉重的故事。女主唱又写词又作曲又唱歌，声音也很好听。我很喜欢他们的吉他和鼓点。&lt;/p&gt;
&lt;p&gt;3 、怕胖团
S 级 —— 《我没有用，没办法给你想要的生活》《后照镜》《想想当初吧》
A 级 —— 《鱼》《月旁月光》《抱歉我不想跟你道歉》
搞怪级 —— 《蚊子妳来咬我啊！我才不怕妳？！！！》《内外夹攻大力丸》
一个台味很浓的台湾乐队（诶，你很机车诶！），爱情 hàn 友情是他们的主要创作主题，三个很明显的元素：很纯粹的悲伤、带了点恶搞的悲伤、带了很多恶搞的快乐。但是有一点我不喜欢，就是他们很执着于《抄你妈的笔记本》这个很不雅的谐音梗（甚至还专门出了一个 2021 版）。查了一下居然是 2007 年就创立的乐队了，虽然已经不年轻了但是我还是想加进来。&lt;/p&gt;
&lt;p&gt;4 、热写生
S 级 —— 《爱与胶囊》
A 级 —— 《在船底搔痒》《青元春朗》
说实话他们的歌我听不太懂，歌词看上去很有文化很哲学，歌曲听上去给人的感觉是独一无二的——目前还没有听过风格类似的乐队，即使是故弄玄虚也值得一听。&lt;/p&gt;
&lt;p&gt;5 、青虫 aoi
S 级 —— 《我毋是刁故意》《青鸟》《大树公》
A 级 —— 《分手后你才送我生日蛋糕》《简幼》《媠花》
这支乐队大多数歌曲都是闽南语，女主唱的声音很温暖，歌词写得也很棒。擅于讲述亲情，发掘生活中有意义的事物。&lt;/p&gt;
&lt;p&gt;6 、当代电影大师
S 级 —— 《那些事情是真的有意思吗》
A 级 —— 《我觉得春天好像要来了》
很装逼的一支乐队，刚发了第一张正式专辑(有 15 首歌)，我觉得最惊艳的还是《那些事情是真的有意思吗》的前半段，词、节奏和鼓点都太强了。&lt;/p&gt;
&lt;p&gt;7 、Crispy 脆乐团
S 级 —— 《转圈圈》
A 级 —— 《 Deja Vu 》
他们应该还有其他好听的歌，但是因为我听得不多，难做选择。顺带一提，转圈圈的 MV 拍得很有意思，我是在 youtube 看到那个 MV 才关注他们的。&lt;/p&gt;
&lt;p&gt;8 、好乐团 /Goodband
S 级 —— 《我们一样可惜》《我把我的青春给你》
A 级 —— 《他们说我是没有用的年轻人》《蒸发》
一个很丧的乐队，女主唱的假音相当牛逼，他们的歌很悲伤但是很好听，深夜 emo 必备。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/music/" term="music" label="music" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Scons使用教程</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/scons%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" />
            <id>https://chenbokaix250.github.io/tech/scons%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
            <updated>2021-12-29T02:09:44&#43;08:00</updated>
            <published>2021-12-29T01:48:28&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Scons使用教程 Scons是在研究https://github.com/autoa……</summary>
            
                <content type="html">&lt;h1 id=&#34;scons使用教程&#34;&gt;Scons使用教程&lt;/h1&gt;
&lt;p&gt;Scons是在研究&lt;code&gt;https://github.com/autoas/ssas-public.git&lt;/code&gt;工程中发现的构建工具&lt;/p&gt;
&lt;p&gt;由于该仿真器的问题迟迟没有解决
故学习python的scons程序建造工具&lt;/p&gt;
&lt;h2 id=&#34;scons是什么&#34;&gt;scons是什么&lt;/h2&gt;
&lt;p&gt;SCons 是一个开放源代码、以 Python 语言编写的下一代的程序建造工具。功能上类似于make。
个人理解：一个单个文件的程序是不需要scons和make之类的构建工具的，只要用gcc或者g++编译就好。但是一些相对较大的项目有多个文件，各个文件之间的依赖关系复杂，如果用g++来编译就会非常复杂，不仅要写的命令多，而且容易出错，所以就出现了make，但是make可能也存在某些问题，就出现了scons。总之，这两种工具解决构建的方法就是用一个配置文件来记录下各个文件之间的依赖关系，用到了那些库，配置好环境变量等等，然后直接构建。scons并不是和g++一样的编译工具，而是在g++的基础上的工具。&lt;/p&gt;
&lt;h2 id=&#34;scons的配置文件&#34;&gt;scons的配置文件&lt;/h2&gt;
&lt;p&gt;SConstruct是scons的配置文件，是用python编写的，自然要遵守python语法（ps:对于只接触过类C语言的人来说，python语法最大的不同就是python是用：和缩进这两个东西来划分语句块的，不知道这点很可能看不懂SConstruct文件）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;等下次看的时候整理该文档:&lt;/p&gt;
&lt;p&gt;()[https://blog.csdn.net/MOU_IT/article/details/95229790]&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">MCU软件开发中的startup过程</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/mcu%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84startup%E8%BF%87%E7%A8%8B/" />
            <id>https://chenbokaix250.github.io/tech/mcu%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84startup%E8%BF%87%E7%A8%8B/</id>
            <updated>2022-01-11T12:48:00&#43;08:00</updated>
            <published>2021-12-27T23:57:30&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">[toc] MCU软件开发中startip过程详解 statup的过程和启动代码在新建工程时,已……</summary>
            
                <content type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;mcu软件开发中startip过程详解&#34;&gt;MCU软件开发中startip过程详解&lt;/h1&gt;
&lt;p&gt;statup的过程和启动代码在新建工程时,已经默认加入并配置好.
startup过程往往需要一定的MCU内核CPU汇编指令知识,很多对内核寄存器/堆栈指针的初始化/I/D-cache的初始化过程往往需要使用专门的汇编指令.
想要搞清楚main()函数之前的所有准备工作,想要真正理解并开发一款嵌入式MCU的BootLoader,想要弄懂MCU,就需要搞清楚这个过程.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;嵌入式mcu的复位源&#34;&gt;嵌入式MCU的复位源&lt;/h2&gt;
&lt;p&gt;嵌入式MCU在硬件复位或者系统复位后,都是从复位向量所指向的复位中断ISR开始运行的,因此复位中断ISR一般也是整个嵌入式应用工程的入口(_EntryPoint)函数/启动(startup/boot)函数.&lt;/p&gt;
&lt;p&gt;通常导致嵌入式MCU复位的复位源如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2021/12/28/DXNq6bJUHE5fcgI.png&#34; alt=&#34;截屏2021-12-28 上午12.24.00.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;用户编程一般不涉及MCU的软件启动过程,用户代码一般都是从main函数开始,完成系统的时钟,工作模式和外设初始化,全局变量/数据结构的初始化,最后打开内核CPU全局终端,进入主程序(主循环状态机),用户的程序设计跟标准C语言程序设计无异.&lt;/p&gt;
&lt;h2 id=&#34;startup相关的几个问题&#34;&gt;Startup相关的几个问题:&lt;/h2&gt;
&lt;p&gt;a. 我们都知道，C语言中的全局变量分为有初始化值(.data段变量)和无初始化值(.bss段变量—初始化值为0的全局变量和.common段变量—无初始化值的全局变量)两大类。我们在main()函数中，用户代码并没有对全局变量进行初始化，但使用全局变量时其初始化值已经确定--.data段变量已为其定义时的初始化值，而 .bss/.common段变量全为零，这是如何做到的呢 (要知道，嵌入式MCU中这些全局变量都是被分配到RAM中的，其每次上电之后的值时随机的。) ？如果我们想要某些全局变量在只在POR上电复位时被初始化而其他系统复位时不初始化，有该如何实现呢？&lt;/p&gt;
&lt;p&gt;b. 在汽车MCU中，为了保证RAM数据的可靠，其RAM也常带有ECC功能(比如Qorivva MPC56xx/57xx系列MCU和S32K系列MCU)，而每次上电之后RAM中的数据是随机的，如果不对其进行初始化就去读取其数据，就极容易产生ECC错误，从而进入系统异常，那么对RAM的初始化又是如何完成的呢？&lt;/p&gt;
&lt;p&gt;c. C语言正常运行所需要的堆栈(stack)是如何指向RAM中用户指定的地址空间的呢？&lt;/p&gt;
&lt;p&gt;d. 我们的用户程序都是从main()开始运行的，那么可不可以是其他的函数呢？main()函数一定是必须运行的吗？&lt;/p&gt;
&lt;h2 id=&#34;嵌入式mcu-startup过程详解&#34;&gt;嵌入式MCU Startup过程详解&lt;/h2&gt;
&lt;p&gt;以下准备工作都是在startup中完成的,以下是嵌入式MCU的一般startup流程:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2021/12/28/ALKQWX8HczUMTrI.png&#34; alt=&#34;process.drawio.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体每一步完成的初始化工作如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化CPU寄存器/关闭全局中断&lt;/strong&gt;：每次POR上电或者复位之后，CPU寄存器除了PC寄存器有意见复位逻辑赋以存储在默认复位向量中的复位函数ISR(即_EntryPoint()/startup()函数) 地址外，其余的CPU寄存器值都是随机的，所以有必要对其进行初始化，然后再使用；除此之外，为了保证整个startup过程不受外设中断的影响，需要将内核CPU全局中断关闭(disable)；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化看门狗&lt;/strong&gt;：为了保证整个startup初始化过程正常进行，有必要对MCU内部看门狗进行初始化，关闭或者初始化一个溢出周期并在初始化过程中进行喂狗；(这个过程一般由编译器预编译变量控制，在工程属性编译器设置，对于有些MCU，比如S12系列MCU，其片上COP看门狗在正常模式(normal single chip mode)下只能配置一次，这样如果在startup的过程将其关闭了，在用户程序中就无法重新使能和配置了)；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化RAM ECC&lt;/strong&gt;：如果使用的MCU其RAM带有ECC功能（比如Qorivva MPC56x/57xx系列MCU），必须在使用前对其进行初始化(其过程就是往RAM中写出初始化数据已产生确定的ECC结果，一般是将之前的CPU寄存器值循环写入整个RAM空间，当然，对其赋值零也是可以的，之所以使用CPU寄存器是因为其访问速度快，而且有专门的单指令多数据(SIMD)支持将多个CPU寄存器写入RAM)，否则会造成ECC错误，进入系统异常(比如PowerPC e200Z0内核的IVOR1—machine check/IVOR2—data storge exception)；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置存储器控制器&lt;/strong&gt;：对于很多32位MCU来说，由于其内核CPU运行速度比较快(100~300MHz)而存储器的工作时钟频率往往较低，所以一般器存储器控制器都设计有buffer来控制访问效率；&lt;/p&gt;
&lt;p&gt;比如Qorivva MPC564xA系列MCU通过BIUCR寄存器的WWSC和RWSC位来抽空读写片上P-Flash时的总线等待周期，当内核系统时钟较高时就需要减小等待周期以保证MCU正常工作.&lt;/p&gt;
&lt;p&gt;另外，如果所使用的MCU内核CPU有片上指令/数据缓存(I-cache和D-cache，比如S32K14x和MPC57xx系列MCU)，还需要对其进行初始化—Flush操作；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化C语言堆栈(stack)&lt;/strong&gt;：从链接结果中，读取栈顶地址将其写入CPU寄存器的SP寄存器，从而完成堆栈(stack)的初始化工作，这之后内核CPU就可以正常运行C语言代码了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化RAM(copydown)&lt;/strong&gt;：在对RAM初始化时，内核CPU会读取编译链接结果中的启动结构体(链接器自定义，不同的编译器其结构和形式可能不同)，从中获得RAM的初始化信息，其包括如下信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;.data段全局变量初始化值在Flash中的存储地址和在其RAM中的运行时地址，以及长度(单位为字节)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.bss/.common段全局变量在RAM中的运行时地址，以及长度(单位为字节)；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据这些信息，内核CPU就可以对RAM进行初始化了：&lt;/p&gt;
&lt;p&gt;(注意：编译器默认都是把所有相同段的数据放在连续的地址空间以提高初始化效率)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    .data段全局变量区：从Flash中读取初始化值并将其写到对应的RAM地址空间；

    .bss/.common段全局变量区：对其RAM地址写入零一完成初始化；
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(从以上分析可知，.bss/.common段全局变量是不占Flash空间的，即在编译结果S19文件中也没有其初始化值).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化系统时钟&lt;/strong&gt;：可以将MCU的时钟初始化放在main()函数之前，以缩短startup的时间。根据不同的编译器，其为可选配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳转至main()函数&lt;/strong&gt;: 在完成以上startup过程之后，在startup函数的最后就是调用main()函数，跳转至用户应用程序执行；(PS: 这里，其实我们可以修改让内核CPU跳转到自定义的任何函数，而非默认的main()函数)&lt;/p&gt;
&lt;p&gt;以上介绍的时嵌入式MCU startup的一般流程，不同的MCU其片上资源和特性存在差异，所以上述初始化步骤也可能有所差异。&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/mcu/" term="MCU" label="MCU" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Carla_1_step</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/carla_1_step/" />
            <id>https://chenbokaix250.github.io/tech/carla_1_step/</id>
            <updated>2021-12-17T12:17:30&#43;08:00</updated>
            <published>2021-12-10T18:51:21&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Windows 下全套安装过程 微 PE：制作 U 盘启动项安装系统 msdn：下载 windows 镜像 CarLa（win……</summary>
            
                <content type="html">&lt;h1 id=&#34;windows-下全套安装过程&#34;&gt;Windows 下全套安装过程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;微 PE：制作 U 盘启动项安装系统&lt;/li&gt;
&lt;li&gt;msdn：下载 windows 镜像&lt;/li&gt;
&lt;li&gt;CarLa（windows 版本）：&lt;a href=&#34;https://carla-releases.s3.eu-west-3.amazonaws.com/Windows/CARLA_0.9.13.zip&#34;&gt;地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nvidia experience：用于在 Nvidia 安装 cuda&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统安装&#34;&gt;系统安装&lt;/h3&gt;
&lt;p&gt;在 Neoyous 计算机中，需要将硬盘格式转换为 NTFS 后，利用 DiskGiners 运行 Windows 安装器进行 Windows 安装&lt;/p&gt;
&lt;p&gt;此时重启后 grub 会因为之前安装过 Linux 的原因出错&lt;/p&gt;
&lt;p&gt;重新安装 Linux 后 grub 正常&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;安装-nvidia-驱动&#34;&gt;安装 NVidia 驱动&lt;/h3&gt;
&lt;p&gt;Windows 中安装 NVidia 相对容易 完成 NVIDIA Experience 的安装 更新后重启 完成 NVidia 驱动及 CUDA 的安装&lt;/p&gt;
&lt;h3 id=&#34;carla-在-windows-上的安装&#34;&gt;Carla 在 Windows 上的安装&lt;/h3&gt;
&lt;p&gt;安装 Anaconda &lt;code&gt;Anaconda3-2018.12-Windows-x86_64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载 CarLa 后 解压至 D：
安装 carlalib 到&lt;code&gt;D:\carla\CARLA_0.9.13\WindowsNoEditor\PythonAPI\carla\dist&lt;/code&gt;中安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以用 easy_install 安装 egg&lt;/li&gt;
&lt;li&gt;可以用 pip install 安装 whl
创建虚拟环境 （利用 conda）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda create -n your_env_name python=3.7 //创建python虚拟环境
activate your_env_name //使用激活
deactivate //关闭虚拟环境

----------------
conda remove -n your_env_name --all //删除虚拟环境
conda remove --name your_env_name package_name //删除环境中的某个包
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成 python 所需要的所有依赖 通过 example 的例子就可以运行&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关于-carla-的理解&#34;&gt;关于 Carla 的理解&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Core Concepts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The client&lt;/em&gt;
客户端运行在特定的 IP 和端口上 通过客户端来请求/修改信息
&lt;em&gt;The world&lt;/em&gt;
仿真器对象
通过对主要方法的抽象来抓取演员
一个仿真只能对应一个世界
随着地图的改变进行销毁和重建&lt;/p&gt;
&lt;p&gt;&lt;em&gt;actor&lt;/em&gt;
仿真器中的任何角色都可以是演员：车辆 人 传感器 信号灯 交通标志等&lt;/p&gt;
&lt;p&gt;&lt;em&gt;blueprints&lt;/em&gt;
蓝图是已经设定的一些 actor
通常，模型会有一些动画和属性
Blueprint library 中可以去设置这些&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;carla-脚本程序&#34;&gt;Carla 脚本程序&lt;/h2&gt;
&lt;p&gt;Carla 利用 python 脚本控制 simulation 的运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import random
import time

import carla //导入Carla包

actor_list = []//创建actor
try:
    client = carla.Client(&#39;localhost&#39;, 2000)//创建一个特定IP和端口的client
    client.set_timeout(5.0)//设置断连时间

    world = client.get_world()//获取world
    blueprint_library = world.get_blueprint_library()//获取blueprints library
    v_bp = blueprint_library.filter(&amp;quot;model3&amp;quot;)[0]//生成model3
    spawn_point = random.choice(world.get_map().get_spawn_points())//设置车辆出生点
    vehicle = world.spawn_actor(v_bp, spawn_point)//在世界上投放
    actor_list.append(vehicle)//将车辆加入到actor中
    vehicle.apply_control(carla.VehicleControl(throttle=1.0, steer=0))//设置车辆的油门和转向
    time.sleep(5)//运行时间
finally:
    for actor in actor_list:
        actor.destroy()//销毁对象
    print(&amp;quot;结束&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;g29-的安装与调试&#34;&gt;G29 的安装与调试&lt;/h2&gt;
&lt;p&gt;在 Logitech 官网下载&lt;strong&gt;lghub_installer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装完成更新&lt;/p&gt;
&lt;p&gt;在 Carla 安装目录中 &lt;code&gt;D:\carla\CARLA_0.9.13\WindowsNoEditor\PythonAPI\examples&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;manual_control_steeringwheel.py&lt;/code&gt;进行调试
pygame 中的 joystick 可以对应 G29 的支持，对应的 config 中指定配置文件-&lt;code&gt;wheel_config.ini&lt;/code&gt;
创建配置文件 wheel_config.ini&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[G29 Racing Wheel]
steering_wheel = 0
throttle = 2
brake = 3
reverse = 5
handbrake = 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;G29 与 carla 联调成功&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;carla-在-linux-上的安装&#34;&gt;CARLA 在 linux 上的安装&lt;/h1&gt;
&lt;p&gt;linux 的安装从双系统开始
起初 windows 安装时,Bios 选择了 Dual 模式 使得 Ubuntu 无法进入 随后发现 carla 需要超过 150G 储存空间
在微 PE 中革硬盘 装 ubuntu18.04 随后进行 nvidia 驱动的安装&lt;/p&gt;
&lt;p&gt;安装 nvidia 驱动有三种方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从&lt;code&gt;apt-get&lt;/code&gt;中安装&lt;/li&gt;
&lt;li&gt;从设置 soft&amp;amp;update 中进行升级&lt;/li&gt;
&lt;li&gt;离线升级&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;利用 470 版本进行安装 发现均不行&lt;/p&gt;
&lt;p&gt;回退到老版本 430 进行安装 安装过程如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#禁用nouveau相关驱动
sudo gedit /etc/modprobe.d/blacklist.conf
#加入命令
blacklist rivafb
blacklist vga16fb
blacklist nouveau
blacklist nvidiafb
blacklist rivatv
#测试是否成功禁用
lsmod | grep nouveau
#创建blacklist-nouveau.conf
sudo gedit /etc/modprobe.d/blacklist-nouveau.conf
#填写以下内容
blacklist nouveau
options nouveau modeset=0
#之后更新
sudo update-initramfs -u
#重启
sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装显卡驱动&#34;&gt;安装显卡驱动&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt update
sudo apt install dkms build-essential linux-headers-generic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ctrl+Alt+F1进入命令提示符界面
执行安琥包程序&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chmod 755 NVIDIA-Linux-x86_64-384.111.run  #修改权限（否则没有访问权限，无法进行指令安装）
sudo ./NVIDIA-Linux-x86_64-384.111.run –no-x-check –no-nouveau-check –no-opengl-files #安装驱动
#–no-x-check 关闭X服务
#–no-nouveau-check 禁用nouveau
#–no-opengl-files 不安装OpenGL文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;遇到&lt;code&gt;kernel-module&lt;/code&gt;选yes
安装后重启 之后nvidia-smi 出现显卡信息,安装成功&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;linux中unreal-engine安装&#34;&gt;linux中unreal Engine安装&lt;/h2&gt;
&lt;p&gt;安装依赖软件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp;
sudo apt-get install wget software-properties-common &amp;amp;&amp;amp;
sudo add-apt-repository ppa:ubuntu-toolchain-r/test &amp;amp;&amp;amp;
wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add - &amp;amp;&amp;amp;
sudo apt-add-repository &amp;quot;deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main&amp;quot; &amp;amp;&amp;amp;
sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ubuntu 18.04 依赖
&lt;code&gt;sudo apt-get install build-essential clang-8 lld-8 g++-7 cmake ninja-build libvulkan1 python python-pip python-dev python3-dev python3-pip libpng-dev libtiff5-dev libjpeg-dev tzdata sed curl unzip autoconf libtool rsync libxml2-dev git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进行交叉编译配置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-8/bin/clang++ 180 &amp;amp;&amp;amp;
sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-8/bin/clang 180
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后安装pip更新&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install --user setuptools &amp;amp;&amp;amp;
pip3 install --user -Iv setuptools==47.3.1 &amp;amp;&amp;amp;
pip install --user distro &amp;amp;&amp;amp;
pip3 install --user distro &amp;amp;&amp;amp;
pip install --user wheel &amp;amp;&amp;amp;
pip3 install --user wheel auditwheel
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;unreal-engine的安装&#34;&gt;Unreal Engine的安装&lt;/h2&gt;
&lt;p&gt;Unreal Engine的安装中有几个要点&lt;/p&gt;
&lt;p&gt;carla 0.9.12版本对应的是Unreal Engine4.26的安装&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要利用Epic账户和Github账户进行连接 才能在Github中访问项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --depth 1 -b carla https://github.com/CarlaUnreal/UnrealEngine.git ~/UnrealEngine_4.26&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在项目中进行安装:
&lt;code&gt;./Setup.sh &amp;amp;&amp;amp; ./GenerateProjectFiles.sh &amp;amp;&amp;amp; make&lt;/code&gt;
安装中出现的几个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要下载10G左右的dependence&lt;/li&gt;
&lt;li&gt;编译时会出现&lt;code&gt;crtbeginS.o&lt;/code&gt;的文件无法找到&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过查找编译过程的makefile 发现其对应的执行文件是&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;
对应的链接库地址是&lt;code&gt;UnrealEngine/Engine/Extras/ThirdPartyNotUE/SDKs/HostLinux/Linux_x64/v15_clang-8.0.1-centos7/x86_64-unknown-linux-gnu/usr/lib64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从gcc目录下 将缺少文件copy到该目录下 再更改其权限从root改成user
然后编译通过&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;carlar的安装&#34;&gt;carlar的安装&lt;/h2&gt;
&lt;p&gt;carla安装的问题主要是python的切换
carla 0.9.12 对应的是python3.7
所以需要设置python版本 还要保证pip的版本是python3.7 &lt;code&gt;pip3 -V&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;改变环境变量的方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo alias python3=python3.7&amp;gt;&amp;gt;~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;carla安装时有个要点:&lt;/strong&gt;
需要查看carla的对应版本 carla0.9.12对应python3.7 ubuntu18.04自带python3.6
所以需要将python3.6升级为python3.7
但是仍需要保持python正常&lt;/p&gt;
&lt;p&gt;需要将&lt;strong&gt;python3.7与pip3&lt;/strong&gt;&amp;amp; &lt;strong&gt;python2与pip&lt;/strong&gt;对应好后 再安装&lt;code&gt;carla.whl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;补充 grub有问题 导致无法进入系统&lt;/p&gt;
&lt;p&gt;可以利用新的ubuntu引导进行修复&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo su
sudo add-apt-repository ppa:yannubuntu/boot-repair
apt-get update
apt-get install boot-repair
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;随后使用过程中 又出现了问题 大致是UID 121问题&lt;/p&gt;
&lt;p&gt;问题没有解决 所有又重新来过&lt;/p&gt;
&lt;p&gt;但是 安装中仍然出现了不少问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nvidia驱动问题
仍然只能安装430驱动 安装470及以后的驱动 不能启动&lt;/li&gt;
&lt;li&gt;Vulkan问题
&lt;img src=&#34;https://s2.loli.net/2021/12/17/BKCUjpadit9mZ4W.png&#34; alt=&#34;test.png&#34;&gt;
在linux中安装ureal Engine后,通过编译,启动时,会报vulkan版本不匹配的问题 此问题会导致carla无法启动
后查证是在安装显卡驱动时,没有opengl的对应驱动 导致的
&lt;code&gt;sudo ./NVIDIA-Linux-x86_64-384.111.run –no-x-check  #安装驱动&lt;/code&gt;
在x_lib选择是选择no 问题解决.&lt;/li&gt;
&lt;li&gt;python版本切换带来pip切换的问题
在python切换后 &lt;code&gt;pip -V&lt;/code&gt;仍然无法切换
在系统变量路径上打开&lt;code&gt;/usr/bin/&lt;/code&gt;中对应的pip3 文件,然后将首行&lt;code&gt;/usr/bin/python3&lt;/code&gt;更改为&lt;code&gt;/usr/bin/python3.7&lt;/code&gt; 然后&lt;code&gt;pip -V&lt;/code&gt;显示正确&lt;/li&gt;
&lt;li&gt;ureal Engine问题
check dependence的文件可以拷贝出来 装机完成后继续使用 不用从网络更新&lt;/li&gt;
&lt;li&gt;libEGL.so和libGL.so的缺失问题
删除两个文件,将&lt;code&gt;libEGL.so.1&lt;/code&gt; cp为&lt;code&gt;libELG.so&lt;/code&gt; 通过编译&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;完成&lt;/p&gt;
&lt;p&gt;✿✿ヽ(°▽°)ノ✿&lt;/p&gt;
&lt;p&gt;(撒花)&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/carla/" term="carla" label="carla" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">MIT6</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/mit6.828_macos%E6%90%AD%E5%BB%BA/" />
            <id>https://chenbokaix250.github.io/tech/mit6.828_macos%E6%90%AD%E5%BB%BA/</id>
            <updated>2021-12-04T11:36:40&#43;08:00</updated>
            <published>2021-12-04T11:12:11&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Mac下安装MIT6.828 只有了解底层原理才能写好上层应用，曾经几度想要系统地学习……</summary>
            
                <content type="html">&lt;h1 id=&#34;mac下安装mit6828&#34;&gt;Mac下安装MIT6.828&lt;/h1&gt;
&lt;p&gt;只有了解底层原理才能写好上层应用，曾经几度想要系统地学习OS课程，尝试去看了《计算机操作系统》、《Operating Systems: Three Easy Pieces》、《UNIX环境高级编程》，均以半途而废告终。&lt;/p&gt;
&lt;p&gt;被大量的抽象概念所淹没，对操作系统如何工作，用户程序如何运行，与CPU等硬件如何交互等问题完全没有清晰的认识。所以这次选择了以动手实践为主的课程，直接对内核源码进行学习和扩展，一步步揭开OS的神秘面纱。&lt;/p&gt;
&lt;p&gt;MIT6.828: Operating System Engineering 在2019版本更名为6.S081，针对本科生教学，难度也有所下降，适合0基础学习，所需的计算机知识和C语言语法也十分基础。MIT用于教学的系统是xv6，一个简化的类unix系统，CPU平台使用的是RISC-V，是一种精指令集架构（RISC）。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;MacOS下需要事先准备好xcode和homebrew，我的系统版本是10.13.4，xcode版本是9.4。实验环境主要包括三个部分：&lt;/p&gt;
&lt;p&gt;RISC-V工具链： 包括一系列交叉编译的工具，用于把源码编译成机器码，如gcc，binutils，glibc等
QEMU模拟器： 用于在我们机器上(X86)模拟RISC-V架构的CPU
xv6源码： xv6操作系统源码&lt;/p&gt;
&lt;p&gt;一、RISC-V toolchain
risc-v工具链安装是坑最多的一步，如果按照官网教程来安装，大概率会因为下载过慢而失败，即使我把命令行翻了墙效果也并不好。教程中的安装命令是brew install riscv-tools，但我发现riscv-tools由几个部分组成，我们其实只需要riscv-gnu-toolchain。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/riscv-collab/riscv-gnu-toolchain&#34;&gt;riscv-gnu-toolchain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;riscv-gnu-toolchain源码有3个G大小，如果从github直接clone会极慢。所以我将源码上传到了baidu网盘&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1104aCZiIUAEcHONKcI8GKw&#34;&gt;baidu网盘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提取码ui4j&lt;/p&gt;
&lt;p&gt;下载后在源码根目录进行编译，大约需要30min：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./configure --prefix=/usr/local/opt/riscv-gnu-toolchain        #配置产物路径
make -j8                                            #编译
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装完成后需配置环境变量 配置文件是 &lt;code&gt;~/.bash_profile&lt;/code&gt;，在最后一行添加&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export PATH=&amp;quot;$PATH:/usr/local/opt/riscv-gnu-toolchain/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;务必记着 &lt;code&gt;source ~/.bash_profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在此命令行输入&lt;code&gt;riscv64-unknown-elf-gcc -v&lt;/code&gt; 显示版本信息则代表安装成功&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;二、QEMU&lt;/p&gt;
&lt;p&gt;下载qemu模拟处理器，我们编译生成的risc-v平台的机器码，需要通过模拟cpu执行。&lt;/p&gt;
&lt;p&gt;同样采用 &lt;a href=&#34;https://pan.baidu.com/s/1TB-HArqAHi_wTm8hxurIGg&#34;&gt;百度云&lt;/a&gt; 提取码 h7ud&lt;/p&gt;
&lt;p&gt;安装qemu相对比较容易&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./configure
sudo make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过&lt;code&gt;qemu-system-riscv64 --version&lt;/code&gt;的输出 检查是否成功安装&lt;/p&gt;
&lt;p&gt;三、xv6-riscv&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone git@github.com:mit-pdos/xv6-riscv.git
cd xv6-riscv
make qemu

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示
xv6 kernel is booting&lt;/p&gt;
&lt;p&gt;hart 1 starting
hart 2 starting
$
即成功启动xv6。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/opertaor/" term="Opertaor" label="Opertaor" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ROS分布式通信</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/ros%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/" />
            <id>https://chenbokaix250.github.io/tech/ros%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/</id>
            <updated>2021-11-25T09:28:37&#43;08:00</updated>
            <published>2021-11-24T18:20:59&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ROS分布式通信 在两台电脑之间完成ROS的通信 http://wiki.ros.org/cn/ROS/Tutorials/MultipleMachines 利用两台机器上使用ROS系统. 只需要……</summary>
            
                <content type="html">&lt;h1 id=&#34;ros分布式通信&#34;&gt;ROS分布式通信&lt;/h1&gt;
&lt;p&gt;在两台电脑之间完成ROS的通信&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wiki.ros.org/cn/ROS/Tutorials/MultipleMachines&#34;&gt;http://wiki.ros.org/cn/ROS/Tutorials/MultipleMachines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用两台机器上使用ROS系统.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需要一个master,只要在一个机器上运行&lt;/li&gt;
&lt;li&gt;所有节点都需要通过配置ROS_MASTER_URI连接到同一个master&lt;/li&gt;
&lt;li&gt;任意两台机器间任意两端都需要完整的/双向连接的网络&lt;/li&gt;
&lt;li&gt;每台机器都需要向其他机器广播其能解析的名字&lt;/li&gt;
&lt;li&gt;/ect/hosts 中设置IP和设备名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两台设备分别连接路由器 记录下对应的IP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A chen  B gao&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;分别在&lt;code&gt;/etc/hosts&lt;/code&gt;中写入对应通信设备
&lt;code&gt;192.168.1.103 chen&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;启动master&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以机器B为主机 启动roscore&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;启动listener&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在B机器上启动listener,并配置&lt;strong&gt;ROS_MASTER_URI&lt;/strong&gt;,这样就可以使用启动的master了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export ROS_MASTER_URI=http://gao:11311
rosrun rospy_tutorials listener.py
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;启动talker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在A机器上启动talker节点,同样配置ROS_MASTER_URI来使用B机器的master&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export ROS_MASTER_URI=http://hal:11311
rosrun rospy_tutorials talker.py
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;反向测试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以交换talker和listener节点 同样可以进行通信&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros/" term="ros" label="ros" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">转台操控</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E8%BD%AC%E5%8F%B0%E6%93%8D%E6%8E%A7/" />
            <id>https://chenbokaix250.github.io/tech/%E8%BD%AC%E5%8F%B0%E6%93%8D%E6%8E%A7/</id>
            <updated>2021-11-23T16:07:33&#43;08:00</updated>
            <published>2021-11-23T16:05:15&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Jetson NX 操作文档 nomachine控制nx: mac:192.168.2.99 nx: 192.168.2.32 username: a password:123456 一 关于转台控制: 1. 转台控制协议 2.……</summary>
            
                <content type="html">&lt;h1 id=&#34;jetson-nx-操作文档&#34;&gt;Jetson NX 操作文档&lt;/h1&gt;
&lt;p&gt;nomachine控制nx:&lt;/p&gt;
&lt;p&gt;mac:192.168.2.99
nx: 192.168.2.32&lt;/p&gt;
&lt;p&gt;username: a
password:123456&lt;/p&gt;
&lt;h2 id=&#34;一-关于转台控制&#34;&gt;一 关于转台控制:&lt;/h2&gt;
&lt;h3 id=&#34;1-转台控制协议&#34;&gt;1. 转台控制协议&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/09/01/QBRdqK6GCVTMlAj.png&#34; alt=&#34;协议.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-转台控制&#34;&gt;2. 转台控制&lt;/h3&gt;
&lt;p&gt;转台控制代码文件 &lt;code&gt;1_CAN_Send.py &lt;/code&gt;
文件路径：&lt;code&gt;~/Desktop/CAN_Control&lt;/code&gt;
控制命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo python3 ./1_CAN_Send.py &amp;lt;command&amp;gt; &amp;lt;data&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;转台协议中的指令代号，十进制，1 ~ 11；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转台协议中的内容， 十进制，如果不需要内容，则随便输入数据占位即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo python3 ./1_CAN_Send.py 10 0   #测距
sudo python3 ./1_CAN_Send.py 2 90   #方位角顺时针转90度
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;尽量不使用转台的俯仰速度，俯仰限位-20~80 到达限位后可能会断开CNA指令接收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回值为 &lt;code&gt;{‘Azimuth_Angle’:location,‘Pitch_Angle’:updown,‘Distance’:distance}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方位角 俯仰角 测距返回的距离&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;返回值可能会有延迟，可以发送命令后通过
&lt;strong&gt;查询指令&lt;/strong&gt;
&lt;code&gt;sudo python3 ./1_CAN_Send.py 11 0&lt;/code&gt; 确认&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如果需要电十字配合
&lt;code&gt;python3 ./0_Cross_Check.py &lt;/code&gt;
（文件路径 ~/Desktop/CAN_Control）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二-关于视觉部分&#34;&gt;二 关于视觉部分&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;启动监听&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文件路径：&lt;code&gt;/home/a/USB_CAN/USB_CAN_Test2/UDP_python/&lt;/code&gt;
文件： &lt;code&gt;server.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;控制命令： &lt;code&gt;python3 ./server.py&lt;/code&gt; 开启监听，收到工作指令后启动深度学习部分&lt;/p&gt;
&lt;p&gt;输出已经重定向到文件 &lt;code&gt;/home/a/USB_CAN/USB_CAN_Test2/Check/4_test_yolov5.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其他可能用到的命令：&lt;/p&gt;
&lt;p&gt;jtop 查看Jetson设备温度以及内存占用等信息。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">两种单片机编程思想</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E4%B8%A4%E7%A7%8D%E5%8D%95%E7%89%87%E6%9C%BA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/" />
            <id>https://chenbokaix250.github.io/tech/%E4%B8%A4%E7%A7%8D%E5%8D%95%E7%89%87%E6%9C%BA%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</id>
            <updated>2021-09-03T22:34:53&#43;08:00</updated>
            <published>2021-09-03T22:26:52&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">两种单片机编程思想 分层思想 分层的思想，并不是什么神秘的东西，事实上很多做项目的工程师……</summary>
            
                <content type="html">&lt;h1 id=&#34;两种单片机编程思想&#34;&gt;两种单片机编程思想&lt;/h1&gt;
&lt;h2 id=&#34;分层思想&#34;&gt;分层思想&lt;/h2&gt;
&lt;p&gt;分层的思想，并不是什么神秘的东西，事实上很多做项目的工程师本身自己也会在用。看了不少帖子都发现没有提及这个东西，然而分层结构确是很有用的东西，参透后会有一种恍然大悟的感觉。如果说我不懂LCD怎么驱动，那好办，看一下datasheet，参考一下阿别人的程序，很快就可以做出来。但是如果不懂程序设计的思想的话，会给你做项目的过程中带来很多很多的困惑。&lt;/p&gt;
&lt;p&gt;参考了市面上各种各样的嵌入式书籍，MCS-51，AVR ，ARM 等都有看过，但是没有发现有哪本是介绍设计思想的，就算有也是凤毛麟角。写程序不难，但是程序怎么样才能写的好，写的快，那是需要点经验积累的。结构化模块化的程序设计的思想，使最基本的要求。&lt;/p&gt;
&lt;p&gt;然而这么将这个抽象的概念运用到工程实践当中恩？那需要在做项目的过程中经历磨难，将一些东西总结出来，抽象升华为理论，对经验的积累和技术的传播都大有裨益。所以在下出来献丑一下，总结一些东西。&lt;/p&gt;
&lt;p&gt;就我个人的经验而谈，有两个设计思想是非常重要的。&lt;/p&gt;
&lt;p&gt;一个就是“时间片轮的设计思想”，这个对实际中解决多任务问题非常有用，通常可以用这个东西来判断一个人是单片机学习者，还是一个单片机工程师。这个必须掌握。（下文将介绍）。&lt;/p&gt;
&lt;p&gt;第二个就是“分层屏蔽的设计思想”即分层思想。下面用扫描键盘程序例子作为引子，引出今天说的东西。&lt;/p&gt;
&lt;h2 id=&#34;问题的提出&#34;&gt;问题的提出&lt;/h2&gt;
&lt;p&gt;单片机学习板一般为了简单起见，将按键分配的很好，例如整个 4*4 的键盘矩阵分配到 P1 口上面，8条控制线，刚好。这样的话程序也非常好写。只需要简单的：&lt;/p&gt;
&lt;p&gt;KEY_DAT= P1;&lt;/p&gt;
&lt;p&gt;端口的数据就读进来了。&lt;/p&gt;
&lt;p&gt;诚然，现实中没有这么好的事情。在实际的项目应用当中，单片机引脚的复用相当厉害，这跟那些所谓的单片机学习板就有很大的差别了。&lt;/p&gt;
&lt;p&gt;另外一个原因，一般设计来说，是“软件配合硬件”的设计流程，简单点说就是，先确定好硬件原理图，硬件布线，最后才是软件的开发，因为硬件修改起来比较麻烦，相对来说软件修改的时候比较好改。这个就是中国传统的阴阳平衡哲学原理。硬件设计和软件设计本来就是鱼和熊掌的关系，两者不可兼得。方便了硬件设计，很可能给写软件带来很大的麻烦。&lt;/p&gt;
&lt;p&gt;反过来说，方便了软件设计，硬件设计也会相当的麻烦。如果硬件设计和软件设计同时方便了，那只有两种可能，一是这个设计方案非常简单，二是设计师已经达到了一个非常高的境界。我们不考虑那么多情况，单纯从常用的实际应用的角度来看问题。&lt;/p&gt;
&lt;p&gt;硬件为了布线的方便，很多时候会可能将IO口分配到不同的端口上面，例如上面说的4*4键盘，8根线分别分配到 P0 P1 P2 P3 上面去了。那么，开发板的那些扫描键盘程序可以去见鬼了。怎么扫按键？我想起了我刚开始学习的时候，分成3段非常相似的程序，一个一个按键的扫描的经历......&lt;/p&gt;
&lt;p&gt;或许有人不甘心，“那些东西我花了很长时间学习的，也用的好好的，怎么能说一句不用就不用？”虽然有点残忍，但是我还是想说“兄弟，接受现实吧，现实是残酷的......”&lt;/p&gt;
&lt;p&gt;不过，人区别于低等动物的差别，是人会创造，在碰到困难的时候会想办法解决，于是我们开始了沉思......&lt;/p&gt;
&lt;p&gt;最后我们引入初中数学学的“映射”的概念来解决问题。基本思想就是，将不同端口的按键映射到相同端口上面。&lt;/p&gt;
&lt;h2 id=&#34;按键扫描程序如何分成3个层&#34;&gt;按键扫描程序如何分成3个层&lt;/h2&gt;
&lt;p&gt;最底层的是硬件层，完成端口扫描，20ms延时消抖，将端口的数据映射到一个KEY_DAT寄存器上面，KEY_DAT作为对上层驱动层的一个接口。&lt;/p&gt;
&lt;p&gt;中间的一层是驱动层，驱动层只对 KEY_DAT 寄存器的数值进行操作。简单点说，我们无论底层的硬件是怎么接线的，在驱动层都不需要关心，只需要关心 KEY_DAT 这个寄存器的数值是什么就可以了。这样出来的间接效果就是“屏蔽了底层硬件的差异”，所以驱动层写的程序就可以通用了。&lt;/p&gt;
&lt;p&gt;驱动层的另外一个功能是为了上层提供消息接口。我们用了类似window程序的消息的概念。这里可以提供一些按键消息，例如：按下消息，松开消息，长按键消息，长按键的时候的步进消息，等等。&lt;/p&gt;
&lt;p&gt;应用层属于最上层的程序，这里就是根据项目的不同分别写按键功能程序。它使用的是驱动层提供的消息接口。在应用层写程序的思想就是，我不管下层是怎么工作的，我只关心按键消息。有按键消息来的时候我就执行功能，没有消息来的时候，我就什么也不做。&lt;/p&gt;
&lt;p&gt;下面用一个简单的常用的例子，说明我们这个设计思想的用法。&lt;/p&gt;
&lt;p&gt;秒表调整时间的时候，要求按着某个按键不放，时间能连续的向上增加。这个东西很实用，实际的家电中用途很广泛。&lt;/p&gt;
&lt;p&gt;在看下面的东西之前，大家可以想一下，这东西难吗？相信大家都会很响亮的回答，“不难！！”，然而我再问：“这东西麻烦吗？”我相信很多人肯定会说“很麻烦！！” 这不禁让我想起开始学单片机的时候写这种按键的那程序，乱七八糟的结构。如果不相信的话，可以自己用51写一下哦，那样就更加能体会本文说的分层结构的优越性。&lt;/p&gt;
&lt;p&gt;项目要求：&lt;/p&gt;
&lt;p&gt;两个按键，分别分配在P10 和P20，分别是“加”“减”按键，要求长按键的时候实现连续加和连续减的功能。&lt;/p&gt;
&lt;p&gt;实战：&lt;/p&gt;
&lt;p&gt;假设按键上拉，没有按键的时候高电平，有按键的时候低电平，另外，为了突出问题，这里没有将延时消抖的程序写上去，在实际项目中应该加上。C语言函数参数的传递多种多样，这里作为例子，用了最简单的全局变量来传递参数，当然你也可以用 unsigned charReadPort(void)返回一个读键结果，甚至还可以 void ReadPort(unsigned char*pt) 用一个指针变量传递地址而达到直接修改变量的目的。方法是多种多样的，这个决定于每个人的程序风格。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始写硬件层程序，完成映射&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#defineKYE_MIN 0X01
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#defineKEY_PLUS 0X01
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;unsignedchar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KeyDat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;voidReadPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KEY_PLUS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;KeyDat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x01&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KEY_MIN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;KeyDat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x02&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;C语言应该很容易看懂吧？如果 KEY_PLUS 按下，P10口读到低电平，则 P1 &amp;amp;KEY_PLUS 的结果为 0 (xxxx xxx0 &amp;amp; 0000 0001)，满足if 的条件，进入KeyDat |=0x01 是将 KeyDat 的bit0 置一，也就是说，将 KEY_PLUS 映射到 KeyDat 的 bit0&lt;/p&gt;
&lt;p&gt;KEY_MIN是同样的道理映射到 KeyDat 的 bit1，如果 KeyDat 的 bit0 为 1 ，则说明 KEY_PLUS 按下，反则亦然。&lt;/p&gt;
&lt;p&gt;不需要想的很神秘，映射就是这么一回事。如果还有其他按键的话，用同样办法，将他们全部映射到 KeyDat 上面。&lt;/p&gt;
&lt;p&gt;2）驱动层程序编写&lt;/p&gt;
&lt;p&gt;如果将 KeyDat想象成 P1 口，那么这个跟学习板那标准的扫描程序不就是一样了吗？对的，这个就是底层映射的目的了。&lt;/p&gt;
&lt;p&gt;3）应用层程序编写&lt;/p&gt;
&lt;p&gt;根据消息，硬件层是必须分离出来，然而驱动层和应用层的要求就不那么严格了，事实上一些简单的项目没有必要将这两层分离开来，根据实际应用灵活应对就可以了。&lt;/p&gt;
&lt;p&gt;其实这样写程序是很方便移植的，根据板子的不同而适当的修改一下硬件层那个 ReadPort 函数就完成了，驱动层和应用层很多代码可以不经过修改直接用，很能提高开发效率的。当然这个按键程序会存在一定的问题，特别是遇到常闭按键和点触按键的混合使用的场合。这个留给大家自己去想了，反正问题总是能找到解决办法的，尽管方法有好有坏。&lt;/p&gt;
&lt;h2 id=&#34;时间片轮设计思想&#34;&gt;时间片轮设计思想&lt;/h2&gt;
&lt;p&gt;先用一个小例子引出今天的主题，想象一下，一个基本的家电控制板，肯定或多或少的会包含 ：LED 或者 数码管显示，按键， 继电器或者可控硅的输出 这3部分。数码管需要 10ms到20ms的动态扫描，按键也需要20ms左右的延时消抖，有没有意识到，其实这些时间是同时在进行的。&lt;/p&gt;
&lt;p&gt;回想一下咱们的教科书怎么教 按键 的延时消抖的？没错，死循环，绝对是原地踏步死循环，用指令来计时。这样很自然的引发一个问题，单片机在原地踏步死循环的话，那么其它的工作怎么办？如数码管的动态扫描怎么办？&lt;/p&gt;
&lt;p&gt;唯有等按键扫描之后再进行了，这样出来的效果，数码管肯定会闪烁的，扫描时间过长了，缩短按键消抖时间也不是解决办法，想象如果咱们还有其它很多工作也是同时做的呢？解决办法之一，就是今天的主题，分时扫描的思想。当然不会是唯一的办法，只不过俺一直在用，觉得这个是非常不错的思想，可以解决很多实际问题。大胆妄言一下，分时扫描的思想也是单片机编程最核心的思想了，信不信就由你自己判断了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想的实现过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一、用RTC中断来计时，RTC的中断时间短一点，我习惯是125us ，为了解红外遥控的码，这个时间是需要的。RTC计时是相当准的，尽量利用。&lt;/p&gt;
&lt;p&gt;第二、在RTC的中断服务程序里面放3个（数量自定）记时器（说白了就是计数器），我的习惯是 2ms 5ms 500ms 这3个是作为基准时间，提供给整个系统来调用的，所以必须准确一点，实际用示波器调一下就OK了，不难。&lt;/p&gt;
&lt;p&gt;第三、在主程序的循环里面放一个专门处理时间的子程序。（注：单片机是不会停的，永远在不断循环的跑，这个跟学校学的貌似有点不同，俺面试的时候被问过这个问题 ….） 将所有的时间处理都放在时间处理子程序里面做，这样是非常方便的，一个单片机系统最起码需要处理 10～20个不同的时间，也需要10～20个计时器了，而且相当多要求同时不同步工作的，如果每个都单独的话是相当的麻烦。&lt;/p&gt;
&lt;p&gt;第四、“程序是跑着来等，而不是站着来等”，这话看来有点玄，一个跟俺一起进去公司的工程师讨论的时候提到的这个问题，俺觉得这个也是分时系统的一个比较重要的思想，所以也这样叫，下面有细说。&lt;/p&gt;
&lt;p&gt;第五、下面用程序来说话，注释尽量详细，可以不用看代码，直接看注释就可以了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先中断服务程序部分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每 125us 中断一次，产生几个基准时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-54481d0a94f748d4f118eaf3548c891e_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（1） ref_2ms寄存器不断的减1，每次中断减1，一共减 16次，所以这里经过的时间是 125us × 16 ＝ 2ms，这个就是所谓的计时/计数器 了。这样就可以靠一个系统的RTC中断，来实现我们需要的很多个定时时间。&lt;/p&gt;
&lt;p&gt;（2）置2ms 计时结束标志，这个是提供给时间处理程序用的，这是一个计时器的框架，下面的5ms计时完全相同。&lt;/p&gt;
&lt;p&gt;这程序还用了一个块的框架，比较方便的，不过跟今天的主题无关，以后郁闷的时候再上来写写这个。上面的程序就是中断服务程序里面的计时器，分别定时 2ms 5ms 500ms，计时完毕溢出是flag_time 标志来记录的，程序通过读这个标志就可以知道定时的时间是否已经到了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面看那个统一的时间服务子程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-5767912ea310d3db823ca03cce1fbd39_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面用了按键20ms消抖的计时器作为例子，如果理解之后就可以发现，我们可以完全模仿那个计时器而在下面放很多很多的计时器，则每5ms 进来一下，每个计时器都同时在计数了，谁先计算完毕就先关掉自己，置相应的标志给其它程序调用，而对其它计时器完全没有影响！这样，我们可以在这里放很多个计时器了，一般来说，十来二十个是没有问题的，完全满足一个单片机系统对多个时间的需求了。&lt;/p&gt;
&lt;p&gt;单个计时器的结构很简单，先判断允许计时标志是否进入计时，然后一个专用的寄存器在加1或者减1，加/减相应的数值之后也就是相应的时间到了，关掉计时器，置相应需要用到的标志。&lt;/p&gt;
&lt;p&gt;到这里差不多了，俺们需要的时间都可以出来了，这样做是不是非常方便？咱们再来看看在这段时间里单片机在做了什么东西？只有中断计时够 5ms 或者 500ms ，那个溢出标志才有效，才能进入上面的计时程序，其它时间都是在做其它事情。而且进入上面的计时器的时候，可以看出，并不是在那里死循环，只是单纯的加减一下寄存器就退出了，整个过程耗时极其短，看代码不同吧，5us到 20us左右吧，对主程序的执行没有什么影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面看看具体怎么调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最开始谈过的按键的消抖时间处理问题，现在就用上面介绍的办法来看具体怎么解决问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-330376bbe9162bac2e957efff39caa35_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;大概是这样的：判断什么时候有健，没有的话跳出，有的话开始延时消抖的计时，第二次进来的时候直接由标志位控制过去判断时间时候够。&lt;/p&gt;
&lt;p&gt;同样是等待，这里就是最后一点所说的，咱这是跑着来等，不是站着来等。跟死循环定时比较，在没有定时到20ms 的这段时间里面单片机在做什么？死循环的话，肯定就是在原地等，什么都不做，而看看上面的程序，他只是判断是否定时够，具体的定时在统一的时间子程序里面做，判断没有到时间的话就跳出了，继续跑其它的程序，直到当时间到了，单片机判断出flag_delay,key_flow 符合条件，开始进入按键处理程序了，在这个期间，单片机都在做其它事情，只是一个主循环跑回来判断一次，所以单片机完全有空跑其它的程序，而没有将时间都耗在消抖上面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主程序循环体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-0c821786ecc2cb0d7a9f0eccc708766c_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个就是用到的循环体了，所有功能都做成子程序形式了，需要就挂上去就可以了，比较方便，这样一个总的循环体，单片机就是在不断的执行这个循环体，如果整个程序都采用上面说的分时扫的思想的话，一周循环回来的时间是相当短的，其实是不是跟电脑的思想有点像呢？&lt;/p&gt;
&lt;p&gt;电脑再快也并不是同时处理多个任务，而且每次处理一个，然后非常快的速度来循环处理，让我们感觉上他是在同时处理多个程序那样，我想，我最终想表达的思想也就是这个而已。有这个思想支撑下，单片机的程序变得比较容易上手了，剩下的只是集中精力去用程序来实现我们的思想而已，当然，这里只是说一种可行的办法而已，不是说只有这种办法。&lt;/p&gt;
&lt;p&gt;编写程序是一门艺术，写出来很容易，写得精巧却很难。&lt;/p&gt;
&lt;h2 id=&#34;end&#34;&gt;END&lt;/h2&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/" term="嵌入式" label="嵌入式" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Tesla技术栈</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tesla%E6%8A%80%E6%9C%AF%E6%A0%88/" />
            <id>https://chenbokaix250.github.io/tech/tesla%E6%8A%80%E6%9C%AF%E6%A0%88/</id>
            <updated>2021-08-26T11:28:20&#43;08:00</updated>
            <published>2021-08-26T11:23:16&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Tesla AI DAY 技术情况 特斯拉感知 通过8个摄像头的输入 得到三维向量空间 Tesla Camera的分辨率 1280*960……</summary>
            
                <content type="html">&lt;h1 id=&#34;tesla-ai-day-技术情况&#34;&gt;Tesla AI DAY 技术情况&lt;/h1&gt;
&lt;h2 id=&#34;特斯拉感知&#34;&gt;特斯拉感知&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/25/Jb4XeHhYoBU3kw1.png&#34; alt=&#34;Tesla.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过8个摄像头的输入 得到三维向量空间&lt;/p&gt;
&lt;p&gt;Tesla Camera的分辨率 1280*960&lt;/p&gt;
&lt;p&gt;信息架构借鉴了人脑视觉结构的设计&lt;/p&gt;
&lt;p&gt;主干网络利用regnet进行设计 很好的平衡了延迟和准确性.
&lt;img src=&#34;https://i.loli.net/2021/08/25/Zku7mVMX5O2P8Ql.png&#34; alt=&#34;截屏2021-08-25 上午9.09.50.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;RegNet特征提取后,通过一个BiFPN进行特征融合
然后特征即可用于做分类和回归
&lt;img src=&#34;https://i.loli.net/2021/08/25/pNbWS6toCjUl3i9.png&#34; alt=&#34;截屏2021-08-25 上午9.11.24.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过特征融合,衔接一个multi-scale features 可以做多任务的学习
其网络是&lt;strong&gt;HydraNets&lt;/strong&gt;
通过一个主干网络 分支成为多个头部&lt;/p&gt;
&lt;p&gt;这种网络架构的好处:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相互的特征共享&lt;/li&gt;
&lt;li&gt;对头部的微调可以单独进行&lt;/li&gt;
&lt;li&gt;设立Cache,加速Fine-Tuning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过一个backbone可以做不同的Task 🐂🍺&lt;/p&gt;
&lt;p&gt;Fine-Tune的概念&lt;/p&gt;
&lt;p&gt;介绍了一个相机检测路沿的例子&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/25/KdclZtoUwmS5pek.png&#34; alt=&#34;截屏2021-08-25 上午9.21.37.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Per-Camera Detection Then Fusion&lt;/strong&gt;的方式使得检测不够连续&lt;/p&gt;
&lt;p&gt;通过多摄像头建立Vector Space,然后利用空间向量进行Predictions&lt;/p&gt;
&lt;p&gt;其中有两个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何将图像特征转换为空间向量特征&lt;/li&gt;
&lt;li&gt;空间向量的预测需要空间向量的数据集&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;image_space -&amp;gt; vector space
图像上看到的点在鸟瞰坐标下如何对应的问题  对应结果是为了得到Vector space Head Edges&lt;/p&gt;
&lt;p&gt;利用transformer整合多个Camera的特征
因为特征是不同车辆在不同摄像头下拍摄的 所以需要校准,这种校准用到了positional encoder
现实重建了一个虚拟相机 根据IMU的数据进行标定&lt;/p&gt;
&lt;p&gt;栅格地图由图像生成 将图像反算3D 能在3D栅格地图上有效得到路沿的识别结果&lt;/p&gt;
&lt;p&gt;detect before fusion 的方法 导致车道线 障碍物的检测不够连续
通过先融合feature,在prediction的方法,Vector Space Edges and Lines会更有效的串联多个图片的信息.&lt;/p&gt;
&lt;p&gt;Detections:SingleCam -&amp;gt; MultiCam&lt;/p&gt;
&lt;p&gt;Detections采用了相同的方式 从Single-Cam演变到Multi-Cam 更多的摄像头相互配合 会使得检测的视角更广 物体更平顺 结果更为优秀&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我认为的大招
Video Neural Net Architecture模块
&lt;img src=&#34;https://i.loli.net/2021/08/25/rjDVwYInkuv7yAq.png&#34; alt=&#34;截屏2021-08-25 上午9.59.15.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过queue的列队插入 使得模型具有&lt;strong&gt;memory&lt;/strong&gt;功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/25/ugcYPVpsIhSHj1M.png&#34; alt=&#34;截屏2021-08-25 下午4.41.58.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过参考记忆,可以有效应对遮挡问题 🐂&lt;/p&gt;
&lt;p&gt;应用方向 通过Spatial RNN做路径的预测,完全摆脱建图&lt;/p&gt;
&lt;p&gt;应用方向2 提高对临时遮挡物体识别的鲁棒性&lt;/p&gt;
&lt;p&gt;应用方向3 咱物体识别上也更为流程 特别是距离估计上 十分顺滑&lt;/p&gt;
&lt;p&gt;整个Tesla感知层面的架构
&lt;img src=&#34;https://i.loli.net/2021/08/25/PKAISj3a2M9URzv.png&#34; alt=&#34;截屏2021-08-25 上午10.29.12.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;大致架构 原始数据输入,链接一个校正层校准相机数据,然后将数据投入到一个虚拟相机中,然后将数据传送到RegNet中,处理成不同尺度的features,将多尺度的信息在BiFPN中进行融合,通过转换模块将其表示为向量空间,将时间或空间中的特征序列化为Feature queue,然后输入到视频处理模块,处理后的features,进入树干和头部分支,去完成不同的任务.
这个网络也是从图片识别的简单网络,通过三四年的迭代发展而来的.&lt;/p&gt;
&lt;p&gt;最大的创新点是在时间和空间上进行了融合&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/25/Mnuo1d9BEUvPOTl.png&#34; alt=&#34;截屏2021-08-25 下午12.18.31.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;整个特斯拉技术栈的架构 后期视频逐步看完后更新.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;RegNet 论文 &lt;Designing Network Design Spaces&gt;&lt;/li&gt;
&lt;li&gt;BiFPN  论文 &amp;lt; EfficientDet: Scalable and Efficient Object Detection&amp;gt;&lt;/li&gt;
&lt;li&gt;HydraNets 论文 &amp;lt;Mullapudi_HydraNets_Specialized_Dynamic_CVPR_2018_paper&amp;gt;&lt;/li&gt;
&lt;li&gt;Heuristic neural net 论文 &lt;Heuristic principles for the design of artificial neural networks&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">多目标跟踪</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E5%A4%9A%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA/" />
            <id>https://chenbokaix250.github.io/tech/%E5%A4%9A%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA/</id>
            <updated>2021-08-24T10:07:38&#43;08:00</updated>
            <published>2021-08-24T10:07:12&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">多目标跟踪 简介 多目标跟踪 MOT(multi-object Tracking) 在自动驾驶场景中,往往需要对众多目标同时进行跟踪. 多目标……</summary>
            
                <content type="html">&lt;h1 id=&#34;多目标跟踪&#34;&gt;多目标跟踪&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;多目标跟踪 MOT(multi-object Tracking)
在自动驾驶场景中,往往需要对众多目标同时进行跟踪.
多目标的问题是,会产生新目标进入与旧目标消失的问题.在单目标跟踪中,往往使用给定的初始框,在后续视频帧中对初始框内的物体进行位置预测.而多目标跟踪算法,大部分都是不考虑初始框的,原因就是上面的目标消失与产生问题.取而代之的跟踪策略是TBD(Tracking By Detection).即在每一帧进行目标检测,再利用目标检测的结果来进行目标跟踪.这一步称之为&lt;strong&gt;数据关联(Data Assoiation)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多目标跟踪算法的一种分类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TBD(Tracking-by-Detecton)&lt;/li&gt;
&lt;li&gt;DFT(Detection-Free Tracking)
基于检测的多目标跟踪与基于初始框无需检测器的多目标跟踪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-d019efc620de0f126e4f58a676d2676c_720w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一种目标跟踪算法的分类方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线跟踪(Online)&lt;/li&gt;
&lt;li&gt;离线跟踪(Offline)
在Online跟踪中,使用当前帧及之前帧的信息来进行当前帧的跟踪.
Offline跟踪中则没有了这个限制,我们对每一帧的预测,都可以使用整个视频的信息,这样更容易获得一个全局最优解.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-5c16a78fb3b97614e7aa62601c4e4940_720w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图为Online 下图为Offline&lt;/p&gt;
&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;
&lt;p&gt;Trajectory(轨迹):一条轨迹对应这一个目标在一个时间段内的位置序列
Tracklet(轨迹段):行程Trakectory过程中的估计片段.完整的Trajectory是由属于同一物理目标的Tracklets构成的.
ID switch(ID切换):对于同一个目标,由于跟踪算法误判,导致其ID发生切换的次数称为 ID sw.跟踪算法中离线的ID switch应该为0.&lt;/p&gt;
&lt;h2 id=&#34;评价指标&#34;&gt;评价指标&lt;/h2&gt;
&lt;p&gt;对于多目标跟踪,最主要的评价指标是MOTA.这个指标综合三个因素:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FP  False Postive 误检测的目标数量&lt;/li&gt;
&lt;li&gt;FN  False Negetive 未检出的真实目标数量&lt;/li&gt;
&lt;li&gt;IDsw 同一目标发生ID切换的次数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MOTA越高,代表Tracker综合性能越好,上限100,下限负无穷.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sort&#34;&gt;SORT&lt;/h2&gt;
&lt;p&gt;现在多目标跟踪算法的效果,与目标检测的结果息息相关,因为主流的多目标跟踪算法都是TBD策略.&lt;/p&gt;
&lt;p&gt;SORT论文中强调:更换检测器可以将跟踪效果提高到18.9个百分点.花哨的跟踪算法,有时也不如针对性训练的检测器来的效果好.&lt;/p&gt;
&lt;p&gt;SORT的特点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用强大的CNN检测器的检测结果来进行多目标跟踪&lt;/li&gt;
&lt;li&gt;使用基于卡尔曼滤波与匈牙利算法的方法来进行跟踪&lt;/li&gt;
&lt;li&gt;开源代码为MOT领域提供了新的baseline&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DeepSort是SORT的改进,整体框架没有大改,延续了卡尔曼滤波加匈牙利算法的思路,在这个基础上增加了DeepAssocaition Metric.&lt;/p&gt;
&lt;h2 id=&#34;匈牙利算法km算法&#34;&gt;匈牙利算法&amp;amp;KM算法&lt;/h2&gt;
&lt;p&gt;匈牙利算法与HM算法都是为了求解二分图的最大匹配问题.&lt;/p&gt;
&lt;h3 id=&#34;二分图&#34;&gt;二分图&lt;/h3&gt;
&lt;p&gt;分为两组:U,V.其中U上的点不能相互连通,只能连去V中的点,同理,V中的点不能相互连通,只能连去U中的点.这样,就叫做二分图.
二分图理解为视频中连续两帧中的所有检测框,第一帧所有检测框的集合称为U,第二帧所有检测框的集合称为V.同一帧的不同检测框不会为同一个目标,所以不需要互相关联,相邻两帧的检测框需要相互连通,最终将相邻两帧的检测框尽量完美地两两匹配起来.
求解这个问题的最优解就要用到匈牙利算法或者KM算法.&lt;/p&gt;
&lt;p&gt;KM算法解决的是带权二分图的最优匹配问题.&lt;/p&gt;
&lt;p&gt;两个MOT中值得关注的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何测量在视频帧中各目标之间的相似性&lt;/li&gt;
&lt;li&gt;如何基于第一点测量出的相似性,进行视频中目标ID的恢复&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用重识别(Re-Identification/ReID)的网络特征抽取器.行人重识别算法通常提取行人图像特征,对特征进行距离度量,从而判断是否是同一个人.&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/sort/" term="SORT" label="SORT" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">进程和线程和协程的区别</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/" />
            <id>https://chenbokaix250.github.io/tech/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
            <updated>2021-08-11T15:29:42&#43;08:00</updated>
            <published>2021-08-11T15:09:50&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">进程和线程、协程的区别 协程是最近流行起来的.python中有协程库gevent,py……</summary>
            
                <content type="html">&lt;h1 id=&#34;进程和线程协程的区别&#34;&gt;进程和线程、协程的区别&lt;/h1&gt;
&lt;p&gt;协程是最近流行起来的.python中有协程库gevent,py web框架tornado中也用了gevent封装好的协程.&lt;/p&gt;
&lt;h2 id=&#34;1概念&#34;&gt;1.概念&lt;/h2&gt;
&lt;h3 id=&#34;1进程&#34;&gt;1.进程&lt;/h3&gt;
&lt;p&gt;进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。&lt;/p&gt;
&lt;h3 id=&#34;2线程&#34;&gt;2.线程&lt;/h3&gt;
&lt;p&gt;线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。&lt;/p&gt;
&lt;h3 id=&#34;3协程&#34;&gt;3.协程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;协程是一种用户态的轻量级线程&lt;/strong&gt;，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。&lt;/p&gt;
&lt;h2 id=&#34;2区别&#34;&gt;2.区别&lt;/h2&gt;
&lt;h3 id=&#34;1进程多与线程比较&#34;&gt;1.进程多与线程比较&lt;/h3&gt;
&lt;p&gt;线程是指进程内的一个执行单元,也是进程内的可调度实体。线程与进程的区别:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间&lt;/li&gt;
&lt;li&gt;资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源&lt;/li&gt;
&lt;li&gt;线程是处理器调度的基本单位,但进程不是&lt;/li&gt;
&lt;li&gt;二者均可并发执行&lt;/li&gt;
&lt;li&gt;每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2协程多与线程进行比较&#34;&gt;2.协程多与线程进行比较&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。&lt;/li&gt;
&lt;li&gt;线程进程都是同步机制，而协程则是异步&lt;/li&gt;
&lt;li&gt;协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3进程和线程协程在python中的使用&#34;&gt;3.进程和线程、协程在python中的使用&lt;/h2&gt;
&lt;p&gt;1、多进程一般使用multiprocessing库，来利用多核CPU，主要是用在CPU密集型的程序上，当然生产者消费者这种也可以使用。多进程的优势就是一个子进程崩溃并不会影响其他子进程和主进程的运行，但缺点就是不能一次性启动太多进程，会严重影响系统的资源调度，特别是CPU使用率和负载。&lt;/p&gt;
&lt;p&gt;2、多线程一般是使用threading库，完成一些IO密集型并发操作。多线程的优势是切换快，资源消耗低，但一个线程挂掉则会影响到所有线程，所以不够稳定。现实中使用线程池的场景会比较多.&lt;/p&gt;
&lt;p&gt;3、协程一般是使用gevent库，当然这个库用起来比较麻烦，所以使用的并不是很多。相反，协程在tornado的运用就多得多了，使用协程让tornado做到单线程异步，据说还能解决C10K的问题。所以协程使用的地方最多的是在web应用上。&lt;/p&gt;
&lt;p&gt;IO密集型一般使用多线程或者多进程，CPU密集型一般使用多进程，强调非阻塞异步并发的一般都是使用协程，当然有时候也是需要多进程线程池结合的，或者是其他组合方式。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/base/" term="Base" label="Base" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Linux下的nohup命令</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/linux%E4%B8%8B%E7%9A%84nohup%E5%91%BD%E4%BB%A4/" />
            <id>https://chenbokaix250.github.io/tech/linux%E4%B8%8B%E7%9A%84nohup%E5%91%BD%E4%BB%A4/</id>
            <updated>2021-07-27T09:33:38&#43;08:00</updated>
            <published>2021-07-27T08:34:31&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Linux nohup 命令 nohup英文全称 no hang up(不挂起),用于在系统后台卜卦断地运行命令,退出终……</summary>
            
                <content type="html">&lt;h1 id=&#34;linux-nohup-命令&#34;&gt;Linux nohup 命令&lt;/h1&gt;
&lt;p&gt;nohup英文全称 no hang up(不挂起),用于在系统后台卜卦断地运行命令,退出终端不会影响程序的运行&lt;/p&gt;
&lt;p&gt;nohup命令,在默认情况下,会输出一个名为nohup.out的文件到当前目录下,如果当前目录的nohup.out文件不可写,输出重定向到&lt;code&gt;$HOME/nohup.out&lt;/code&gt;文件中.&lt;/p&gt;
&lt;h2 id=&#34;使用权限&#34;&gt;使用权限&lt;/h2&gt;
&lt;p&gt;语法格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nohup Command [Arg ...] [&amp;amp;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数说明&lt;/p&gt;
&lt;p&gt;Command:要执行的命令
Arg:一些参数,可以指定输出文件
&amp;amp;:让命令在后台执行,终端退出后命令仍旧执行.&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;的解释:
将标准错误2重定向到标准输出&amp;amp;1,标准输出&amp;amp;1再被重定向输入到&lt;code&gt;.log&lt;/code&gt;文件中.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0-stdin(standard input,标准输入)&lt;/li&gt;
&lt;li&gt;1-stdout(standard output,标准输出)&lt;/li&gt;
&lt;li&gt;2-stderr(standard error,标准错误输出)&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/linux/" term="Linux" label="Linux" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Udp通信</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/udp%E9%80%9A%E4%BF%A1/" />
            <id>https://chenbokaix250.github.io/tech/udp%E9%80%9A%E4%BF%A1/</id>
            <updated>2021-07-22T16:12:21&#43;08:00</updated>
            <published>2021-07-22T16:06:06&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">python实现udp图片传输 首先要了解UDP的工作模式 对于服务器，首先绑定IP和端……</summary>
            
                <content type="html">&lt;h1 id=&#34;python实现udp图片传输&#34;&gt;python实现udp图片传输&lt;/h1&gt;
&lt;p&gt;首先要了解UDP的工作模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/17/RoI4NcZOVWsUGLF.jpg&#34; alt=&#34;a.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于服务器，首先绑定IP和端口，本机测试的时候可以使用127.0.0.1是本机的专有IP，端口号 大于1024的是自定义的，所以用大于1024的端口号，然后接收客户端数据，处理，返回
对于客户端，UDP不用建立连接，只管发送不管接收到没有，所以可以直接对服务器的IP地址和端口号发送信息，然后等待应答。&lt;/p&gt;
&lt;p&gt;注意传输的数据是二进制流数据，所以要找方法把需要传输的数据编码成二进制码流，传过去之后再解码即可，这里我用到了opencv读取图片成numpy的array格式，然后编码，传输，最后接到之后再解码。&lt;/p&gt;
&lt;p&gt;先说一次性传输整个图片，这个思路就是接受的参数设置很大，而且图片比较小的情况，实现比较简单&lt;/p&gt;
&lt;p&gt;首先是服务器脚本，实现了接收、显示、应答&lt;/p&gt;
&lt;h2 id=&#34;udp_severpy&#34;&gt;udp_sever.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;


&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Bind UDP on 9999...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;65535&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Received from &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromstring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imdecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IMREAD_COLOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;get message!!!&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destroyAllWindows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;客户端脚本,实现了发送图片,接收应答&lt;/p&gt;
&lt;h2 id=&#34;udp_clientpy&#34;&gt;udp_client.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;b.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imencode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tostring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 发送数据:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 接收数据:&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;为了方便理解放一下图片转到二进制再转回图片的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt; 

&lt;span class=&#34;c1&#34;&gt;#img = cv2.imread(&amp;#39;a.png&amp;#39;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;b.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imencode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;str_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tobytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# a.png 813611&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# b.jpg 62470&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#nparr = np.fromstring(str_encode,np.uint8)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frombuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imdecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IMREAD_COLOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destroyAllWindows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;分批传输图片&lt;/p&gt;
&lt;p&gt;搞了好久终于知道怎么分批传输图片了，首先要知道需要传的图片需要多长的内存，不然不知道什么时候停止接收，这样就要考虑加一个文件头，告诉服务器要接受多长的码流。&lt;/p&gt;
&lt;p&gt;实现思路是，首先客户端要先发送一个文件头，包含了码流的长度，用一个long int型的数，先用struct.pack打包，发过去，然后循环发送图片的码流即可&lt;/p&gt;
&lt;p&gt;接着服务器先接到文件头，确认图片码流的长度，然后循环接收确定长度的码流，最后再解码成图片即可&lt;/p&gt;
&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;p&gt;首先是客户端脚本&lt;/p&gt;
&lt;h2 id=&#34;udp_clientpy-1&#34;&gt;udp_client.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;struct&lt;/span&gt; 


&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a.png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imencode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tostring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#定义头文件,打包成结构体&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;fhead&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 发送文件头&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fhead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#循环发送图片码流&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 接收应答数据:&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#关闭&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后是服务器接收&lt;/p&gt;
&lt;h2 id=&#34;udp_severpy-1&#34;&gt;udp_sever.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;struct&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Bind UDP on 9999...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#print(&amp;#34;ok&amp;#34;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;fhead_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calcsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#fhead_size = 65535&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fhead_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#print(addr)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;data_total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;#print(len(data))&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;#print(&amp;#39;!!!&amp;#39;)&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data_total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Reveived&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromstring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imdecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IMREAD_COLOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;get message!!!&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destroyAllWindows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;上面是基本的实现，经过一番学习我终于掌握了UDP传输的精髓&lt;/p&gt;
&lt;p&gt;首先是确定客户端和服务器的运行机制&lt;/p&gt;
&lt;p&gt;客户端：先定义一个socket对象，不用绑定，然后指定IP地址和端口发送消息，然后如果用了recvfrom就会一直阻塞等待应答（这个很有用，作用就是保证对方确实收到，再发新的消息，不用在考虑发送频率的问题了），前面加一个while True就可以循环发送了，如果涉及到很大的消息，可以拆分发送，技巧是先发送一个文件头高速服务器要发的内容有多大（文件头这里建议使用stuct库，看前面例程），然后随后发送文件内容，保证要循环发送，因为每次发送，对面就当发了一次，假如发了2048字节的内容，对面设置的每次收1024，那么剩下的1024就被丢掉了，而不是等待下次继续接收。还有就是发送的是二进制的码流，目前我用到的转换成码流的方法有：图片用opencv,先imencode 转成二进制，然后再转成numpy，然后再tostring。文件头这种，需要确切知道占多大内存，使得服务器好接收的，用了stuct库，里面的pack,unpack,calcsize三个函数非常好用，发送的时候把数据pack一下就能发送了。列表、字典等等，作为文件内容，用到了json，有点万能，先json.dumps转换成json类型，然后再encode编码成二进制即可拿去发送了。&lt;/p&gt;
&lt;p&gt;服务器：先定义一个socket对象，绑定IP地址和端口，让客户端可以找到，然后等待接收消息，收到消息之后处理消息，应答，配合客户端的recvfrom，保证接收频率一致，服务器为了保证始终接收消息，一定会有一个while True,接收到的消息是二进制码流，因此要进行解码。针对上面讲的编码方式解码，其实就是编码方式的反向操作：图片，用opencv解码，先是np.fromstring，然后再cv2.imdecode(data, cv2.IMREAD_COLOR)。对于接收文件头，这里有点技巧，用struct.calcsize确定文件头长度，然后只接收这个长度的码流，再unpack出来即可，这里unpack是个元组。对于json，解码就是先decode,再json.loads即可，是上面编码的反向操作。&lt;/p&gt;
&lt;p&gt;然后再高端一点的操作，同一个脚本多进程工作，这就要用到了threading.Thread创建多个进程，思路就是新建多个服务器，然后分配给不同的进程，他们的IP地址可以一样，端口号不一样就行，然后就可以在同一个脚本里并行工作了，这里不同于TCP，因为UDP不需要建立连接&lt;/p&gt;
&lt;p&gt;然后附上我实现的源码，服务器脚本里有两个进程，一个接收客户端1的图片，另一个接收客户端2的列表&lt;/p&gt;
&lt;p&gt;服务器&lt;/p&gt;
&lt;h2 id=&#34;udp_serverpy&#34;&gt;udp_server.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;struct&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;threading&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 设置IP地址,两个服务器端口号&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dest_ip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;msg_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6666&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 服务器1的处理/应答函数/接收图片/显示/应答&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;receive_img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 接收数据&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fhead_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calcsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fhead_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data_total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;recvd_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_size&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;data_total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Received&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromstring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imdecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nparr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IMREAD_COLOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;get message!!!&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destroyAllWindows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;receive_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;msg_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recvfrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;msg_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;get the msg&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest_ip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest_ip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;t_recimg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;receive_img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rec_img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;t_recmsg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;receive_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rec_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#开始进程&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;t_recimg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;t_recmsg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;程序正常运行!!!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;客户端&lt;/p&gt;
&lt;h2 id=&#34;udp_client_1py&#34;&gt;udp_client_1.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#  -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;struct&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VideoCapture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#cap.set(3,320)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#cap.set(4,240)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isOpened&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imencode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_encode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tostring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;fhead&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fhead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:],(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)],(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;udp_client_2py&#34;&gt;udp_client_2.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#  -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;struct&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;send_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;target_ip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;target_port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6666&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;data_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dumps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;send_msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data_str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_ip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上就是本文的全部内容，希望对大家的学习有所帮助。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;udp发送中的一个问题&#34;&gt;UDP发送中的一个问题&lt;/h2&gt;
&lt;p&gt;试图通过UDP发送数据,但是显示错误:
&lt;code&gt;socket.error: [Errno 40] Message too long&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mac实际上能发送的最大字长是9253字节.OSX将最大UDP包限制为9216字节.
可以使用终端中的命令进行更改:
&lt;code&gt;sudo sysctl -w net.inet.udp.maxdgram=65535&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更改后,则不会出现限制的错误问题&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python-udp/" term="python udp" label="python udp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">NML详解</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/nml%E8%AF%A6%E8%A7%A3/" />
            <id>https://chenbokaix250.github.io/tech/nml%E8%AF%A6%E8%A7%A3/</id>
            <updated>2021-07-07T13:40:53&#43;08:00</updated>
            <published>2021-07-07T12:32:17&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1.NML 工程安装 NML是RCS库中的一部分，NML英文全称是neutral message languag……</summary>
            
                <content type="html">&lt;h1 id=&#34;1nml-工程安装&#34;&gt;1.NML 工程安装&lt;/h1&gt;
&lt;p&gt;NML是RCS库中的一部分，NML英文全称是neutral message language。它是由美国国家标准与技术研究院（NIST,National Institute of Standard and Technology）针对分布式通信而设计的一种通信协议与方式。&lt;/p&gt;
&lt;h2 id=&#34;11-rcs安装&#34;&gt;1.1 RCS安装&lt;/h2&gt;
&lt;p&gt;以下方法针对的是Ubuntu系统&lt;/p&gt;
&lt;p&gt;确认依赖环境：boost（常用版本有1.54,1.55和1.58）和Java，如果没有Java，需要按以下步骤安装java。&lt;/p&gt;
&lt;p&gt;此处安装java版本为jdk1.8.0_281&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://blog.csdn.net/mucaoyx/article/details/82949450&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置java环境变量&#34;&gt;配置java环境变量&lt;/h3&gt;
&lt;p&gt;这里是将环境变量配置在&lt;code&gt;etc/profile&lt;/code&gt;，即为所有用户配置JDK环境，使用命令&lt;code&gt;sudo gedit /etc/profile&lt;/code&gt;打开/etc/profile文件，在末尾添加以下几行文字：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#set java environment

export JAVA_HOME=/usr/lib/jdk/jdk1.8.0_281

export JRE_HOME=${JAVA_HOME}/jre    

export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib     

export PATH=${JAVA_HOME}/bin:$PATH 

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;source /etc/profile &lt;/code&gt;使配置立马生效&lt;/p&gt;
&lt;p&gt;java安装完成后，建立软连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;update-alternatives --install /usr/bin/java
java /opt/jdk1.7.0_79/bin/java &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;
update-alternatives --install
/usr/bin/javac javac /opt/jdk1.7.0_79/bin/javac &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;
update-alternatives --install /usr/bin/jar
jar /opt/jdk1.7.0_79/bin/jar &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;测试 &lt;code&gt;java -version&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-2-nml安装&#34;&gt;1. 2 NML安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://www.cnblogs.com/AIpower/p/12743445.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://www.isd.mel.nist.gov/projects/rcslib/rcslib-2014.04.29.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RCS安装包&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解压安装包&lt;/li&gt;
&lt;li&gt;执行下列语句&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd rcslib-2014.04.29(对应安装包名字)
./configure -enable-ALLJAVA
[修改Makefile中的prefix选项为 /opt/rcslib/build，此处将生成lib与include]

[注意在Ubuntu 18.04中会报“unable to find string literal operator”错误，
需要在该文件(cms_xml_up.cc)中定位到此语句，并将该语句中“”引号的前后各加一个空格:xmlXsdType(xsdNs,\space &amp;quot;xsd:&amp;quot; \space X)]

make 
make check
make install(可能需要root权限)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;nml的配置&#34;&gt;NML的配置&lt;/h1&gt;
&lt;p&gt;NML配置文件主要包括四个部分，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;消息&lt;/li&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.注释&lt;/p&gt;
&lt;p&gt;注释以‘#’开头，可以看到有一行以#开头，&lt;/p&gt;
&lt;p&gt;为了更好的表示消息的写法，特意加了该注释&lt;/p&gt;
&lt;p&gt;2.消息（buffer）&lt;/p&gt;
&lt;p&gt;消息对应在&lt;code&gt;src/message&lt;/code&gt;里面的文件，只有定义了消息的头文件，才能够被其他程序调用。只有此处配置正确，才能保证消息的正常收发。&lt;/p&gt;
&lt;p&gt;对于代表buffer的&lt;code&gt;.hh&lt;/code&gt;文件,可用Makefile文件对message进行修改和编译,每次修改&lt;code&gt;.hh&lt;/code&gt;文件都需要重新编译,编译生成新的&lt;code&gt;/Test/lib/libTest.a&lt;/code&gt;文件.&lt;/p&gt;
&lt;p&gt;Message名称以n结尾,如MessageAn.hh MessageBn.hh MessageCn.hh等.这是在message文件夹里的Makefile中约定的,方便统一管理.而在&lt;code&gt;.nml&lt;/code&gt;配置文件中,我们将后缀n略去.&lt;/p&gt;
&lt;p&gt;消息以B开头&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何编写和定义消息&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Buffers
# Name Type Host size neut RPC# buffer$ MP ...
B MessageA SHMEM 172.23.100.205 1024 0 * 1001 * 50001 bsem=5421 TCP=5421 xdr
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Name是消息名称,对应到&lt;code&gt;src/message&lt;/code&gt;里面的文件.&lt;/li&gt;
&lt;li&gt;Type表示的是消息的使用形式,包含三种方式:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;SHMEM(share memory)          TCP&lt;/li&gt;
&lt;li&gt;GLOBMEM(global memory)    UDP&lt;/li&gt;
&lt;li&gt;LOCMEM(local memory)         RPC&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Host表示的是buffer所在的主机名,如果消息只是在同一台机器上传递,则最好写localhost.需要特别注意的是，如果是不同机器传递某一个消息，需要给消息写一个server，来负责传递，则这里要写的是该消息的server所在的主机名（或主机IP地址）。这里可以看到，host1和host4是有通信关系的，很多消息都在这两台机子中间传递。因此， 规划模块在host1上，与之相关的server也在host1上，因此此处的Host也是写host1。&lt;/li&gt;
&lt;li&gt;size表示的是消息的大小，单位字节，这里要根据msg定义的数据结构来确认&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/06/csPq56UoKl8It4z.png&#34; alt=&#34;test.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;neut　0或1都可以，区别是什么官方文档并未介绍清楚，如果没有处理器不兼容，则设0。通常取0即可。&lt;/li&gt;
&lt;li&gt;RPC# 已经被官方弃用，因此统一用符号来占位。&lt;/li&gt;
&lt;li&gt;buffer# buffer的序列号，需要保证&lt;strong&gt;唯一&lt;/strong&gt;即可。&lt;/li&gt;
&lt;li&gt;MP：max_procs，可以用符号占位。&lt;/li&gt;
&lt;li&gt;[Type-spec data]：对于SHMEM，需要一个&lt;strong&gt;唯一&lt;/strong&gt;的共享内存键。后面接着“TCP=”，后面的数字必须大于1024。后面接着&amp;quot;bsem=&amp;quot;，后面的数字与TCP不同即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里要注意的是，如果用了两个不同的nml文件，如果有共同的buffer，后面的[Type-spec data]必须是一致的，否则无法通信。&lt;/p&gt;
&lt;p&gt;3.进程(Process)&lt;/p&gt;
&lt;p&gt;进程以P开头.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Name Buffer Type Host Ops server timeout master cnum
# ModuleA
P ModuleA MessageA LOCAL 172.23.100.205 R 0 0.1 1 1 waitformaster
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Name是进程名称,一般对应到bin里面的可运行程序,有可能一个程序有多个进程.&lt;/li&gt;
&lt;li&gt;Buffer表示的是该进程使用的消息名称,必须在Buffer中定义&lt;/li&gt;
&lt;li&gt;Type只能是LOCAL,REMOTE,AUTO&lt;/li&gt;
&lt;li&gt;Host表示是进程所在主机IP地址&lt;/li&gt;
&lt;li&gt;Ops表示进程对消息的操作方式,R(读),W(写),RW(既读又写)&lt;/li&gt;
&lt;li&gt;server对于svr而言为1,否则为0;&lt;/li&gt;
&lt;li&gt;timeout互斥时间通常写为0.1&lt;/li&gt;
&lt;li&gt;master 表示指定消息的传递指定哪一个process是master，注意master可以不唯一.&lt;/li&gt;
&lt;li&gt;cnum除非GLOBMEM,否则没用.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.Server&lt;/p&gt;
&lt;p&gt;Server是一种特殊的进程,其写法与进程类似. 在&lt;code&gt;/src/server&lt;/code&gt;下可用Makefile文件对server进行修改和编译,每次修改&lt;code&gt;.cc&lt;/code&gt;文件都需要重新编译,编译生成心得&lt;code&gt;/Test/bin/*svr&lt;/code&gt;文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#Server
# Name Buffer Type Host 0ps server timeout master cnum
P ServerAsvr MessageA LOCAL 172.23.100.210 RW 1 0.1 1 51
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;server的Type都是LOCAL，Host是server程序所在主机地址。Ops一般为RW操作，server为1，master为1即可。&lt;/p&gt;
&lt;h1 id=&#34;3-程序中调用nml库函数&#34;&gt;3. 程序中调用NML库函数&lt;/h1&gt;
&lt;p&gt;内容分两个部分:如何用C++来编写NMLmessage,主程序中如何使用NML来通信&lt;/p&gt;
&lt;h2 id=&#34;31-编写c-nmlmessage&#34;&gt;3.1 编写C++ NMLmessage&lt;/h2&gt;
&lt;p&gt;NML message存放在src文件夹下,通常与应用程序在同一级目录下.这种目录结构最小化修改文件目录.&lt;/p&gt;
&lt;p&gt;message文件夹内需要copy以下几个基本的文件:&lt;/p&gt;
&lt;p&gt;--Makefile&lt;/p&gt;
&lt;p&gt;--NMLmsgExn.cc&lt;/p&gt;
&lt;p&gt;--NMLmsgExn.hh&lt;/p&gt;
&lt;p&gt;--CommonDefinitionX可用可不用,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Makefile文件,该文件需要针对头文件、目标文件和NML_CODEGEN的安装位置,进行修改.通常NML_CODEGEN的安装位置为:&lt;code&gt;/usr/local/bin/CodeGenCmdLine.jar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果编译message时,出现&lt;code&gt;unable to access jarfile&lt;/code&gt;,这种情况说明&lt;code&gt;CodeGenCmdLine.jar&lt;/code&gt;位置有误.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;clean:
  -\rm -f *.o lib*.a lib*.so lib*.la *.lib *.ddll
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CommonDefinitionX和NMLmsgExn.hh不用改,是NML通信使用的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义的message,以&lt;code&gt;XXXXn.hh&lt;/code&gt;结尾,以表明是用NML通信&lt;/p&gt;
&lt;p&gt;需要引入的头文件包括:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Prevent Multiple Inclusion
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef MESSAGEAN_HH
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define MESSAGEAN_HH
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Include Files
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;rcs.hh&amp;#34;     // Common RCS definitions&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;NMLmsgExn.hh&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;CommonDefinitionX.hh&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;定义MESSAGE_MSG_TYPE&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Define the integer type ids.
#define MESSAGEA_MSG_TYPE 40101
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来则是消息的定义,可以根据自己的需要,自定义数据结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct UserType{
    int int_array[2];
    std::string v_str;
};
// Define the NML Message Classes
class MESSAGEA_MSG : public NMLmsgEx
{
public:
    //Constructor
    MESSAGEA_MSG();
    // CMS Update Function
    void update(CMS *);
    // Place custom variables here.
    char v_char;
    double v_double;
    UserType usertype_data;
};
// Declare NML format function
extern int MessageAFormat(NMLTYPE, void *, CMS *);
#endif     // MESSAGEAN_HH
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-主程序采用nml进行消息传递&#34;&gt;3.2 主程序采用NML进行消息传递&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;NML通信模块启用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在主程序中需要引用使用的NMLmessage的头文件.在启用NML时使用,使用以下语句:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;set_rcs_print_destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCS_PRINT_TO_STDOUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nml_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在程序通信结束后,需要清空和关闭NML:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nml_cleanup();
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;NML通信类的初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NML的使用需要引入nml配置文件,关于配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;NML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MESSAGE_CHANNEL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;formatFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;buffer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;process&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;condig.nml&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;参数buffer对应配置文件中B的名称,process对应P的名称,config.nml对应nml的文件名&lt;/p&gt;
&lt;p&gt;formatFunction在nml message文件的最后有同名的定义&lt;/p&gt;
&lt;p&gt;如果配置文件中Process对应的master为1，NML 通信类初始化后，才会启动buffer的master。(todo)&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;NML通信消息的初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对写消息的模块,采用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Message_data = new MESSAGE_MSG;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;针对读消息的模块,采用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Message_data = (MESSAGEC_MSG *) MESSAGE_CHANNEL-&amp;gt;get_address();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收的buffer，不需要重新&lt;code&gt;new MESSAGEA_MSG&lt;/code&gt;。发送的Buffer，需要在构造函数中&lt;code&gt;new MESSAGEA_MSG&lt;/code&gt;开辟新空间。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;消息读写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;消息读采用以下命令判断接收是否正常,如正常,可以直接使用buffer中定义变量:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MESSAGE_CHANNEL -&amp;gt;blocking_read(0.2) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;消息写采用以下命令:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MESSAGE_CHANNEL -&amp;gt;write(Message_data)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;NML的构建&lt;/p&gt;
&lt;p&gt;在Qt中进行NML工程的构建&lt;/p&gt;
&lt;p&gt;需要利用qmake进行&lt;/p&gt;
&lt;p&gt;.pro文件中链接语句bin和lib位置需要修改&lt;/p&gt;
&lt;p&gt;src中将ModuleA和ModuleB分别进行编译运行&lt;/p&gt;
&lt;p&gt;message中的设置前文中已经提到,不复议&lt;/p&gt;
&lt;p&gt;源码部分在LanePro代码解析中再进行&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">工程师怎么才算优秀  陆奇</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%80%8E%E4%B9%88%E6%89%8D%E7%AE%97%E4%BC%98%E7%A7%80-%E9%99%86%E5%A5%87/" />
            <id>https://chenbokaix250.github.io/life/%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%80%8E%E4%B9%88%E6%89%8D%E7%AE%97%E4%BC%98%E7%A7%80-%E9%99%86%E5%A5%87/</id>
            <updated>2021-07-01T09:31:10&#43;08:00</updated>
            <published>2021-07-01T08:53:23&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">转载一篇陆奇在百度时期的内部发言,希望能受用. Believe in 技术 首先要相信技术，我刚才已经讲了……</summary>
            
                <content type="html">&lt;p&gt;转载一篇陆奇在百度时期的内部发言,希望能受用.&lt;/p&gt;
&lt;h2 id=&#34;believe-in-技术&#34;&gt;Believe in 技术&lt;/h2&gt;
&lt;p&gt;首先要相信技术，我刚才已经讲了，整个我们工业界，特别是像百度这样的公司，对技术坚定的、不动摇的信念特别重要。&lt;/p&gt;
&lt;p&gt;我也分享一下，盖茨提到微软公司的宗旨就是：写软件代表的是世界的将来。&lt;/p&gt;
&lt;p&gt;为什么？未来任何一个工业都会变成软件工业。盖茨是对的，因为任何工业任何行业自动化的程度会越来越高，最后你所处理的就是信息和知识。&lt;/p&gt;
&lt;p&gt;但现在软件的做法又往前提了一次，因为在人工智能时代，不光是写代码，你必须懂算法，懂硬件，懂数据，整个人工智能的开发过程有一个很大程度的提高，但是，技术，特别是我们这个工业所代表的技术一定是将来任何工业的前沿。&lt;/p&gt;
&lt;p&gt;所以我们一定要有一个坚定不移的深刻的理念，相信整个世界终究是为技术所驱动的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;站在巨人的肩膀上做创新&#34;&gt;站在巨人的肩膀上做创新&lt;/h2&gt;
&lt;p&gt;我们观察一下，在美国硅谷、在中国，互联网创业公司也好，大型公司也好，大家的起点是越来越高的。为什么现在创新速度那么快？主要是起点高了。我们可以使用的代码模块，使用的服务的能力，都是大大的提升。&lt;/p&gt;
&lt;p&gt;在内部我想强调这一点，很多大公司包括微软在内，内部的 Code 都重做了无数遍。&lt;/p&gt;
&lt;p&gt;我现在的要求是，每一次你写一行新的代码，第一要做的，先想一想你这行代码值得不值得写，是不是有人已经做了同样的工作，可能做得比你还好一点。有没有其他人已经解决这个问题，然后你可以把你的时间放在更好的创新上。&lt;/p&gt;
&lt;p&gt;特别是大公司里面重复或者是几乎重复的 Code 实在太多，浪费太多的资源，对每个人的职业生涯都不是好事情。&lt;/p&gt;
&lt;p&gt;我再强调，在大公司内部，你写代码之前想一想，你这行代码要不要写，是不是别人已经有了，站在别人的肩膀上去做这件事情。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;追求-engineering-excellence&#34;&gt;追求 Engineering Excellence&lt;/h2&gt;
&lt;p&gt;我要另外强调的一点就是 Engineering Excellence，工程的技术的卓越性和能力。&lt;/p&gt;
&lt;p&gt;任何市场上竞争就像打仗一样，就看你的部队体能、质量，每一个士兵他的训练的程度，和你给他使机关枪、坦克，还是什么样的武器。&lt;/p&gt;
&lt;p&gt;所以 Engineering Excellence 跟这个类比，我们要建的是一支世界上最强的部队，每一个士兵，每一个领军人，每个人的能力，他的训练都是超强的，然后我们给每个人提供的工具和武器都是一流的。&lt;/p&gt;
&lt;p&gt;所以 Engineering Excellence 是一个永无止境的、个人的、团队的，能力的追求和工具平台的创新，综合在一起可以给我们带来的长期的、核心的竞争力，为社会创造价值，最终的目的是给每个用户、每个企业、整个社会创造价值。&lt;/p&gt;
&lt;p&gt;我另外还要在这里强调的一点就是 Relentless pursuit of excellence：永无止境的不断的持续的追求。 我们要么不做，要做的事情一定做最好，这是我对大家的要求。数据库也好，做大平台也好，大数据也好，我们要做什么事情，我们一定要下决心，这是我对你们每个人的要求，做什么事情一定要做最好，一定要是做业界最强的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;每天学习&#34;&gt;每天学习&lt;/h2&gt;
&lt;p&gt;每天学习，可能是对每个人都是最最重要的。&lt;/p&gt;
&lt;p&gt;我今天分享一下，我自己怎么想我自己的。就很简单一个概念，我把自己想象是一个软件、一个代码，今天的版本一定要比昨天版本好，明天的版本肯定会比今天好，因为即使犯了错误，我里面有 If statement，说如果见到这个错误，绝对不要再犯。&lt;/p&gt;
&lt;p&gt;英语，另外有一句说法就是 Life is too short, don’t live the same day twice. 同样一天不要重活两次。每天都是不一样，每天为什么不一样，因为每天都变成最好，每天都变得更好。今天的版本一定要比昨天好，每个好的、杰出的工程师，杰出的技术领袖，一定要保持自己学习的能力，特别是学习的范围。&lt;/p&gt;
&lt;p&gt;在这上面我也稍微引申一下，做 Computer science 的，如果只学 Computer science，不去学一些其他的行业，肯定不够。我举个例子，经济学必须要学。为什么这样讲？ Computer science 它有个很大的限制，他是假定你有输入以后有输出，这种解决问题的方式有它的好处，但有它的限制性。&lt;/p&gt;
&lt;p&gt;我给大家举个例子，地图导航，如果你纯粹用这个方式去做，你只是把一个拥挤的地方移到另外一个拥挤的地方。经济学，它对问题的建模是不一样的。它起点是假定是一个整体的一个生态，每个人的输入都是另外一个人的输出，你要用经济学的方式来描述地图导航的问题，你就会去算一个 Equilibrium，市场也是这样。&lt;/p&gt;
&lt;p&gt;如果把深度学习真的要想彻底，必须把物理重学一遍，把生物学看一遍，再把进化论再看一遍。因为深度学习跟这些东西完全相关，自己肯定想不清楚，要彻底想清楚，必须学。&lt;/p&gt;
&lt;p&gt;另外，学产品，我以前跟所有的工程师都讲，如果不懂产品，你不可能成为一个最好的工程师。真正要做世界一流的工程师不光要懂产品，还要懂整个商业，懂生态。因为你的工作的责任，是能够看到将来，把技术展望到将来的需求，把平台、把开发流程、把你的团队为将来做准备。所以学习是非常非常重要的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ownership&#34;&gt;Ownership&lt;/h2&gt;
&lt;p&gt;最后是从我做起。 我们公司有个非常大的使命，用科技让复杂的世界更简单。整个世界非常非常复杂，人其实所做的事情基本上都是 Reduce entropy 。&lt;/p&gt;
&lt;p&gt;因为从热力学第二定律来讲，世界是会变得越来越乱的，我们想做的事情就是把它变的更简单，让我们生活变得更美好。&lt;/p&gt;
&lt;p&gt;而且具体的，我们可以通过人工智能技术来做到唤醒万物，但是这一切是通过每一个人的一点一滴的行为累计起来，从我做起。还有 Ownership，看到机会不需要问别人，有机会就去做，看到问题也不要去问别人，就把它 Fix 。&lt;/p&gt;
&lt;p&gt;把我们的使命、把我们的公司当成我们自己每个人的事业来做，我可以坦诚的给每个人讲，如果你把公司的使命，把公司的事业，当成你自己个人的事业，Own everything，你在职业生涯一定是走得最快。从我做起，从身边的每一件事情做起。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">LanePro记录</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/lanepro%E8%AE%B0%E5%BD%95/" />
            <id>https://chenbokaix250.github.io/tech/lanepro%E8%AE%B0%E5%BD%95/</id>
            <updated>2021-06-05T09:52:36&#43;08:00</updated>
            <published>2021-06-05T09:51:42&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">LaneProject 理解代码中途的一些知识点记录整理 memcpy()函数 void memcpy(void str1,const void str2,size_t n) 从存储区str2复……</summary>
            
                <content type="html">&lt;h1 id=&#34;laneproject&#34;&gt;LaneProject&lt;/h1&gt;
&lt;p&gt;理解代码中途的一些知识点记录整理&lt;/p&gt;
&lt;h3 id=&#34;memcpy函数&#34;&gt;memcpy()函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void memcpy(void str1,const void str2,size_t n) &lt;/code&gt;
从存储区str2复制n个字节到存储区str1&lt;/p&gt;
&lt;h3 id=&#34;mat的创建&#34;&gt;Mat的创建&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cv::Mat img(2,2,CV_8U3,cv::Scalar(0,0,255)&lt;/code&gt;
创建了一个2行2列的矩阵,矩阵元素使用8位无符号char类型保存,具有3通道,每个像素的初始值是(0,0,255)&lt;/p&gt;
&lt;h3 id=&#34;带参数的构造函数&#34;&gt;带参数的构造函数&lt;/h3&gt;
&lt;p&gt;构造函数可以带有参数.在创建对象时就会给对象赋初始值.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Line&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//成员函数定义,包括构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Object is being created,length = &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;opencv积分图函数integral详解&#34;&gt;OpenCV积分图函数:integral()详解&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void integral(InputArray src,OutputArray sum,OutputArray sqsum,int sdepth = -1,int sqdepth = -1);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入图像&lt;/li&gt;
&lt;li&gt;和表&lt;/li&gt;
&lt;li&gt;平方和表&lt;/li&gt;
&lt;li&gt;和表深度 CV_32S&lt;/li&gt;
&lt;li&gt;平方和表深度 CV_32F&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c绝对值函数&#34;&gt;C++绝对值函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//整数绝对值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cabs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;complex&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;znum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//返回复数znum的绝对值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fabs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//返回双精度参数x的绝对值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;labs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//返回长整型参数n的绝对值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;ioctl函数介绍&#34;&gt;ioctl()函数介绍&lt;/h3&gt;
&lt;p&gt;一个字符设备驱动通常会实现常规的打开、关闭、读、写等功能，但在一些细分的情境下，如果需要扩展新的功能，通常以增设ioctl()命令的方式实现，其作用类似于“拾遗补漏”。在文件I/O中，ioctl扮演着重要角色，本文将以驱动开发为侧重点，从用户空间到内核空间纵向分析ioctl函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/ioctl.h&amp;gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ioctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;fd:  文件描述符
cmd: 交互协议，设备驱动将根据cmd执行对应操作&lt;/p&gt;
&lt;h3 id=&#34;opencv提供函数reman实现重映射&#34;&gt;opencv提供函数reman()实现重映射&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;OutputArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;InputArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;InputArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;interpolation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;borderMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BORDER_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scalar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;borderValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;src 输入图像&lt;/li&gt;
&lt;li&gt;dst 目标图像&lt;/li&gt;
&lt;li&gt;map1:(x,y)的第一个映射或者是CV_16SC2,CV_32FC1或CV_32FC2的值.&lt;/li&gt;
&lt;li&gt;map2: 第二个map，表示类型为CV_16UC1、CV_32FC1的y值或空值&lt;/li&gt;
&lt;li&gt;borderMode: 边界模式，有默认值BORDER_CONSTANT&lt;/li&gt;
&lt;li&gt;borderValue: 当有常数边界时使用的值，有默认值Scalar()即0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gettimeofday函数&#34;&gt;gettimeofday()函数&lt;/h3&gt;
&lt;p&gt;gettimeofday()函数用于获取当前时间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;timeval&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;结构定义为：&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tv_sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//秒
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tv_usec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//微秒
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;结构定义为：&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tz_minuteswest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//和Greenwich 时间差了多少分钟
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tz_dsttime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//日光节约时间的状态
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//范例
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeval&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gettimeofday&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tv_sec; %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tv_sec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tv_usec; %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tv_usec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tz_minuteswest; %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tz_minuteswest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tz_dsttime, %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tz_dsttime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//tv_sec: 974857339
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//tv_usec:136996
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//tz_minuteswest:-540
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//tz_dsttime:0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;munmap函数&#34;&gt;munmap()函数&lt;/h3&gt;
&lt;p&gt;munmap()用来取消参数start 所指的映射内存起始地址，参数length 则是欲取消的内存大小。当进程结束或利用exec 相关函数来执行其他程序时，映射内存会自动解除，但关闭对应的文件描述词时不会解除映射。&lt;/p&gt;
&lt;p&gt;返回值：如果解除映射成功则返回0，否则返回－1。错误原因存于errno 中错误代码EINVAL参数 start 或length 不合法。&lt;/p&gt;
&lt;h3 id=&#34;mmap函数&#34;&gt;mmap()函数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void * mmap(void *start, size_t length, int prot , int flags, int fd, offset)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start：要映射到的内存区域的起始地址，通常都是用NULL（NULL即为0）。NULL表示由内核来指定该内存地址&lt;/li&gt;
&lt;li&gt;length：要映射的内存区域的大小.&lt;/li&gt;
&lt;li&gt;prot：期望的内存保护标志，不能与文件的打开模式冲突。&lt;/li&gt;
&lt;li&gt;flags：指定映射对象的类型，映射选项和映射页是否可以共享。&lt;/li&gt;
&lt;li&gt;offset：表示被映射对象（即文件）从那里开始对映，通常都是用0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memset函数&#34;&gt;memset函数&lt;/h3&gt;
&lt;p&gt;memset() 函数可以是初始化内存的“万能函数”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# include &amp;lt;string.h&amp;gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;函数的功能是：将指针变量 s 所指向的前 n 字节的内存单元用一个“整数” c 替换，注意 c 是 int 型。s 是 void* 型的指针变量，所以它可以为任何类型的数据进行初始化。&lt;/p&gt;
&lt;h3 id=&#34;opencv中matrowrange函数&#34;&gt;OpenCV中Mat::rowRange函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Mat的rowRange和colRange函数可以获取某些范围内行或列的指针&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">CenterNet调试记录</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/centernet%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/" />
            <id>https://chenbokaix250.github.io/tech/centernet%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</id>
            <updated>2021-05-27T17:15:41&#43;08:00</updated>
            <published>2021-05-27T17:06:30&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">CenterNet工程调试的过程及问题 最近调试了关于CenterNet的几个工程 CenterNet RTM3D……</summary>
            
                <content type="html">&lt;h1 id=&#34;centernet工程调试的过程及问题&#34;&gt;CenterNet工程调试的过程及问题&lt;/h1&gt;
&lt;p&gt;最近调试了关于CenterNet的几个工程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CenterNet&lt;/li&gt;
&lt;li&gt;RTM3D&lt;/li&gt;
&lt;li&gt;tensorrt_demos&lt;/li&gt;
&lt;li&gt;TensorRT-CenterNetm&lt;/li&gt;
&lt;li&gt;TensorRT-3D&lt;/li&gt;
&lt;li&gt;TensorRT-Yolov3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-centernet&#34;&gt;1. CenterNet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xingyizhou/CenterNet&#34;&gt;CenterNet Gitlink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者提供了基于三种特征提取模型的训练集:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hourglass104&lt;/li&gt;
&lt;li&gt;DLA-34&lt;/li&gt;
&lt;li&gt;ResNet101&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q1&lt;/strong&gt; &lt;code&gt;ModuleNotFoundError: No module named &#39;_ext&#39;&lt;/code&gt;
主要的问题是在DCNv2需要重新编译
其目录在&lt;code&gt;/src/lib/models/networks/DCNv2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是安装其中&lt;code&gt;make.sh&lt;/code&gt;并未编译成功,而后发现是pytorch版本问题 ,随后更新pytorch版本至&lt;code&gt;1.4.0&lt;/code&gt;
再次&lt;code&gt;make.sh&lt;/code&gt;成功&lt;/p&gt;
&lt;p&gt;随后在Model_zoo下载对应的model进行调试&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xingyizhou/CenterNet/blob/master/readme/MODEL_ZOO.md&#34;&gt;Model Zoo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CenterNet提供了三个数据集:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctdet_coco_dla_2x 用于detection&lt;/li&gt;
&lt;li&gt;multi_pose_dla_3x 用于human pose estimation&lt;/li&gt;
&lt;li&gt;ddd_3dop 用于3D目标检测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于检测:
&lt;code&gt;python demo.py ctdet --demo /path/to/image/or/folder/or/video --load_model ../models/ctdet_coco_dla_2x.pth&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同时提供了视频检测接口:
&lt;code&gt;python demo.py ctdet --demo webcam --load_model ../models/ctdet_coco_dla_2x.pth&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;2rtm3d&#34;&gt;2.RTM3D&lt;/h2&gt;
&lt;p&gt;RTM3D在编译时,遇到问题
Xavier上缺少&lt;code&gt;MAGMA library&lt;/code&gt;
目前还没有找到在Xavier上的编译方法&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Banconxuan/RTM3D&#34;&gt;RTM3D GitLink&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3tensorrt_demos&#34;&gt;3.tensorrt_demos&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jkjung-avt/tensorrt_demos&#34;&gt;tensorrt_demos GitLink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GoogleNet与SSD编译 运行都没有问题&lt;/p&gt;
&lt;p&gt;Yolov3 Yolov4 由于TensorRT版本不一致 还没有尝试&lt;/p&gt;
&lt;h2 id=&#34;4tensorrt-centernet&#34;&gt;4.TensorRT-CenterNet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/CaoWGG/TensorRT-CenterNet&#34;&gt;tensorRT_centerNet Gitlink&lt;/a&gt;
在Xavier上运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pytorch 1.4.0
ubuntu 1804
TensorRT 5.1
onnx-tensorrt v4
cuda 10.0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ctder2onnx&#34;&gt;ctder2onnx&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;step 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用THC-basedDCNv2替代ATen-basedDCNv2.
&lt;code&gt;https://github.com/CaoWGG/TensorRT-CenterNet/tree/master/readme/dcn&lt;/code&gt;
在CenterNet工程中copy dcn
&lt;code&gt;cp -r dcn lib/models/networks&lt;/code&gt;
编译dcn
&lt;code&gt;python setup.py build_ext --inplace&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;添加symbolic to DeformConvFunction
地址在&lt;code&gt;readme/dcn/functions/deform_conv.py&lt;/code&gt;中,但是经过比对,发现拷贝的代码已经添加了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改import的文件&lt;/p&gt;
&lt;p&gt;change (from .DCNv2.dcn_v2 import DCN) to (from .dcn.modules.deform_conv import ModulatedDeformConvPack as DCN) in &lt;code&gt;pose_dla_dcn.py&lt;/code&gt; and &lt;code&gt;resnet_dcn.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;step4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进行转换&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;Trans.py&lt;/code&gt; 进行转换,转换代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lib.opts&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;lib.models.model&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;load_model&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;types&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MethodType&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torch.onnx&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;onnx&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torch&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torch.onnx&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OperatorExportTypes&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderedDict&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## onnx is not support dict return value&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## for dla34&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pose_dla_forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dla_up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first_level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ida_up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;## change dict to list&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__getattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## for dla34v0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dlav0_forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dla_up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first_level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# x = self.fc(x)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# y = self.softmax(self.up(x))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;## change dict to list&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__getattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## for resdcn&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;resnet_dcn_forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxpool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layer4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deconv_layers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;## change dict to list&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__getattr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;dla&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pose_dla_forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;dlav0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dlav0_forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;resdcn&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resnet_dcn_forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;## change lib/opts.py add_argument(&amp;#39;task&amp;#39;, default=&amp;#39;ctdet&amp;#39;....) to add_argument(&amp;#39;--task&amp;#39;, default=&amp;#39;ctdet&amp;#39;....)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dla_34&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderedDict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hm&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;reg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wh&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head_conv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dla&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head_conv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MethodType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;load_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ctdet_coco_dla_2x.pth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cuda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cuda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;onnx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;export&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctdet_coco_dla_2x.onnx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;verbose&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;operator_export_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OperatorExportTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ONNX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过代码将&lt;code&gt;.pth&lt;/code&gt;文件转换为&lt;code&gt;.onnx&lt;/code&gt;文件.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对TensorRT-CenterNet进行编译&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/CaoWGG/TensorRT-CenterNet.git
cd TensorRT-CenterNet
mkdir build
cd build &amp;amp;&amp;amp; cmake .. &amp;amp;&amp;amp; make
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过&lt;code&gt;buildEngine&lt;/code&gt;建立onnx到engine的转换&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./buildEngine -i model/ctdet_coco_dla_2x.onnx -o model/ctdet_coco_dla_2x.engine 
./runDet -e model/ctdet_coco_dla_2x.engine -i test.jpg -c test.h264
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;5tensorrt-centernet-3d&#34;&gt;5.TensorRT-CenterNet-3D&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Qjizhi/TensorRT-CenterNet-3D&#34;&gt;TensorRT-CenterNet-3D Gitlink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载&lt;code&gt;ddd_3dop.pth&lt;/code&gt;,利用CenterNet-3D转换为&lt;code&gt;onnx&lt;/code&gt;,参考ctder2onnx的步骤
利用netron工具检查输出onnx model is ((&#39;hm&#39;, 3), (&#39;dep&#39;, 1), (&#39;rot&#39;, 8), (&#39;dim&#39;, 3), (&#39;wh&#39;, 2), (&#39;reg&#39;, 2))
完成编译&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd TensorRT-CenterNet-3D
mkdir build
cd build &amp;amp;&amp;amp; cmake .. &amp;amp;&amp;amp; make
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成engine文件,完成推理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./buildEngine -i model/ddd_3dop.onnx -o model/ddd_3dop.engine
./runDet -e model/ddd_3dop.engine -i 000292.png -c test.h264
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the help of TensorRT, the inference time has been shortened from 0.227s to 98.89ms.&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Forward和call函数理解</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/forward%E5%92%8Ccall%E5%87%BD%E6%95%B0%E7%90%86%E8%A7%A3/" />
            <id>https://chenbokaix250.github.io/tech/forward%E5%92%8Ccall%E5%87%BD%E6%95%B0%E7%90%86%E8%A7%A3/</id>
            <updated>2021-05-24T13:43:31&#43;08:00</updated>
            <published>2021-05-24T13:43:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Pytorch中的forward理解 我们在使用Pytorch的时候,模型训练时,不需……</summary>
            
                <content type="html">&lt;h1 id=&#34;pytorch中的forward理解&#34;&gt;Pytorch中的forward理解&lt;/h1&gt;
&lt;p&gt;我们在使用Pytorch的时候,模型训练时,不需要调用forward这个函数,只需要在实例化一个对象中传入对应的参数就可以自动调用forward函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#......&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#......&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.......&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 输入数据&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 实例化一个对象&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 前向传播&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 而不是使用下面的&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# model.forward(data)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是实际上model(data)是等价于model.forward(data),这是为什么?&lt;/p&gt;
&lt;h2 id=&#34;forward函数&#34;&gt;forward函数&lt;/h2&gt;
&lt;p&gt;model(data)之所以等于model.forward(data),就是因为在类(class)中使用了&lt;code&gt;__class__&lt;/code&gt;函数,对&lt;code&gt;__class__&lt;/code&gt;  的理解写在后面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;I can be called lick a function&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结
&lt;code&gt;I can be called lick a function&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由上面的&lt;code&gt;__class__&lt;/code&gt;函数可知,我们可以将forward函数放到&lt;code&gt;__class__&lt;/code&gt;函数中进行调用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;I can called link a function&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;传入参数的类型是:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 值为: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; 

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;forward 函数被调用了&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;in forward,传入参数类型是:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 值为: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;input_param&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;对象a传入的参数是:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_param&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;I can called like a function
传入参数的类型是：&amp;lt;class &#39;str&#39;&amp;gt;   值为： data
forward 函数被调用了
in  forward, 传入参数类型是：&amp;lt;class &#39;str&#39;&amp;gt;  值为: data
对象a传入的参数是： data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为什么model(data)等价于model.forward(data),是因为&lt;code&gt;__call__&lt;/code&gt;函数中调用了forward函数.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;__class__函数&#34;&gt;__class__函数&lt;/h2&gt;
&lt;p&gt;该方法的功能类似于在类中重载()运算符,使得类实例对象可以像调用普通函数那样,以&amp;quot;对象名()&amp;quot;的形式使用.
作用:为了将类的实例对象变为可调用对象.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CLanguage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;调用__call__()方法&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CLanguage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;程序执行&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;程序执行结果为:
&lt;code&gt;调用__call__()方法 程序执行&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过在CLanguage类中实现__call__()方法,🙆clangs实例对象变为 &lt;strong&gt;可调用对象&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python中,凡是可以将()直接应用到自身并执行,都称为可调用对象.可调用对象包括自定义函数/Python内置函数以及本节所说的类实例对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于可调用对象,实际上&amp;quot;名称()&amp;quot;可以理解为是&lt;code&gt;名称.__call__()&lt;/code&gt;的简写.上面程序中定义的clangs实例对象为例,其最后一行可以改写为:
&lt;code&gt;clangs.__call__(&amp;quot;程序执行&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;程序的执行结果与之前完全相同.&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;__call__&lt;/code&gt;弥补hasattr()函数的短板:
hasattr()函数的用法,该函数的功能是查找类的实例对象中是否包含指定名称的属性或者方法,但该函数有一个缺陷,即无法判定该指定的名称,是否是类属性还是类方法.&lt;/p&gt;
&lt;p&gt;要解决这个问题,我们可以借助可调用对象的概念.
类实例对象包含的方法,其实也属于可调用对象,但类属性却不是.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CLanguage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Jone&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Messi&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Learning Python &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CLanguage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;__class__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*********&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;say&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clangs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;__call__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;程序执行结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;False
**********
True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于name是类属性,它没有以&#39;&lt;strong&gt;call&lt;/strong&gt;&#39;为名的&#39;&lt;strong&gt;call&lt;/strong&gt;()&#39;方法;而say是类方法,它是可调用对象,因此它有&lt;code&gt;__call__()&lt;/code&gt;方法.&lt;/p&gt;
&lt;h2 id=&#34;其他实例&#34;&gt;其他实例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;函数本身可以被调用&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt; 
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结果: &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;类本身可以被调用,主要用作生成实例化对象:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt; 
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结果: &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;类的实例化对象无法被调用:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结果: &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;通过增加&lt;code&gt;__call__()&lt;/code&gt;函数实例化对象变为可调用&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;callable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出结果: &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Unet网络</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/unet%E7%BD%91%E7%BB%9C/" />
            <id>https://chenbokaix250.github.io/tech/unet%E7%BD%91%E7%BB%9C/</id>
            <updated>2021-05-21T15:46:34&#43;08:00</updated>
            <published>2021-05-21T15:45:07&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Pytorch搭建Unet语义分割平台 什么是Unet模型 Unet是一个优秀的语义分割……</summary>
            
                <content type="html">&lt;h1 id=&#34;pytorch搭建unet语义分割平台&#34;&gt;Pytorch搭建Unet语义分割平台&lt;/h1&gt;
&lt;h2 id=&#34;什么是unet模型&#34;&gt;什么是Unet模型&lt;/h2&gt;
&lt;p&gt;Unet是一个优秀的语义分割模型,其主要执行过程与其他语义分割模型类似.
Unet可以分为三个部分,如下图所示:&lt;/p&gt;
&lt;p&gt;第一部分是 &lt;strong&gt;主干特征提取部分&lt;/strong&gt; ,我们可以利用主干部分获得一个又一个的特征层,Unet的主干特征提取1部分与VGG相似1,为卷积核最大池化的堆叠.利用主干特征提取部分我们可以获得五个初步有效特征层,在第二步中,我们会利用这五个有效特征层可以进行特征融合.
第二部分是 &lt;strong&gt;加强特征提取部分&lt;/strong&gt; ,我们可以利用主干部分1获取到的五个初步有效特征层进行上采样,并且进行特征融合,获得一个最终的,融合了所有特征的有效特征层.
第三部分是 &lt;strong&gt;预测部分&lt;/strong&gt; ,我们会利用最终获得的最后一个有效特征层对每一个特征点进行分类,相当于对每一个像素点进行分类.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/20/RzsYZc9LwOikglu.jpg&#34; alt=&#34;test.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;预测网络&#34;&gt;预测网络&lt;/h2&gt;
&lt;h3 id=&#34;1主干网络介绍&#34;&gt;1.主干网络介绍&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200929121435918.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc5MTk2NA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Unet的主干特征提取部分由卷积+最大池化1组成1,整体结构与VGG类似&lt;/p&gt;
&lt;p&gt;本文所采用的主干特征提取网络为VGG16,这样也方便使用imagenet上的预训练权重.&lt;/p&gt;
&lt;p&gt;VGG是由Simonyan 和Zisserman在文献《Very Deep Convolutional Networks for Large Scale Image Recognition》中提出卷积神经网络模型，其名称来源于作者所在的牛津大学视觉几何组(Visual Geometry Group)的缩写。&lt;/p&gt;
&lt;p&gt;该模型参加2014年的 ImageNet图像分类与定位挑战赛，取得了优异成绩：在分类任务上排名第二，在定位任务上排名第一。
它的结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2019101614532169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc5MTk2NA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是一个VGG16被用到烂的图，但确实很好的反应了VGG16的结构。&lt;/p&gt;
&lt;p&gt;当我们使用VGG16作为主干特征提取网络的时候，我们只会用到两种类型的层，分别是卷积层和最大池化层。&lt;/p&gt;
&lt;p&gt;当输入的图像大小为512x512x3的时候，具体执行方式如下：
1、conv1：进行两次[3,3]的64通道的卷积，获得一个[512,512,64]的初步有效特征层，再进行2X2最大池化，获得一个[256,256,64]的特征层。
2、conv2：进行两次[3,3]的128通道的卷积，获得一个[256,256,128]的初步有效特征层，再进行2X2最大池化，获得一个[128,128,128]的特征层。
3、conv3：进行三次[3,3]的256通道的卷积，获得一个[128,128,256]的初步有效特征层，再进行2X2最大池化，获得一个[64,64,256]的特征层。
4、conv4：进行三次[3,3]的512通道的卷积，获得一个[64,64,512]的初步有效特征层，再进行2X2最大池化，获得一个[32,32,512]的特征层。
5、conv5：进行三次[3,3]的512通道的卷积，获得一个[32,32,512]的初步有效特征层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200929124218219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc5MTk2NA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2加强特征提取结构&#34;&gt;2.加强特征提取结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/20/RzsYZc9LwOikglu.jpg&#34; alt=&#34;test.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Unet所使用的加强特征提取网络是一个U的形状&lt;/p&gt;
&lt;p&gt;利用第一步我们可以获得五个初步的有效特征层,在加强特征提取网络这里,我们会利用这五个初步的有效特征层进行特征融合,特征融合的方法就是对特征层进行上采样并且进行堆叠.
为了方便网络的构建与更好的通用性,我们的Unet和上图的Unet结构有些许不同,在上采样时直接进行两倍上采样再进行特征融合,最终获得的特征层和输入图片的高宽相同.&lt;/p&gt;
&lt;p&gt;具体示意图如下:
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200929130313760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc5MTk2NA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3利用特征获得预测结果&#34;&gt;3.利用特征获得预测结果&lt;/h3&gt;
&lt;p&gt;利用1,2步,我们可以获取输入进来的图片的特征,此时,我们需要利用特征获得预测结果.&lt;/p&gt;
&lt;p&gt;利用特征获得预测结果的过程为:
利用一个1x1卷积进行通道调整,将最终特征层的通道数调整成num_classes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200929130336137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc5MTk2NA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;二-训练部分&#34;&gt;二 训练部分&lt;/h1&gt;
&lt;p&gt;使用训练文件采用VOC的格式
语义分割模型训练的文件分为两部分
一部分是原图 一部分是标签
原图就是普通的RGB图像，标签就是灰度图或者8位彩色图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原图的shape为[height, width, 3]，标签的shape就是[height, width]，对于标签而言，每个像素点的内容是一个数字，比如0、1、2、3、4、5……，代表这个像素点所属的类别。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语义分割的工作就是对原始的图片的每一个像素点进行分类,所以通过预测结果中每个像素点属于每个类别的概率与标签对比,可以对网络进行训练.&lt;/p&gt;
&lt;h3 id=&#34;loss解析&#34;&gt;loss解析&lt;/h3&gt;
&lt;p&gt;本文所使用的LOSS由两部分组成:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cross Entropy Loss&lt;/li&gt;
&lt;li&gt;Dice Loss&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cross Entropy Loss 交叉熵损失 当语义分割平台利用Softmax对像素点进行分类的时候,进行使用&lt;/p&gt;
&lt;p&gt;Dice loss将语义分割的评价指标作为Loss,Dice系数是一种集合相似度度量函数,通常用于计算两个样本的相似度,取值范围在[0,1]&lt;/p&gt;
&lt;p&gt;计算公式 如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200624002412801.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;就是预测结果和真实结果的交乘上2，除上预测结果加上真实结果。其值在0-1之间。越大表示预测结果和真实结果重合度越大。所以Dice系数是越大越好。&lt;/p&gt;
&lt;p&gt;如果作为LOSS的话是越小越好，所以使得Dice loss = 1 - Dice，就可以将Loss作为语义分割的损失了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后分割效果贴一张&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/21/I9Bo6NyjWOvM1fF.jpg&#34; alt=&#34;iimg.jpg&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">CenterNet学习</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/centernet%E5%AD%A6%E4%B9%A0/" />
            <id>https://chenbokaix250.github.io/tech/centernet%E5%AD%A6%E4%B9%A0/</id>
            <updated>2021-05-20T08:45:48&#43;08:00</updated>
            <published>2021-05-20T08:45:15&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">CenterNet算法 通常目标检测算法的做法是设定一堆先验框,对先验框进行调整获得预……</summary>
            
                <content type="html">&lt;h1 id=&#34;centernet算法&#34;&gt;CenterNet算法&lt;/h1&gt;
&lt;p&gt;通常目标检测算法的做法是设定一堆先验框,对先验框进行调整获得预测框.&lt;/p&gt;
&lt;p&gt;对Centernet网络而言,其将目标看作一个点,一个目标由一个特征点确定.&lt;/p&gt;
&lt;p&gt;Centernet采用不同的方法，构建模型时将目标作为一个点——即目标BBox的中心点。&lt;/p&gt;
&lt;p&gt;Centernet的检测器采用关键点估计来找到中心点，并回归到其他目标属性。&lt;/p&gt;
&lt;h1 id=&#34;一-预测部分&#34;&gt;一. 预测部分&lt;/h1&gt;
&lt;h2 id=&#34;1主干网络介绍&#34;&gt;1.主干网络介绍&lt;/h2&gt;
&lt;p&gt;Centernet用到的主干特征网络有多种,一般是以Hourglass Network、DLANet或者Resnet为主干特征提取网络,由于centernet所用到的Hourglass Network参数量太大，有19000W参数，DLANet并没有keras资源，本文以Resnet为例子进行解析。&lt;/p&gt;
&lt;p&gt;ResNet50有两个基本的块,分别名为Conv Block和Identity Block，其中Conv Block输入和输出的维度是不一样的，所以不能连续串联，它的作用是改变网络的维度；Identity Block输入维度和输出维度相同，可以串联，用于加深网络的。&lt;/p&gt;
&lt;p&gt;Conv Block的结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20191113094201415.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Conv Block的代码实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;conv_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;filters1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;res&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_branch&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bn&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_branch&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;shortcut&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                      &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;shortcut&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shortcut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shortcut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Identity Block的结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20191113094135752.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;filters1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;res&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_branch&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bn&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_branch&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn_name_base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这两个都是残差网络结构
当输入图片是512x512x3的时候,整体的特征层shape变化为:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/13/7teI3Sz9Y1T5hwj.png&#34; alt=&#34;20200802125950594.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;ResNet网络实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ResNet50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 512x512x3&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ZeroPadding2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 256,256,64&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;conv1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bn_conv1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 256,256,64 -&amp;gt; 128,128,64&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;same&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 128,128,64 -&amp;gt; 128,128,256&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 128,128,256 -&amp;gt; 64,64,512&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 64,64,512 -&amp;gt; 32,32,1024&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 32,32,1024 -&amp;gt; 16,16,2048&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;2利用初步特征获得高分辨率特征图&#34;&gt;2.利用初步特征获得高分辨率特征图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200802182201954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc5MTk2NA==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用上一步获得到的resnet50的最后一个特征层的shape为(16,16,2048)。&lt;/p&gt;
&lt;p&gt;对于该特征层,centernet利用三次反卷积进行上采样,从而更高的分辨率输出.
三次反卷积的输出通道数分别为256,128,64.&lt;/p&gt;
&lt;p&gt;每次反卷积,特征层的高和宽变为原来的两倍.特征层最后为128x128x64&lt;/p&gt;
&lt;p&gt;利用该有效层获得最终的预测结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dropout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#-------------------------------#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   解码器&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#-------------------------------#&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;num_filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 16, 16, 2048  -&amp;gt;  32, 32, 256 -&amp;gt; 64, 64, 128 -&amp;gt; 128, 128, 64&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 进行上采样&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2DTranspose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3center-head从特征获取预测结果&#34;&gt;3.Center Head从特征获取预测结果&lt;/h2&gt;
&lt;p&gt;这个特征层相当于将整个图片划分成128x128个区域，每个区域存在一个特征点，如果某个物体的中心落在这个区域，那么就由这个特征点来确定。
（某个物体的中心落在这个区域，则由这个区域左上角的特征点来约定）&lt;/p&gt;
&lt;p&gt;我们可以利用这个特征层进行三个卷积，分别是：&lt;/p&gt;
&lt;p&gt;1、热力图预测，此时卷积的通道数为num_classes，最终结果为(128,128,num_classes)，代表每一个热力点是否有物体存在，以及物体的种类；
2、中心点预测，此时卷积的通道数为2，最终结果为(128,128,2)，代表每一个物体中心距离热力点偏移的情况；
3、宽高预测，此时卷积的通道数为2，最终结果为(128,128,2)，代表每一个物体宽高的预测情况；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# wh header&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# reg header&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;same&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_bias&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Activation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_initializer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;he_normal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_regularizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;4-预测结果的解码&#34;&gt;4. 预测结果的解码&lt;/h2&gt;
&lt;p&gt;特征层相当于将图像划分为128x128个特征点每个特征点负责预测中心落在其右下角一片区域的物体.&lt;/p&gt;
&lt;p&gt;解码的三个操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进行中心点便宜,利用reg中心点预测对特征点坐标进行偏移.&lt;/li&gt;
&lt;li&gt;利用中心点和wh宽高,获得预测框的左上角和右下角&lt;/li&gt;
&lt;li&gt;此时获得的预测框就可以绘制在图片上.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时利用非极大一直操作,防止同一类的框堆积.&lt;/p&gt;
&lt;p&gt;方法采用最大池化,利用3x3的池化核在热力图上搜索,然后只保留一定区域内得分最大的框&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hmax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;SAME&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros_like&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;heat&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;topk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# hm -&amp;gt; Hot map热力图&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 进行热力图的非极大抑制，利用3x3的卷积对热力图进行Max筛选，找出值最大的&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b, h * w * c)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 将所有结果平铺，获得(b, h * w * c)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b, k), (b, k)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 计算求出网格点，类别&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;class_ids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 获得batch_size&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;# (b, h * w, 2)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b, h * w, 2)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 找到其在1维上的索引&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;full_indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
                    
    &lt;span class=&#34;c1&#34;&gt;# 取出top_k个框对应的参数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gather&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full_indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topk_reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gather&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full_indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 计算调整后的中心&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_cx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_cy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_reg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# (b,k,1) (b,k,1)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_cx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_cy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b,k,1) (b,k,1)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;topk_x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_cx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_cy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_wh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b,k,1)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b,k,1)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;class_ids&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# (b,k,6)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;detections&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topk_x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topk_y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;detections&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5-在原图上进行绘制&#34;&gt;5. 在原图上进行绘制&lt;/h2&gt;
&lt;p&gt;通过第三步,可以获得预测框在原图上的位置,而且这些预测框都是经过筛选的.这些筛选后的框可以直接绘制在图片上,就可以获得结果了.&lt;/p&gt;
&lt;h1 id=&#34;二训练部分&#34;&gt;二.训练部分&lt;/h1&gt;
&lt;h2 id=&#34;1真实框的处理&#34;&gt;1.真实框的处理&lt;/h2&gt;
&lt;p&gt;既然在centernet中,物体的中心落在哪个特征点的右下角就由哪个特征点来负责预测,那在训练时就需要找到真实框和特征点之间的关系.&lt;/p&gt;
&lt;p&gt;真实框和特征点之间的关系:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到真实框的中心,通过真实框的中心找到其对应的特征点&lt;/li&gt;
&lt;li&gt;根据真实框的种类,对网络应有的热力图进行设置,即heatmap热力图.其实就是对应的特征点里面的对应的种类.其中心值设置为1,然后这个特征点附近的其他特征点中该种类对应的值按照高斯分布不断下降.&lt;/li&gt;
&lt;li&gt;需要设置特征点对应的reg中心点和wh宽高.&lt;/li&gt;
&lt;li&gt;将预测结果和对应该有的预测结果进行对比,对网络进行反向梯度调整.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val_lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;train_lines&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val_lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val_lines&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;
        
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_random_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;annotation_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jitter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proc_img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;r实时数据增强的随机预处理&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;annotation_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;iw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ih&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]])&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# resize image&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;new_ar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_ar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;nw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;nw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_ar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BICUBIC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# place image&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;new_image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;RGB&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;new_image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;paste&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_image&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# flip image or not&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transpose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FLIP_LEFT_RIGHT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# distort image&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cvtColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR_RGB2HSV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sat&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;360&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;image_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cvtColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COLOR_HSV2RGB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;


        &lt;span class=&#34;c1&#34;&gt;# correct boxes&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;box_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ih&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box_w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box_h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logical_and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# discard invalid box&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;box_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_data&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;# 打乱&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_lines&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val_lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val_lines&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;batch_images&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;batch_hms&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;batch_whs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;batch_regs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;batch_reg_masks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;batch_indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
            &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;annotation_line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
                &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_random_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;annotation_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boxes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;cls_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
                    
                    &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;ct_int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;astype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        
                        &lt;span class=&#34;c1&#34;&gt;# 获得热力图&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gaussian_radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;batch_hms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;draw_gaussian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_hms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        
                        &lt;span class=&#34;n&#34;&gt;batch_whs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;# 计算中心偏移量&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;batch_regs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_int&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;# 将对应的mask设置为1，用于排除多余的0&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;batch_reg_masks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;# 表示第ct_int[1]行的第ct_int[0]个。&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;batch_indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;batch_images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preprocess_image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;batch_hms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;batch_whs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;batch_regs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;batch_reg_masks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;batch_indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;

                    &lt;span class=&#34;n&#34;&gt;batch_images&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

                    &lt;span class=&#34;n&#34;&gt;batch_hms&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_classes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                                        &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;batch_whs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;batch_regs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;batch_reg_masks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;batch_indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_objects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;2-利用处理完的真实框与对应图片的预测结果计算loss&#34;&gt;2. 利用处理完的真实框与对应图片的预测结果计算loss&lt;/h2&gt;
&lt;p&gt;loss计算分为三个部分,分别是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;热力图loss&lt;/li&gt;
&lt;li&gt;reg中心点loss&lt;/li&gt;
&lt;li&gt;wh宽高loss&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;热力图loss采用focal loss的四新进行计算.
reg中心点和wh宽高loss使用的是普通L1损失函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;focal_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 找到正样本和负样本&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pos_mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 小于1的都是负样本&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;neg_mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;neg_weights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;pos_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clip_by_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e-7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos_mask&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;neg_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clip_by_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e-7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;neg_weights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;neg_mask&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;num_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pos_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;neg_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;neg_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;cls_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;neg_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;neg_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls_loss&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reg_l1_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 找到其在1维上的索引&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;full_indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 取出对应的预测值&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gather&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;full_indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_dims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 求取l1损失值&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;total_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y_pred&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reg_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_loss&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#---------------------------------------------------------------------------&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# hm_pred：热力图的预测值       (self.batch_size, self.output_size[0], self.output_size[1], self.num_classes)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# wh_pred：宽高的预测值         (self.batch_size, self.output_size[0], self.output_size[1], 2)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# reg_pred：中心坐标偏移预测值  (self.batch_size, self.output_size[0], self.output_size[1], 2)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# hm_true：热力图的真实值       (self.batch_size, self.output_size[0], self.output_size[1], self.num_classes)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# wh_true：宽高的真实值         (self.batch_size, self.max_objects, 2)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# reg_true：中心坐标偏移真实值  (self.batch_size, self.max_objects, 2)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# reg_mask：真实值的mask        (self.batch_size, self.max_objects)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# indices：真实值对应的坐标     (self.batch_size, self.max_objects)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#---------------------------------------------------------------------------&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wh_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wh_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hm_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;focal_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hm_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wh_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_l1_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wh_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wh_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;reg_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_l1_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reg_pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;total_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hm_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wh_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reg_loss&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# total_loss = tf.Print(total_loss,[hm_loss,wh_loss,reg_loss])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_loss&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;代码过程中关于tf的知识补充&#34;&gt;代码过程中关于tf的知识补充&lt;/h1&gt;
&lt;p&gt;tf.zero_like 对给定的张量中的元素设置为零.
tf.equal 判定两个Tensor是否相等
tf.where 判定两个Tensor中元素相同为True 不同为False&lt;/p&gt;
&lt;p&gt;tf.shape 获取Tensor尺寸
tf.reshape 改变Tensor的尺寸&lt;/p&gt;
&lt;p&gt;tf.expand_dims 在对应处增加一个维度
tf.tile 按照矩阵复制粘贴
tf.cast 执行Tensor中的数据类型转&lt;/p&gt;
&lt;p&gt;tf.concat 矩阵合并&lt;/p&gt;
&lt;h2 id=&#34;model-subclassing&#34;&gt;Model subclassing&lt;/h2&gt;
&lt;p&gt;继承Model类
Keras中的所有模型都继承了Model类.&lt;/p&gt;
&lt;p&gt;np.arange() 用于生成给定间隔的数组&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Qt_c&#43;&#43;_learning</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/qt_c&#43;&#43;_learning/" />
            <id>https://chenbokaix250.github.io/tech/qt_c&#43;&#43;_learning/</id>
            <updated>2021-04-30T11:04:05&#43;08:00</updated>
            <published>2021-04-30T11:02:53&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Qt学习中的记录 Qt Create 遇到的问题 Q1:在 macOS 上的 Qt Creator 中出現 No valid kits found https://blog.yowko.com/no-valid-kits-found-on-mac/ Q2:书籍下载 https://gitee.com/feiyangqingyun/qtkaifajingyan/blob/master/Qt%20Creator%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8_%E7%AC%AC%E4%B8%89%E7%89%88__%E9%9C%8D%E4%BA%9A%E9%A3%9E%E7%BC%96%E8%91%97.z01 Q3:Qt 5.5……</summary>
            
                <content type="html">&lt;h1 id=&#34;qt学习中的记录&#34;&gt;Qt学习中的记录&lt;/h1&gt;
&lt;h2 id=&#34;qt-create-遇到的问题&#34;&gt;Qt Create 遇到的问题&lt;/h2&gt;
&lt;p&gt;Q1:在 macOS 上的 Qt Creator 中出現 No valid kits found&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.yowko.com/no-valid-kits-found-on-mac/&#34;&gt;https://blog.yowko.com/no-valid-kits-found-on-mac/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q2:书籍下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitee.com/feiyangqingyun/qtkaifajingyan/blob/master/Qt%20Creator%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8_%E7%AC%AC%E4%B8%89%E7%89%88__%E9%9C%8D%E4%BA%9A%E9%A3%9E%E7%BC%96%E8%91%97.z01&#34;&gt;https://gitee.com/feiyangqingyun/qtkaifajingyan/blob/master/Qt%20Creator%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8_%E7%AC%AC%E4%B8%89%E7%89%88__%E9%9C%8D%E4%BA%9A%E9%A3%9E%E7%BC%96%E8%91%97.z01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q3:Qt 5.5 &#39;QApplication&#39;file not found 解决办法
&lt;a href=&#34;https://blog.csdn.net/Sub_lele/article/details/52240474&#34;&gt;https://blog.csdn.net/Sub_lele/article/details/52240474&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q4：使用Assitant
使用Assitant可以查看各种类的用法&lt;/p&gt;
&lt;p&gt;只安装&lt;code&gt;Qt create&lt;/code&gt;是没有的 需要安装完整的&lt;code&gt;qt-opensource-mac-x64-5.14.2.dmg&lt;/code&gt;
然后在&lt;code&gt;Qt5.14.2/5.14.2/clang/bin&lt;/code&gt;目录中&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;常用的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assistant&lt;/li&gt;
&lt;li&gt;qmake&lt;/li&gt;
&lt;li&gt;designer&lt;/li&gt;
&lt;li&gt;uic&lt;/li&gt;
&lt;li&gt;rcc&lt;/li&gt;
&lt;li&gt;moc&lt;/li&gt;
&lt;li&gt;qtcreator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用&lt;code&gt;qmake -project&lt;/code&gt; 生成和工程名相同的&lt;code&gt;.pro&lt;/code&gt;文件
一般添加&lt;code&gt;QT+= widgets&lt;/code&gt;,然后利用qmake连接pro文件,生成&lt;code&gt;Makefile&lt;/code&gt;
然后make&lt;/p&gt;
&lt;p&gt;利用designer可以直接进行界面设计,为&lt;code&gt;ui&lt;/code&gt;文件.然后利用uic转换为h文件
&lt;code&gt;uic designer.ui -o ui_designer.h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;rcc是将资源文件转义程&lt;code&gt;.h&lt;/code&gt;文件&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一个qt函数&#34;&gt;第一个Qt函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//创建Qt应用程序对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;QApplication&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//创建爱你标签控件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;QLabel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello Qt!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//显示标签控件
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//让应用程序进入事件循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;利用&lt;code&gt;qmake -project&lt;/code&gt; 生成和工程名相同的&lt;code&gt;.pro&lt;/code&gt;文件
一般添加&lt;code&gt;QT+= widgets&lt;/code&gt;,然后利用qmake连接pro文件,生成&lt;code&gt;Makefile&lt;/code&gt;
然后make&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Hello$ qmake -project
Hello$ ls 
Hello$ Hello.pro   main.cpp 
Hello$ qmake
Hello$ ls
Hello$ Hello.pro   main.cpp  Makefile
Hello$ make
Hello$ Hello Hello.pro main.cpp main.o Makefile
Hello$ ./Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;qt中文编码&#34;&gt;Qt中文编码&lt;/h2&gt;
&lt;p&gt;Qt中文编码 利用utf-8能正确显示
如果需要编码转换,需要利用&lt;code&gt;QTextCodec&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;QTextCodec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;codec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QTextCodec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;codecForName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GBK&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;codec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toUnicode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GBK编码的中文字符串&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;父窗口&#34;&gt;父窗口&lt;/h2&gt;
&lt;p&gt;创建控件时,可以指定停靠在某个父窗口上面,这时控件将作为子窗口被束缚在其父窗口的内部,伴随其一起移动/隐藏/显示和关闭.否则该控件将作为独立窗口显示在屏幕上,且游离在其他窗口外&lt;/p&gt;
&lt;p&gt;QWidget及其子类的对象可以做为其它控件的父窗口
常用的父窗口类有如下三个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;QWidget&lt;/li&gt;
&lt;li&gt;QMainWindow(主窗口)&lt;/li&gt;
&lt;li&gt;QDialog(对话框)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调试窗口的位置和大小&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;信号与槽函数&#34;&gt;信号与槽函数&lt;/h2&gt;
&lt;p&gt;信号的定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;XX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Q_OBJECT&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signal_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(..);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//信号函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//信号函数只需声明,不能写定义
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;槽函数定义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;XX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Q_OBJECT&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;slots&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...){...}&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//槽函数    
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//槽函数可以连接到某个信号上,当信号被发射时,槽函数将被触发和执行,另外槽函数也可以当做普通的成员函数直接调用.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;信号和槽的连接&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QObject::connet(const QObject* sender,const char* signal,const QObejct* receiver,const char* method);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数:&lt;/p&gt;
&lt;p&gt;sender:信号发送对象指针
signal:要发送的信号函数,可以使用&amp;quot;SIGNAL(..)&amp;quot;宏进行类型转换
receiver:信号的接收对象指针
method:接收信号后要执行的槽函数,可以使用&amp;quot;SLOT(..)&amp;quot;宏进行类型转换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;QObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SLOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//button的按下触发clicked信号 将label执行关闭操作
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;信号和槽连接时的语法要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号和槽参数要一致.&lt;/li&gt;
&lt;li&gt;可以带有缺省参数&lt;/li&gt;
&lt;li&gt;信号函数的参数可以多于槽函数,多余参数将被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// param consistency
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sigfun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SLOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slotfun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//ok
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sigfun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SLOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slotfun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;QSlider //滑块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//设置滑动范围
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//设置当前位置
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;valueChanged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//滑块滑动时发送信号
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;QSpinBox //选值框&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//设置数值改变范围
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//设置当前数值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;valueChanged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//选值框数值改变时发送信号
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;利用滑块改变选值框的值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Qobject::connect(&amp;amp;slider,SIGNAL(valueChanged(int)),&amp;amp;spin,SLOT(setValue(int)));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;利用选值框改变滑块位置&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Qobject::connect(&amp;amp;spin,SIGNAL(valueChanged(int)),&amp;amp;slider,SLOT(setValue(int)));&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;qt面向对象&#34;&gt;QT面向对象&lt;/h2&gt;
&lt;p&gt;设置文本对齐方式
&lt;code&gt;setAlignment(Qt::AlignRight)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置多个参数 用&lt;code&gt;|&lt;/code&gt;隔开
&lt;code&gt;setAlignment(Qt::AlignHCenter|Qt::AlignVCenter)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置label的字体大小&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;QFont&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setPointSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m_label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setFont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建布局器(垂直)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QVBoxLayout* layout = new QVBoxLayout(this);
layout-&amp;gt;addWidget(m_label);
layout-&amp;gt;addWidget(m_button);
setLayout(layout);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;数字验证器
&lt;code&gt;setValidator(new QDoubleValidator(this));&lt;/code&gt;
设置验证器 new数字验证器对象 参数是父窗口指针&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt; 获取系统时间&lt;/p&gt;
&lt;p&gt;槽函数设计:
&lt;code&gt;connect(m_button,SIGNAL(clicked(void)),thismSLOT(getTime(void)));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发射信号:
&lt;code&gt;emit mySignal(str);&lt;/code&gt;
label边框效果设置:
&lt;code&gt;m_label-&amp;gt;setFrameStyle(QFrame::Panel|QFrane::Sunken);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;获取当前系统时间
&lt;code&gt;QTime time = QTime::currentTime();&lt;/code&gt;
//设置格式
&lt;code&gt;QString str = time.toString(&amp;quot;hh:mm:ss&amp;quot;);&lt;/code&gt;
//显示时间
&lt;code&gt;setText(str);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt; 图片显示器&lt;/p&gt;
&lt;p&gt;利用create中ui设置连接槽 生成槽函数.&lt;/p&gt;
&lt;p&gt;绘图事件处理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;QPainter&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;painter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//创建画家对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QRect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frame&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;frameRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//获取绘图所在的矩形区域
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QImage&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;资源文件目录&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//构建图形对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;painter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drawImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//使用painter将image图片画到rect
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;坐标值平移,让rect和painter使用相同坐标系
&lt;code&gt;rect.translate(ui-&amp;gt;frame-&amp;gt;pos());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;时间事件处理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//虚函数方式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timerEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTimerEvent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//设置随即种子
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qsrand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;m_timer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startTimer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//开始定时器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;killTimer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//结束定时器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//槽函数实现方式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m_timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//定义槽函数onTimeout()和发送信号timeout
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//定时器到时时,发送timeout信号
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SLOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;鼠标键盘事件&#34;&gt;鼠标键盘事件&lt;/h2&gt;
&lt;p&gt;QWidget类定义虚函数提供鼠标事件的处理,其参数QMouseEvent描述了鼠标事件的细节:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mousePressEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QMouseEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//鼠标按下
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mouseReleaseEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QMouseEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//鼠标抬起
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mouseDoubleClickEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QMouseEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//鼠标双击
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mouseMoveEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QMouseEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//鼠标移动
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;重写虚函数 利用其event形参变量的成员button进行判断&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void MouseDialog::mousePressEvent(QMouseEvent *event)
{
    if(event-&amp;gt;button() == Qt;;LeftButton){
        xxxx;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;键盘处理按键&#34;&gt;键盘处理按键&lt;/h2&gt;
&lt;p&gt;QWidget类定义了以下虚函数提供对键盘事件的处理,其参数QKeyEvent描述了键盘事件的细节:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;keyPressEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QKeyEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//按键按下
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;keyReleaseEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QKeyEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//按键抬起
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;重写虚函数 利用其event形参变量的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;keyPressEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QKeyEvent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Qt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Key_Up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;sqlite数据库&#34;&gt;sqlite数据库&lt;/h2&gt;
&lt;p&gt;数据库是以一定方式村塾在一起,能为多个用户共享,具有尽可能小的冗余特性,是与应用程序彼此独立的数据集合&lt;/p&gt;
&lt;p&gt;相关术语:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB    数据库(database)&lt;/li&gt;
&lt;li&gt;DBMS  数据库管理系统&lt;/li&gt;
&lt;li&gt;DBA   数据库管理员&lt;/li&gt;
&lt;li&gt;RDB   关系型数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库操作语言(SQL)&lt;/p&gt;
&lt;p&gt;常用的SQL语句
数据操作语言(DML):SELECT INSERT DELETE UPDATE
数据定义语言(DDL):CREATE TABLE&lt;/p&gt;
&lt;p&gt;Sqlite的两种指令
一种是自身配置和格式控制相关指令,都以&lt;code&gt;.&lt;/code&gt;开头
一种是SQL语言,实现对数据库的增删改查等操作,这些以&amp;quot;;&amp;quot;结束&lt;/p&gt;
&lt;p&gt;其中:
.help可以获取帮助信息
.exit或.quit可以退出SQLite的命令节目,回到系统的控制终端
&lt;code&gt;Ctrl+L&lt;/code&gt;可以进行清屏&lt;/p&gt;
&lt;p&gt;Sqlite的常用命令&lt;/p&gt;
&lt;p&gt;.database  查看数据库的名字和对应的文件名
.table     查看数据表的名字
.schema    查看数据表创建时信息
.mode      设置显示模式
.nullvalue 设置空白字段显示的字符串
.header on 显示数据表的表头&lt;/p&gt;
&lt;p&gt;Sqlite命令行程序(SQL语句)
创建数据表
&lt;code&gt;CREATE TABLE 表名(列名1 类型[约束],列名2 类型[约束],...);&lt;/code&gt;
常用的类型
INT(整型) TEXT(字符串) REAL(浮点数)
常用的约束:
&lt;code&gt;PRIMARY KEY(主键):表示该列数据唯一,可以加快数据访问&lt;/code&gt;
&lt;code&gt;NOT NULL(非空):该列数据不能为空&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;向数据表中插入数据
&lt;code&gt;INSERT INTO 表名(列名1,列名2,...) VALUES(数值1,数值2,...);&lt;/code&gt;
如果要为表中的所有列添加值,并且插入列的顺序和创建表的顺序相同,可以不需要在Sqlite查询中指定列名
&lt;code&gt;INSERT INTO 表名 VALUES(数值1,数值2,...);&lt;/code&gt;
从数据表删除数据
&lt;code&gt;DELETE FROM 表名 WHERE 条件表达式;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改数据表中的数据
&lt;code&gt;UPDATE表名 SET 列名1=新数值,列名2=新数值,.... WHERE 条件表达式;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询数据表中的数据&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELETE 列名1,列名2,... FROM表名;
SELETE 列名1,列名2,... FROM表名WHERE条件表达式;
SELECT 列名1,列名2,... FROM表名WHERE条件表达式 ORDER BY 列名排序方式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模糊查询
&lt;code&gt;SELECT 列名1,列名2,.. FROM表名WHERE列名LIKE模糊匹配条件;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt; 学生数据管理平台&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;QSqlDatabase&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//建立Qt和数据库链接
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QSqlQueryModel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//保存结果集
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//成员函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//创建数据库
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//创建数据表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;queryTabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//查询
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//添加数据库驱动
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QSQLDatabase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addDatabase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;QSQLITE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//设置数据库名字
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setDatabaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sqlite.db&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//打开数据库
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;//创建数据表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QSqlQuery&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CREATE TABLE student(&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;s&#34;&gt;&amp;#34;id TNT PRIMARY KEY NOT NULL,&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;s&#34;&gt;&amp;#34;name TEXT NOT NULL,&amp;#34;&lt;/span&gt;
                    &lt;span class=&#34;s&#34;&gt;&amp;#34;score REEAL NOT NULL)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//创建成功返回true 否则返回yes
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//查询
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mouseDoubleClickEvent * FROM student&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//利用tableView显示
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;//增删改查的具体实现
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//增加
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QSqlQuery&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nameEdit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//从控件获取插入值 根据不同类型进行转换 toInt() toDouble() toString()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;INERTINTOstudentVALUES(%1,%2,%3)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//删除
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QSqlQuery&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idEdit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DELETE FROM student WHERE id = %1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//修改
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QSqlQuery&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idEdit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scoreEdit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toDouble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UPDATE student SET score=%1 WHERE id=%2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//排序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conodition&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ASC/DESC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//升序/降序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SELECT * FROM student ORDER BY %1 %2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tableView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//显示结果
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;网络编程&#34;&gt;网络编程&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;案例&lt;/strong&gt; 聊天室&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;概要设计&lt;/li&gt;
&lt;li&gt;详细设计&lt;/li&gt;
&lt;li&gt;代码编写&lt;/li&gt;
&lt;li&gt;测试/升级维护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/29/eNya5DEtInwBPSR.png&#34; alt=&#34;截屏2021-04-29 下午3.44.58.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/29/rRCiGqzg5h1Vvwu.png&#34; alt=&#34;截屏2021-04-29 下午3.44.44.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;服务器-qtcpserver&#34;&gt;服务器 QTcpServer&lt;/h3&gt;
&lt;p&gt;QTcpServer类提供了一个基于TCP的服务器,通过该类可以快速建立TCP服务器,并接受客户端的连接请求&lt;/p&gt;
&lt;p&gt;QTcpServer::listen()函数可以指定服务器的端口号,该函数可以监听主机IP地址(QHostAddress)&lt;/p&gt;
&lt;p&gt;设置监听后,每当检测到客户端发来连接请求,将会发送信号&lt;code&gt;newConnection()&lt;/code&gt;,可以自定义槽函数,在其中调用&lt;code&gt;nextPendingConnection()&lt;/code&gt;获取和客服端通信的套接字.&lt;/p&gt;
&lt;p&gt;过程伪代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//创建QTcpServer对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QTcpServer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//开启TCP服务器,监听所有地址
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QHostAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//连接客户端连接时的槽函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcpServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SLOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNewConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;服务器:接收客户端发来的消息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerDialog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onReadyRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clientList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//遍历检查哪个客户端有消息到来
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clientList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesAvaliable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()){&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;QByteArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clientList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//读取消息并保存
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listWidget&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//显示消息到界面
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//转发消息给其他在线客户端
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;客户端&#34;&gt;客户端&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QTcpSocket tcpSocket;//和服务器通信的tcp套接字
tcpSocket.connectToHost(serverIP,serverPort);//向服务器发送连接请求

//和服务器连接时发送信号connected
connect(&amp;amp;tcpSocket,SIGNAL(connected()),this,SLOT(onConnected()));
//当收到服务器转发消息时发送readyRead()信号
connect(&amp;amp;tcpSocket,SIGNAL(readyRead()),this,SLOT(onReadyRead()));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端:发送聊天消息
点击发送按钮向服务器发送聊天消息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClientDialog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;on_sendButton_clicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;QString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messageEdit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//获取用户输入的聊天内容
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//消息修饰
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;tcpSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toUtf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//向服务器发送聊天消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messageEdit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//清空已输入的消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;客户端;接收聊天消息
检测信号&amp;quot;readyRead&amp;quot;有消息到来则读取&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClientDialog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onReadyRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcpSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesAvaliable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()){&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//获取等待读取消息字节数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;QByteArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcpSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//读取消息并保存
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listWidget&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//显示消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python30个代码段</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python30%E4%B8%AA%E4%BB%A3%E7%A0%81%E6%AE%B5/" />
            <id>https://chenbokaix250.github.io/tech/python30%E4%B8%AA%E4%BB%A3%E7%A0%81%E6%AE%B5/</id>
            <updated>2021-04-17T14:18:17&#43;08:00</updated>
            <published>2021-04-17T14:17:52&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Python子任务代码 重复元素判定 以下方法可以检查给定列表是不是存在重复元素,她会使……</summary>
            
                <content type="html">&lt;h1 id=&#34;python子任务代码&#34;&gt;Python子任务代码&lt;/h1&gt;
&lt;h2 id=&#34;重复元素判定&#34;&gt;重复元素判定&lt;/h2&gt;
&lt;p&gt;以下方法可以检查给定列表是不是存在重复元素,她会使用set()函数来移除所有重复元素.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;all_unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;all_unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# False&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;all_unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;字符元素组成判定&#34;&gt;字符元素组成判定&lt;/h2&gt;
&lt;p&gt;检查两个字符串的组成元素是不是一样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Counter&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;anagram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;anagram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;abcd3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3acdb&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# True&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;内存占用&#34;&gt;内存占用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getsizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;字节占有&#34;&gt;字节占有&lt;/h2&gt;
&lt;p&gt;下面的代码块可以检查字符串占有的字节数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;byte_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;byte_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#4&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;byte_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;打印n次字符串&#34;&gt;打印N次字符串&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Programming&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# ProgrammingProgramming&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;大写第一个字母&#34;&gt;大写第一个字母&lt;/h2&gt;
&lt;p&gt;以下代码块会使用title()方法,从而大写字符串中每个单词的首字母&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;s = &amp;quot;programming is awesome&amp;quot;
print(s.title())
# Programming Is Awesome
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;分块&#34;&gt;分块&lt;/h2&gt;
&lt;p&gt;给定具体的大小,定义一个函数以按照这个大小切割列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ceil&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;压缩&#34;&gt;压缩&lt;/h2&gt;
&lt;p&gt;这个方法可以将布尔型的值去掉,使用filter函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;compact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#[ 1, 2, 3, &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;, 34 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;解包&#34;&gt;解包&lt;/h2&gt;
&lt;p&gt;如下代码段可以将打包好的成对列表解开成两组不同的元祖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;transposed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transposed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [(&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;e&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;f&amp;#39;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;链式对比&#34;&gt;链式对比&lt;/h2&gt;
&lt;p&gt;可以在一行代码中使用不同的运算符对比多个不同的元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# True&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;逗号连接&#34;&gt;逗号连接&lt;/h2&gt;
&lt;p&gt;下面的代码可以将列表连接成单个字符串,且每个元素间的分隔方式设置成为逗号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;hobbies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;basketball&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;football&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;swimming&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My hobbies are: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hobbies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# My hobbies are: basketball, football, swimming&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;元音统计&#34;&gt;元音统计&lt;/h2&gt;
&lt;p&gt;以下方法将统计字符串中的元音(a,e,i,o,u)的个数,通过正则表达式做的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;re&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;count_vowels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;findall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[aeiou]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IGNORECASE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;count_vowels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#3&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;count_vowels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gym&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;首字母小写&#34;&gt;首字母小写&lt;/h2&gt;
&lt;p&gt;如下方法将令给定字符串的第一个字符统一为小写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decapitalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;decapitalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;FooBar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# &amp;#39;fooBar&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展开列表&#34;&gt;展开列表&lt;/h2&gt;
&lt;p&gt;该方法将通过递归的方式将列表的嵌套展开为单个列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;spread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deep_flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deep_flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;deep_flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# [1,2,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;列表的差&#34;&gt;列表的差&lt;/h2&gt;
&lt;p&gt;该方法将返回第一个列表的元素，其不在第二个列表内。如果同时要反馈第二个列表独有的元素，还需要加一句 set_b.difference(set_a)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;set_b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;comparison&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;set_a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comparison&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# [3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;通过函数取差&#34;&gt;通过函数取差&lt;/h2&gt;
&lt;p&gt;如下方法首先会应用一个给定的函数,然后再返回应用函数后结果有差别的列表元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;difference_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;difference_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# [1.2]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;difference_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([{&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [ { x: 2 } ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;链式函数调用&#34;&gt;链式函数调用&lt;/h2&gt;
&lt;p&gt;在一行代码内调用多个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;subtract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subtract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;合并两个字典&#34;&gt;合并两个字典&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;merge_two_dicts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# make a copy of a &lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# modify keys and values of a with the once from b&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge_two_dicts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#{&amp;#39;y&amp;#39;:3,&amp;#39;x&amp;#39;:1,&amp;#39;z&amp;#39;:4}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;将两个列表转化为字典&#34;&gt;将两个列表转化为字典&lt;/h2&gt;
&lt;p&gt;如下方法将两个列表转化为单个字典&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#{&amp;#39;a&amp;#39;: 2, &amp;#39;c&amp;#39;: 4, &amp;#39;b&amp;#39;: 3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用枚举&#34;&gt;使用枚举&lt;/h2&gt;
&lt;p&gt;我们常用For循环来遍历某个列表,通用我们也能枚举列表的索引和值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; 
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Index &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (&amp;#39;Value&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;Index &amp;#39;, 0)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (&amp;#39;Value&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;Index &amp;#39;, 1)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#(&amp;#39;Value&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;Index &amp;#39;, 2)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (&amp;#39;Value&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;Index &amp;#39;, 3)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;执行时间&#34;&gt;执行时间&lt;/h2&gt;
&lt;p&gt;如下代码块可以用来计算执行特定代码所花费的时间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#3&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;total_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Time: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# (&amp;#39;Time: &amp;#39;, 1.1205673217773438e-05) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;try-else&#34;&gt;Try else&lt;/h2&gt;
&lt;p&gt;我们在使用 try/except 语句的时候也可以加一个 else 子句，如果没有触发错误的话，这个子句就会被运行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;TypeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;An exception was raised&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Thank God, no exceptions were raised.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#Thank God, no exceptions were raised.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;元素频率&#34;&gt;元素频率&lt;/h2&gt;
&lt;p&gt;下面的方法会根据元素频率取列表中最常见的元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;most_frequent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;most_frequent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;回文序列&#34;&gt;回文序列&lt;/h2&gt;
&lt;p&gt;以下方法会检查给定的字符串是不是回文序列，它首先会把所有字母转化为小写，并移除非英文字母符号。最后，它会对比字符串与反向字符串是否相等，相等则表示为回文序列。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;palindrome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;re&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[\W_]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[::&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;palindrome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;taco cat&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;不使用if-else的计算子&#34;&gt;不使用if-else的计算子&lt;/h2&gt;
&lt;p&gt;这一段代码可以不使用条件语句就实现加减乘除、求幂操作，它通过字典这一数据结构实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;operator&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;truediv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;**&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;shuffle&#34;&gt;Shuffle&lt;/h2&gt;
&lt;p&gt;该算法会打乱列表元素的顺序，它主要会通过 Fisher-Yates 算法对新列表进行排序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deepcopy&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deepcopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp_lst&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# [2,3,1] , foo = [1,2,3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展开列表-1&#34;&gt;展开列表&lt;/h2&gt;
&lt;p&gt;将列表内的所有元素，包括子列表，都展开成一个列表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;spread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;spread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# [1,2,3,4,5,6,7,8,9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;交换值&#34;&gt;交换值&lt;/h2&gt;
&lt;p&gt;不需要额外的操作就能交换两个变量的值.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# (14, -1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;字典默认值&#34;&gt;字典默认值&lt;/h2&gt;
&lt;p&gt;通过 Key 取对应的 Value 值，可以通过以下方式设置默认值。如果 get() 方法没有设置默认值，那么如果遇到不存在的 Key，则会返回 None。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Cpp宏的特殊符号</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/cpp%E5%AE%8F%E7%9A%84%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/" />
            <id>https://chenbokaix250.github.io/tech/cpp%E5%AE%8F%E7%9A%84%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</id>
            <updated>2021-04-15T16:16:11&#43;08:00</updated>
            <published>2021-04-15T16:15:41&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C++ 宏中包含特殊符号 分为几种: #,##,\ 字符串化操作符(#) 在一个宏中的参数前面使用一个#,预……</summary>
            
                <content type="html">&lt;h1 id=&#34;c-宏中包含特殊符号&#34;&gt;C++ 宏中包含特殊符号&lt;/h1&gt;
&lt;p&gt;分为几种: &lt;code&gt;#&lt;/code&gt;,&lt;code&gt;##&lt;/code&gt;,&lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;字符串化操作符&#34;&gt;字符串化操作符(#)&lt;/h2&gt;
&lt;p&gt;在一个宏中的参数前面使用一个#,预处理器会把这个参数转换为一个字符数组，换言之就是：#是“字符串化”的意思，出现在宏定义中的#是把跟在后面的参数转换成一个字符串。&lt;/p&gt;
&lt;p&gt;注意：其只能用于有传入参数的宏定义中，且必须置于宏定义体中的参数名前。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define exp(s) printf(&amp;#34;test s is:%s\n&amp;#34;,s)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define exp1(s) printf(&amp;#34;test s is:%s\n&amp;#34;,#s)
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define exp2(s) #s
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exp1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;sara&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;空格处理规则： &lt;strong&gt;忽略传入参数名前面和后面的空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当传入参数名间存在空格时，编译器将会自动连接各个子字符串，用每个子字符串之间以一个空格连接，忽略剩余空格。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exp2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;asda&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;bac&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//$asda bac 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;符号连接操作符&#34;&gt;符号连接操作符(##)&lt;/h2&gt;
&lt;p&gt;&amp;quot;##&amp;quot;是一种分隔连接方式，它的作用是先分隔，然后进行强制连接。将宏定义的多个形参转换成一个实际参数名。&lt;/p&gt;
&lt;p&gt;注意事项:&lt;/p&gt;
&lt;p&gt;当用##连接形参时,##前后的空格可有可无.
连接后的实际参数名,必须为实际存在的参数名或是编译器已知的宏定义.
如果##后的参数本身也是一个宏的话,##会阻止这个宏的展开&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define expA(s) printf(&amp;#34;前缀加上后的字符串为:%s\n&amp;#34;,gc_##s)  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//gc_s必须存在
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注意事项2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define expB(s) printf(&amp;#34;前缀加上后的字符串为:%s\n&amp;#34;,gc_  ##  s)  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//gc_s必须存在
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注意事项1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define gc_hello1 &amp;#34;I am gc_hello1&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 注意事项1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gc_hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I am gc_hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;expB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;//$前缀加上后的字符串为:I am gc_hello
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//$前缀加上后的字符串为:I am gc_hello1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;续行操作符&#34;&gt;续行操作符()&lt;/h2&gt;
&lt;p&gt;当定义的宏不能用一行表达完整时，可以用”\”表示下一行继续此宏的定义。
注意 \ 前留空格。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define MAX(a,b) ((a)&amp;gt;(b) ? (a) \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;   :(b))  
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//$ 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cpp/" term="cpp" label="cpp" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">DeepNet要点</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/deepnet%E8%A6%81%E7%82%B9/" />
            <id>https://chenbokaix250.github.io/tech/deepnet%E8%A6%81%E7%82%B9/</id>
            <updated>2021-04-07T18:21:28&#43;08:00</updated>
            <published>2021-04-07T17:19:45&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Pytorch官方示例 Pytorch Tensor的通道排序:[batch,channel,hei……</summary>
            
                <content type="html">&lt;h1 id=&#34;pytorch官方示例&#34;&gt;Pytorch官方示例&lt;/h1&gt;
&lt;p&gt;Pytorch Tensor的通道排序:[batch,channel,height,width]&lt;/p&gt;
&lt;p&gt;经卷积后的矩阵尺寸大小计算公式为:&lt;/p&gt;
&lt;p&gt;N = ( W - F + 2P) / S + 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入图片的大小为 W x W&lt;/li&gt;
&lt;li&gt;Filter大小 F x F&lt;/li&gt;
&lt;li&gt;步长 S&lt;/li&gt;
&lt;li&gt;padding的像素数 P&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vgg&#34;&gt;VGG&lt;/h1&gt;
&lt;p&gt;网络亮点:
通过堆叠多个3x3的卷积核来替代大尺度卷积核(减少所需参数)&lt;/p&gt;
&lt;p&gt;论文中提到:
可以通过堆叠两个3x3的卷积核替代5x5的卷积核,堆叠三个3x3的卷积核替代7x7的卷积核&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥有相同的感受野&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在卷积神经网络中,决定某一层输出结果中一个元素所对应的输入层的区域大小,被称为感受野(receptive field).通俗说,输出&lt;code&gt;feature map&lt;/code&gt;上的一个单元对应输入层上的区域大小.&lt;/p&gt;
&lt;p&gt;感受野计算公式:
&lt;code&gt;F(i) = (F(i+1)-1) x Stride + Ksize&lt;/code&gt;
F(i)为第i层感受野
Stride为第i层的步距
Ksize为卷积核或池化核尺寸&lt;/p&gt;
&lt;p&gt;文献中减去的RGB通道[123.68,116.78,103.94]
这是imagenet所有图形的RGB均值
如果基于迁移学习,需要减去这三个值(基于imagenet)&lt;/p&gt;
&lt;p&gt;如果从头开始训练,则不需要减去&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;googlenet&#34;&gt;GoogleNet&lt;/h1&gt;
&lt;p&gt;网络亮点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入Inception结果(融合不同尺度的特征信息)&lt;/li&gt;
&lt;li&gt;使用1x1的卷积核进行降维以及映射处理&lt;/li&gt;
&lt;li&gt;添加两个辅助分类器帮助训练&lt;/li&gt;
&lt;li&gt;丢弃全连接层,使用平均池化层(大大减少模型参数)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20160225155403967&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;inception结构&#34;&gt;Inception结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20160225155336279&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20160225155351172&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过宽高相同的卷积结果进行纵向拼接&lt;/p&gt;
&lt;h2 id=&#34;1x1卷积核&#34;&gt;1x1卷积核&lt;/h2&gt;
&lt;p&gt;通过1x1的卷积核,使得channel数减少,从而减少训练参数&lt;/p&gt;
&lt;h2 id=&#34;辅助分类器-inception4a和inception4d&#34;&gt;辅助分类器 Inception4A和Inception4D&lt;/h2&gt;
&lt;p&gt;辅助分类器,只在训练时起作用,推理时进行屏蔽
4x4x512   4x4x528&lt;/p&gt;
&lt;h2 id=&#34;模型参数&#34;&gt;模型参数&lt;/h2&gt;
&lt;p&gt;GoogleNet模型参数是VGGNet的1/20&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;resnet网络&#34;&gt;ResNet网络&lt;/h1&gt;
&lt;p&gt;网络中的亮点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;超深的网络结构(突破1000层)&lt;/p&gt;
&lt;p&gt;梯度消失或梯度爆炸 (归一化 权重初始化 BN处理)&lt;/p&gt;
&lt;p&gt;退化问题(degradation problem) (残差网络)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提出residual模块&lt;/p&gt;
&lt;p&gt;实线残差结构的尺寸不改变,虚线残差结构需改变适应网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Batch Nornalization的目的是调整feature map的分布为均值为0,方差为1的分布.
BN层放在卷积层和激活层中间,不使用偏置bias.&lt;/p&gt;
&lt;h1 id=&#34;迁移学习&#34;&gt;迁移学习&lt;/h1&gt;
&lt;p&gt;能够快速的训练出一个理想的结果
当数据集较小时也能训练出理想的效果&lt;/p&gt;
&lt;p&gt;注意:使用别人预训练模型参数时,要注意别人的预处理方式.&lt;/p&gt;
&lt;p&gt;常见的迁移学习方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;载入权重后训练所有参数&lt;/li&gt;
&lt;li&gt;载入权重后只训练最后几层参数&lt;/li&gt;
&lt;li&gt;载入权重后在原网络基础上再添加一层全连接层,仅训练最后一个全连接层&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;目标检测的指标评价&#34;&gt;目标检测的指标评价&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;coco&lt;/li&gt;
&lt;li&gt;pascal voc(之前用的比较多)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎么才算正确检测到目标:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IOU大于指定阈值
类别正确
confidence大于指定阈值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目标检测中常见指标&lt;/p&gt;
&lt;p&gt;TP(True Positive):loU&amp;gt;0.5的检测框数量(同一Ground Truth只计算一次)
FP(False Positive):loU&amp;lt;=0.5的检测框(或者是检测到同一个GT的多余检测框的数量
FN(False Negative):没有检测到的GT的数量&lt;/p&gt;
&lt;p&gt;Percision:TP/(TP + FP) 模型预测的所有目标中,预测正确的比例  (查准率)
Recall: TP/(TP+FN) 所有真实目标中,模型预测正确的目标比例    (查全率)&lt;/p&gt;
&lt;p&gt;AP:P-R 曲线下面积
P-R曲线:Precision-Recall曲线&lt;/p&gt;
&lt;p&gt;mAP:mean Average Precision,即各类别AP的平均值&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cocodataset.org/#home&#34; alt=&#34;coco官网&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;alexnet&#34;&gt;AlexNet&lt;/h1&gt;
&lt;p&gt;该网络的亮点在于:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首次利用进行网络加速训练&lt;/li&gt;
&lt;li&gt;使用ReLU激活函数,而不是传统的Sigmoid激活函数以及Tanh激活函数&lt;/li&gt;
&lt;li&gt;使用了LRN局部响应归一化&lt;/li&gt;
&lt;li&gt;在全连接层的前两层中使用了Dropout随即失活神经元操作,以减少过拟合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从colab上将训练的模型下载下来:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from google.colab import files
files.download(&amp;quot;AlexNet.pth&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;pytorch中cpu和gpu load时相互转化torch.load&lt;/p&gt;
&lt;p&gt;将gpu改为cpu时，遇到一个报错：&lt;/p&gt;
&lt;p&gt;RuntimeError: Attempting to deserialize object on a CUDA device but torch.cuda.is_available() is False. If you are running on a CPU-only machine, please use torch.load with map_location=&#39;cpu&#39; to map your storages to the CPU.&lt;/p&gt;
&lt;p&gt;此时改为：
&lt;code&gt;torch.load(&amp;quot;0.9472_0048.weights&amp;quot;,map_location=&#39;cpu&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就可以解决问题&lt;/p&gt;
&lt;p&gt;假设我们只保存了模型的参数(model.state_dict())到文件名为modelparameters.pth, model = Net()&lt;/p&gt;
&lt;p&gt;1.cpu-&amp;gt;cpu 或者gpu-&amp;gt;gpu&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;checkpoint = torch.load(&#39;modelparameters.pth&#39;)

model.load_state_dict(checkpoint)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.cpu-&amp;gt;gpu 1&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.load(&#39;modelparameters.pth&#39;, map_location=lambda storage, loc: storage.cuda(1))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.gpu1 -&amp;gt; gpu0&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.load(&#39;modelparameters.pth&#39;, map_location={&#39;cuda:1&#39;:&#39;cuda:0&#39;})
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;gpu-&amp;gt;cpu&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.load(&#39;modelparameters.pth&#39;, map_location=lambda storage, loc: storage)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;pytorch-torchvision-transform&#34;&gt;pytorch torchvision transform&lt;/h2&gt;
&lt;p&gt;对&lt;code&gt;PIL.Image&lt;/code&gt;进行变换&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class torchvision.transforms.Compose(transforms)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将多个&lt;code&gt;transform&lt;/code&gt;组合起来&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;transforms.Compose([
    transforms.CenterCrop(10),
    transforms.TnTensor(),
])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;transformer&#34;&gt;Transformer&lt;/h2&gt;
&lt;p&gt;Seq2seq model with &amp;quot;Self-attention&amp;quot;&lt;/p&gt;
&lt;p&gt;self-Attention Layer 输入sequence 输出sequence&lt;/p&gt;
&lt;p&gt;sequence can be parallelly computed.&lt;/p&gt;
&lt;p&gt;use self-Attention Layer replace RNN in Anything&lt;/p&gt;
&lt;p&gt;No position information in self-attention&lt;/p&gt;
&lt;h1 id=&#34;mobilenet-v3&#34;&gt;MobileNet V3&lt;/h1&gt;
&lt;p&gt;更新Block&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加入SE模块&lt;/li&gt;
&lt;li&gt;更新了激活函数&lt;/li&gt;
&lt;li&gt;减少卷积层的卷积核个数(32-&amp;gt;16)&lt;/li&gt;
&lt;li&gt;精简Last Stage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;swish激活函数
&lt;code&gt;swish x = x * σ(x)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h-swish[x] = x * ReLU6(x + 3)/6&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Effective_Python要点笔记</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/effective_python%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0/" />
            <id>https://chenbokaix250.github.io/tech/effective_python%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0/</id>
            <updated>2021-04-07T17:17:03&#43;08:00</updated>
            <published>2021-04-07T17:15:51&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">effective python 要点笔记 Pythonic Thinking 查看Python版本 遵循PEP8风格编程风格 关于空格的使用 使用空格而……</summary>
            
                <content type="html">&lt;h1 id=&#34;effective-python-要点笔记&#34;&gt;effective python 要点笔记&lt;/h1&gt;
&lt;h2 id=&#34;pythonic-thinking&#34;&gt;Pythonic Thinking&lt;/h2&gt;
&lt;h2 id=&#34;查看python版本&#34;&gt;查看Python版本&lt;/h2&gt;
&lt;h2 id=&#34;遵循pep8风格编程风格&#34;&gt;遵循PEP8风格编程风格&lt;/h2&gt;
&lt;h3 id=&#34;关于空格的使用&#34;&gt;关于空格的使用&lt;/h3&gt;
&lt;p&gt;使用空格而不是tab键来缩进
每行代码应尽量的少于79个字符&lt;/p&gt;
&lt;h3 id=&#34;命名&#34;&gt;命名&lt;/h3&gt;
&lt;p&gt;函数的变量以及属性应该使用小写,如果多个残次推荐使用下划线进行分隔&lt;/p&gt;
&lt;p&gt;被保护的属性应该使用前导下划线来进行声明&lt;/p&gt;
&lt;p&gt;私有的属性应该使用两个前导下划线来进行声明&lt;/p&gt;
&lt;p&gt;类和异常信息应使用单次首字母大写形式,也就是驼峰命名法&lt;/p&gt;
&lt;p&gt;模块解包的常量应该全部使用大写的形式&lt;/p&gt;
&lt;h3 id=&#34;表达式和语句&#34;&gt;表达式和语句&lt;/h3&gt;
&lt;p&gt;使用内联否定而不是显示的表达式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if a is not b   √
if not a is b   x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当引用一个模块的时候使用绝对的模块名称,而不是与当前模块路径相关的名称&lt;/p&gt;
&lt;p&gt;按照以下规则引入模块: 标准库/第三方库.自己的库&lt;/p&gt;
&lt;h2 id=&#34;str和unicode相关&#34;&gt;str和unicode相关&lt;/h2&gt;
&lt;p&gt;可以使用&lt;code&gt;+&lt;/code&gt;运算符合并str和unicode&lt;/p&gt;
&lt;h2 id=&#34;如何分片&#34;&gt;如何分片&lt;/h2&gt;
&lt;p&gt;分片可以以最小的代价访问到子序列的某一项&lt;/p&gt;
&lt;p&gt;简单分片基本形式:&lt;code&gt;somelist[start:end]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当分片是从头开始的,下标可以省略 &lt;code&gt;assert [a:5]== a0:5]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;简单分片中避免使用startendstride&#34;&gt;简单分片中避免使用start,end,stride&lt;/h2&gt;
&lt;p&gt;分片中Python有针对步幅的特殊语法,形如:&lt;code&gt;somelist[start:end:stride]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;步幅递进时,可以使用-1来实现字符串逆序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[::&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#output: b&amp;#39;gfedcba&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用列表表达式而不是map和filter&#34;&gt;使用列表表达式而不是map和filter&lt;/h2&gt;
&lt;p&gt;python提供了从一个列表导出另一个列表的紧凑语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#列表表达式&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;squares&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;squares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#map&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;squares&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#output: [1, 4, 9, 16, 25]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;在列表表达式中避免使用超过两个的表达式&#34;&gt;在列表表达式中避免使用超过两个的表达式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;matrix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;flat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matrux&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;复杂地方考虑使用生成器表达式&#34;&gt;复杂地方考虑使用生成器表达式&lt;/h2&gt;
&lt;p&gt;python提供了一个&lt;code&gt;generator expression&lt;/code&gt;(生成器表达式).在程序运行过程中,生成器表达式不实现整个输出序列.每次只处理一个迭代项,而不是整个序列&lt;/p&gt;
&lt;h2 id=&#34;enumerate比range更好用&#34;&gt;enumerate比range更好用&lt;/h2&gt;
&lt;p&gt;enumerate 可以读取数据的标号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;flavor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flavor&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flavor_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flavor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#1:a&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#2:b&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#3:c&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#4:d&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#5:e&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#6:f&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#7:g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;用拉链来并行处理迭代器&#34;&gt;用拉链来并行处理迭代器&lt;/h2&gt;
&lt;p&gt;python3中,&lt;code&gt;zip&lt;/code&gt;通过生成器封装了两个或者更多的迭代器.&lt;/p&gt;
&lt;p&gt;拉链函数处理时,迭代器的长度最好保持一致.如果其中一个的得带器走到头,则剩下的数据将不予展示,直接 &lt;strong&gt;截断输出&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;for和while循环体后避免使用else语句块&#34;&gt;for和while循环体后避免使用else语句块&lt;/h2&gt;
&lt;p&gt;当遍历数据结构为空,或不完整时,会执行其后的else,其他情况,需要避免&lt;/p&gt;
&lt;h2 id=&#34;在tryexceptfinally中受益&#34;&gt;在&lt;code&gt;try/except/finally&lt;/code&gt;中受益&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;try/finally&lt;/code&gt;组合语句可以使得代码简洁和无视try块中是否发生异常&lt;/p&gt;
&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;h2 id=&#34;返回exception而不是none&#34;&gt;返回&lt;code&gt;exception&lt;/code&gt;而不是None&lt;/h2&gt;
&lt;p&gt;返回一个特殊的值为None时,可以将其转化为except&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;divide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ZeroDivisionError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;divide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Invalid inputs!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;类和继承&#34;&gt;类和继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##对简单接口使用函数而不是类&lt;/p&gt;
&lt;h2 id=&#34;使用classmethod多态性构造对象&#34;&gt;使用@classmethod多态性构造对象&lt;/h2&gt;
&lt;p&gt;多态是一个对于分层良好的类树中,不同类之间相同名称的方法却实现了不同的功能的体现.&lt;/p&gt;
&lt;p&gt;Python的每个类只支持单个的构造方法 &lt;code&gt;__init__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;@classmethod&lt;/code&gt;可以为类定义可替代构造方法的方法&lt;/p&gt;
&lt;p&gt;类的多态为具体子类的组合提供了一种更加通用的方式&lt;/p&gt;
&lt;h2 id=&#34;使用super关键字初始化父类&#34;&gt;使用super关键字初始化父类&lt;/h2&gt;
&lt;p&gt;super将父类的初始化顺序进行了标准化声明,保证了菱形继承中超类只执行一次.&lt;/p&gt;
&lt;h2 id=&#34;多使用公共属性而不是私有属性&#34;&gt;多使用公共属性,而不是私有属性&lt;/h2&gt;
&lt;p&gt;访问私有属性时,需要利用&lt;code&gt;baz._MyParentObject__private_field&lt;/code&gt;进行访问
否则会曝出异常&lt;code&gt;AttributeError: ;MyChildObject&#39; objetc has no attribute &#39;__private_field&#39;.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;classmethod和staticmethod装饰器使用介绍&#34;&gt;@classmethod和@staticmethod装饰器使用介绍&lt;/h1&gt;
&lt;p&gt;@classmethod和@staticmethod都是在类中定义函数时采用的&lt;/p&gt;
&lt;p&gt;在定义一个函数时,没有用到任何类和实例的属性、变量,那么在定义该函数前添加@staticmethod就可以定义为 &lt;strong&gt;静态函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在定义一个函数时,只用到了类属性但没有用到实例属性、变量,那么添加@classmethod就可以定义 &lt;strong&gt;类函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;my_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yuyu&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test_time&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;explain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is a test class.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;class_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My name is always&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;instance_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;The test time is uncertain,now is&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;---if you create an instance,you can use the instance.---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_inst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;explain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;


&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;---if not,you can use the class without instance to call the stastic_fun and class_func---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;explain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#test.instance_func()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#TypeError: instance_func() missing 1 required positional argument: &amp;#39;self&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。&lt;/li&gt;
&lt;li&gt;@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。&lt;/li&gt;
&lt;li&gt;如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。&lt;/li&gt;
&lt;li&gt;@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">InterPy要点整理</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/interpy%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/" />
            <id>https://chenbokaix250.github.io/tech/interpy%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/</id>
            <updated>2021-03-26T17:17:18&#43;08:00</updated>
            <published>2021-03-26T17:13:40&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">InterPy要点整理 *args 和 ***kwargs *args 可以将不定数量的参数传递给一个函数 **kwargs 将不定长度的键值对……</summary>
            
                <content type="html">&lt;h1 id=&#34;interpy要点整理&#34;&gt;InterPy要点整理&lt;/h1&gt;
&lt;h2 id=&#34;args-和-kwargs&#34;&gt;&lt;code&gt;*args&lt;/code&gt; 和 &lt;code&gt;***kwargs&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; 可以将不定数量的参数传递给一个函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;**kwargs&lt;/code&gt; 将不定长度的键值对,作为参数传递给一个函数,如果在一个函数里处理带名字的参数,应该使用&lt;code&gt;**kwargs&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def test_args_kwargs(arg1,arg2,arg3):
    print(arg1)
    print(arg2)
    print(arg3)

# 使用 *args

args = (2,3,5)
test_args_kwargs(*args)

# 使用 **kwargs

kwargs = {&#39;arg1&#39;:2,&#39;arg2&#39;:3,&#39;arg3&#39;:5}
test_args_kwargs(**kwargs)

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;p&gt;利用Python debugger(pdb)来进行代码调试&lt;/p&gt;
&lt;p&gt;使用Python debugger运行脚本
&lt;code&gt;python -m pdb script.py&lt;/code&gt;
会在脚本第一行指令处停止执行,这在脚本很短时有帮助&lt;/p&gt;
&lt;p&gt;也可以在脚本内部设置断点
利用&lt;code&gt;pdb.set_trace()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;命令列表:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c:继续执行&lt;/li&gt;
&lt;li&gt;n:继续执行一行&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;生成器-generators&#34;&gt;生成器 Generators&lt;/h2&gt;
&lt;p&gt;迭代器(iterators)是一个让程序员可以遍历一个容器的对象.
&lt;strong&gt;一个迭代器在遍历并读取一个容器的数据元素时,并不会执行一个迭代.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可迭代对象(Iterable)&lt;/li&gt;
&lt;li&gt;迭代器(Iterator)&lt;/li&gt;
&lt;li&gt;迭代(Iteration)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任意对象,可以返回一个迭代器的&lt;code&gt;__iter__&lt;/code&gt;方法,或者定义可以支持下标索引的&lt;code&gt;__getitem__&lt;/code&gt;方法,他就是一个可迭代对象.
任意对象,只要定义了next或者&lt;code&gt;__next__&lt;/code&gt;方法,就是一个迭代器.&lt;/p&gt;
&lt;p&gt;生成器也是一种迭代器,但是只对其迭代一次.&lt;/p&gt;
&lt;p&gt;生成器最佳应用场景是:你不想同一时间将所有计算出来的大量结果集分配到内存当中,特别是结果集里还包含循环.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mapfilter和reduce&#34;&gt;Map,Filter和Reduce&lt;/h2&gt;
&lt;p&gt;Map会将一个函数映射到一个输入列表的所有元素上.规范:
&lt;code&gt;map(function_to_apply,list_of_inputs)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;filter过滤列表中的元素,并且返回一个由所有符合要求的元素构成的列表&lt;/p&gt;
&lt;p&gt;Reduce当需要对一个列表进行一些计算并返回结果时.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;set数据结构&lt;/p&gt;
&lt;p&gt;set行为类似于list,但区别在于set不能包含重复值.&lt;/p&gt;
&lt;p&gt;利用set来检查列表中是否包含重复的元素&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#for循环
some_list = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;b&#39;,&#39;d&#39;,&#39;m&#39;,&#39;n&#39;,&#39;n&#39;]

duplicates = []
for value in some_list:
    if some_list.count(value)&amp;gt;1:
        if value not in duplicates:
            duplicates.append(value)
print(duplicates)

## 使用集合(sets)方法

some_list = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;b&#39;,&#39;d&#39;,&#39;m&#39;,&#39;n&#39;,&#39;n&#39;]

duplicates = set([x for x in some_list if some_list.count(x)&amp;gt;1])
print(duplicates)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;求两个集合的交集和差集的使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 交集
valid = set([&#39;yellow&#39;,&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;,&#39;black&#39;])
input_set = set([&#39;red&#39;,&#39;brown&#39;])
print(input_set.intersection(valid))

# 差集
valid = set([&#39;yellow&#39;,&#39;red&#39;,&#39;blue&#39;,&#39;green&#39;,&#39;black&#39;])
input_set = set([&#39;red&#39;,&#39;brown&#39;])
print(input_set.difference(valid))
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;三元运算符&#34;&gt;三元运算符&lt;/h2&gt;
&lt;p&gt;三元运算符也被称作条件表达式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 如果条件为真,返回真,否则返回假
condition_is_true if condition else condition_is_false

is_fat = True
state = &amp;quot;fat&amp;quot; if is_fat else &amp;quot;not fat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用元祖的三元运算符&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# (返回假,返回真)[真或假]
(if_test_is_false,if_test_is_true)[test]

fat = True
fitness = (&#39;skinny&#39;,&#39;fat&#39;)[fat]
print(&#39;Ali is&#39;,fitness)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;装饰器&#34;&gt;装饰器&lt;/h2&gt;
&lt;p&gt;装饰器(Decorators)是修改其他函数的功能的函数.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一切皆对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;yasoob&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hi &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; 
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;# hi yasoob&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 甚至可以将一个函数赋值给一个变量&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#没有使用hi(),而是hi 说明并不是在调用hi函数,而是将它放在greet变量里&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# hi yasoob&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt; 

&lt;span class=&#34;c1&#34;&gt;# print(hi())&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# NameError: name &amp;#39;hi&amp;#39; is not defined    &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# hi yasoob&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;在函数中定义函数&#34;&gt;在函数中定义函数&lt;/h3&gt;
&lt;p&gt;在一个函数中定义另一个函数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;yasoob&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;now you are inside the hi() function&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now you are in the greet() function&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;welcome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now you are in the welcome() function&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;welcome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;now you are back in the hi() function&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# output:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# now you are inside the hi() function&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# now you are in the greet() function&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# now you are in the welcome() function&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# now you are back in the hi() function&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# output: NameError: name &amp;#39;greet&amp;#39; is not defined&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 调用hi()时,greet()和welcome()将会同时被调用.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 在hi()之外是不能访问的&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以创建嵌套的函数,函数也能返回函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;yasoob&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now you are in the greet() function&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;welcome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;now you are in the welcome() function&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;yasoob&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;welcome&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;将函数作为参数传给另一个函数&#34;&gt;将函数作为参数传给另一个函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;hi  yasoob!&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doSomethingBeforeHi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am doing some boring work before executing hi()&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;doSomethingBeforeHi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;第一个装饰器&#34;&gt;第一个装饰器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a_new_decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapTheFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am doing some boring work before executing a_func()&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am doing some boring work after executing  a_func()&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapTheFunction&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am the function which needs some decoration to remove my foul smell&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a_new_decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;利用装饰符号&lt;code&gt;@&lt;/code&gt;进行改写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@a_new_decorator&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am the function which needs some decoration to remove my foul smell&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a_new_decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# output:wrapTheFunction&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#wrapTheFunction重写了函数的名字和注释文档 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Python提供了&lt;code&gt;functools.wraps&lt;/code&gt;来避免这个问题&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;functools.wraps&lt;/code&gt;进行改写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wraps&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a_new_decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@wraps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapTheFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am doing some boring work before executing a func()&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am doing some boring work after executing a func()&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapTheFunction&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@a_new_decorator&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;I am the function which needs some decoration to remvoe my foul smell&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a_function_requiring_decoration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#output:a_function_requiring_decoration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;装饰器的蓝本规范&#34;&gt;装饰器的蓝本规范:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wraps&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decoratpr_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@wraps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;can_run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Function will not run&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decorated&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@decorator_name&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Function is running&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;can_run&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;can_run&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt; 
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;@wraps&lt;/code&gt;接受一个函数来进行装饰,并加入复制函数名称,注释文档,参数列表等待功能
这可以在装饰器里面访问在装饰之前的函数的属性&lt;/p&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;使用场景&lt;/h3&gt;
&lt;h4 id=&#34;授权authorization&#34;&gt;授权(Authorization)&lt;/h4&gt;
&lt;p&gt;装饰器能有助于检测某个人是否被授权去使用一个web应用的端点.
基于装饰器的授权:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wraps&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;requires_auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@wraps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authorization&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;authenticate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decorated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;日志logging&#34;&gt;日志(Logging)&lt;/h4&gt;
&lt;p&gt;日志是装饰器运用的另一个亮点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wraps&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@wraps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;with_logging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;was called&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with_logging&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@logit&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addition_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addition_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;函数中嵌入装饰器&#34;&gt;函数中嵌入装饰器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wraps&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;out.log&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;logging_decorator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@wraps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapped_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;log_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;was called&amp;#39;&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opened_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;opened_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapped_function&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;logging_decorator&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@logit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;myfunc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;myfunc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@logit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;func2.log&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;myfunc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;myfunc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;装饰器类&#34;&gt;装饰器类&lt;/h3&gt;
&lt;p&gt;可以利用类来构建装饰器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;functools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wraps&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;logit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;out.log&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@wraps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapped_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;log_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;was called&amp;#39;&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opened_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;opened_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;reutrn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapped_function&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@logit&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;myfunc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;global和return&#34;&gt;Global和Return&lt;/h2&gt;
&lt;p&gt;global变量意味着可以在函数以外的区域访问这个变量
return多个变量时,可以&lt;code&gt;return name,age&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;对象变动&#34;&gt;对象变动&lt;/h2&gt;
&lt;p&gt;Python中可变(mutable)与不可变(immutable)的数据类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Output: [&amp;#39;hi&amp;#39;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;bye&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;每当将一个变量赋值为另一个可变类型的变量时,对这个数据的任意改动会同时反映到这两个变量上去.&lt;/p&gt;
&lt;h2 id=&#34;__slot__魔法&#34;&gt;&lt;code&gt;__slot__&lt;/code&gt;魔法&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;__slot__&lt;/code&gt;,可以控制Python去额外分配内存保存所有属性,只给一个固定集合的属性分配空间.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#不使⽤ __slots__:&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; 
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt; 
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#使⽤ __slots__:&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    
    &lt;span class=&#34;vm&#34;&gt;__slots__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;identifier&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#第⼆段代码会为你的内存减轻负担。通过这个技巧，有些⼈已经看到内存占⽤率⼏乎 40%~50%的减少。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;虚拟环境&#34;&gt;虚拟环境&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt;针对每个程序创建独立(隔离)的Python环境&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重要的命令是:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;virtualenv myproject
source bin/activate

#退出virtualenv

deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;容器collections&#34;&gt;容器Collections&lt;/h2&gt;
&lt;h3 id=&#34;defaultdict&#34;&gt;defaultdict&lt;/h3&gt;
&lt;p&gt;defaultdict与dict类型不同,不需要检查key&lt;/p&gt;
&lt;h3 id=&#34;counter&#34;&gt;counter&lt;/h3&gt;
&lt;p&gt;Counter是一个计数器,可以用来针对某项数据进行计数&lt;/p&gt;
&lt;p&gt;可以利用它统计一个文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;filenmae&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;line_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;deque&#34;&gt;deque&lt;/h3&gt;
&lt;p&gt;deque提供了一个双端队列,可以从头/尾两端添加或删除元素.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;popleft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;namedtuple&#34;&gt;namedtuple&lt;/h3&gt;
&lt;p&gt;一个元祖是一个不可变的列表&lt;/p&gt;
&lt;h3 id=&#34;enumenum&#34;&gt;enum.Enum&lt;/h3&gt;
&lt;p&gt;枚举对象
Enums组织各种东西的方式&lt;/p&gt;
&lt;h3 id=&#34;枚举-enumerate&#34;&gt;枚举 Enumerate&lt;/h3&gt;
&lt;h2 id=&#34;自省对象&#34;&gt;自省对象&lt;/h2&gt;
&lt;h3 id=&#34;__dir__&#34;&gt;&lt;code&gt;__dir__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;dir可以返回所有方法的名字&lt;/p&gt;
&lt;p&gt;type 与id
type返回一个对象的类型
id返回不同种类对象的唯一ID&lt;/p&gt;
&lt;h2 id=&#34;inspect模块&#34;&gt;inspect模块&lt;/h2&gt;
&lt;h2 id=&#34;推导式-comprehension&#34;&gt;推导式 Comprehension&lt;/h2&gt;
&lt;h2 id=&#34;lambda表达式&#34;&gt;lambda表达式&lt;/h2&gt;
&lt;p&gt;一行函数 也被称为匿名函数&lt;/p&gt;
&lt;p&gt;原型 &lt;code&gt;lambda 参数:操作(参数)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;open函数&#34;&gt;open函数&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;with open(&#39;photo.jpg&#39;,&#39;r+&#39;) a f:
    jpgdata = f.read()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;open的第一个参数是文件名.第二个决定了这个文件如何被打开&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取文件,传入r&lt;/li&gt;
&lt;li&gt;读取并写入文件,传入r+&lt;/li&gt;
&lt;li&gt;覆盖写入文件,传入w&lt;/li&gt;
&lt;li&gt;文件末尾附加内容,传入a&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Monocamera_opencv传统测距</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/monocamera_opencv%E4%BC%A0%E7%BB%9F%E6%B5%8B%E8%B7%9D/" />
            <id>https://chenbokaix250.github.io/tech/monocamera_opencv%E4%BC%A0%E7%BB%9F%E6%B5%8B%E8%B7%9D/</id>
            <updated>2021-03-23T16:25:50&#43;08:00</updated>
            <published>2021-03-23T16:24:30&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">摄像头单目测距原理与实现 一.测距原理 空间的深度或距离等数据的摄像头 单纯的单目视觉测距……</summary>
            
                <content type="html">&lt;h1 id=&#34;摄像头单目测距原理与实现&#34;&gt;摄像头单目测距原理与实现&lt;/h1&gt;
&lt;h2 id=&#34;一测距原理&#34;&gt;一.测距原理&lt;/h2&gt;
&lt;p&gt;空间的深度或距离等数据的摄像头&lt;/p&gt;
&lt;p&gt;单纯的单目视觉测距，必须已知一个确定的长度&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2020.cnblogs.com/blog/1251718/202005/1251718-20200503161951749-1222809582.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;f为摄像头的焦距
c为镜头光心
物体发出的光经过相机的光心,然后成像于图像传感器或者也可以说是像平面上,如果设物体所在平面与相机平面的距离为d,物体实际高度为H,在传感器上的高度为h,H一定要是已知的,我们才能求得距离d.&lt;/p&gt;
&lt;p&gt;假设我们有一个宽度为W的目标或物体.然后我们将这个目标放在距离我们的相机D的位置.我们用相机对物体进行拍照且测量物体的像素宽度P.这样就能得到相机焦距的公式:
&lt;code&gt;F = (P x D)/W&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假设现在我们有一张A4纸（8.27in x 11.69in), in代表英寸，1in = 25.4mm。纸张宽度W=11.69in，相机距离纸张的距离D = 32in，此时拍下的照片中A4纸的像素宽度为P=192px（我的相机实际测量得到的值）。
此时我们可以算出焦距F=（192x30)/11.69。&lt;/p&gt;
&lt;p&gt;当我们将摄像头远离或者靠近A4纸时，就可以用相似三角形得到相机距离物体的距离。
此时的距离： D’ = (W’ x F ) / P’。&lt;/p&gt;
&lt;h2 id=&#34;二测距步骤&#34;&gt;二.测距步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用摄像机采集道路前方的图像&lt;/li&gt;
&lt;li&gt;在道路区域对物体进行检测,通过矩形框将物体形状框出来&lt;/li&gt;
&lt;li&gt;结合矩形框信息,找到该矩形框底边的两个像平面坐标,分别记为(u1,v1)和(u2,v2)&lt;/li&gt;
&lt;li&gt;使用几何关系推导法,由像平面坐标点(u1,v1)和(u2,v2)推导出道路平面坐标(x1,y1)/(x2,y2);  &lt;strong&gt;投影到地面上,z轴为0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通过欧氏距离公式计算出d&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三难点步骤&#34;&gt;三.难点步骤&lt;/h2&gt;
&lt;p&gt;1.图像畸变矫正模型的理解;&lt;/p&gt;
&lt;p&gt;（标定参数，内参矩阵，畸变矩阵，外参矩阵（平移、旋转向量矩阵））&lt;/p&gt;
&lt;p&gt;2.像素坐标与世界坐标公式的推导及验证；&lt;/p&gt;
&lt;p&gt;3.测距方法，对于检测物体在摄像头前方、左侧、右侧的判别思路；&lt;/p&gt;
&lt;p&gt;4.弄清反畸变；对于畸变矫正后的图像中的检测框中的点进行反畸变处理。&lt;/p&gt;
&lt;h2 id=&#34;四相机镜头畸变矫正---得到相机的内外参数畸变参数矩阵&#34;&gt;四.相机镜头畸变矫正--&amp;gt; 得到相机的内外参数/畸变参数矩阵&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;外参数矩阵。世界坐标经过旋转和平移，然后落到另一个现实世界点(摄像机坐标)上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内参数矩阵。告诉你上述那个点在1的基础上，是如何继续经过摄像机的镜头、并通过针孔成像和电子转化而成为像素点的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;畸变矩阵。告诉你为什么上面那个像素点并没有落在理论计算该落在的位置上，还产生了一定的偏移和变形.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;五代码实现&#34;&gt;五.代码实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /usr/bin/python3

# -*- coding:utf-8 -*-

import numpy as np
import cv2

KNOWN_DISTANCE = 40
KNOW_WIDTH = 11.69
KNOW_HEIGHT = 8.27

IMAGE_PATHS = [&#39;Picture1.jpg&#39;, &#39;Picture2.jpg&#39;, &#39;Picture3.jpg&#39;]

def find_maker(image):

    gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray_img = cv2.GaussianBlur(gray_img, (5, 5), 0)
    edged_img = cv2.Canny(gray_img, 35, 125)
    cv2.namedWindow(&amp;quot;Noise reduction effect map&amp;quot;, 0)
    cv2.resizeWindow(&#39;Noise reduction effect map&#39;, 640, 480)
    cv2.imshow(&#39;Noise reduction effect map&#39;, edged_img)


    countours, hierarchy = cv2.findContours(edged_img.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

    print((len(countours)))
    c = max(countours, key=cv2.contourArea)
    rect = cv2.minAreaRect(c)
    return rect

def distance_to_camera(knownWidth, focalLength, perWidth):
    return (knownWidth * focalLength)/perWidth

def calculate_focalDistance(img_path):
    first_image = cv2.imread(img_path)
    cv2.namedWindow(&amp;quot;first image&amp;quot;, 0)
    cv2.resizeWindow(&#39;first image&#39;, 640, 480)
    cv2.imshow(&#39;first image&#39;, first_image)
    marker = find_maker(first_image)
    focalLength = (marker[1][0] * KNOWN_DISTANCE)/KNOW_WIDTH
    print(marker[1][0])
    print(&#39;焦距(focalLength)=&#39;, focalLength)
    return focalLength

def calculate_Distance(image_path,focalLength_value):
    image = cv2.imread(image_path)
    cv2.namedWindow(&amp;quot;original&amp;quot;, 0)
    cv2.resizeWindow(&#39;original&#39;, 640, 480)
    cv2.imshow(&#39;original&#39;, image)
    marker = find_maker(image)
    distance_inches = distance_to_camera(KNOW_WIDTH, focalLength_value, marker[1][0])
    box = cv2.boxPoints(marker)
    print(&#39;Box = &#39;, box)
    box = np.int0(box)
    print(&#39;Box = &#39;, box)
    cv2.drawContours(image, [box], -1, (0, 255, 0), 2)
    cv2.putText(image,&#39;%.2fcm&#39;%(distance_inches * 2.54),(image.shape[1] - 300, image.shape[0] - 20),cv2.FONT_HERSHEY_SIMPLEX, 2.0, (0,255,0), 3)
    cv2.namedWindow(&amp;quot;mono-camera&amp;quot;, 0);
    cv2.resizeWindow(&#39;mono-camera&#39;, 640, 480)
    cv2.imshow(&#39;mono-camera&#39;, image)



if __name__ == &#39;__main__&#39;:
    img_path = &#39;Picture1.jpg&#39;
    #width = 640
    #height = 480
    focalLength = calculate_focalDistance(img_path)
    for image_path in IMAGE_PATHS:
        calculate_Distance(image_path, focalLength)
        cv2.waitKey(0)
    cv2.destroyAllWindows()
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/opencv/" term="OpenCV" label="OpenCV" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Monocamera DeepLearning 测距</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/monocamera_deeplearning%E6%B5%8B%E8%B7%9D/" />
            <id>https://chenbokaix250.github.io/tech/monocamera_deeplearning%E6%B5%8B%E8%B7%9D/</id>
            <updated>2021-03-23T17:24:55&#43;08:00</updated>
            <published>2021-03-23T15:57:34&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">目标 根据检测信息估算到场景中物体（汽车，行人，卡车）的距离 方案 训练深度学习模型,该模……</summary>
            
                <content type="html">&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;
&lt;p&gt;根据检测信息估算到场景中物体（汽车，行人，卡车）的距离&lt;/p&gt;
&lt;h1 id=&#34;方案&#34;&gt;方案&lt;/h1&gt;
&lt;p&gt;训练深度学习模型,该模型采用检测到的对象的边界框坐标并估计到该对象的距离&lt;/p&gt;
&lt;p&gt;输入:边界框坐标(xmin,ymin,xmax,ymax)&lt;/p&gt;
&lt;p&gt;输出:距离(Z)&lt;/p&gt;
&lt;h1 id=&#34;过程&#34;&gt;过程&lt;/h1&gt;
&lt;h2 id=&#34;数据准备&#34;&gt;数据准备&lt;/h2&gt;
&lt;h3 id=&#34;0git项目&#34;&gt;0.git项目&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/harshilpatel312/KITTI-distance-estimation.git&#34;&gt;https://github.com/harshilpatel312/KITTI-distance-estimation.git&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1下载kitti数据集&#34;&gt;1.下载KITTI数据集&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# get images
wget https://s3.eu-central-1.amazonaws.com/avg-kitti/data_object_image_2.zip
unzip data_object_image_2.zip

# get annotations
wget https://s3.eu-central-1.amazonaws.com/avg-kitti/data_object_label_2.zip
unzip data_object_label_2.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;放在&lt;code&gt;Organize&lt;/code&gt;目录中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;KITTI-distance-estimation
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- original_data
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- test_images
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- train_annots
    &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-- train_images
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;KITTI数据.txt转换到csv中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python generate-csv.py --input&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;original_data/train_annots --output&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;annotations.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;KITTI中的txt结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Values    Name      Description&lt;/span&gt;
----------------------------------------------------------------------------
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;         Describes the &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; of object: &lt;span class=&#34;s1&#34;&gt;&amp;#39;Car&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;Van&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;Truck&amp;#39;&lt;/span&gt;,
                     &lt;span class=&#34;s1&#34;&gt;&amp;#39;Pedestrian&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;Person_sitting&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cyclist&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tram&amp;#39;&lt;/span&gt;,
                     &lt;span class=&#34;s1&#34;&gt;&amp;#39;Misc&amp;#39;&lt;/span&gt; or &lt;span class=&#34;s1&#34;&gt;&amp;#39;DontCare&amp;#39;&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    truncated    Float from &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;non-truncated&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; to &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;truncated&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, where
                     truncated refers to the object leaving image boundaries
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    occluded     Integer &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0,1,2,3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; indicating occlusion state:
                     &lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; fully visible, &lt;span class=&#34;nv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; partly occluded
                     &lt;span class=&#34;nv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; largely occluded, &lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; unknown
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    alpha        Observation angle of object, ranging &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-pi..pi&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;    bbox         2D bounding box of object in the image &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0-based index&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
                     contains left, top, right, bottom pixel coordinates
   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;    dimensions   3D object dimensions: height, width, length &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;in meters&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;    location     3D object location x,y,z in camera coordinates &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;in meters&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    rotation_y   Rotation ry around Y-axis in camera coordinates &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-pi..pi&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    score        Only &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; results: Float, indicating confidence in
                     detection, needed &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; p/r curves, higher is better.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;读取每个txt中每一行的content 然后splite,剔除 &lt;code&gt;DontCare&lt;/code&gt;  标签的内容.&lt;/p&gt;
&lt;p&gt;利用pandas重新建立表,利用函数 &lt;code&gt;assign_values&lt;/code&gt; 映射其中的信息&lt;/p&gt;
&lt;p&gt;最后将df存在一个csv文件中&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;tqdm&lt;/code&gt; 建立了一个百分比进度条&lt;/p&gt;
&lt;p&gt;建立后的csv实例如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/23/sxoKRtBd5HqLZrn.png&#34; alt=&#34;截屏2021-03-23 下午2.21.01.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用annotations.csv生成Dataset数据&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://generate-depth-annotations.py/&#34;&gt;&lt;code&gt;generate-depth-annotations.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Purpose: Generate dataset for depth estimation
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
import pandas as pd
from tqdm import tqdm
import os
import numpy as np

&lt;span class=&#34;nv&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pd.read_csv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;annotations.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;new_df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; df.loc&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;df&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;DontCare&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;result_df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pd.DataFrame&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;xmin&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;ymin&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;xmax&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;ymax&amp;#39;&lt;/span&gt;, &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                           &lt;span class=&#34;s1&#34;&gt;&amp;#39;angle&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;xloc&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;yloc&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;zloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;pbar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; tqdm&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;new_df.shape&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; idx, row in new_df.iterrows&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;:
    pbar.update&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; os.path.exists&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;os.path.join&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;, row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]))&lt;/span&gt;:
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;xmin&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;xmin&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;ymin&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ymin&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;xmax&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;xmax&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;ymax&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ymax&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;

        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;angle&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;observation angle&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;xloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;xloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;yloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;yloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
        result_df.at&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;idx, &lt;span class=&#34;s1&#34;&gt;&amp;#39;zloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;zloc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;mask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; np.random.rand&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;len&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;result_df&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &amp;lt; 0.9
&lt;span class=&#34;nv&#34;&gt;train&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; result_df&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mask&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; result_df&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;~mask&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

train.to_csv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;train.csv&amp;#39;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;False&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
test.to_csv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test.csv&amp;#39;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;False&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;主要内容是从annotations中,先剔除 &lt;code&gt;DontCare&lt;/code&gt; 的内容&lt;/p&gt;
&lt;p&gt;建立result_df的数据表&lt;/p&gt;
&lt;p&gt;然后利用pandas的迭代器 &lt;code&gt;iterrows&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;生成一个mask 将result_df 一九分开 存储在  &lt;code&gt;train.csv&lt;/code&gt; 和 &lt;code&gt;test.csv&lt;/code&gt; 中&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这时,就有了包含filename, xmin, ymin, xmax, ymax, angle, xloc, yloc, zloc的文件&lt;/p&gt;
&lt;p&gt;整合后的 &lt;code&gt;data&lt;/code&gt; 数据如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
KITTI-distance-estimation
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- original_data
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- test_images
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- train_annots
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-- train_images
&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-- distance-estimator/
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- data
        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- test.csv
        &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-- train.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;作者实现了一个显示工具 &lt;code&gt;visualizer.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;filename&lt;/code&gt; 信息 找到对应的图片,利用csv的(xmin,ymin,xmax,ymax)在图像上进行矩形标注&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;imshow&lt;/code&gt; 后可以显示&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;训练过程&#34;&gt;训练过程&lt;/h2&gt;
&lt;p&gt;利用 &lt;code&gt;sklearn.preprocessing&lt;/code&gt; 中的 &lt;code&gt;StandardScaler&lt;/code&gt; 对数据进行归一化&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;adam&lt;/code&gt; 优化器进行优化&lt;/p&gt;
&lt;p&gt;loss设置为 &lt;code&gt;mean_squared_error&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行5000个epoch后&lt;/p&gt;
&lt;p&gt;利用json保存model&lt;/p&gt;
&lt;p&gt;利用h5保存weights&lt;/p&gt;
&lt;p&gt;网络结构如下:(model.summary())&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/23/f97GOVzTBkWPlQa.png&#34; alt=&#34;截屏2021-03-23 上午11.16.07.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;推理过程&#34;&gt;推理过程&lt;/h2&gt;
&lt;p&gt;同样利用&lt;code&gt;sklearn.preprocessing&lt;/code&gt; 中的 &lt;code&gt;StandardScaler&lt;/code&gt; 对数据进行反归一化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;load json and create model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;load weights&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;json_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;generated_files/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MODEL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loaded_model_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;json_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loaded_model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model_from_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loaded_model_json&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;loaded_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_weights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;generated_files/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.h5&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WEIGHTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后遍历所有 &lt;code&gt;test.csv&lt;/code&gt; 结果得到 &lt;code&gt;y_pred&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将数据与结果全部&lt;/p&gt;
&lt;h2 id=&#34;可视化验证&#34;&gt;可视化验证&lt;/h2&gt;
&lt;p&gt;同&lt;code&gt;visualizer&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;tqdm例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tqdm&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tqdm&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tqdm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pbar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pbar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">GPU并行计算基础</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/gpu%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/" />
            <id>https://chenbokaix250.github.io/tech/gpu%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/</id>
            <updated>2021-03-20T14:53:33&#43;08:00</updated>
            <published>2021-03-20T14:53:01&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">CUDA并行计算基础 目录 CUDA异构计算 CUDA处理流程 CUDA线程层次 Grid Block Thread blockldx threadldx gridDim……</summary>
            
                <content type="html">&lt;h1 id=&#34;cuda并行计算基础&#34;&gt;CUDA并行计算基础&lt;/h1&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;CUDA异构计算
CUDA处理流程
CUDA线程层次&lt;/p&gt;
&lt;p&gt;Grid Block Thread blockldx threadldx gridDim blockDim
CUDA存储结构
CUAD Python&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;并行计算模式&#34;&gt;并行计算模式&lt;/h2&gt;
&lt;p&gt;并行计算是同时应用多个计算资源解决一个计算问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;涉及多个计算资源或处理器&lt;/li&gt;
&lt;li&gt;问题被分解为多个离散的部分,可以同时处理(并行)&lt;/li&gt;
&lt;li&gt;每个部分可以由一系列指令完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;任务处理的步骤&#34;&gt;任务处理的步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;把输入数据从CPU内存复制到显存GPU&lt;/li&gt;
&lt;li&gt;在执行芯片上缓存数据,加载GPU程序并执行&lt;/li&gt;
&lt;li&gt;将计算结果从GPU显存中复制到CPU内存中&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cuda的线程层次&#34;&gt;CUDA的线程层次&lt;/h2&gt;
&lt;p&gt;Grid 一维或多维线程块(block)
Block 一组线程&lt;/p&gt;
&lt;p&gt;一个Grid里面的每个Block的线程数是一样的
block内部的每个线程可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步 synchronize&lt;/li&gt;
&lt;li&gt;访问共享存储器 shared memory&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-
&amp;quot;&amp;quot;&amp;quot;Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11K0R66a7oBbLrVVaUDSJ4YTBUg_4-TL9
&amp;quot;&amp;quot;&amp;quot;

!pip3 install numba

!nvcc -V

import cv2
import numpy as np 
from numba import cuda
import time 
import math

!wget https://www.nvidia.com/content/dam/en-zz/Solutions/geforce/geforce-rtx-turing/overview/shop-2080-ti-1070@2x.jpg

mv shop-2080-ti-1070@2x.jpg test.jpg

ls

#gpu
@cuda.jit
def process_gpu(img,channels):
  tx = cuda.blockIdx.x*cuda.blockDim.x+cuda.threadIdx.x
  ty = cuda.blockIdx.y*cuda.blockDim.y+cuda.threadIdx.y
  for c in range(channels):
    color = img[tx,ty][c]*2.0+30
    if color&amp;gt;255:
      img[tx,ty][c]=255
    elif color&amp;lt;0:
      img[tx,ty][c]=0
    else:
      img[tx,ty][c]=color
#cpu
def process_cpu(img,dst):

  rows,cols,channels = img.shape
  for i in range(rows):
    for j in range(cols):
      for c in range(3):
        color = img[i,j][c]*2.0+30
        if color &amp;gt;255:
          dst[i,j][c] = 255
        elif color &amp;lt; 0:
          dst[i,j][c] = 0 
        else:
          dst[i,j][c] = color
if __name__ == &amp;quot;__main__&amp;quot;:
  #create an image.
  img = cv2.imread(&#39;test.jpg&#39;)
  rows,cols,channels=img.shape
  dst_cpu = img.copy()
  dst_gpu = img.copy()
  start_cpu = time.time()
  process_cpu(img,dst_cpu)
  end_cpu = time.time()
  time_cpu = end_cpu - start_cpu
  print(&amp;quot;CPU process time:&amp;quot; + str(time_cpu))


  dImg = cuda.to_device(img)
  threadsperblock = (16,16)
  blockspergrid_x = int(math.ceil(rows/threadsperblock[0]))
  blockspergrid_y = int(math.ceil(cols/threadsperblock[1]))

  blockspergrid = (blockspergrid_x,blockspergrid_y)
  cuda.synchronize()

  start_gpu= time.time()
  process_gpu[blockspergrid,threadsperblock](dImg,channels)
  cuda.synchronize()
  end_gpu = time.time()
  dst_gpu = dImg.copy_to_host()
  time_gpu = end_gpu - start_gpu
  print(&amp;quot;GPU process time:&amp;quot; + str(time_gpu))
  #save 
  cv2.imwrite(&amp;quot;result_cpu.jpg&amp;quot;,dst_cpu)
  cv2.imwrite(&amp;quot;result_gpu.jpg&amp;quot;,dst_gpu)
  imshow
  print(&amp;quot;Done&amp;quot;)

from google.colab.patches import cv2_imshow
cv2_imshow(dst_gpu)
cv2_imshow(img)

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/gpu/" term="GPU" label="GPU" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">OpenCV摄像机标定相关</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/opencv%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E7%9B%B8%E5%85%B3/" />
            <id>https://chenbokaix250.github.io/tech/opencv%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E7%9B%B8%E5%85%B3/</id>
            <updated>2021-03-20T14:51:48&#43;08:00</updated>
            <published>2021-03-20T14:51:08&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">基于OpenCV的相机标定 1.什么是相机标定 相机参数的估计过程称为相机标定。这意味着……</summary>
            
                <content type="html">&lt;h1 id=&#34;基于opencv的相机标定&#34;&gt;基于OpenCV的相机标定&lt;/h1&gt;
&lt;h2 id=&#34;1什么是相机标定&#34;&gt;1.什么是相机标定&lt;/h2&gt;
&lt;p&gt;相机参数的估计过程称为相机标定。这意味着我们拥有关于相机的所有信息（参数或系数），这些信息用于确定真实世界中的3D点与其在该标定相机捕获的图像中的相应2D投影（像素）之间的精确关系。通常这意味着恢复两种参数。&lt;/p&gt;
&lt;p&gt;内部参数相机/镜头系统。例如透镜的焦距、光学中心和径向畸变系数。
外部参数这是指相机相对于某些世界坐标系的方位(旋转和平移)。
使用几何标定估计的透镜参数来消除图像失真。&lt;/p&gt;
&lt;h2 id=&#34;2图像形成几何学&#34;&gt;2.图像形成几何学&lt;/h2&gt;
&lt;p&gt;要理解标定的过程，我们首先需要了解成像几何。我们将从几何的角度来解释图像的形成。具体来说，我们将讨论三维点如何在图像平面上投影的数学问题。也就是说，你所需要知道的就是矩阵乘法。&lt;/p&gt;
&lt;h3 id=&#34;21-设定&#34;&gt;2.1 设定&lt;/h3&gt;
&lt;p&gt;为了容易理解这个问题，假设你在房间里安装了一台照相机。给定三维点P在这个房间里，我们想要找到这个3D点的像素坐标(u，v)在相机拍摄的图像中。在这个设置中有三个坐标系在起作用。我们来解释一下&lt;/p&gt;
&lt;h4 id=&#34;211-世界坐标系&#34;&gt;2.1.1 世界坐标系&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzAyL3dvcmxkLWNvb3JkaW5hdGVzLWFuZC1jYW1lcmEtY29vcmRpbmF0ZXMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;世界坐标系和相机坐标系是通过旋转和平移联系起来的。这六个参数(3个用于旋转，3个用于平移)称为相机的外部参数。&lt;/p&gt;
&lt;p&gt;要定义房间中点的位置，我们首先需要为这个房间定义一个坐标系。它需要做两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原点：我们可以随意地把房间的一角作为原点。(0,0,0).&lt;/li&gt;
&lt;li&gt;X，Y，Z轴：我们还可以沿着地板上的二维定义房间的X轴和Y轴，沿着垂直墙定义房间的Z轴。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过测量空间内任意点沿X、Y和Z轴与原点的距离来找到它的三维坐标。这个与房间相连的坐标系称为世界坐标系。在图中，它使用橙色轴显示。我们将使用粗体字体表示轴，用普通字体表示点的坐标。&lt;/p&gt;
&lt;p&gt;这个房间的P点。在世界坐标系中，P的坐标只需沿三个轴测量该点距原点的距离，就可以找到该点的X、Y和Z坐标。&lt;/p&gt;
&lt;h4 id=&#34;212-相机坐标系&#34;&gt;2.1.2 相机坐标系&lt;/h4&gt;
&lt;p&gt;把相机放在这个房间里,房间的图像将用相机拍摄.连接到这个相机上的三维坐标系.
将相机放在房间的原点,使其X Y和Z轴与房间的xyz轴对齐,则两个坐标系将是等同的.&lt;/p&gt;
&lt;p&gt;如果将相机放在房间的任何地方,就需要找到三维房间(世界)坐标和三维相机坐标之间的关系&lt;/p&gt;
&lt;p&gt;相机位于任意位置(t&lt;sub&gt;x&lt;/sub&gt;,t&lt;sub&gt;y&lt;/sub&gt;,,t&lt;sub&gt;z&lt;/sub&gt;).
可以说相对于世界坐标来转换相机坐标,相机是相对于世界坐标系旋转的.&lt;/p&gt;
&lt;p&gt;3D中的旋转是用三个参数捕捉的 三个参数可以看作yaw,pitch,roll.&lt;/p&gt;
&lt;p&gt;将旋转编码为3x3矩阵旺旺便于数学操作.
世界坐标系和相机坐标系是由旋转矩阵&lt;strong&gt;R&lt;/strong&gt;和一个三元平移矢量 &lt;strong&gt;t&lt;/strong&gt;关联的&lt;/p&gt;
&lt;p&gt;其关联方程是:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tMmU1NWVmMGFmMmY0YmIzOWZlMzdkOGQ3MWNkMGExNmRfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将旋转表示为一个矩阵,整理成更紧凑的形式
&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tNGUzYzY1NjI3YmU3ZTRmOGRkNDY3ZjE1NmNhNjhhNzFfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中,外参矩阵 &lt;strong&gt;P&lt;/strong&gt;是由下式给出的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tODI1Njg5Y2YxN2Q2YTVmN2RmM2JhZDI4NWJkNDBjZjNfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在射影几何学中，我们经常用一个有趣的坐标即齐次坐标表示，在坐标上附加一个额外的维度。笛卡尔坐标系中的三维点（X，Y，Z）可以在齐次坐标系中写成（X，Y，Z，1）。更广泛地说，齐次坐标中(X, Y, Z, W)点与笛卡尔坐标中的点(X&lt;sub&gt;w&lt;/sub&gt;,Y&lt;sub&gt;w&lt;/sub&gt;,Z&lt;sub&gt;w&lt;/sub&gt;)相同。齐次坐标允许我们用有限的数字来表示无限量。例如，无穷远处的点可以在齐次坐标系中表示为（1，1，1，0）。你可能会注意到我们在外参矩阵中使用了齐次坐标来表示世界坐标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;213-图像坐标系&#34;&gt;2.1.3 图像坐标系&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzAyL3dvcmxkLWNhbWVyYS1pbWFnZS1jb29yZGluYXRlcy5wbmc?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一旦我们通过对点世界坐标应用旋转和平移来获得相机三维坐标系中的点，我们就可以将该点投影到图像平面上以获得该点在图像中的位置。&lt;/p&gt;
&lt;p&gt;在上面的图像中，我们看到的是一个点P，在相机坐标系中有坐标(X&lt;sub&gt;c&lt;/sub&gt;,Y&lt;sub&gt;c&lt;/sub&gt;,Z&lt;sub&gt;c&lt;/sub&gt;)。只是提醒一下，如果我们不知道这个点在相机坐标系中的坐标，我们可以使用外参矩阵变换它的世界坐标，从而使用外参矩阵获得相机坐标系中的坐标。上图显示了简单针孔相机的相机投影。&lt;/p&gt;
&lt;p&gt;光学中心(针孔)用O&lt;sub&gt;c&lt;/sub&gt;表示,实际上在像面上形成点的倒像。为了数学上的方便，我们简单地做所有的计算，就好像图像平面在光学中心的前面一样，因为从传感器读出的图像可以轻微地旋转180度来补偿反转。实际上，这是不需要的。它甚至更简单：一个真正的相机传感器只是按照相反的顺序（从右到左）从最下面一行读出，然后从下到上读取每一行。通过这种方法，图像自动垂直形成，左右顺序正确。因此在实践中，不再需要旋转图像。&lt;/p&gt;
&lt;p&gt;图像平面放置在距离光学中心f(焦距)的位置
三维点(X&lt;sub&gt;c&lt;/sub&gt;,Y&lt;sub&gt;c&lt;/sub&gt;,Z&lt;sub&gt;c&lt;/sub&gt;)的投影图像(x,y)则是:
&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tYTY2ZjgwNjliN2QzOGRiNDIwOWVlM2VjYTAzMjBhMWVfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这两个方程可以用矩阵形式重写:
&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tMDU1NjhkZWYyYzllODc2ZTgzZGE4NmM5YThkOGYxNWNfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;矩阵K如下所示,称为内参矩阵并包含相机的内在参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tN2NmNDY3NzQ2NzM4NjFiN2E0ZGExYjdkZjY5NjI3OTdfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上述简单矩阵只显示焦距。然而，图像传感器中的像素可能不是方形的，因此我们可能有两个不同的焦距。f_x和f_y。光学中心(c_x, c_y)相机的中心可能与图像坐标系的中心不重合。
此外，相机传感器的x轴和y轴之间可能有一个小的倾斜γ \gammaγ。考虑到以上所有因素，相机矩阵可以重新编写为:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tYTA0OGRhODJhNjJmZDc4MGIxOWI5N2I1MTc1NTFkNzBfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;x和y像素坐标相对于图像的中心.在处理图像时,原点位于图像的左上角.
用(u,v)表示图像坐标,则有下式:
&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tMThlMzNlN2ViNTFhMGE1MWNhNGQ3ODg4MThlNTAwYmRfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-图像形成方法总结&#34;&gt;2.2 图像形成方法总结&lt;/h3&gt;
&lt;p&gt;将世界坐标系中的三维点投影到相机像素坐标上，有以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用由两个坐标系之间的旋转和平移组成的外部矩阵，将三维点从世界坐标转换为相机坐标。&lt;/li&gt;
&lt;li&gt;在相机坐标系中，利用相机内部焦距、光心等参数构成的内部矩阵将新的三维点投影到图像平面上。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3基于opencv的相机标定原理&#34;&gt;3.基于Opencv的相机标定原理&lt;/h2&gt;
&lt;h3 id=&#34;31-相机标定相关参数&#34;&gt;3.1 相机标定相关参数&lt;/h3&gt;
&lt;p&gt;要找到三维点在图像平面上的投影，我们首先需要使用外部参数(R和t)将点从世界坐标系转换为相机坐标系。&lt;/p&gt;
&lt;p&gt;使用相机的内部参数，我们将点投影到图像平面上。
将世界坐标系中的三维点(X&lt;sub&gt;w&lt;/sub&gt;,Y&lt;sub&gt;w&lt;/sub&gt;,Z&lt;sub&gt;w&lt;/sub&gt;)与其在图像坐标系中的投影（u，v）相关的方程式如下所示：
&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tZWM1M2EzN2Y4MGZiY2EzNjA0YzVmYzg5ZDgwM2I4MzdfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tMTRhMWZkYTM2M2Y5MDM1OGM0ODEzMTA2YzYxZDQzNDVfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;内参矩阵K 外参包括:旋转矩阵R和平移向量t&lt;/p&gt;
&lt;p&gt;内参矩阵K是上三角矩阵&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tZTg4OWNmYWZhYzJkM2E1ZDI2OGQyZGZiODA2MzU5NmFfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;,f&lt;sub&gt;y&lt;/sub&gt;是x和y焦距 (通常是相同的)&lt;/li&gt;
&lt;li&gt;c&lt;sub&gt;x&lt;/sub&gt;,c&lt;sub&gt;y&lt;/sub&gt;是图像平面上光学中心的x和y坐标.使用图像的中心通常是一个足够好的近似&lt;/li&gt;
&lt;li&gt;γ是轴之间的倾斜度.通常是1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-相机标定的目标&#34;&gt;3.2 相机标定的目标&lt;/h3&gt;
&lt;p&gt;标定过程的目标是使用一组已知的三维点（X&lt;sub&gt;w&lt;/sub&gt;,Y&lt;sub&gt;w&lt;/sub&gt;,Z&lt;sub&gt;w&lt;/sub&gt;）及其对应的图像坐标（u、v），找到3×3矩阵K、3×3旋转矩阵R、3×1平移向量T。当我们得到相机的内部和外部参数值时，相机就被称为标定相机。总之，相机标定算法具有以下输入和输出：&lt;/p&gt;
&lt;p&gt;输入：具有已知二维图像坐标和三维世界坐标的点的图像集合。
输出：3×3相机内参矩阵，每幅图像的旋转和平移。
注意OpenCV中，相机内部矩阵不包含倾斜参数。所以矩阵的形式是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGVhcm5vcGVuY3YuY29tL3dwLWNvbnRlbnQvcWwtY2FjaGUvcXVpY2tsYXRleC5jb20tZDI5MjdiODQxZjllNTVkNWE2MGE5ZWY0NjZhMTRiZWJfbDMucG5n?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-相机标定示例步骤&#34;&gt;4 相机标定示例步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用棋盘格模式定义真实世界坐标;&lt;/li&gt;
&lt;li&gt;从不同的角度捕获棋盘的多个图像;&lt;/li&gt;
&lt;li&gt;查找棋盘的2D坐标;&lt;/li&gt;
&lt;li&gt;校准相机&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1],None,None)

# ret    返回值
# mtx    内参矩阵
# dist   畸变矩阵
# rvecs  旋转向量
# tvecs  平移向量
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用rvecs和rvecs转R t时,遇到了问题&lt;/p&gt;
&lt;h2 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/gxsheen/article/details/52636852&#34;&gt;https://blog.csdn.net/gxsheen/article/details/52636852&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章讲解了如何通过opencv标定得到的向量如何转化为R t矩阵
但是,实际实践时出现了问题&lt;/p&gt;
&lt;p&gt;在python接口下:&lt;/p&gt;
&lt;p&gt;R = Rodrigues(rvec)&lt;/p&gt;
&lt;p&gt;出现&lt;code&gt;TypeError: Expected Ptr&amp;lt;cv::UMat&amp;gt; for argument &#39;%s&#39;&lt;/code&gt;的问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/52119190/relative-rotation-between-pose-rvec&#34;&gt;https://stackoverflow.com/questions/52119190/relative-rotation-between-pose-rvec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回答里面说了一下具体的方法,目前还没有找到解决办法&lt;/p&gt;
&lt;p&gt;这个还需要进一步研究&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/opencv/" term="OpenCV" label="OpenCV" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python配置</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python%E9%85%8D%E7%BD%AE/" />
            <id>https://chenbokaix250.github.io/tech/python%E9%85%8D%E7%BD%AE/</id>
            <updated>2021-03-11T12:16:56&#43;08:00</updated>
            <published>2021-03-11T10:26:04&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Python标准模块 logging 1.简介 logging模块是Python内置的标准模块,主要用……</summary>
            
                <content type="html">&lt;h1 id=&#34;python标准模块-logging&#34;&gt;Python标准模块 logging&lt;/h1&gt;
&lt;h2 id=&#34;1简介&#34;&gt;1.简介&lt;/h2&gt;
&lt;p&gt;logging模块是Python内置的标准模块,主要用于输出运行日志,可以设置输出日志的等级 日志保存路径 日志文件回滚等.相比print,具备以下优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息；&lt;/li&gt;
&lt;li&gt;print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2logging模块使用&#34;&gt;2.logging模块使用&lt;/h2&gt;
&lt;h3 id=&#34;21-基本使用&#34;&gt;2.1 基本使用&lt;/h3&gt;
&lt;p&gt;配置logging基本的设置,然后控制台输出日志&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging
logging.basicConfig(level = logging.INFO,format = &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
logger = logging.getLogger(__name__)

logger.info(&amp;quot;Start print log&amp;quot;)
logger.debug(&amp;quot;Do something&amp;quot;)
logger.warning(&amp;quot;Something maybe fail.&amp;quot;)
logger.info(&amp;quot;Finish&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制台输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2021-03-11 10:56:07,529 - __main__ - INFO - Start print log
2021-03-11 10:56:07,530 - __main__ - WARNING - Something maybe fail.
2021-03-11 10:56:07,530 - __main__ - INFO - Finish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;logging中可以选择很多消息级别，如debug、info、warning、error以及critical。通过赋予logger或者handler不同的级别，开发者就可以只输出错误信息到特定的记录文件，或者在调试时只记录调试信息。&lt;/p&gt;
&lt;p&gt;例如，我们将logger的级别改为DEBUG，再观察一下输出结果，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logging.basicConfig(level = logging.DEBUG,format = &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;控制台输出了debug信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2021-03-11 11:00:09,365 - __main__ - INFO - Start print log
2021-03-11 11:00:09,365 - __main__ - DEBUG - Do something
2021-03-11 11:00:09,365 - __main__ - WARNING - Something maybe fail.
2021-03-11 11:00:09,365 - __main__ - INFO - Finish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;logging.basicConfig函数各参数:&lt;/p&gt;
&lt;p&gt;filename：指定日志文件名；
filemode：和file函数意义相同，指定日志文件的打开模式，&#39;w&#39;或者&#39;a&#39;；
format：指定输出的格式和内容，format可以输出很多有用的信息，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;参数：作用

%(levelno)s：打印日志级别的数值
%(levelname)s：打印日志级别的名称
%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]
%(filename)s：打印当前执行程序名
%(funcName)s：打印日志的当前函数
%(lineno)d：打印日志的当前行号
%(asctime)s：打印日志的时间
%(thread)d：打印线程ID
%(threadName)s：打印线程名称
%(process)d：打印进程ID
%(message)s：打印日志信息
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;datefmt：指定时间格式，同time.strftime()；
level：设置日志级别，默认为logging.WARNNING；
stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略；&lt;/p&gt;
&lt;h3 id=&#34;22-将日志写入到文件&#34;&gt;2.2 将日志写入到文件&lt;/h3&gt;
&lt;h4 id=&#34;221-将日志写入到文件&#34;&gt;2.2.1 将日志写入到文件&lt;/h4&gt;
&lt;p&gt;设置logging，创建一个FileHandler，并对输出消息的格式进行设置，将其添加到logger，然后将日志写入到指定的文件中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging
logger = logging.getLogger(__name__)
logger.setLevel(level = logging.INFO)
handler = logging.FileHandler(&amp;quot;log.txt&amp;quot;)
handler.setLevel(logging.INFO)
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
handler.setFormatter(formatter)
logger.addHandler(handler)

logger.info(&amp;quot;Start print log&amp;quot;)
logger.debug(&amp;quot;Do something&amp;quot;)
logger.warning(&amp;quot;Something maybe fail.&amp;quot;)
logger.info(&amp;quot;Finish&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log.txt中日志数据为:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2021-03-11 11:06:32,373 - __main__ - INFO - Start print log
2021-03-11 11:06:32,373 - __main__ - WARNING - Something maybe fail.
2021-03-11 11:06:32,373 - __main__ - INFO - Finish
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;222-将日志同时输出到屏幕和日志文件&#34;&gt;2.2.2 将日志同时输出到屏幕和日志文件&lt;/h4&gt;
&lt;p&gt;logger中添加StreamHandler,可以将日志输出到屏幕上&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging
logger = logging.getLogger(__name__)
logger.setLevel(level = logging.INFO)
handler = logging.FileHandler(&amp;quot;log.txt&amp;quot;)
handler.setLevel(logging.INFO)
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
handler.setFormatter(formatter)

console = logging.StreamHandler()
console.setLevel(logging.INFO)

logger.addHandler(handler)
logger.addHandler(console)

logger.info(&amp;quot;Start print log&amp;quot;)
logger.debug(&amp;quot;Do something&amp;quot;)
logger.warning(&amp;quot;Something maybe fail.&amp;quot;)
logger.info(&amp;quot;Finish&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以在log.txt文件和控制台中看到&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Start print log
Something maybe fail.
Finish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;logging有一个日志处理的主对象,其他处理方式都是通过addHandler添加进去,logging中包含的handler主要有一下功能:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;handler名称：位置；作用

StreamHandler：logging.StreamHandler；日志输出到流，可以是sys.stderr，sys.stdout或者文件
FileHandler：logging.FileHandler；日志输出到文件
BaseRotatingHandler：logging.handlers.BaseRotatingHandler；基本的日志回滚方式
RotatingHandler：logging.handlers.RotatingHandler；日志回滚方式，支持日志文件最大数量和日志文件回滚
TimeRotatingHandler：logging.handlers.TimeRotatingHandler；日志回滚方式，在一定时间区域内回滚日志文件
SocketHandler：logging.handlers.SocketHandler；远程输出日志到TCP/IP sockets
DatagramHandler：logging.handlers.DatagramHandler；远程输出日志到UDP sockets
SMTPHandler：logging.handlers.SMTPHandler；远程输出日志到邮件地址
SysLogHandler：logging.handlers.SysLogHandler；日志输出到syslog
NTEventLogHandler：logging.handlers.NTEventLogHandler；远程输出日志到Windows NT/2000/XP的事件日志
MemoryHandler：logging.handlers.MemoryHandler；日志输出到内存中的指定buffer
HTTPHandler：logging.handlers.HTTPHandler；通过&amp;quot;GET&amp;quot;或者&amp;quot;POST&amp;quot;远程输出到HTTP服务器

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;223-日志回滚&#34;&gt;2.2.3 日志回滚&lt;/h4&gt;
&lt;p&gt;使用RotatingFileHandler，可以实现日志回滚&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging
from logging.handlers import RotatingFileHandler
logger = logging.getLogger(__name__)
logger.setLevel(level = logging.INFO)
#定义一个RotatingFileHandler，最多备份3个日志文件，每个日志文件最大1K
rHandler = RotatingFileHandler(&amp;quot;log.txt&amp;quot;,maxBytes = 1*1024,backupCount = 3)
rHandler.setLevel(logging.INFO)
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
rHandler.setFormatter(formatter)

console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(formatter)

logger.addHandler(rHandler)
logger.addHandler(console)

logger.info(&amp;quot;Start print log&amp;quot;)
logger.debug(&amp;quot;Do something&amp;quot;)
logger.warning(&amp;quot;Something maybe fail.&amp;quot;)
logger.info(&amp;quot;Finish&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;23-设置消息的等级&#34;&gt;2.3 设置消息的等级&lt;/h2&gt;
&lt;p&gt;可以设置不同的日志等级，用于控制日志的输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;日志等级：使用范围

FATAL：致命错误
CRITICAL：特别糟糕的事情，如内存耗尽、磁盘空间为空，一般很少使用
ERROR：发生错误时，如IO操作失败或者连接问题
WARNING：发生很重要的事件，但是并不是错误时，如用户登录密码错误
INFO：处理请求或者状态变化等日常事务
DEBUG：调试过程中使用DEBUG等级，如算法中每个循环的中间状态

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;24-捕获traceback&#34;&gt;2.4 捕获traceback&lt;/h2&gt;
&lt;p&gt;Python中的traceback模块被用于跟踪异常返回信息，可以在logging中记录下traceback&lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging
logger = logging.getLogger(__name__)
logger.setLevel(level = logging.INFO)
handler = logging.FileHandler(&amp;quot;log.txt&amp;quot;)
handler.setLevel(logging.INFO)
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
handler.setFormatter(formatter)

console = logging.StreamHandler()
console.setLevel(logging.INFO)

logger.addHandler(handler)
logger.addHandler(console)

logger.info(&amp;quot;Start print log&amp;quot;)
logger.debug(&amp;quot;Do something&amp;quot;)
logger.warning(&amp;quot;Something maybe fail.&amp;quot;)
try:
    open(&amp;quot;sklearn.txt&amp;quot;,&amp;quot;rb&amp;quot;)
except (SystemExit,KeyboardInterrupt):
    raise
except Exception:
    logger.error(&amp;quot;Faild to open sklearn.txt from logger.error&amp;quot;,exc_info = True)

logger.info(&amp;quot;Finish&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;控制台和日志文件log.txt输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Start print log
Something maybe fail.
Faild to open sklearn.txt from logger.error
Traceback (most recent call last):
  File &amp;quot;G:\zhb7627\Code\Eclipse WorkSpace\PythonTest\test.py&amp;quot;, line 23, in &amp;lt;module&amp;gt;
    open(&amp;quot;sklearn.txt&amp;quot;,&amp;quot;rb&amp;quot;)
IOError: [Errno 2] No such file or directory: &#39;sklearn.txt&#39;
Finish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以使用logger.exception(msg,_args)，它等价于logger.error(msg,exc_info = True,_args)，
将
&lt;code&gt;logger.error(&amp;quot;Faild to open sklearn.txt from logger.error&amp;quot;,exc_info = True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;替换为
&lt;code&gt;logger.exception(&amp;quot;Failed to open sklearn.txt from logger.exception&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;控制台和日志文件log.txt输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Start print log
Something maybe fail.
Failed to open sklearn.txt from logger.exception
Traceback (most recent call last):
  File &amp;quot;G:\zhb7627\Code\Eclipse WorkSpace\PythonTest\test.py&amp;quot;, line 23, in &amp;lt;module&amp;gt;
    open(&amp;quot;sklearn.txt&amp;quot;,&amp;quot;rb&amp;quot;)
IOError: [Errno 2] No such file or directory: &#39;sklearn.txt&#39;
Finish
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;25-多模块使用logging&#34;&gt;2.5 多模块使用logging&lt;/h2&gt;
&lt;p&gt;主模块mainModule.py&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging
import subModule
logger = logging.getLogger(&amp;quot;mainModule&amp;quot;)
logger.setLevel(level = logging.INFO)
handler = logging.FileHandler(&amp;quot;log.txt&amp;quot;)
handler.setLevel(logging.INFO)
formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
handler.setFormatter(formatter)

console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(formatter)

logger.addHandler(handler)
logger.addHandler(console)


logger.info(&amp;quot;creating an instance of subModule.subModuleClass&amp;quot;)
a = subModule.SubModuleClass()
logger.info(&amp;quot;calling subModule.subModuleClass.doSomething&amp;quot;)
a.doSomething()
logger.info(&amp;quot;done with  subModule.subModuleClass.doSomething&amp;quot;)
logger.info(&amp;quot;calling subModule.some_function&amp;quot;)
subModule.som_function()
logger.info(&amp;quot;done with subModule.some_function&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;子模块subModule.py&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import logging

module_logger = logging.getLogger(&amp;quot;mainModule.sub&amp;quot;)
class SubModuleClass(object):
    def __init__(self):
        self.logger = logging.getLogger(&amp;quot;mainModule.sub.module&amp;quot;)
        self.logger.info(&amp;quot;creating an instance in SubModuleClass&amp;quot;)
    def doSomething(self):
        self.logger.info(&amp;quot;do something in SubModule&amp;quot;)
        a = []
        a.append(1)
        self.logger.debug(&amp;quot;list a = &amp;quot; + str(a))
        self.logger.info(&amp;quot;finish something in SubModuleClass&amp;quot;)

def som_function():
    module_logger.info(&amp;quot;call function some_function&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行之后,在控制和日志文件log.txt中输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
2021-03-11 11:31:28,957 - mainModule - INFO - creating an instance of subModule.subModuleClass
2021-03-11 11:31:28,957 - mainModule.sub.module - INFO - creating an instance in SubModuleClass
2021-03-11 11:31:28,957 - mainModule - INFO - calling subModule.subModuleClass.doSomething
2021-03-11 11:31:28,957 - mainModule.sub.module - INFO - do something in SubModule
2021-03-11 11:31:28,957 - mainModule.sub.module - INFO - finish something in SubModuleClass
2021-03-11 11:31:28,957 - mainModule - INFO - done with  subModule.subModuleClass.doSomething
2021-03-11 11:31:28,958 - mainModule - INFO - calling subModule.some_function
2021-03-11 11:31:28,958 - mainModule.sub - INFO - call function some_function
2021-03-11 11:31:28,958 - mainModule - INFO - done with subModule.some_function
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先在主模块定义了logger&#39;mainModule&#39;，并对它进行了配置，就可以在解释器进程里面的其他地方通过getLogger(&#39;mainModule&#39;)得到的对象都是一样的，不需要重新配置，可以直接使用。定义的该logger的子logger，都可以共享父logger的定义和配置，所谓的父子logger是通过命名来识别，任意以&#39;mainModule&#39;开头的logger都是它的子logger，例如&#39;mainModule.sub&#39;。&lt;/p&gt;
&lt;p&gt;实际开发一个application，首先可以通过logging配置文件编写好这个application所对应的配置，可以生成一个根logger，如&#39;PythonAPP&#39;，然后在主函数中通过fileConfig加载logging配置，接着在application的其他地方、不同的模块中，可以使用根logger的子logger，如&#39;PythonAPP.Core&#39;，&#39;PythonAPP.Web&#39;来进行log，而不需要反复的定义和配置各个模块的logger。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;python-argparse-命令行与参数解析&#34;&gt;python-argparse 命令行与参数解析&lt;/h1&gt;
&lt;p&gt;启动程序需要进行交互给定时,需要命令行与参数解析.&lt;/p&gt;
&lt;p&gt;Python命令行与参数解析使用步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建解析&lt;/li&gt;
&lt;li&gt;添加参数&lt;/li&gt;
&lt;li&gt;解析参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面通过一个例子进行简单创建:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import argparse
# 创建解析步骤
parser = argparse.ArgumentParser(description=&#39;Process some integers.&#39;)

# 添加参数步骤
parser.add_argument(&#39;integers&#39;, metavar=&#39;N&#39;, type=int, nargs=&#39;+&#39;,
                   help=&#39;an integer for the accumulator&#39;)
parser.add_argument(&#39;--sum&#39;, dest=&#39;accumulate&#39;, action=&#39;store_const&#39;,
                   const=sum, default=max,
                   help=&#39;sum the integers&#39;)
# 解析参数步骤  
args = parser.parse_args()
print(args.accumulate(args.integers))

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在terminal执行
&lt;code&gt;python3 main.py -h&lt;/code&gt;
运行结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;usage: 命令行与参数解析.py [-h] [--sum] N [N ...]
Process some integers.
positional arguments:
  N           an integer for the accumulator
optional arguments:
  -h, --help  show this help message and exit
  --sum       sum the integers
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;常用更改的argparse参数&#34;&gt;常用更改的argparse参数&lt;/h2&gt;
&lt;h3 id=&#34;创建过程&#34;&gt;创建过程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;description&lt;/strong&gt;
描述文件，上面实例已体现。
&lt;strong&gt;epilog&lt;/strong&gt;
参数选项帮助后的显示文本.(创建时使用)
&lt;code&gt;parser = argparse.ArgumentParser(description=&#39;Process some integers.&#39;,epilog=&#39;And What can I help U?&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;添加过程&#34;&gt;添加过程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])

# 例如
parser.add_argument(&#39;intergers&#39;,metavar=&#39;N&#39;,type=int,nargs=&#39;+&#39;,help=&#39;an interger for the accumulator&#39;)
parser.add_argument(&#39;--sum&#39;,dest=&#39;accumulate&#39;,action=&#39;store_const&#39;,const=sum,default=max,help=&#39;sum the intergers (default:find the max)&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;要点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每一个参数都要单独设置，就像上面例子，需要两个参数就用两个add_argument 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从上面的实例中也可以看到，参数分为两种：positional arguments 和optional arguments 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;positional arguments 参数按照参数设置的先后顺序对应读取，实际中不用设置参数名，必须有序设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optional arguments 参数在使用时必须使用参数名，然后是参数具体数值，设置可以是无序的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序根据prefix_chars(默认&amp;quot;-&amp;quot;)自动识别positional arguments 还是optional arguments。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prefix_chars 分为缩写(比如&amp;quot;-h&amp;quot;)和对应的全程(比如&amp;quot;--help&amp;quot;)，可以同时设置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;action&#34;&gt;action&lt;/h4&gt;
&lt;p&gt;命令行参数的操作,操作的兴衰有以下几种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;store:仅存储参数的值&lt;/li&gt;
&lt;li&gt;storeconst:存储const关键字指定的值
&lt;code&gt;parser.add_argument(&#39;-t&#39;,action=&#39;store_const&#39;,const=7)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;count&#34;&gt;count&lt;/h4&gt;
&lt;p&gt;统计参数出现的次数&lt;/p&gt;
&lt;h4 id=&#34;help&#34;&gt;help&lt;/h4&gt;
&lt;p&gt;显示help信息&lt;/p&gt;
&lt;h4 id=&#34;versoin&#34;&gt;versoin&lt;/h4&gt;
&lt;p&gt;显示version的信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; parser = argparse.ArgumentParser()
&amp;gt;&amp;gt;&amp;gt; parser.add_argument(&#39;--version&#39;, action=&#39;version&#39;, version=&#39;version 2.0&#39;)
&amp;gt;&amp;gt;&amp;gt; parser.parse_args([&#39;--version&#39;])
version 2.0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;const&#34;&gt;const&lt;/h4&gt;
&lt;p&gt;保存一个常量&lt;/p&gt;
&lt;h4 id=&#34;default&#34;&gt;default&lt;/h4&gt;
&lt;p&gt;默认值&lt;/p&gt;
&lt;h4 id=&#34;type&#34;&gt;type&lt;/h4&gt;
&lt;p&gt;参数类型,默认为str&lt;/p&gt;
&lt;h4 id=&#34;choices&#34;&gt;choices&lt;/h4&gt;
&lt;p&gt;设置参数值的范围，如果choices中的类型不是字符串，记得指定type。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;parser = argparse.ArgumentParser()
parser.add_argument(&#39;x&#39;, type=int, choices=range(1, 4))
parser.parse_args([&#39;3&#39;])
args = parser.parse_args()
print(args.x)

#output:

$ python3 main.py 2
2

$ python3 main.py 5
usage: main.py [-h] {1,2,3}
main.py: error: argument x: invalid choice: 5 (choose from 1, 2, 3)

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;required&#34;&gt;required&lt;/h4&gt;
&lt;p&gt;是否为必选参数,默认为True&lt;/p&gt;
&lt;h4 id=&#34;metavar&#34;&gt;metavar&lt;/h4&gt;
&lt;p&gt;帮助信息中显示的参数名称&lt;/p&gt;
&lt;h4 id=&#34;desk&#34;&gt;desk&lt;/h4&gt;
&lt;p&gt;参数别名&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;解析过程&#34;&gt;解析过程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; parser = argparse.ArgumentParser()
&amp;gt;&amp;gt;&amp;gt; parser.add_argument(&#39;x&#39;)
&amp;gt;&amp;gt;&amp;gt; a = parser.parse_args([&#39;1&#39;])
&amp;gt;&amp;gt;&amp;gt; a
Namespace(x=&#39;1&#39;)
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;class &#39;argparse.Namespace&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; a.x
&#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">PolyLaneNet实践</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/polylanenet%E5%AE%9E%E8%B7%B5/" />
            <id>https://chenbokaix250.github.io/tech/polylanenet%E5%AE%9E%E8%B7%B5/</id>
            <updated>2021-03-16T09:56:03&#43;08:00</updated>
            <published>2021-03-10T18:53:51&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">PolyLaneNet实践 PolyLaneNet 源码解析 工程结构 工程文件结构如下: $ tree . ├── LICENSE ├── README.md……</summary>
            
                <content type="html">&lt;h1 id=&#34;polylanenet实践&#34;&gt;PolyLaneNet实践&lt;/h1&gt;
&lt;h2 id=&#34;polylanenet-源码解析&#34;&gt;PolyLaneNet 源码解析&lt;/h2&gt;
&lt;h3 id=&#34;工程结构&#34;&gt;工程结构&lt;/h3&gt;
&lt;p&gt;工程文件结构如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tree
.
├── LICENSE
├── README.md
├── cfgs
│   ├── elas.yaml
│   ├── elas_cls.yaml
│   ├── llamas.yaml
│   ├── tusimple.yaml
│   ├── tusimple_1order.yaml
│   ├── tusimple_2order.yaml
│   ├── tusimple_320x180.yaml
│   ├── tusimple_480x270.yaml
│   ├── tusimple_efficientnetb1.yaml
│   ├── tusimple_fulltrain.yaml
│   ├── tusimple_no_share_top_y.yaml
│   ├── tusimple_noaug.yaml
│   ├── tusimple_nopretrain.yaml
│   ├── tusimple_resnet34.yaml
│   └── tusimple_resnet50.yaml
├── figures
│   └── method-overview.png
├── lib
│   ├── __init__.py
│   ├── config.py
│   ├── datasets
│   │   ├── __init__.py
│   │   ├── elas.py
│   │   ├── lane_dataset.py
│   │   ├── llamas.py
│   │   ├── nolabel_dataset.py
│   │   └── tusimple.py
│   └── models.py
├── requirements.txt
├── test.py
├── train.py
└── utils
    ├── __init__.py
    ├── evaluator.py
    ├── gen_video.py
    ├── lane.py
    ├── metric.py
    ├── plot_log.py
    └── upperbound.py

5 directories, 37 files

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cfg文件夹中,存储了yaml文件,用于对Train-Testing-Dataset的过程进行设定&lt;/p&gt;
&lt;p&gt;数据的清洗在&lt;code&gt;tusimple.py&lt;/code&gt;中,通过读取json文件,解析后得到annotation的结构体:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;annotations.append({
                    &#39;path&#39;: os.path.join(self.root, data[&#39;raw_file&#39;]),
                    &#39;org_path&#39;: data[&#39;raw_file&#39;],
                    &#39;org_lanes&#39;: gt_lanes,
                    &#39;lanes&#39;: lanes,
                    &#39;aug&#39;: False,
                    &#39;y_samples&#39;: y_samples
                })
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;path是&lt;code&gt;raw_file&lt;/code&gt;绝对位置
org_path是相对位置
org_lanes是&lt;code&gt;lanes&lt;/code&gt;中的数据
lanes是x和y清洗后的集合
y_sample是&lt;code&gt;h_samples&lt;/code&gt;的值&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;lane_dataset.py&lt;/code&gt;中最关键的是&lt;code&gt;transform_annotation&lt;/code&gt;函数:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lanes[lane_pos, 0] = category
lanes[lane_pos, 1] = lower / img_h
lanes[lane_pos, 2] = upper / img_h
lanes[lane_pos, 3:3 + len(xs)] = xs
lanes[lane_pos, (3 + self.dataset.max_points):(3 + self.dataset.max_points + len(ys))] = ys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用lanes组装七个参数:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;种类&lt;/li&gt;
&lt;li&gt;最低点(均值化后)&lt;/li&gt;
&lt;li&gt;最高点(均值化后)&lt;/li&gt;
&lt;li&gt;xs (点的x均值化后)&lt;/li&gt;
&lt;li&gt;ys (点的y均值化后)&lt;/li&gt;
&lt;li&gt;path (图像路径)&lt;/li&gt;
&lt;li&gt;anno (清洗后数据)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9aOHcyRXhyRmdEd2VmQk1FTzNVREhZOTlJTXdhMmFnR2hLSHVvMW1oVE5mTGFUaWFYRHhmSUhpY09Qb3A4bXAzZjhIdGlhVEtRYm5Ocm5OcXhMR0hiaWFCc1EvNjQw?x-oss-process=image/format,png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从网络的输出中可以看到&lt;/p&gt;
&lt;p&gt;输出是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s1---sn&lt;/li&gt;
&lt;li&gt;c1---cn&lt;/li&gt;
&lt;li&gt;共享的h&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从&lt;code&gt;models.py&lt;/code&gt;中看出网络可以的backone可以设置&lt;/p&gt;
&lt;p&gt;网络包含一个 forward + decode&lt;/p&gt;
&lt;p&gt;decode中reshape为7:score + upper + lower + 4 coeffs = 7&lt;/p&gt;
&lt;p&gt;也就是说 PolyLaneNet的最大能力是预测5条车道&lt;/p&gt;
&lt;p&gt;loss一共包含五部分&lt;/p&gt;
&lt;p&gt;loss = conf_loss + lower_loss + upper_loss + poly_loss + cls_loss&lt;/p&gt;
&lt;p&gt;利用交叉熵和均方损失进行优化&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conf_weight=1,
lower_weight=1,
upper_weight=1,
cls_weight=1,
poly_weight=300,

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个weight应该是作者反复试验,找到的很好的初始点.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tusimpleyaml&#34;&gt;tusimple.yaml&lt;/h3&gt;
&lt;p&gt;所有的设置文件的位置包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Training settings&lt;/li&gt;
&lt;li&gt;Testing settings&lt;/li&gt;
&lt;li&gt;Dataset settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要需要设定的有:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;model:
    parameters:
        backbone:&amp;quot;efficientnet-b0&amp;quot;
# backbone使用的网络,支持efficientnet,resnet等

test_parameters:
    conf_threshold:0.5
# 置信度设定

dataset:tusimple
# 数据集类型

datasets:
    root
# 数据集位置

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testpy&#34;&gt;test.py&lt;/h3&gt;
&lt;p&gt;重点看一下 &lt;code&gt;test.py&lt;/code&gt;的内容&lt;/p&gt;
&lt;h4 id=&#34;main&#34;&gt;main&lt;/h4&gt;
&lt;p&gt;读取参数和配置
设置种子和log
打印出Experiment/Config/input args&lt;/p&gt;
&lt;p&gt;配置设备(cpu or gpu)
读取 num_epochs batch_size model epoch等&lt;/p&gt;
&lt;p&gt;然后利用DataLoader设置数据的读取方式&lt;/p&gt;
&lt;p&gt;实例化evalueator&lt;/p&gt;
&lt;p&gt;设置logging的输出及格式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最关键的一句&lt;/strong&gt;
&lt;code&gt;_, mean_loss = test(model, test_loader, evaluator, exp_root, cfg, epoch=test_epoch, view=args.view)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将参数:  模型/数据/估计/目录/配置/epoch和是否可视化 传入test中
打印平均损失(mean_loss)&lt;/p&gt;
&lt;p&gt;利用evaluetor.eval更新table, result给eval_str
logging显示eval_str&lt;/p&gt;
&lt;h4 id=&#34;test&#34;&gt;test&lt;/h4&gt;
&lt;p&gt;test函数是关键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;model.load_state_dict(torch.load(os.path.join(exp_root, &amp;quot;models&amp;quot;, &amp;quot;model_{:03d}.pt&amp;quot;.format(epoch)),map_location=torch.device(&#39;cpu&#39;))[&#39;model&#39;],False)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;model.load_state_dict&lt;/code&gt;引入模型&lt;/p&gt;
&lt;p&gt;贴一下pytorch上的文档解释&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;load_state_dict(state_dict, strict=True)[SOURCE]
Copies parameters and buffers from state_dict into this module and its descendants. If strict is True, then the keys of state_dict must exactly match the keys returned by this module’s state_dict() function.

Parameters
state_dict (dict) – a dict containing parameters and persistent buffers.

strict (bool, optional) – whether to strictly enforce that the keys in state_dict match the keys returned by this module’s state_dict() function. Default: True

Returns
missing_keys is a list of str containing the missing keys

unexpected_keys is a list of str containing the unexpected keys

Return type
NamedTuple with missing_keys and unexpected_keys fields
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;strict这个参数设定错误,导致研究了很久(Q3)&lt;/p&gt;
&lt;p&gt;model.eval()，pytorch会自动把BN和DropOut固定住，不会取平均，而是用训练好的值。
&lt;strong&gt;在使用PyTorch进行训练和测试时一定注意要把实例化的model指定train/eval&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读取loss test等参数
然后启动torch上下文管理器
进入test_loader循环
test_loader中拆解出idx,image,labels,img_idxs&lt;/p&gt;
&lt;p&gt;images和labels存入GPU&lt;/p&gt;
&lt;p&gt;&lt;code&gt;outputs = model(images) &lt;/code&gt; 这句的封装没看懂
后面读取了&lt;code&gt;model.loss&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;loss返回的内容&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;conf&#39;: conf_loss,
            &#39;lower&#39;: lower_loss,
            &#39;upper&#39;: upper_loss,
            &#39;poly&#39;: poly_loss,
            &#39;cls_loss&#39;: cls_loss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将outputs/标签和置信度传入得到新的outputs&lt;/p&gt;
&lt;p&gt;利用lane_outputs去接收outputs的输出
利用evaluator的add_prediction去添加eval的属性,主要解析利用lane_outputs&lt;/p&gt;
&lt;p&gt;如果可视化开启,通过dataset.draw_annotation去获取preds&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;q1-批量编辑文件夹所有图片&#34;&gt;Q1 批量编辑文件夹所有图片&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; cv2.imwrite(&#39;/home/no1/Desktop/read/ha/%05d&#39;%(i)+&#39;.jpg&#39;,I)      #按照00000~以此排序
    cv2.imwrite(&#39;/home/no1/Desktop/read/aa/&#39;+&#39;{}&#39;.format(i)+&#39;.jpg&#39;,I)   #按照1~以此排序
    cv2.imwrite(&#39;/home/no1/Desktop/read/hh/&#39;+all_inp[i],I)                #按照原图命名排序
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;q2-cv2imwrite报错&#34;&gt;Q2 cv2.imwrite报错&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;OpenCV Error: Unspecified error (could not find a writer for the specifi
ed extension) in cv::imwrite_, file C:\ci\opencv_1512688052760\work\modu
les\imgcodecs\src\loadsave.cpp, line 677
Traceback (most recent call last):
  File &amp;quot;save_person_pic.py&amp;quot;, line 44, in &amp;lt;module&amp;gt;
    catchPICFromcamera(&amp;quot;catchpic&amp;quot;,int(sys.argv[1]),int(sys.argv[2]),sys.
argv[3])
  File &amp;quot;save_person_pic.py&amp;quot;, line 24, in catchPICFromcamera
    cv2.imwrite(img_name,image)
cv2.error: C:\ci\opencv_1512688052760\work\modules\imgcodecs\src\loadsav
e.cpp:677: error: (-2) could not find a writer for the specified extensi
on in function cv::imwrite_

原

cv2.imwrite(image_name,image)

改

cv2.imwrite(imagge_name.jpg,image)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id=&#34;q3-runtimeerror-errors-in-loading-state_dict-for-ssd-missing-keys-in解决办法&#34;&gt;Q3 RuntimeError: Error(s) in loading state_dict for SSD: Missing key(s) in解决办法&lt;/h3&gt;
&lt;p&gt;模型验证的时候运行出现RuntimeError: Error(s) in loading state_dict for SSD:Missing key(s) in state_dict: 解决办法&lt;/p&gt;
&lt;p&gt;将
&lt;code&gt;net.load_state_dict(torch.load(args.trained_model))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;改为
&lt;code&gt;net.load_state_dict(torch.load(args.trained_model), False)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前有人说版本问题,更改后发现未解决&lt;/p&gt;
&lt;p&gt;也有人说是加载的预训练模型使用了&lt;code&gt;torch.nn.DataParallel()&lt;/code&gt;,而此时的训练并没有使用
添加&lt;code&gt;model = torch.nn.DataParallel(model)&lt;/code&gt;
添加后,也没有解决&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;q4-python3中urlliberrorurlerror错误&#34;&gt;Q4 python3中urllib.error.URLError错误&lt;/h3&gt;
&lt;p&gt;在使用python3中的urllib.request模块抓取网页的时候使用一下的代码会报一个urllib.error.URLError错误&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import urllib.request
response = urllib.request.urlopen(&#39;https://www.python.org&#39;)

urllib.error.URLError: &amp;lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用urllib.urlopen一个 https 的时候会验证一次 SSL证书。当目标使用的是自签名的证书时就会报urllib.error.URLError错误。解决方法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import urllib.request
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
response = urllib.request.urlopen(&#39;https://www.python.org&#39;)
print(response.read().decode(&#39;utf-8&#39;))

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过导入ssl模块把证书验证改成不用验证就行.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;q5-将运行结果保存在文件中&#34;&gt;Q5 将运行结果保存在文件中&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$ ls &amp;gt; ls.txt&lt;/code&gt;  或者 &lt;code&gt;ls--&amp;gt;ls.txt &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把ls命令的运行结果保存到文件ls.txt中
其中logging信息保存的问题 专门写一个logging的文档里面说吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后放两张 嘚瑟一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/10/nrXPTSjuzWlmMsw.jpg&#34; alt=&#34;pred82.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/10/8eTIrCmwSVFfJ4i.jpg&#34; alt=&#34;pred41.jpg&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">编程语言动态性</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E6%80%A7/" />
            <id>https://chenbokaix250.github.io/tech/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E6%80%A7/</id>
            <updated>2021-03-04T17:22:13&#43;08:00</updated>
            <published>2021-03-04T17:21:53&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">编程语言的动态性 类型系统层面上的动态性 根据类型检查是在编译期还是在运行期进行的，我们……</summary>
            
                <content type="html">&lt;h1 id=&#34;编程语言的动态性&#34;&gt;编程语言的动态性&lt;/h1&gt;
&lt;h2 id=&#34;类型系统层面上的动态性&#34;&gt;类型系统层面上的动态性&lt;/h2&gt;
&lt;p&gt;根据类型检查是在编译期还是在运行期进行的，我们可以把计算机语言分为两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态类型语言（全部或者几乎全部的类型检查是在编译期进行的）。因为编译期做了类型检查，运行期不用再检查类型，性能更高。像 C、Java 和 Go 语言，在编译时就对类型做很多处理，包括检查类型是否匹配，以及进行缺省的类型转换&lt;/li&gt;
&lt;li&gt;动态类型语言（类型的检查是在运行期进行的）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;泛型编程&#34;&gt;泛型编程&lt;/h2&gt;
&lt;p&gt;来自陈皓《左耳听风》笔记&lt;/p&gt;
&lt;p&gt;编程语言的本质是帮助程序猿屏蔽底层机器代码，使得我们可以更为关注业务逻辑代码。&lt;/p&gt;
&lt;p&gt;programming paradigm，范即模范之意，是一类典型的编程风格，不同的风格解决的都是同一个问题：如何写出更为通用、更具可重用性的代码或模块。&lt;/p&gt;
&lt;p&gt;作者提供了一个视角，从“程序=算法 + 数据结构”出发，从语言对泛型的支持来看待语言的演化：泛型编程的支持。逻辑重用 ==&amp;gt; 算法复用性高 ==&amp;gt; 数据结构标准化 ==&amp;gt; 类型泛型。简单说就是让数据结构 迁就算法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于程序=算法+数据结构，C语言有以下问题：一个通用的算法，需要对所处理的数据的数据类型进行适配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C语言的伟大之处在于 程序猿可以在高级语言的特性之上还能简单的做任何底层上的微观控制。但在编程这个世界中，更多的编程工作是解决业务上的问题，而不是计算机的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++的作者有一本书《C++语言的设计和演化》这本书系统介绍了C++诞生的背景和初衷： 早先很多是对C的强化和净化 ==&amp;gt; 用引用解决指针问题；用class来解决对象的创建、赋值、销毁等问题（C指针干这些都要手动）。泛型编程是C++的重点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理想情况下，算法应是和数据结构以及类型无关的，各种特殊的数据类型理应做好自己分内的工作。算法只关心一个标准的实现。而对于泛型的抽象，我们需要回答的问题是：如果我们的数据类型符合通用算法，那么对数据类型的最小需求是什么？&lt;/p&gt;
&lt;p&gt;1)减少自定义数据类型 与 内建数据类型的差异。比如漏出构建、析构、克隆等函数 的hook交由语言自动执行，类似int自动帮你初始化为0.&lt;/p&gt;
&lt;p&gt;2)减少自定义数据类型之间的差异。List、Set 抽象为Iterator，而调用Iterator.next 可以按照实际的数据类型反应。从泛型的角度理解Iterator 的价值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用动态类型语言写sum(x,y)貌似没有泛型的问题，但在你要明确类型时又很难受，比如将一个不知道什么类型的x转为一个数字。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个良好的泛型编程需要解决 几个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;算法的泛型，将sum 和max、min等都抽象为 reduce（把数组聚合为一个值），也就是将for 循环之内的 逻辑/算法 作为参数传入。&lt;/li&gt;
&lt;li&gt;类型的泛型，比如sum int 改为sum T。&lt;/li&gt;
&lt;li&gt;数据结构的泛型，比如找到一种公共的方式来描述List、Set、Map 等 ==&amp;gt; Iterator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://qiankunli.github.io/public/upload/architecture/type_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;泛型编程于1985年在论文 generic programming 中被这样定义：Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software. 屏蔽掉数据和操作数据的细节，让算法更为通用，让编程者更多的关注算法的结构，而不是在算法那中处理不同的数据类型。&lt;/p&gt;
&lt;h2 id=&#34;编程语言层面上的动态性&#34;&gt;编程语言层面上的动态性&lt;/h2&gt;
&lt;p&gt;语言的动态性要点如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不同的语言具有不同程度的动态特性，现代大多数语言都是介于二者之间的折中。下面是两个极端：&lt;/p&gt;
&lt;p&gt;1)Fortran语言不支持堆栈，所有的变量和子程序都是在编译时分配好内存的，不能进行动态内存分配，因而不能进行函数递归调用。&lt;/p&gt;
&lt;p&gt;2)Perl、Python和Ruby语言可以在运行时修改类的结构或定义，变量的类型可以按需改变，Lisp语言甚至可以在运行时动态地改变自身的代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态语言有多种定义，本文采用：动态语言是指能够在运行时改变程序结构和变量类型的语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序中定义的操作一般需要特定类型的参数作为操作的输入，操作只有在接收到类型正确的参数时才能正确无误的执行（包括操作内存）。所以无论哪种语言，都逃避不了一个特定的类型系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态类型语言在每个数据对象中保存一个类型标签表明该数据对象的类型，在运行时进行动态类型检查。比如在表达式C=A+B中，A和B的类型在程序运行时确定，也可以在运行时改变，所以每次执行 + 操作时都要根据类型标签对A和B的类型进行检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态类型检查的主要优点在于程序设计的灵活性，不需要声明语句，一个变量名绑定的数据对象的类型可以在程序执行时按需改变，使程序员从数据类型摆脱出来。运行时进行的类型检查也存在几点重大不足：&lt;/p&gt;
&lt;p&gt;1)程序难以调试。只在程序运行到某一条操作时才对其进行类型检查，软件测试时是不能遍历程序中所有的执行路径，这样没有被执行的路径仍有可能存在bugs&lt;/p&gt;
&lt;p&gt;2)保存大量的类型信息。运行时需要相当大的额外存储空间&lt;/p&gt;
&lt;p&gt;3)执行效率低，动态类型检查要靠软件模拟实现，主要是在运行时完成的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;python中的对象和动态性&#34;&gt;Python中的对象和动态性&lt;/h1&gt;
&lt;p&gt;当我们谈到python时常常会说python中一切都是对象，字符串是对象，整数型是对象，标准库中的对象当然也是对象，class本身也是对象，类型(type)也是对象。&lt;/p&gt;
&lt;p&gt;但是初学的时候会错误地认为，既然大家都是对象，那么应该都是一样的“众生平等”啦。非也非也，尽管都是对象，每个对象支持的方法和属性还是很不一样的啦。&lt;/p&gt;
&lt;p&gt;就拿int和自定义的类型来说吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164026-e22c077416594fae8482ac86d0a65817.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;int型是python语言的原始类型，上图中所见的就是它所支持的所有操作，如加减乘除，移位，取反等等。&lt;/p&gt;
&lt;p&gt;除了面向对象这个特点，Python的另一个特点是它是一种动态语言。好吧，亲，我们来给int对象加上一个自定义属性，何如？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164033-39f1b500f4a9463f808aa7b8fcccf863.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;肿么啦，看起来不灵啊。好吧，我们自己建个类型来试试看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164035-7114a85eb6094ea68b75034b01ebf8b9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;自定义类型Object是个空类型，是一穷二白的状态。没关系，我们来整整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164048-8c73d5f228bd4b5c85d16a627c5c92c8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在obj已经加上了一个叫做name的属性，再来加上方法吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164053-6216a645a74e44d682c7d1d02977533d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我选择了给类Object加上方法，当然如果你喜欢也可以只给obj实例添加一个方法。方法echo没有做什么石破天惊的事情，&lt;/p&gt;
&lt;p&gt;仅仅输出了自己的名字。&lt;/p&gt;
&lt;p&gt;一个Object显得有些孤单，我们给他制造个兄弟吧，然后让他兄弟也echo一把。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164054-87652216ad4342b9b652a2a7ef84edbe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;呀，肿么回事？哦，这个兄弟没有name属性啊，因为之前我们仅仅给他哥哥取了名字。来，接着整。&lt;/p&gt;
&lt;p&gt;给类型Object加上name属性，然后看看obj2和obj。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images0.cnblogs.com/blog/76325/201305/16164056-33d70738e68041f18e38b59573df649b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;结果如上，一切尽在掌握之中，嘿嘿。通过上面的例子，python的动态性有一定体现.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you love him, teach him C++, for it&#39;s heaven;
If you hate him, teach him C++, for it&#39;s hell&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/program/" term="program" label="program" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">硬盘损坏问题</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E7%A1%AC%E7%9B%98%E6%8D%9F%E5%9D%8F%E9%97%AE%E9%A2%98/" />
            <id>https://chenbokaix250.github.io/life/%E7%A1%AC%E7%9B%98%E6%8D%9F%E5%9D%8F%E9%97%AE%E9%A2%98/</id>
            <updated>2021-06-07T10:09:12&#43;08:00</updated>
            <published>2021-03-04T11:07:31&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">移动硬盘损坏故障 早晨往硬盘拷贝数据时,微信死机了,然后重启了 然后就悲剧了 打开之后在m……</summary>
            
                <content type="html">&lt;h2 id=&#34;移动硬盘损坏故障&#34;&gt;移动硬盘损坏故障&lt;/h2&gt;
&lt;p&gt;早晨往硬盘拷贝数据时,微信死机了,然后重启了&lt;/p&gt;
&lt;p&gt;然后就悲剧了&lt;/p&gt;
&lt;p&gt;打开之后在mac上发现只能读取到少量文件夹的信息&lt;/p&gt;
&lt;p&gt;在同事的windows系统试了一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-ced3f24f799ad2da21bc94a2c5f69585_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;里面数据又不敢删除,怕再下载麻烦&lt;/p&gt;
&lt;p&gt;就开始搞&lt;/p&gt;
&lt;p&gt;本质原因是&lt;/p&gt;
&lt;p&gt;文件系统损坏：文件系统损坏了会导致分区不能被系统正确读取，从而出现无法访问的情况。移动硬盘常用的文件系统类型为NTFS，如果NTFS文件系统中的MFT，即主文件表（Master File Table）损坏了，那么多半会出现文件或目录损坏无法取得的故障。&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;disk genius&lt;/code&gt;发现文件本身没有损坏&lt;/p&gt;
&lt;p&gt;应该是卷加载损坏了 360没有找到修复工具&lt;/p&gt;
&lt;p&gt;然后利用&lt;code&gt;win cmd&lt;/code&gt;完成修复&lt;/p&gt;
&lt;p&gt;具体步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入移动硬盘在win下&lt;/li&gt;
&lt;li&gt;打开cmd(利用管理员权限打开)&lt;/li&gt;
&lt;li&gt;找到盘符,并进入&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;chkdsk /f&lt;/code&gt;,enter&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后直接把掉,在mac上运行,利用mounty挂载移动磁盘时,还有报错:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/04/QBm6bVIkHqTot72.png&#34; alt=&#34;下载.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后,发现是之前没有完全卸载&lt;/p&gt;
&lt;p&gt;在插在win pc上 操作一遍,然后利用弹出usb操作&lt;/p&gt;
&lt;p&gt;重新插在mac上 恢复.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;后来发现 之前拷贝进去的文件 均无法复制出来 其余是好的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/09/aHl3Mi2F9LoNe6V.png&#34; alt=&#34;截屏2021-03-09 上午9.52.23.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;问题: Mac外联硬盘不能更改“-”中的一个或多个项目,因为它们正在使用中&lt;/p&gt;
&lt;p&gt;打开Terminal，在命令行输入xattr -d com.apple.FinderInfo + 文件路径, 如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ xattr -d com.apple.FinderInfo /Volumes/someFinder/someFile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后enter, 就解决了。&lt;/p&gt;
&lt;p&gt;主要 需要先用工具将硬盘挂载,负责会出现文件read-only的问题&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;出现新问题&lt;/p&gt;
&lt;p&gt;插入硬盘后,udisk显示,但是无任何文件&lt;/p&gt;
&lt;p&gt;显示格式为RAW
具体解决方法&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/baidu_31981559/article/details/51595545&#34;&gt;解决方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;记录一下&lt;/p&gt;
&lt;p&gt;这次的问题比较蹊跷 在mac和Windows下均为空 但是在linux下可以正常使用.&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/%E6%95%85%E9%9A%9C/" term="故障" label="故障" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Lane_detector论文</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/lane_detector%E8%AE%BA%E6%96%87/" />
            <id>https://chenbokaix250.github.io/tech/lane_detector%E8%AE%BA%E6%96%87/</id>
            <updated>2021-03-02T17:04:23&#43;08:00</updated>
            <published>2021-03-02T17:03:51&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Lane detection研究报告 内容主要包含两部分 对于视频分享的要点的整理 对于视频中提到……</summary>
            
                <content type="html">&lt;h1 id=&#34;lane-detection研究报告&#34;&gt;Lane detection研究报告&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;内容主要包含两部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;对于视频分享的要点的整理&lt;/li&gt;
&lt;li&gt;对于视频中提到的论文阅读的整理(【极市】方浩：车道线检测新SOTA，RESA：循环特征位移聚合器（AAAI2021）)&lt;/li&gt;
&lt;li&gt;对于项目工程的整理(未开展)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;section-a&#34;&gt;Section A&lt;/h1&gt;
&lt;p&gt;Detect several lanes from image (front camera)&lt;/p&gt;
&lt;p&gt;In planning stage:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Trajectory planning&lt;/li&gt;
&lt;li&gt;Behavior prediction&lt;/li&gt;
&lt;li&gt;Lane keeping&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Problem define:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input Image [3 x H x W]&lt;/li&gt;
&lt;li&gt;Output:N x lanes
(instances,points,parameters,etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key Challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Severe occlusion &amp;amp; ambigous lanes&lt;/li&gt;
&lt;li&gt;Sparse superisory signals inherent in lane annotations&lt;/li&gt;
&lt;li&gt;Real-time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;related-work&#34;&gt;Related work&lt;/h2&gt;
&lt;h3 id=&#34;hough-transform&#34;&gt;Hough transform&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RGB -&amp;gt; Gray&lt;/li&gt;
&lt;li&gt;Gaussion blur&lt;/li&gt;
&lt;li&gt;Canny Edge Detection&lt;/li&gt;
&lt;li&gt;Hough transform&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lanenet&#34;&gt;LaneNet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Instance segmentation&lt;/li&gt;
&lt;li&gt;Pixel embedding + clustering&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Towards end-to-end lane detection:an instance segmentation approach&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;scnn&#34;&gt;SCNN&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RNN-like information passing&lt;/li&gt;
&lt;li&gt;Segmentation + post-process&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Spatial as deep:Spatial cnn for traffic scene understanding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;light-weight&#34;&gt;light-weight&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;self-attention distillation(SAD)&lt;/li&gt;
&lt;li&gt;CurveLane-NAS&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CurveLane-NAS:Unifying Lane-Sensitive Architecture Search and Adaptive Point Blending&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;gridding&#34;&gt;Gridding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pixel -&amp;gt; cell&lt;/li&gt;
&lt;li&gt;Row-wise classification&lt;/li&gt;
&lt;li&gt;High speed but accuracy is lost&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Ultra Fast Structure-aware Deep Lane Detection
End-to-End Lane Marker Detection via Row-wise Classification
Inter-Region affinity Distillation for Road Marking Segmentation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;polylanenet&#34;&gt;PolyLaneNet&lt;/h2&gt;
&lt;p&gt;Lane Estimation via Deep Polynomial Regression&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lane Estimation via Deep Polynimial Regression&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;anchor-based&#34;&gt;Anchor-based&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Strong prior&lt;/li&gt;
&lt;li&gt;Not flixible to handle various cases&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Keep your Eyes on the Lane:Real-time-Attention-guided Lane Detection&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Why classical sematic segmentation does not work?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Severe occlusion &amp;amp; ambigous lanes&lt;/li&gt;
&lt;li&gt;Sparse superisory signals inherent in lane annotations(thin and long)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strong shape priors(continuous)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spatial correlation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slicing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Information passing in horizontal and vertical directions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Encoder&lt;/li&gt;
&lt;li&gt;RESA&lt;/li&gt;
&lt;li&gt;Decoder&lt;/li&gt;
&lt;li&gt;conv1x1&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;section-b&#34;&gt;Section B&lt;/h1&gt;
&lt;h1 id=&#34;keep-your-eyes-on-the-lanereal-time-attention-guided-lane-detection&#34;&gt;Keep your Eyes on the Lane:Real-time-Attention-guided Lane Detection&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;论文地址：https://arxiv.org/pdf/2010.12035.pdf
Github地址：https://github.com/lucastabelini/LaneATT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;现有车道线检测方法在复杂的现实世界场景中已取得了卓越的性能，但是许多方法都存在运行实时效率的问题，这对于汽车的自动驾驶来说至关重要。在这项工作中，我们提出了LaneATT：基于anchor的深度车道线检测模型，类似于其他通用的深度目标检测器，该模型将anchors用于特征池化步骤。由于车道线遵循规则的模式并高度相关，因此我们假设在某些情况下，全局信息对于推断其位置可能至关重要，尤其是在诸如遮挡，缺少车道标记等情况下。因此，我们提出了一种新颖的基于anchor的注意力机制，该机制聚集了全局信息。在文献中使用最广泛的数据集对模型进行了广泛的评估。结果表明，我们的方法优于当前的最新方法，显示出更高的功效和效率。此外，我们进行了消融研究，并讨论了在实践中有用的效率折衷方案。&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;本文在Line-CNN的基础上，提出了一个速度与性能兼备的车道线检测模型。主要贡献如下：&lt;/p&gt;
&lt;p&gt;1.在大型和复杂的数据集上，本文提出的车道检测方法比现有的最新实时方法更准确；&lt;/p&gt;
&lt;p&gt;2.具有比大多数其他模型更快的训练和推理时间的模型（达到250 FPS的速度，并且比以前精度最高的方法的MAC少近一个数量级）；&lt;/p&gt;
&lt;p&gt;3.一种新颖的基于anchor的车道检测注意机制，该机制在与检测到的物体相关的其他领域可能很有用。&lt;/p&gt;
&lt;h2 id=&#34;laneatt&#34;&gt;LaneATT&lt;/h2&gt;
&lt;p&gt;使用从安装在车辆中的前置摄像头拍摄的RGB图像作为输入。 输出是车道线。 为了生成这些输出，卷积神经网络（CNN）（称为主干）会生成一个特征图，然后将其汇总以提取每个anchor的特征。 这些特征与注意力模块生成的一组全局特征结合在一起。
通过结合局部和全局特征,该模型可以更轻松地使用来自其他车道的信息，这在有遮挡或没有可见车道标记的情况下可能是必需的。 最后，将合并的特征传递到全连接层以预测最终的输出通道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122131404260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NjIwMg==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;alane-and-anchor-representation&#34;&gt;A.Lane and anchor representation&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122132145679.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lane的anchor表征方式与Line-CNN的方式一致。如上图所示，首先将特征图均分为一定大小的网格。然后，一条lane由起始点s和结束点e，以及方向a组成。也就是一条lane由起始点按照一定方向到结束点的所有2d坐标组成。&lt;/p&gt;
&lt;h3 id=&#34;banchor-based-feature-pooling&#34;&gt;B.Anchor-based feature pooling&lt;/h3&gt;
&lt;p&gt;两阶段的目标检测算法会把一定矩形区域的anchor特征池化到一定长度的特征，以用于后面的卷积或全连接层进行预测。对于车道线而言，因为lane的anchor表征不再是矩形区域，而是一条线。因此本文提出了如下公式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122133415769.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;x_orig，y_orig是起始点的坐标，θ \thetaθ是线的角度方向。这个公式的意思也比较好理解，就是按照网格y坐标找出line上的对应x坐标，这样就可以挑出固定长度的特征出来，长度为特征图F的高度。如果出现了y对应的x点坐标在特征图外，就采用padding的方式补齐。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122134049930.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;pooling操作与Fast R-CNN的感兴趣区域投影（RoI投影）类似，但是，考虑到本文的方法是单级检测器，因此使用anchor本身，而不是使用proposal 进行pooling。此外，RoI池化层（用于生成固定大小的特征）对于我们的方法不是必需的。 与仅利用特征图边界的Line-CNN 相比，本文的方法可以潜在地浏览所有特征图，从而可以使用更轻量的主干和较小的感受野范围。&lt;/p&gt;
&lt;h3 id=&#34;cattention-mechanism&#34;&gt;C.Attention mechanism&lt;/h3&gt;
&lt;p&gt;上面pooling出的特征只是车道线上的局部特征，在遇到车道线遮挡的情况下，还需要全局特征才可以更好的进行预测。因此，本文提出了一种注意力机制，该机制作用于局部特征（α&lt;sup&gt;loc&lt;/sup&gt;）以产生汇总全局信息的附加特征（α&lt;sup&gt;glob&lt;/sup&gt;）。&lt;/p&gt;
&lt;p&gt;公式如2所示，对于池化得到的i和j两个anchor的局部特征，使用Latt（全连接层）去预测i和j的关系。相当于基于当前局部特征i，去预测它和其他局部特征的权重关系，然后聚合其他特征来作为全局特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122135734680.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;d-proposal-prediction&#34;&gt;D. Proposal prediction&lt;/h3&gt;
&lt;p&gt;基于上面提取到的局部特征（α&lt;sup&gt;loc&lt;/sup&gt;）和全局特征（α&lt;sup&gt;glob&lt;/sup&gt;）。预测分支有两个，分类分支去预测k+1个类别，k个车道线类别和1个背景类别。回归分支基于anchor的起始点s，预测出N个点的坐标与anchor的偏移，以及一个线的长度L。因此，车道线的结束点就是e = s+l-1。&lt;/p&gt;
&lt;h3 id=&#34;enms&#34;&gt;E.NMS&lt;/h3&gt;
&lt;p&gt;NMS的过滤阈值采用两条车道线的公共y坐标的距离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122144041441.png#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;experiments&#34;&gt;Experiments:&lt;/h2&gt;
&lt;p&gt;SOTA On TuSimple:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122144238157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NjIwMg==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;推理速度的对比&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122144443123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NjIwMg==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;end-to-end-lane-shape-prediction-with-transformers&#34;&gt;End-to-end Lane Shape Prediction with Transformers&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;论文地址：https://arxiv.org/pdf/2011.04233.pdf
Github地址：https://github.com/liuruijin17/LSTR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;abstract-1&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;车道检测是将车道标记识别为近似曲线的过程，被广泛用于自动驾驶汽车的车道偏离警告和自适应巡航控制。流行的分两步解决问题的pipline-特征提取和后处理虽然有用，但效率低下，而且在学习全局背景和车道的细长结构方面存在缺陷。为了解决这些问题，我们提出了一种端到端方法，该方法可以直接输出车道线形状模型的参数，使用通过transformer构建的网络来学习更丰富的结构和上下文。道线形状模型是基于道路结构和摄像头姿势制定的，为网络输出的参数提供了物理解释。transformer使用自注意机制来建模non-local交互，以捕获细长的结构和全局上下文。该方法已在TuSimple基准测试中得到验证，并以最轻巧的模型尺寸和最快的速度显示了最新的准确性。此外，我们的方法对具有挑战性的自收集车道检测数据集显示出出色的适应性，显示了其在实际应用中的强大部署潜力。&lt;/p&gt;
&lt;h2 id=&#34;intruduction&#34;&gt;Intruduction&lt;/h2&gt;
&lt;p&gt;本文提出将车道检测输出重新构造为车道线形状模型的参数，并提出使用non-local构造块构建的网络，以加强对全局背景和车道细长结构的学习。 每个车道的输出是一组参数，这些参数使用从道路结构和摄像头姿态得出的明确数学公式来近似车道标记。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122174423648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NjIwMg==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;给定特定的先验条件，例如摄像机固有特性，这些参数可用于 &lt;strong&gt;计算道路曲率&lt;/strong&gt;和 &lt;strong&gt;摄像机俯仰角&lt;/strong&gt;，而无需任何3D传感器。 接下来，受自然语言处理模型的启发，该模型广泛使用transformer来对语言序列中的远程依存关系进行显式建模，我们开发了基于transformer的网络，该网络总结了任何成对视觉特征中的信息，从而能够捕获车道的长 薄薄的结构和全局上下文。 整个体系结构可立即预测输出，并接受匈牙利损失的端到端训练。 该损失在预测和gt之间应用了二分匹配，以确保一对一的无序分配，从而使模型可以消除显式的nms过程。&lt;/p&gt;
&lt;h3 id=&#34;主要贡献&#34;&gt;主要贡献&lt;/h3&gt;
&lt;p&gt;1.本文提出了一种车道线形状模型，其参数可作为直接回归的输出并反映道路结构和摄像机的姿态。&lt;/p&gt;
&lt;p&gt;2.我们提出了一个基于transformer的网络，该网络考虑了non-local交互以捕获车道和全局上下文的细长结构。&lt;/p&gt;
&lt;p&gt;3.本文方法以最少的资源消耗实现了最先进的精度，并显示出对新的具有挑战性的自收集车道检测数据集的出色适应性。&lt;/p&gt;
&lt;h2 id=&#34;experiments-1&#34;&gt;Experiments&lt;/h2&gt;
&lt;p&gt;SOTA On TuSimple:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201122174526163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NjIwMg==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;scnn-spatial-cnn-for-traffic-lane-detection&#34;&gt;SCNN: Spatial CNN for Traffic Lane Detection&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;车道线检测在自动驾驶感知任务中占据重要的一席，它可以辅助自动驾驶的车道保持，同时也可以为车辆定位等工作提供较强的先验信息。目前，常见的方法大抵是基于路面的语义分割（如：FCN等）对车辆相机捕捉的画面可视范围中的车道线，进行分类及分割检测，以辅助实现车辆自动驾驶的车道保持等功能。而SCNN的创新点同时也是值得学习的地方是，它清晰定义了车道线算法需要处理的车道线范围（至多检测四条车道线），同时将交通规则融入数据标注中，也较好地规避了路面遮挡等情况对车道线检测的负面影响。当然它也存在一些弊端，比如使用的切片处理（文中后续会详细解释）在落地方面较难优化，特殊的语义定义有些待处理的弊端。&lt;/p&gt;
&lt;h2 id=&#34;1摘要&#34;&gt;1.摘要&lt;/h2&gt;
&lt;p&gt;CNN模型在语义分割上展现出了强大的潜力，但它对于图像的行间、列间的空间处理能力还有待发掘。这类空间关系对于有显著的形状和空间约束、并且表观特征比较单一的检测目标非常重要。车道线检测正好符合以上的目标约束.&lt;/p&gt;
&lt;p&gt;以此为入口，作者提出了SCNN，该算法对feature进行切片处理再进行逐层卷积，使得特征可以按行或按列方向有效地传递。SCNN的这个特点使得其对长条形的检测目标很有优势，下图对比发现,该算法较CNN模型而言可以在遮挡及路面磨损的情况下获得较好的结果，在语义分割任务中，对长条形的路杆同样可以处理的更好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190406172849464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lMT1ZFSm9obm55,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2背景介绍及研究现状&#34;&gt;2.背景介绍及研究现状&lt;/h2&gt;
&lt;p&gt;自动驾驶在学术上和工业界里都获得了大量的关注。自动驾驶系统中一个重要的任务是理解道路场景，包括车道线检测、语义分割等等。车道线检测算法可以辅助自动驾驶车辆自动行驶，并且已经被应用到车辆驾驶辅助系统中。与通用的语义分割不同的是，车道线检测任务中我们面临的问题是，车道线具有较强的结构特征:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;车道线通常呈放射相邻状；&lt;/li&gt;
&lt;li&gt;车道线通常会被遮挡.
按照传统的语义分割算法的处理模式，只处理可见区域的车道线，遮挡的部分不能被检测，在道路状况相对拥挤的情况下，检测性能定会大大降低。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了较好地解决遮挡问题导致的精度下降，作者提出了SCNN算法。在SCNN中，比较核心的创新点在于作者提出对 &lt;strong&gt;backbone网络输出的特征矩阵进行切片处理&lt;/strong&gt;，并且对其进行逐行或逐列方向上的一维卷积操作。这个设计有利于 &lt;strong&gt;传递细长形的目标特征，如车道线或路杆等。而且，这个切片设计可以很好地解决遮挡问题&lt;/strong&gt;，尽管车道线会被部分遮挡，只要有可见的部分，SCNN都可以较好地将车道线整条地预测出来。&lt;/p&gt;
&lt;p&gt;在深度学习普及前，大部分的车道线检测算法都是基于人为设计的特征处理的，对很多复杂的场景处理的都不太好。Huval等人在2015年将深度学习和车道线检测结合在一起，不过仅基于一个不太大的数据集。然而，深度学习在语义分割方向的应用近年来取得了很大的进展。在挖掘神经网络的空间特征方面，也有人尝试使用RNN将每行或每列的特征传递，然而仅限于同行或同列的信息传递。Liang等人也提出使用LSTM来进行语义分割，但是这类方法的计算代价较大。在语义分割方面，研究者们也倾向于将CNN和CRF或MRF进行结合，我的个人感觉是传统方法的延续性做法。&lt;/p&gt;
&lt;p&gt;分析了这么多研究现状后，说一下SCNN的三个主要优点。&lt;/p&gt;
&lt;p&gt;1）相比使用传统的MRF/CRF做后处理，SCNN在空间特征的捕捉上更有效。&lt;/p&gt;
&lt;p&gt;2）从训练的角度分析，SCNN中的切片处理将特征信息以叠加的方式进行传递（参见ResNet，原文用的是residual这个词），因而更容易训练和收敛。&lt;/p&gt;
&lt;p&gt;3）SCNN这种特殊的结构很灵活，可以应用到其他的深度学习任务中。&lt;/p&gt;
&lt;h2 id=&#34;3方法scnn&#34;&gt;3.方法SCNN&lt;/h2&gt;
&lt;h3 id=&#34;31-车道线监测数据集culane&#34;&gt;3.1 车道线监测数据集CULane&lt;/h3&gt;
&lt;p&gt;SCNN相较于其他的车道线检测算法的优点在于将检测范围清晰定义，至多只会检测当前道路的四条车道线。SCNN的输出为左二线、左一线、右一线和右二线，分别对应为蓝色、绿色、红色和黄色标注的线。并且，前言中也提到，SCNN将待检测的四条车道线与交通规则结合。这两个特点主要体现在本文release的CULane数据集。该数据集包含了超过8万张图，涵盖常见场景（Normal）、拥挤场景、夜晚场景等9个场景的数据，各个场景所占比.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190406204830542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lMT1ZFSm9obm55,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;CULane数据集中，每帧数据都包含需要检测的车道线的标注值及每条车道线对应的标签（左二线、左一线、右一线和右二线）。之前提到的SCNN的两个优点，一个是遮挡方面的问题，数据的标注规则中将遮挡的车道线预测标注，这样使得SCNN在处理遮挡的数据时，仍可以较好地预测出遮挡的车道线部分。另一方面，标注规则将交通规则融合，如Y形线或人行横道处，车道线对应停止标注。&lt;/p&gt;
&lt;h3 id=&#34;32-spatial-cnn&#34;&gt;3.2 Spatial CNN&lt;/h3&gt;
&lt;p&gt;传统的分割方法通常会使用CRF/MRF来对其分割结果进行后处理。然而，这样的两段式后处理pipeline不是很有利于在抽取特征阶段就挖掘和利用图像的空间特征。而作者提出的SCNN可以更好更有效地学习到车道线的空间信息，是一个端到端的方法。下图为SCNN的整体流程示意图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190406211251766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lMT1ZFSm9obm55,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面具体给出SCNN的特殊切片设计。如图3-2所示，我们就SCNN_D部分进行具体解释。在backbone基础网络处理后，我们得到的特征矩阵为C&lt;em&gt;H&lt;/em&gt;W，其中C、H和W对应着特征矩阵的channel（通道）、height（高度）、width（宽度）。在SCNN_D处理环节中，我们将这个特征矩阵按行切片，即得到H个特征切片，如图中所示。第一片特征经一维的卷积操作后，从上向下叠加传递，类似于ResNet的处理方式，第二片特征加上第一片特征的卷积输出后，进行一维卷积操作，以此向下传递，直到最后一片特征处理完毕。该特征矩阵传递到下一个处理模块SCNN_U。SCNN_D表示从上向下处理，SCNN_U代表从下向上，SCNN_R则表示从左向右，SCNN_L表示从右向左。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190406213624908.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;切片的处理过程公式化如上所示。经过四个SCNN模块处理后，特征矩阵（C&lt;em&gt;H&lt;/em&gt;W）经过再一次卷积操作，输出为n个通道的分割结果。由于backbone中对原图有下采样操作，最后进行像素级别的损失函数计算前，作者对图像进行了对应倍数的上采样放大操作。&lt;/p&gt;
&lt;h2 id=&#34;结果&#34;&gt;结果&lt;/h2&gt;
&lt;p&gt;SCNN的实验主要在CULane数据集和Cityscapes上进行。训练技巧上，作者使用标准的SGD，batch size为12，0.01的初始化学习率等。更多的训练细节请参考原文。&lt;/p&gt;
&lt;h3 id=&#34;41-模型的推断和输出&#34;&gt;4.1 模型的推断和输出&lt;/h3&gt;
&lt;p&gt;车道线检测任务的输出通常对接精确的曲线拟合。如图4-1所示，SCNN模型的输出为4个分割mask，分别对应左二线、左一线、右一线和右二线的标签。另一方面，SCNN还会输出一个1*4的一维向量，以指示是否存在对应类别车道线，如[0, 1, 1, 1]，则说明该输入的图像中只包含左一线、右一线和右二线，左二线的存在标签为0则意味着不存在左二线。根据该一维向量，作者对SCNN的输出mask进行处理，最后用三次样条曲线来拟合最终的车道线曲线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190406215534803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lMT1ZFSm9obm55,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-模型评估&#34;&gt;4.2 模型评估&lt;/h3&gt;
&lt;p&gt;为判断每条车道线是否被正确检测，作者将每条车道线视为30像素宽的线状前景。评估过程中，计算预测结果mask和真值mask之间的交并比（IoU）。当交并比超过设定的阈值时，则判断为检测正确。实验中，作者使用了0.3和0.5作为评估阈值。如图4-2所示，正确的车道线标注为蓝色，错误检测的车道线标注为红色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190406213803593.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-结论&#34;&gt;5. 结论&lt;/h2&gt;
&lt;p&gt;SCNN算法的特殊切片设计使得其对细长型的分割目标具有更好的空间关系学习能力，也可以更好的处理路面遮挡、磨损等情况。总体说来，SCNN在车道线检测领域方向上，开辟了一种新的思路，很值得学习和借鉴。另外，作者的git repo给的非常完备，源代码使用lua torch实现.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;towards-end-to-end-lane-detection-an-instance-segmentation-approach&#34;&gt;Towards End-to-End Lane Detection: an Instance Segmentation Approach&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;论文链接：https://arxiv.org/abs/1802.05591
代码链接：https://github.com/MaybeShewill-CV/lanenet-lane-detection (tf实现，并不完整，部分功能未实现)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要贡献是两点，一个是利用Semantic Instance Segmentation with a Discriminative Loss Function的思路来实现对任意数量车道线的检测；另一个是车道线检测往往要通过变换矩阵来进行角度变换来使车道线平行从而拟合出可靠的车道线数学模型，但是固定的变换矩阵参数难以适应不同图片或者图片中的地平线变化，作者通过CNN学习矩阵参数解决了这个问题。面临类似问题的同学不妨一读。&lt;/p&gt;
&lt;h2 id=&#34;introduction-1&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;车道线检测实际上属于自动驾驶算法范畴的一部分，可以用来辅助进行车辆定位和进行决策等等。由于车道线本身狭长和弯曲的特性，实际上这个问题更合适看作分割问题而不是检测问题。
如果只是检测固定数量的车道线，可以将不同车道线看作不同的类别，比如左车道线类、右车道线类和背景类等等……但是，如果车道线数量是不固定的呢？无论是常见的对pixel进行softmax分类或者decouple的多个二分类，似乎都没办法解决这个问题了。这个问题其实更像是semantic instance segmentation，不仅要分类，还要精确描述每个个体。
在这里，作者应用了Semantic Instance Segmentation with a Discriminative Loss Function中的思路；同时利用CNN网络来预测车道线的mask，并对所有属于车道线的像素点进行聚类，得到不同的车道线，示意图如下……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180729113425665?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxOTQ5MzU3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;再拟合每条车道线的数学模型&lt;/p&gt;
&lt;h2 id=&#34;2method&#34;&gt;2.Method&lt;/h2&gt;
&lt;h3 id=&#34;lanenet-1&#34;&gt;LaneNet&lt;/h3&gt;
&lt;p&gt;首先是主体网络部分，两条分支，一条分支预测mask，另一条分支给每个lane pixel分配所属lane的id。
binary segmentation 和常规的分割问题一样，没有太多特别的。值得一提的是，无论是车道线还是虚线或者车道线被遮挡的情况，作者在生成ground truth的时候都把它们标注了出来，这样就算对车道线没有完全露出来的情况，网络也可以比较好的学习。
重点是instance segmentation 分支，这个就是利用了上面提到的那篇文章的设计思路，分支的设计思想和传统统计学习的很多算法都类似，不同的lane看作不同的类，而预测的结果力求类内最小化和类间最大化。本着这个原则设计了loss函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180729115246400?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxOTQ5MzU3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一项的主要作用就是把属于同一条lane的像素点往一起推，如果像素点和中心点距离超过一定阈值，就会产生loss；第二项的作用是把不同类中心点往距离加大的方向拉，如果中心点之间的距离小于一定阈值，就会产生loss（+号的意思代表若大于等于0不变，否则看作0），关于这两个阈值怎么选具体可以看论文，作者的设置和原文有一定的差别。
有了这个loss函数，就可以根据lane的mask和不同lane的像素点集合进行训练了。inference的时候思路如下：随机选取一个lane pixel视作当前lane的点集，然后将周围和它距离小于类内点阈值的所有点视作同一类，然后再遍历其它点，如果有某个点和点集内任意点距离小于类内阈值，则将该点加入点集，重复该过程直到点集不再发生变化，给这些点集分配一个lane的id；然后再选取没有被分配id的任意一个pixel，重复该过程。
关于network architecture，作者用的是 encoder-decoder ENet，这个网络共有三个阶段，这两个分支共享前两个阶段，而第三个阶段的encoder和整个网络的decoder部分则是独立&lt;/p&gt;
&lt;h3 id=&#34;curve-fitting&#34;&gt;curve fitting&lt;/h3&gt;
&lt;p&gt;车道线检测一般是给y轴坐标，求车道线上对应的点的x轴的值。仅仅求出所有lane pixel是不够的，还要进行直线拟合，求出对应的数学模型。一般来说，现在在拟合曲线时候都会把图像转化到bird’s-eye view角度，就是让车道线都平行，这些便于拟合、可靠性更高，然后求出相应的点后，再映射回来。
转化到bird’s-eye view是利用矩阵来求的，问题来了，这个矩阵一般是计算一次后就对所有图像都使用的，一个问题就是，如果地平线发生变化，比如汽车行驶在山峦的公路上，很容易产生误差，因此作者就利用一个CNN网络，作者称之为H-Net来学习相关参数。&lt;/p&gt;
&lt;h2 id=&#34;3-实验结果&#34;&gt;3. 实验结果&lt;/h2&gt;
&lt;p&gt;基于学习方法的投影方法H-Net&lt;/p&gt;
&lt;p&gt;将输入的RGB图像作为输入，使用LaneNet得到输出的实例分割结果，然后将车道线像素使用H-Net输出得到的透视变换矩阵进行变换，对变换后的车道线像素在变化后的空间中进行拟合，再将拟合结果经过逆投影，最终得到原始视野中的车道线拟合结果。&lt;/p&gt;
&lt;p&gt;H-Net将RGB作为输入，输出为基于该图像的透视变换系数矩阵，优化目标为车道线拟合效果[41]。&lt;/p&gt;
&lt;p&gt;50帧/秒进行端到端车道检测的方法。受到最近实例分割技术的启发，与其他相关的深度学习方法相比，我们的方法可以检测可变数量的车道并且可以应对车道变换。为了使用低阶多项式对分段车道进行参数化，我们已经训练了一个网络来生成透视变换的参数，以图像为条件，其中车道拟合是最优的。与流行的“鸟瞰视图”方法不同，我们的方法通过调整相应地参数进行变换，可以有效抵抗地平面的坡度变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;polylanenet-lane-estimation-via-deep-polynomial-regression&#34;&gt;PolyLaneNet Lane Estimation via Deep Polynomial Regression&lt;/h1&gt;
&lt;p&gt;通过深度多项式回归的车道估计&lt;/p&gt;
&lt;h2 id=&#34;abstract-2&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;自主驾驶取得巨大进步的主要因素之一是深度学习的出现。对于更安全的自动驾驶车辆，车道检测是尚未完全解决的问题之一。由于该任务的方法必须实时工作(+30 FPS)，因此它们不仅必须有效(即具有高精度)，还必须高效(即快速)。在这项工作中，我们提出了一种新的车道检测方法，该方法使用来自安装在车辆中的前视摄像机的图像作为输入，并通过深度多项式回归输出表示图像中每个车道标记的多项式。所提出的方法在保持效率(115 FPS)的同时，在TuSimple数据集中与现有的最先进的方法相比具有一定的竞争力。此外，还提供了另外两个公共数据集的大量定性结果，以及最近车道检测工作中使用的评估指标的局限性。最后，我们提供源代码和经过训练的模型，允许其他人复制本文中显示的所有结果，这在最先进的车道检测方法中是非常罕见的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;github代码:https://github.com/lucastabelini/PolyLaneNet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;introduction-2&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;自动驾驶[1]是一个富有挑战性的研究领域，近年来备受关注。与该领域相关的感知问题已经受到深度学习进展的极大影响[2]–[4]。特别是，自动车辆应该能够估计车道，因为除了作为空间限制之外，每条车道都提供了控制行驶的特定视觉线索。在这种情况下，两条最重要的交通线(即车道标线)是那些定义车辆车道的线，即自我车道。这些线为驾驶员的行动设置了限制，它们的类型定义了是否允许机动(例如，换道)。此外，检测相邻车道可能是有用的，这样系统的决策可能基于对交通场景的更好理解。&lt;/p&gt;
&lt;p&gt;车道估计(或检测)起初可能看起来微不足道，但它可能非常具有挑战性。尽管车道标志相当标准化，但其形状和颜色各不相同。当出现虚线或部分遮挡的车道标志时，估计车道需要对场景的语义理解。此外，环境本身是多种多样的:可能有大量的交通，人们经过，或者它可能只是一条高速公路。此外，这些环境受多种天气的影响(例如，下雨、下雪、晴天等)。)和照明(例如，白天、夜晚、黎明、隧道等。)条件，这可能会在驾驶时发生变化。&lt;/p&gt;
&lt;p&gt;在这种情况下，专注于消除对两步处理过程的需求，并进一步降低处理成本的方法可以使依赖于低能耗和嵌入式硬件的高级驾驶辅助系统受益。此外，一种已经在美国以外的道路上测试过的方法也对更广泛的社区有益。此外，不太宽松的度量标准将允许更好地区分方法，并提供对方法及其有用性的更清晰的概述.
  这项工作提出了PolyLaneNet，用于端到端车道标线估计的卷积神经网络。PolyLaneNet从安装在车辆中的前视摄像机获取图像作为输入，并输出表示图像中每个车道标志的多项式，以及这些多项式的域和每个车道的置信度得分。
  这种方法与现有的最先进的方法相比具有竞争力，同时速度更快，并且不需要后处理来进行车道估计。此外，我们使用文献中建议的指标提供了更深入的分析。最后，我们公开发布了源代码(用于训练和推理)和经过训练的模型，允许复现本文中给出的所有结果。&lt;/p&gt;
&lt;h2 id=&#34;related-words&#34;&gt;RELATED WORDS&lt;/h2&gt;
&lt;p&gt;车道检测。在深度学习兴起之前，车道线检测的方法大多是基于模型或学习的，也就是说，它们利用手工制作和专门的特征。形状和颜色是最常用的特征[10]，[11]，车道通常由直线和曲线表示[12]，[13]。然而，这些方法对突然的光照变化、天气条件、摄像机之间的外观差异以及驾驶场景中的许多其他情况都不稳定。有关早期车道检测方法的更完整调查，请参考[5]中感兴趣的读者。
  随着深度学习的成功，研究人员也研究了它在车道检测中的应用。Huval等人[14]是最先在车道检测中使用深度学习的人之一。他们的模型基于OverFeat，并产生一种分割图作为输出，该分割图随后使用数据库扫描聚类进行后处理。他们在旧金山(美国)收集了一个私人数据集，用来训练和评估他们的系统。由于他们的成功应用，公司也有兴趣研究这个问题。后来，福特发布了Deeplane[15]，与大多数文献不同，它基于横向安装的摄像头来检测车道。尽管结果不错，但他们模拟问题的方式使其不太适用，而且他们还使用了一个基于美国的私人数据集。
  最近，在CVPR 17 举行了车道检测挑战赛，发布了TusSimple[16]数据集。挑战的获胜者是SCNN [7]，这是一种被提议用于交通场景理解的方法，它通过特别设计的CNN结构利用空间信息的传播。他们的模型输出车道概率图，以提供后处理时的车道估计。为了评估他们的系统，他们使用了一个基于预测和Ground truth之间的IoU的评估标准。在此之后，在[8]中，作者提出了Line-CNN模型，该模型的关键部分是line-proposal unit(LPU)，该单元改编自Faster-RCNN中的RPN。他们还将他们的结果提交给了TuSimple benchmark(在挑战结束后)，结果比SCNN略好。然而，他们的主要实验是使用一个更大的数据集，这个数据集没有公开发布。除了这个私有数据集，源代码是私有的，作者不会发布它。另一种方法是FastDraw [17]，在这种方法中，基于基础分割的后处理方法被替换为根据在训练中最大化的折线的可能性来“绘制”车道。除了在TuSimple和CULane [7]数据集上进行评估，作者还在另一个基于美国的私有数据集上提供了定性结果。此外，他们没有发布他们的实现，这阻碍了进一步的比较。一些基于分段的方法集中于提高推理速度，如[9] (ENet-SAD)，其集中通过利用自我注意提取特征来学习轻量级的CNNs。作者在三个著名的数据集上评估了他们的方法。虽然源代码是公开发布的，但有些结果是不可复现的。更接近于我们的工作，[18]提出了一个可微的最小二乘拟合模块来拟合由深度神经网络预测的点上的曲线。在我们的工作中，我们通过直接预测多项式系数来避开对该模块的需求，这简化了方法也提高了速度。总之，现有方法的主要问题之一是可重复性，因为大多数方法要么不发布所使用的数据集，要么不发布源代码。在这项工作中，由于我们提供了源代码，并且只使用公开可用的数据集(包括一个来自美国以外的数据集)，因此我们呈现的结果在公开数据集上与最先进的方法具有竞争力，并且完全可再现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200825105856605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzI4MDk1,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3polylanenet&#34;&gt;3.POLYLANENET&lt;/h2&gt;
&lt;p&gt;Polynomial Degree.
  在大多数车道标志检测数据集中，曲率更明显的车道标志更少，而直线标志代表了大多数情况。考虑到这一点，人们可能会问:用低阶多项式模拟车道标线会有什么影响？为了帮助回答这个问题，我们的方法是使用一阶和二阶多项式来评估的，而不是默认的三阶多项式。此外，我们还通过计算不同阶多项式的上界，展示了文献中所用的标准TuSimple度量的允许性。
Ablation Study. 为了调查对所提出的方法做出的一些决定的影响，进行了消融研究，仅使用TuSimple的训练集进行训练，使用验证集进行测试。对于模型主干f(，θ)，对ResNet [23]的两个变体进行了评估:ResNet-34和ResNet-50。 EfficientNet的另一个变种也被评估， EfficientNet-b1。此外，在训练CNNs时，除了主干的影响外，在使用不同的图像输入尺寸时也有一个权衡。例如，如果使用较小的输入大小，网络转发会更快，但是信息可能会丢失。为了在所提出的方法中测量这种折衷[22]，训练了另外两个模型，一个使用480 × 270像素的输入尺寸，另一个使用320 × 180像素的输入尺寸。此外，还评估了其他三个实际决策:
(一)不共享h的影响(即，单独预测每个车道的终点)，
(二)使用预先训练的模型，通过从头开始训练，而不是在ImageNet上预先训练模型；以及
(三)通过移除在线数据增加，使用数据增加的影响，这减少了模型在训练时看到的可变性。&lt;/p&gt;
&lt;h2 id=&#34;4-result&#34;&gt;4. result&lt;/h2&gt;
&lt;p&gt;PolyLaneNet对靠近摄像机的车道标志部分的预测(在那里可以看到更多细节)非常准确。尽管如此，在靠近地平线的车道标志部分，预测不太准确。我们推测这可能是数据集不平衡导致的局部最小值的结果。由于数据集中的大多数车道标志可以用一阶多项式(即线)很好地表示，所以神经网络倾向于预测直线，因此在具有突出曲率的车道标志上表现不佳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200908102504237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzI4MDk1,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200908102519744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzI4MDk1,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-结论-1&#34;&gt;5. 结论&lt;/h2&gt;
&lt;p&gt;提出了一种基于深度多项式回归的车道线检测新方法。与最先进的方法相比，所提出的方法简单有效，同时保持了有竞争力的准确性。尽管存在精确度稍高的最先进方法，但大多数方法都不提供源代码来复制它们的结果，因此很难对方法之间的差异进行更深入的研究。我们的方法，除了计算效率高之外，还将是公开的，以便将来在车道标线检测方面的工作有一个开始工作和比较的基线。此外，我们还发现了用于评估车道标线检测方法的指标存在问题。对于未来的工作，可以探索可用于不同车道检测方法(例如，分割)的度量，以及更好地突出车道检测方法中的缺陷的度量。&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/lane_detector/" term="lane_detector" label="lane_detector" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Autoware_vision</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/autoware_vision/" />
            <id>https://chenbokaix250.github.io/tech/autoware_vision/</id>
            <updated>2021-03-02T17:02:58&#43;08:00</updated>
            <published>2021-03-02T17:02:01&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">vision_beyond_track代码解析 文件结构目录 # bokaichen @ bokaideMacBook-Pro in ~/Desktop/vision_beyond_track [11:14:36] $ tree . ├──……</summary>
            
                <content type="html">&lt;h1 id=&#34;vision_beyond_track代码解析&#34;&gt;vision_beyond_track代码解析&lt;/h1&gt;
&lt;p&gt;文件结构目录&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# bokaichen @ bokaideMacBook-Pro in ~/Desktop/vision_beyond_track [11:14:36]
$ tree
.
├── CHANGELOG.rst
├── CMakeLists.txt                              # cmake文件
├── README.md
├── include
│   ├── detection.h                             # .h文件
│   └── vision_beyond_track.h
├── launch
│   └── vision_beyond_track.launch              # 启动文件
├── lib
│   ├── clipper.cpp                             # 两个工具类
│   ├── clipper.hpp
│   ├── hungarian.cpp
│   └── hungarian.h
├── package.xml
└── src
    ├── gencolors.cpp                           # 色彩生成文件
    ├── vision_beyond_track.cpp                 # track类实现
    └── vision_beyond_track_node.cpp            # 节点main函数

4 directories, 14 files
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cmakelists中&#34;&gt;CMakeLists中&lt;/h2&gt;
&lt;p&gt;find_package中需要&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenCV的依赖&lt;/li&gt;
&lt;li&gt;autoware_build_flags的依赖&lt;/li&gt;
&lt;li&gt;ros组件中包括了std_msgs,tf,cv_bridge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add_library 生成beyond_track_lib STATIC
依赖于cliper和hu&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STATIC、SHARED和MODULE&lt;/strong&gt;
STATIC、SHARED和MODULE的作用是指定生成的库文件的类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STATIC库是目标文件的归档文件，在链接其它目标的时候使用。&lt;/li&gt;
&lt;li&gt;SHARED库会被动态链接（动态链接库），在运行时会被加载。&lt;/li&gt;
&lt;li&gt;MODULE库是一种不会被链接到其它目标中的插件，但是可能会在运行时使用dlopen-系列的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;add_library(&amp;lt;name&amp;gt; [STATIC | SHARED | MODULE]
            [EXCLUDE_FROM_ALL]
            [source1] [source2] [...])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装路径&lt;code&gt;CATKIN_PACKAGE_LIB_DESTINATION&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;install(TARGETS MyLib
        EXPORT MyLibTargets 
        LIBRARY DESTINATION lib  # 动态库安装路径
        ARCHIVE DESTINATION lib  # 静态库安装路径
        RUNTIME DESTINATION bin  # 可执行文件安装路径
        PUBLIC_HEADER DESTINATION include  # 头文件安装路径
        )
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;代码流程&#34;&gt;代码流程&lt;/h2&gt;
&lt;p&gt;main函数在&lt;code&gt;vision_beyond_track_node.cpp&lt;/code&gt;中:&lt;/p&gt;
&lt;p&gt;实例化 BeyondTrackerNode
然后运行&lt;code&gt;Run&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;BeyondTrackerNode的定义在&lt;code&gt;vision_beyond_track.h&lt;/code&gt;中:
构建类时,定义了四个订阅者:
ros::Subscriber rect_image_subscriber_;       &lt;br&gt;
ros::Subscriber intrinsics_subscriber_;
ros::Subscriber detections_vision_subscriber_;
ros::Subscriber ego_motion_subscriber_;&lt;/p&gt;
&lt;p&gt;一个发布者:  objects_publisher_
一个句柄:   ros::NodeHandle node_handle_;&lt;/p&gt;
&lt;p&gt;构建一个tracker_实例 定义也在&lt;code&gt;vision_beyond_track.h&lt;/code&gt;中
beyondtrack::BeyondTracker tracker_;(后面写)&lt;/p&gt;
&lt;p&gt;image_top_bottom_border_和image_left_right_border_的作用:
在输入图像中添加黑条以保持宽高比，同时调整其大小以适合网络输入大小&lt;/p&gt;
&lt;p&gt;接下来定义了相机相关的信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像的尺寸&lt;/li&gt;
&lt;li&gt;相机的内参及相机的状态&lt;/li&gt;
&lt;li&gt;是否运动&lt;/li&gt;
&lt;li&gt;姿态矩阵&lt;/li&gt;
&lt;li&gt;地面夹角&lt;/li&gt;
&lt;li&gt;安装高度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四个函数声明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parse_detected_object&lt;/li&gt;
&lt;li&gt;vision_detection_callback            //检测回调函数&lt;/li&gt;
&lt;li&gt;intrinsics_callback                  //内参回调函数&lt;/li&gt;
&lt;li&gt;detection_to_objects                 //目标回调函数
其中parse_detected_object是获取Detection的信息 返回值是Detection的vector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;public:&lt;/strong&gt;
一个Run的空方法,具体的实现在&lt;code&gt;vision_beyond_track.cpp&lt;/code&gt;中&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;BeyondTracker的定义也在&lt;code&gt;vision_beyond_track.h&lt;/code&gt;中:&lt;/p&gt;
&lt;p&gt;全局ID
初始化标志位
当前检测结果:std::vector&lt;Detection&gt; cur_detections_;
上次检测结果:std::vector&lt;Detection&gt; prev_detections_;
当前位姿
之前位姿&lt;/p&gt;
&lt;p&gt;四个相机参数&lt;/p&gt;
&lt;p&gt;四个函数声明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initialize&lt;/li&gt;
&lt;li&gt;create_cuboid&lt;/li&gt;
&lt;li&gt;propagate_detections&lt;/li&gt;
&lt;li&gt;generate_score_matrices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;public:&lt;/strong&gt;
五个函数成员:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process&lt;/li&gt;
&lt;li&gt;get_results&lt;/li&gt;
&lt;li&gt;set_intrinsic&lt;/li&gt;
&lt;li&gt;get_3d2d_score&lt;/li&gt;
&lt;li&gt;get_3d3d_score&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;vision_beyond_track.cpp&lt;/code&gt;内容解析:&lt;/p&gt;
&lt;p&gt;BeyondTrackerNode::Run&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  ros::NodeHandle private_node_handle(&amp;quot;~&amp;quot;);//to receive args 
  //获取句柄
  std::string image_topic_src, camera_info_src, objects_topic_src;
  //节点名
  private_node_handle.param&amp;lt;std::string&amp;gt;(&amp;quot;camera_info_src&amp;quot;, camera_info_src, &amp;quot;/camera_info&amp;quot;);
  private_node_handle.param&amp;lt;std::string&amp;gt;(&amp;quot;objects_topic_src&amp;quot;, objects_topic_src,&amp;quot;/detection/image_detector/objects&amp;quot;);
  //节点名赋值
  ROS_INFO(&amp;quot;[%s] Subscribing to... %s&amp;quot;, __APP_NAME__, camera_info_src.c_str());
  //打印
  intrinsics_subscriber_ = private_node_handle.subscribe(
    camera_info_src, 1, &amp;amp;BeyondTrackerNode::intrinsics_callback, this);
  //设置订阅节点
  ROS_INFO(&amp;quot;[%s] Subscribing to... %s&amp;quot;, __APP_NAME__, 
  objects_topic_src.c_str());
  detections_vision_subscriber_ = private_node_handle.subscribe(objects_topic_src,1, &amp;amp;BeyondTrackerNode::vision_detection_callback,this);
  //视觉检测回调函数
  private_node_handle.param&amp;lt;double&amp;gt;(&amp;quot;camera_height&amp;quot;, camera_height_, 1.2);
  ROS_INFO(&amp;quot;[%s] camera height: %f&amp;quot;, __APP_NAME__, camera_height_);
  //获取相机高度
  objects_publisher_ = node_handle_.advertise&amp;lt;autoware_msgs::DetectedObjectArray&amp;gt;(&amp;quot;/detection/image_tracker/objects&amp;quot;,1);
  //发送publisher消息

#if (CV_MAJOR_VERSION &amp;lt;= 2)
  cv::generateColors(colors_, 20);
#else
  generateColors(colors_, 20);
#endif
  //生成颜色
  ground_angle_ = cv::Mat::zeros(1, 3, CV_64FC1);
  ground_angle_.at&amp;lt;double&amp;gt;(0, 1) = 1;

  tracker_ = beyondtrack::BeyondTracker();
  //通过重新初始化一个tracker,来完成tracker的清零
  ros::spin();

  ROS_INFO(&amp;quot;END beyond_tracker&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run方法中产生了两个订阅回调函数
intrinsics_callback 用于获取参数
参数的获取来自CameraInfo的信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;std_msgs/Header header
uint32 height
uint32 width
string distortion_model
float64[] D
float64[9] K
float64[9] R
float64[12] P
uint32 binning_x
uint32 binning_y
sensor_msgs/RegionOfInterest roi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://docs.ros.org/en/noetic/api/sensor_msgs/html/msg/CameraInfo.html&#34;&gt;http://docs.ros.org/en/noetic/api/sensor_msgs/html/msg/CameraInfo.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将订阅的相机参数传递给tracker_后关闭&lt;/p&gt;
&lt;p&gt;vision_detection_callback  用于处理检测迭代
回调函数中的流程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保相机状态正常,是否使用运动补偿(pose_)&lt;/li&gt;
&lt;li&gt;创建一个detections利用&lt;code&gt;parse_detected_object&lt;/code&gt;接收消息DetectedObjectArray&lt;/li&gt;
&lt;li&gt;detections信息有&lt;code&gt;x,y,width,height,label&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最关键的一步是process
&lt;code&gt;tracker_.process&lt;/code&gt;的实现在&lt;code&gt;void BeyondTracker::process(std::vector&amp;lt;Detection&amp;gt; in_detections, cv::Mat in_pose, cv::Mat in_angle, double in_height)&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;读取detections是否为空,决定是否初始化initialized_
如果不为空,执行初始化&lt;code&gt;void BeyondTracker::initialize(cv::Mat in_angle, double in_height)&lt;/code&gt;: 执行后直接返回
主要作用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化中主要完成global_id的发放&lt;/li&gt;
&lt;li&gt;prev_detections_和prev_pose状态的传递
这样的好处是,再次进来后prev_*不会为空&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后修正运动&lt;/p&gt;
&lt;p&gt;传播迭代
生成权重矩阵
建立匈牙利匹配&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/streetdrone-home/Autoware/blob/master/ros/src/msgs/autoware_msgs/msg/DetectedObject.msg&#34;&gt;https://github.com/streetdrone-home/Autoware/blob/master/ros/src/msgs/autoware_msgs/msg/DetectedObject.msg&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vision_segment_enet_detect代码解析&#34;&gt;vision_segment_enet_detect代码解析&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
├── CHANGELOG.rst
├── CMakeLists.txt
├── README.md
├── include
│   └── vision_segment_enet_detect.h
├── launch
│   └── vision_segment_enet_detect.launch
├── nodes
│   └── vision_segment_enet_detect
│       ├── vision_segment_enet_detect.cpp
│       └── vision_segment_enet_detect_node.cpp
└── package.xml

4 directories, 8 files

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cmakeliststxt&#34;&gt;CMakeLists.txt&lt;/h2&gt;
&lt;p&gt;设置里caffe-enet的地址
&lt;code&gt;set(ENET_CAFFE_PATH &amp;quot;$ENV{HOME}/ENet/caffe-enet/distribute&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AW_CHECK_CUDA()&lt;/code&gt; 是对cuda和cudann的设置&lt;/p&gt;
&lt;p&gt;其余无特殊之处&lt;/p&gt;
&lt;h2 id=&#34;vision_segment_enet_detect_nodecpp&#34;&gt;vision_segment_enet_detect_node.cpp&lt;/h2&gt;
&lt;p&gt;实例化 &lt;code&gt;ROSENetSegmenterApp&lt;/code&gt; 执行Run方法&lt;/p&gt;
&lt;p&gt;ROSENetSegmenterApp中的成员变量:&lt;/p&gt;
&lt;p&gt;订阅者    subscriber_image_raw_
ros句柄   node_handle_
发布者1   publisher_image_segmented_
发布者2   publisher_image_segmented_blended_
&lt;code&gt;ENetSegmenter* enet_segmenter_;&lt;/code&gt;
创建ENetSegmenter的类对象指针 enet_segmenter_&lt;/p&gt;
&lt;p&gt;成员函数:
1.订阅的回调函数
2.Run函数&lt;/p&gt;
&lt;p&gt;Run方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  void Run()
  {
    ros::NodeHandle private_node_handle(&amp;quot;~&amp;quot;);//to receive args
    //读取句柄参数的topic,默认为image_raw
    std::string image_raw_topic_str;
    if (private_node_handle.getParam(&amp;quot;image_src&amp;quot;, image_raw_topic_str))
    {
      ROS_INFO(&amp;quot;Setting image node to %s&amp;quot;, image_raw_topic_str.c_str());
    }
    else
    {
      ROS_INFO(&amp;quot;No image node received, defaulting to /image_raw, you can use _image_src:=YOUR_TOPIC&amp;quot;);
      image_raw_topic_str = &amp;quot;/image_raw&amp;quot;;
    }
    //获取prototxt文件/权重文件weights/lookuptable_file

    std::string network_definition_file;
    std::string pretrained_model_file;
    std::string lookuptable_file;
    if (private_node_handle.getParam(&amp;quot;network_definition_file&amp;quot;, network_definition_file))
    {
      ROS_INFO(&amp;quot;Network Definition File: %s&amp;quot;, network_definition_file.c_str());
    }
    else
    {
      ROS_INFO(&amp;quot;No Network Definition File was received. Finishing execution.&amp;quot;);
      return;
    }
    if (private_node_handle.getParam(&amp;quot;pretrained_model_file&amp;quot;, pretrained_model_file))
    {
      ROS_INFO(&amp;quot;Pretrained Model File: %s&amp;quot;, pretrained_model_file.c_str());
    }
    else
    {
      ROS_INFO(&amp;quot;No Pretrained Model File was received. Finishing execution.&amp;quot;);
      return;
    }
    if (private_node_handle.getParam(&amp;quot;lookuptable_file&amp;quot;, lookuptable_file))
    {
      ROS_INFO(&amp;quot;lookuptable File: %s&amp;quot;, lookuptable_file.c_str());
    }
    else
    {
      ROS_INFO(&amp;quot;No lookuptable File was received. Finishing execution.&amp;quot;);
      return;
    }
    //ENetSegmenter建立检测器
    enet_segmenter_ = new ENetSegmenter(network_definition_file,
                        pretrained_model_file,
                        lookuptable_file);

    if (NULL == enet_segmenter_)
    {
      ROS_INFO(&amp;quot;Error while creating ENetSegmenter Object&amp;quot;);
      return;
    }
    ROS_INFO(&amp;quot;ENetSegmenter initialized.&amp;quot;);
    //订阅器回调
    ROS_INFO(&amp;quot;Subscribing to... %s&amp;quot;, image_raw_topic_str.c_str());
    subscriber_image_raw_ = node_handle_.subscribe(image_raw_topic_str, 1, &amp;amp;ROSENetSegmenterApp::image_callback, this);
    //发送器 发送Image
    publisher_image_segmented_ = node_handle_.advertise&amp;lt;sensor_msgs::Image&amp;gt;(&amp;quot;/image_segmented&amp;quot;, 1);
    ROS_INFO(&amp;quot;Publishing /image_segmented&amp;quot;);
    publisher_image_segmented_blended_ = node_handle_.advertise&amp;lt;sensor_msgs::Image&amp;gt;(&amp;quot;/image_segmented_blended&amp;quot;, 1);
    ROS_INFO(&amp;quot;Publishing /image_segmented_blended&amp;quot;);

    ROS_INFO(&amp;quot;Waiting for data...&amp;quot;);
    ros::spin();
    ROS_INFO(&amp;quot;END ENetSegmenter&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in_lookuptable_file文件的作用 用来分配不同label对应的颜色&lt;/p&gt;
&lt;p&gt;image_callback回调函数&lt;/p&gt;
&lt;p&gt;创建cv_image
创建两个Mat segmented_mat和blended_mat
利用enet_segmenter_的Predict方法
传递segmented_mat&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ENetSegmenter的实现:
函数成员:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ENetSegmenter      初始化caffe参数 load&lt;/li&gt;
&lt;li&gt;Predict            识别过程&lt;/li&gt;
&lt;li&gt;SetMean            图像均值化&lt;/li&gt;
&lt;li&gt;WrapInputLayer     读取图片,保存在input_data中&lt;/li&gt;
&lt;li&gt;Preprocess         调换通道和尺寸&lt;/li&gt;
&lt;li&gt;Visualization      对图片进行渲染
变量成员:&lt;/li&gt;
&lt;li&gt;std::shared_ptr&amp;lt;caffe::Net&lt;float&gt; &amp;gt;   net_;&lt;/li&gt;
&lt;li&gt;cv::Size                              input_geometry_;&lt;/li&gt;
&lt;li&gt;int                                   num_channels_;&lt;/li&gt;
&lt;li&gt;std::string                           lookuptable_file_;&lt;/li&gt;
&lt;li&gt;cv::Scalar                            pixel_mean_;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/autoware/" term="Autoware" label="Autoware" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">关于特征提取</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E5%85%B3%E4%BA%8E%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/" />
            <id>https://chenbokaix250.github.io/tech/%E5%85%B3%E4%BA%8E%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</id>
            <updated>2021-03-01T16:28:39&#43;08:00</updated>
            <published>2021-03-01T14:42:23&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">深度学习模型提取特征 有时候需要从图片中提取出数值型特征，供各种模型使用。 深度学习模型……</summary>
            
                <content type="html">&lt;h1 id=&#34;深度学习模型提取特征&#34;&gt;深度学习模型提取特征&lt;/h1&gt;
&lt;p&gt;有时候需要从图片中提取出数值型特征，供各种模型使用。
深度学习模型不仅可以用于分类回归，还能用于提取特征。通常使用训练好的模型，输入图片，输出为提取到的特征向量。&lt;/p&gt;
&lt;p&gt;深度学习模型一般有N层结构，不能确定求取哪一层输出更合适。
深度学习模型很抽象——几十层的卷积、池化、信息被分散在网络参数之中。提取自然语言的特征时，常常提取词向量层的输出作为特征，有时也取最后一层用于描述句意；图像处理时往往提取最后一层输出向量；在图像目标识别问题中，常提取后两层子网络的输出作为组合向量。如何选择提取位置，取决于对模型的理解，后文将对图像处理层进行详细说明。&lt;/p&gt;
&lt;p&gt;通常下载的ResNet，VGG，BERT预训练模型，虽然通用性高，但解决具体问题的能力比较弱。
用自己的数据fine-tune后往往更有针对性，而fine-tune的目标也需仔细斟酌，否则可能起到反作用。比如希望用ResNet识别不同的衣服，就需要考虑到衣服的形状、质地、颜色等等因素，如果用衣服类型（大衣、裤子）的分类器去fine-tune模型，新模型可能对形状比较敏感，而对材质、颜色的识别效果反而变差。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;图像模型ResNet-50规模适中，效果也很好，因此被广泛使用。下面将介绍该模型各层输出的含义，以及用它提取图片特征的方法。&lt;/p&gt;
&lt;p&gt;ResNet原理详见论文：https://arxiv.org/pdf/1512.03385.pdf。
常用的ResNet网络参数如下,可以看到,包含四层Bottlenetct(子网络),越往后,获取的特征越抽象.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20171223111002643?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmluZ194aWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;输入模型的图像结构为[1,3,224,224],图片大小为224x224(大小根据具体图片而定,有红绿蓝3个通道)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/v2-4da1aeec90dd05ad61b6279ed2dfa3cf_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一步，经过一个7x7卷积层，步长为2，它的输出是：(1,64,112,112)，可视为64通道的112x112大小的图片，处理后效果如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/v2-1f3fc262b5d2f045198c6039593ac7af_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该层共生成64张图片，由于步长是2，大小变为112x112，每一种特征提取方法对应一组参数，这些参数对每7x7个像素进行同样处理，最终生成一个新的像素。换言之，就是构造了64种特征提取方法，分别提取了颜色，形状，边缘等特征，也可以看到由于处理以卷积为基础，图像位置关系得以保留。&lt;/p&gt;
&lt;p&gt;在输入一张图片时，一个224x224的图通过这一层，提取了64x112x112=802816维特征，该层一般称为第一组卷积层conv1，由于该层次太过底层，维度过大，很少使用该层特征。&lt;/p&gt;
&lt;p&gt;经过第一层之后，又经过归一化，激活函数，以及步长为2的池化，输出大小为[1, 64, 56, 56]，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-3112df970dba413ae09126c46ece05e9_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后依次传入四个Bottlenext子网络（原理同上），分别称为conv2, conv3, conv4, conv5（也有名为layer1,layer2,layer3,layer4），输出的大小也逐层递减，最终减致2048x7x7=100352，长宽分别是原始参数的1/32。Mask-RCNN中就可获取R-50的第4和第5次作为特征。四层输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-017ebb6ded7628464a12b84dcc1b75b6_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一维是图像的张数，第二维是通道数，后两维分别是图片的宽高，从任一通道取出数据，都可以直接绘制该通道的图像。数据流至最后一个子网络conv5后输出是2048个7x7大小的图片。有时候将7x7的图片做最大池化或平均池化，最终得到一个值，可理解成从该通道提取的一个特征值。到这一步，特征已经和像素位置无关了。&lt;/p&gt;
&lt;p&gt;如果希望提取到的特征不是2048维，则可以在后面再加一个输入为2048，输出为目标维度的全连接层。从上述分析中可以大概了解模型的规模，以及运算量。&lt;/p&gt;
&lt;p&gt;另外一个常见的问题是：图像处理对图像的大小有没有要求？是不是所有大小的图片都可以直接代入模型？上例中使用224x224大小的图片，经过多层池化，最终变成了7x7大小。当然也可以代入更大图片（图片越大占用资源越多），比如448x224的图片，最终输出为14x7。一般在训练时，往往经过crop裁剪和resize缩放的步骤，把图片变为统一大小。输入模型时往往以batch为单位，同一batch中的数据大小必须一致，否则只能单张处理。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;下例为从指定的层提取ResNet50的特征。

import torch
from torch import nn
import torchvision.models as models
import torchvision.transforms as transforms
import cv2

class FeatureExtractor(nn.Module): # 提取特征工具
    def __init__(self, submodule, extracted_layers):
        super(FeatureExtractor, self).__init__()
        self.submodule = submodule
        self.extracted_layers = extracted_layers
 
    def forward(self, x):
        outputs = []
        for name, module in self.submodule._modules.items():
            if name is &amp;quot;fc&amp;quot;: 
                x = x.view(x.size(0), -1)
            x = module(x)
            if name in self.extracted_layers:
                outputs.append(x)
        return outputs

model = models.resnet50(pretrained=True) # 加载resnet50工具
model = model.cuda()
model.eval()

img=cv2.imread(&#39;test.jpg&#39;) # 加载图片
img=cv2.resize(img,(224,224));
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
img=transform(img).cuda()
img=img.unsqueeze(0)

model2 = FeatureExtractor(model, [&#39;layer3&#39;]) # 指定提取 layer3 层特征
with torch.no_grad():
    out=model2(img)
    print(len(out), out[0].shape)

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用resnet&#34;&gt;使用resnet&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import torch
import torch.nn as nn
from torch.autograd import Variable
from torchvision import models, transforms
from PIL import Image
import numpy as np
import os, glob
 
data_dir = &#39;./test&#39;   # train
features_dir = &#39;./Resnet_features_test&#39;  # Resnet_features_train
 
 
//这里自己修改网络
class net(nn.Module):
    def __init__(self):
        super(net, self).__init__()
        self.net = models.resnet50(pretrained=True)
 
    def forward(self, input):
        output = self.net.conv1(input)
        output = self.net.bn1(output)
        output = self.net.relu(output)
        output = self.net.maxpool(output)
        output = self.net.layer1(output)
        output = self.net.layer2(output)
        output = self.net.layer3(output)
        output = self.net.layer4(output)
        output = self.net.avgpool(output)
        return output
 
 
model = net()
//加载cuda
model = model.cuda()
 
 
def extractor(img_path, saved_path, net, use_gpu):
    transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor()]
    )
 
    img = Image.open(img_path)
    img = transform(img)
    print(img.shape)
 
    x = Variable(torch.unsqueeze(img, dim=0).float(), requires_grad=False)
    print(x.shape)
 
    if use_gpu:
        x = x.cuda()
        net = net.cuda()
    y = net(x).cpu()
    y = torch.squeeze(y)
    y = y.data.numpy()
    print(y.shape)
    np.savetxt(saved_path, y, delimiter=&#39;,&#39;)
 
 
if __name__ == &#39;__main__&#39;:
    extensions = [&#39;jpg&#39;, &#39;jpeg&#39;, &#39;JPG&#39;, &#39;JPEG&#39;]
 
    files_list = []
    x = os.walk(data_dir)
    for path,d,filelist in x:
        for filename in filelist:
            file_glob = os.path.join(path, filename)
            files_list.extend(glob.glob(file_glob))
 
    print(files_list)
 
    use_gpu = torch.cuda.is_available()
 
    for x_path in files_list:
        print(&amp;quot;x_path&amp;quot; + x_path)
        file_name = x_path.split(&#39;/&#39;)[-1]
        fx_path = os.path.join(features_dir, file_name + &#39;.txt&#39;)
        print(fx_path)
        extractor(x_path, fx_path, model, use_gpu)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用vgg&#34;&gt;使用vgg&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import torch
import torch.nn as nn
from torch.autograd import Variable
from torchvision import models, transforms
from PIL import Image
import numpy as np
import os, glob
 
data_dir = &#39;./test&#39;  # train
features_dir = &#39;./Vgg_features_test&#39;  # Vgg_features_train
 
 
class Encoder(nn.Module):
    def __init__(self):
        super(Encoder, self).__init__()
        VGG = models.vgg16(pretrained=True)
        self.feature = VGG.features
        self.classifier = nn.Sequential(*list(VGG.classifier.children())[:-3])
        pretrained_dict = VGG.state_dict()
        model_dict = self.classifier.state_dict()
        pretrained_dict = {k: v for k, v in pretrained_dict.items() if k in model_dict}
        model_dict.update(pretrained_dict)
        self.classifier.load_state_dict(model_dict)
 
    def forward(self, x):
        output = self.feature(x)
        output = output.view(output.size(0), -1)
        output = self.classifier(output)
        return output
 
 
model = Encoder()
model = model.cuda()
 
 
def extractor(img_path, saved_path, net, use_gpu):
    transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor()]
    )
 
    img = Image.open(img_path)
    img = transform(img)
    print(img.shape)
 
    x = Variable(torch.unsqueeze(img, dim=0).float(), requires_grad=False)
    print(x.shape)
 
    if use_gpu:
        x = x.cuda()
        net = net.cuda()
    y = net(x).cpu()
    y = torch.squeeze(y)
    y = y.data.numpy()
    print(y.shape)
    np.savetxt(saved_path, y, delimiter=&#39;,&#39;)
 
 
if __name__ == &#39;__main__&#39;:
    extensions = [&#39;jpg&#39;, &#39;jpeg&#39;, &#39;JPG&#39;, &#39;JPEG&#39;]
 
    files_list = []
    x = os.walk(data_dir)
    for path, d, filelist in x:
        for filename in filelist:
            file_glob = os.path.join(path, filename)
            files_list.extend(glob.glob(file_glob))
 
    print(files_list)
 
    use_gpu = torch.cuda.is_available()
 
    for x_path in files_list:
        print(&amp;quot;x_path&amp;quot; + x_path)
        file_name = x_path.split(&#39;/&#39;)[-1]
        fx_path = os.path.join(features_dir, file_name + &#39;.txt&#39;)
        print(fx_path)
        extractor(x_path, fx_path, model, use_gpu)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用三个模型的特征提取的方法&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hungarian算法步骤</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/hungarian%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4/" />
            <id>https://chenbokaix250.github.io/tech/hungarian%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4/</id>
            <updated>2021-02-26T12:23:35&#43;08:00</updated>
            <published>2021-02-26T11:31:41&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">匈牙利算法步骤 作用 解决指派问题。所谓的指派问题就比如：甲乙丙三个人去做ABC三件事情……</summary>
            
                <content type="html">&lt;h1 id=&#34;匈牙利算法步骤&#34;&gt;匈牙利算法步骤&lt;/h1&gt;
&lt;h2 id=&#34;作用&#34;&gt;作用&lt;/h2&gt;
&lt;p&gt;解决指派问题。所谓的指派问题就比如：甲乙丙三个人去做ABC三件事情。每个人做每件事情所花的时间可能不一样。每个人只能安排一件事情，问怎样安排才能使三个人所工作的时间之和最小？
扩展成 n 个人 n 件事也可以，但要求是：&lt;/p&gt;
&lt;p&gt;事情数和人数一样多
每人只能做一件事
这样的问题就称作指派问题
匈牙利算法就是解决这样的问题的。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;
&lt;p&gt;甲乙丙中第i (i=1,2,3)个人做ABC中第j (j=1,2,3)件事的时间为 Aij。矩阵 A 如下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2 3 4
3 4 6
5 6 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就是说甲做A事情要2分钟，做B事情要3分钟； 乙做C事情要6分钟，以此类推。问怎样安排才能使甲乙丙三人所用的时间最少？
下面用匈牙利算法来解。&lt;/p&gt;
&lt;h2 id=&#34;算法目标&#34;&gt;算法目标&lt;/h2&gt;
&lt;p&gt;让矩阵中出现 n 个满足不同行不同列的 0。 上述问题就是要3个不同行不同列的0.&lt;/p&gt;
&lt;h2 id=&#34;步骤概括&#34;&gt;步骤概括&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;每行减去此行最小数&lt;/li&gt;
&lt;li&gt;判断是否达到算法目标,如未达到算法目标,继续下一步,否则结束.&lt;/li&gt;
&lt;li&gt;横纵交替,从行开始.找出所有还没有选中0的行,在此行后面打钩;把此行中有0的列全打钩.在打钩的列中,如果有零,又在有0的行打钩,如此交替,直到不能再打钩.&lt;/li&gt;
&lt;li&gt;在没有打钩的行和打钩的列上划线,会得到发现所有的0已经被划去,如果没有划去,请检查前面的步骤.此时剩下的所有元素中,找到最小值,就记为min.&lt;/li&gt;
&lt;li&gt;在第四步未画线的行减去min(此时原来的0变成-min),再在画线的列加上min(此时矩阵中没有了负数).回到第二步.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;步骤实例&#34;&gt;步骤实例&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 0)初始矩阵

2 3 4
3 4 6
5 6 1

# 1)每行减去此行最小值

0 1 2
0 1 3
4 5 0

# 2)检查发现没有达到算法目标
只有两个不同行不同列的0 ,没有达到算法目标

# 3)找出没有选中0的行,在后面打钩 
此行的0在第一列,在第一列画勾;发现第一列有两个0,其中第一行的0还没画勾;于是第一行后画勾.

0 1 2 √
0 1 3 √
4 5 0 
√

# 4)在没有打钩的行,即第三行,和打钩的列,即第一列,划线.会得到发现所有的0已经被划到.然后找到最小值min,此处min=1

|0|  1   2

|0|  1   3        min=1
+-+--------
|4|  5   0
-----------

# 5)在第四步未画线的行减去min,再在画线的列上加min,最后得到

0 0 1
0 0 2
5 5 0

结果可以是

O 0 1                   0 O 1
0 O 2    也可以是        O 0 2
5 5 0                   5 5 0

也就是甲2乙1丙3或者甲1乙2丙3:
带入初始矩阵:
2 3 4
3 4 6
5 6 1

3+3+1 或 2+4+1
最小代价都是7

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;例子和思路&#34;&gt;例子和思路&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;四个工作（W1，W2，W3和W4）需要执行四个作业（J1，J2，J3和J4）

82 83 69 92
77 37 49 92
11 69  5 86
 8  9 98 23

# 1)减去行最小值

我们首先从每行中减去行最小值。例如，第一行中的最小元素是69.因此，我们从第一行中的每个元素中减去69。得到的矩阵是：

12 14  0 23
40  0 12 55
 6 64  0 81
 0  1 90 15

# 2)减去列最小值

同样，我们从每列中减去列最小值，给出以下矩阵：

13 14  0  8
40  0 12 40
 6 64  0 66
 0  1 90  0

# 3)用最少的行数覆盖全零

我们现在将确定覆盖矩阵中所有零所需的最小行/列数（水平或垂直）。可以使用2行+1列（第二行，第四行，第三列）覆盖所有零：

13 14  0  8
40  0 12 40 X
 6 64  0 66 X
 0  1 90  0
       X
因为所需的行数（3）低于矩阵的大小（n = 4），所以继续步骤4.

# 4)创建其他零

首先，我们发现最小的未覆盖数是6.我们从所有未覆盖的元素中减去这个数字，并将其添加到所有被覆盖两次的元素中。这导致以下矩阵：

 7  8  0  2
40  0 18 40
 0 58  0 60
 0  1 96  0

获得方法可参见上部:
1. 横减
2. 竖加

 7  8  0  2 
40  0 18 40
 0 58  0 60
 0  1 96  0

 最佳匹配 [3,2,1,4]

 69+37+11+23 = 140

 代价最小
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/algorithm/" term="algorithm" label="algorithm" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Opencv中mat总结</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/opencv%E4%B8%ADmat%E6%80%BB%E7%BB%93/" />
            <id>https://chenbokaix250.github.io/tech/opencv%E4%B8%ADmat%E6%80%BB%E7%BB%93/</id>
            <updated>2021-03-03T10:37:00&#43;08:00</updated>
            <published>2021-02-23T12:00:18&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">OpenCV在MAC的Xcode的配置 最初的情况 之前利用brew install opencv 安装完后,在py……</summary>
            
                <content type="html">&lt;h1 id=&#34;opencv在mac的xcode的配置&#34;&gt;OpenCV在MAC的Xcode的配置&lt;/h1&gt;
&lt;h2 id=&#34;最初的情况&#34;&gt;最初的情况&lt;/h2&gt;
&lt;h2 id=&#34;在python38-下-import-cv2--正常&#34;&gt;之前利用&lt;code&gt;brew install opencv&lt;/code&gt;
安装完后,在&lt;code&gt;python3.9 import cv2&lt;/code&gt;
&lt;strong&gt;异常&lt;/strong&gt;
而后在python3.8中
利用&lt;code&gt;pip install opencv-python&lt;/code&gt;
在&lt;code&gt;python3.8 下 import cv2&lt;/code&gt;  &lt;strong&gt;正常&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;但是 后来在xcode 配置时,出现错误:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[libprotobuf FATAL google/protobuf/stubs/common.cc:87] This program was compiled against version 3.13.0 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.14.0). Contact the program author for an update. If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library. (Version verification failed in &amp;quot;/tmp/opencv-20201117-12084-12qn56e/opencv-4.5.0/build/modules/dnn/opencv-caffe.pb.cc&amp;quot;.)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;像是protobuf不兼容的问题&lt;/p&gt;
&lt;p&gt;几次尝试安装protobuf 没有结果
随后 卸载protoc&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;which protoc 
rm /usr/local/bin/protoc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装3.14版本&lt;/p&gt;
&lt;p&gt;重新安装opencv &lt;code&gt;brew install opencv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装的opencv版本是4.5.1.2.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;xcode的配置&#34;&gt;Xcode的配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先配置两个路径
header search paths ：/usr/local/include/opencv4
Library search paths：/usr/local/Cellar/opencv/(version)/lib&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200522202629857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodXh1ZXpoZWVyZXI=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;添加文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在项目中右键新建一个 new group，命名为lib，由于要添加文件目录的文件在隐藏路径中，需要shift+command+g才能访问，并把&lt;code&gt;/usr/local/cellar/opencv/4.0.1/lib &lt;/code&gt;路径目录下的所有*.dylib文件都添加到新建的group&lt;/p&gt;
&lt;p&gt;!()[https://img-blog.csdnimg.cn/20200522203831693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodXh1ZXpoZWVyZXI=,size_16,color_FFFFFF,t_70]&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;配置图片文件路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200522204124399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodXh1ZXpoZWVyZXI=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200522204014694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodXh1ZXpoZWVyZXI=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;测试程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;opencv2/opencv.hpp&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/Users/Admin/Desktop/myProject/1.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//此改为自己的路径，查看一个文件的路径方法，将文件拖入到终端里即可查看路径
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;namedWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Display Image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WINDOW_AUTOSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Display Image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cvtColor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;COLOR_RGBA2GRAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;namedWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;opencv中mat类详解&#34;&gt;OpenCV中Mat类详解&lt;/h1&gt;
&lt;p&gt;Mat本质上是由两个数据部分组成的类： （包含信息有矩阵的大小，用于存储的方法，矩阵存储的地址等） 的  &lt;strong&gt;矩阵头&lt;/strong&gt;和 &lt;strong&gt;一个指针&lt;/strong&gt;，指向包含了像素值的矩阵（可根据选择用于存储的方法采用任何维度存储数据）。矩阵头部的大小是恒定的。&lt;/p&gt;
&lt;p&gt;矩阵本身的大小因图像的不同而不同，通常是较大的数量级。&lt;/p&gt;
&lt;p&gt;图像的计算旺旺设计很大量的处理算法&lt;/p&gt;
&lt;p&gt;OpenCV 使用引用计数系统。其思想是Mat的每个对象具有其自己的头，但可能他们通过让他们矩阵指针指向同一地址的两个实例之间共享该矩阵。此外，拷贝运算符将只能复制矩阵头部，也还将复制指针到大型矩阵，但不是矩阵本身。&lt;/p&gt;
&lt;p&gt;使用clone () 或copyTo () 函数将复制的图像的基础矩阵。&lt;/p&gt;
&lt;h2 id=&#34;存储方法&#34;&gt;存储方法&lt;/h2&gt;
&lt;p&gt;RGB 是最常见的是我们的眼睛使用类似的事情，我们显示系统还撰写使用这些颜色。&lt;/p&gt;
&lt;p&gt;YCrCb 使用流行的 JPEG 图像格式。&lt;/p&gt;
&lt;p&gt;CIE L &lt;em&gt;b&lt;/em&gt;a 是均匀颜色空间，它是非常方便的如果您需要测量给定的颜色，以另一种颜色的距离。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mat构造函数&#34;&gt;Mat()构造函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mat M(2,2,CV_8UC3,Scalar(0,0,255));&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;M = 
    [0,0,255,0,0,255;
     0,0,255,0,0,255 ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用&lt;code&gt;iostream&lt;/code&gt;中&lt;code&gt;std:cout&lt;/code&gt;显示:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &amp;quot;M = &amp;quot;&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;M&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于二维的和多通道的图像,我们首先定义他们的大小:按行和列计数&lt;/p&gt;
&lt;p&gt;然后指定其数据类型,用于存储元素和每个矩阵点通道的数量.
约定可以作出多个定义:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CV_ [每一项的位数] [有符号或无符号] [类型前缀] C [通道数]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CV_8UC3&lt;/code&gt;意味着使用那些长的8位无符号的char类型和每个元素都有三个项目的三个通道的形成.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CV_8UC1// 8位无符号单通道
CV_8UC3// 8位无符号3通道
CV_8UC4
CV_32FC1// 32位浮点型单通道
CV_32FC3// 32位浮点型3通道
CV_32FC4
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;• CV_8U-8 位无符号整数 （0…..255）
• CV_8S-8 位符号整数 （-128…..127）
• CV_16U-16 位无符号整数 （0……65535）
• CV_16S-16 位符号整数 （-32768…..32767）
• CV_32S-32 位符号整数 （-2147483648……2147483647）
• CV_32F-32 位浮点数 （-FLT_MAX ………FLT_MAX，INF，NAN)
• CV_64F-64 位浮点数（-DBL_MAX ……….DBL_MAX，INF，NAN)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;包括数据位深度8位、32位，数据类型U:uchar、F:float型以及通道数C1：单通道、C3：三通道、C4：四通道。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Mat E = Mat::eye(4, 4, CV_64F);
cout &amp;lt;&amp;lt; &amp;quot;E = &amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; E &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
Mat O = Mat::ones(2, 2, CV_32F);
cout &amp;lt;&amp;lt; &amp;quot;O = &amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; O &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
Mat Z = Mat::zeros(3,3, CV_8UC1);
cout &amp;lt;&amp;lt; &amp;quot;Z = &amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; Z &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于小的矩阵,可以使用都好隔开的初始化函数:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Mat C = (Mat_&amp;lt;double&amp;gt;(3,3) &amp;lt;&amp;lt; 0, -1, 0, -1, 5, -1, 0, -1, 0);
cout &amp;lt;&amp;lt; &amp;quot;C = &amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; C &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为一个已有的Mat对象创建一个新的头然后clone()或者copyTo()这个头.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Mat RowClone = C.row(1).clone();
cout &amp;lt;&amp;lt; &amp;quot;RowClone = &amp;quot; &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; RowClone &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以通过&lt;code&gt;randu()&lt;/code&gt;函数来产生随机值的填充矩阵.
给定上限和下限来确保随机值在期望范围内:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Mat R = Mat(3, 2, CV_8UC3);
randu(R, Scalar::all(0), Scalar::all(255));
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2d点&#34;&gt;2D点&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Pointf P(5,1);
cout&amp;lt;&amp;lt;&amp;quot;Point (2D) = &amp;quot;&amp;lt;&amp;lt;P &amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;!()[http://hi.csdn.net/attachment/201203/4/0_1330857287d6Jp.gif]&lt;/p&gt;
&lt;h2 id=&#34;3d点&#34;&gt;3D点&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Point3f  P3f(2, 6, 7);
cout &amp;lt;&amp;lt; &amp;quot;Point (3D) = &amp;quot; &amp;lt;&amp;lt; P3f &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;stdvector通过-cvmat&#34;&gt;std::vector通过 cv::Mat&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vector&amp;lt;float&amp;gt; v;
v.push_back( (float)CV_PI); v.push_back(2); v.push_back(3.01f);
cout &amp;lt;&amp;lt; &amp;quot;Vector of floats via Mat = &amp;quot; &amp;lt;&amp;lt; Mat(v) &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;!()[http://hi.csdn.net/attachment/201203/4/0_1330857370a0AH.gif]&lt;/p&gt;
&lt;h2 id=&#34;点的stdvector&#34;&gt;点的std::vector&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vector&amp;lt;Point2f&amp;gt; vPoints(20);
for (size_t E = 0; E &amp;lt; vPoints.size(); ++E)
vPoints[E] = Point2f((float)(E*5), (float)(E % 7));
cout &amp;lt;&amp;lt; &amp;quot;A vector of 2D Points = &amp;quot; &amp;lt;&amp;lt; vPoints &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;mat成员函数&#34;&gt;Mat成员函数&lt;/h1&gt;
&lt;p&gt;Mat::~Mat: Mat的析构函数
&lt;code&gt;C++:Mat::~Mat()&lt;/code&gt;
析构函数调用&lt;code&gt;Mat::release()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mat::operator=: 提供矩阵赋值操作&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C++: Mat&amp;amp; Mat::operator=(const Mat&amp;amp; m)

C++: Mat&amp;amp; Mat::operator=(const MatExpr_Base&amp;amp; expr)

C++: Mat&amp;amp; Mat::operator=(const Scalar&amp;amp; s)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mat::col
创建一个具有制定了局枕头中列数这个参数的矩阵&lt;/p&gt;
&lt;p&gt;Mat::rowRange
为指定的行span创建一个新的矩阵头&lt;/p&gt;
&lt;p&gt;Mat::colRange
为指定的行span创建一个矩阵头&lt;/p&gt;
&lt;p&gt;Mat::diag
提取或创建矩阵对角线&lt;/p&gt;
&lt;p&gt;Mat::clone
创建一个数据及其基础数据的万正副本&lt;/p&gt;
&lt;p&gt;Mat::copyTo
把矩阵复制到另一个矩阵中&lt;/p&gt;
&lt;p&gt;Mat::convertTo
在缩放或不缩放的情况下转换为另一种数据类型&lt;/p&gt;
&lt;p&gt;Mat::assignTo
提供了一个converTo的功能形式&lt;/p&gt;
&lt;p&gt;Mat::setTo
将阵列中所有的或部分的元素设置为指定的值&lt;/p&gt;
&lt;p&gt;Mat::reshape
在无复制数据的前提下改变2D矩阵的形状和通道数或其中之一&lt;/p&gt;
&lt;p&gt;Mat:: t
转置矩阵&lt;/p&gt;
&lt;p&gt;Mat::inv
反转矩阵&lt;/p&gt;
&lt;p&gt;Mat::mul
执行两个矩阵按元素相乘或两个矩阵的触发
&lt;code&gt;Mat C = A.mul(5/B)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mat::cross
计算3元素向量的一个叉乘积&lt;/p&gt;
&lt;p&gt;Mat::dot
计算两向量的点乘
&lt;code&gt;double N = M.dot(M);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mat::zeros
返回指定的大小和类型的零数组&lt;/p&gt;
&lt;p&gt;Mat::ones
返回一个指定的大小和类型的全为1的数组&lt;/p&gt;
&lt;p&gt;Mat::create
分配新的矩阵数据&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C++: void Mat::create(int rows, int cols, int type)

C++: void Mat::create(Size size, int type)

C++: void Mat::create(int ndims, const int* sizes, inttype)

参数

ndims – 新数组的维数。

rows –新的行数。

cols – 新的列数。

size – 替代新矩阵大小规格：Size(cols, rows)。

sizes – 指定一个新的阵列形状的整数数组。

type – 新矩阵的类型。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mat::addref
计数器参考&lt;/p&gt;
&lt;p&gt;Mat::release
在必要情况下,递减引用计数并释放该矩阵&lt;/p&gt;
&lt;p&gt;Mat::resize
更改矩阵的行数&lt;/p&gt;
&lt;p&gt;Mat::reserve
保留一定数量的行的空间&lt;/p&gt;
&lt;p&gt;Mat::push_back
将元素添加到矩阵底部&lt;/p&gt;
&lt;p&gt;Mat::locateROI
父矩阵内定位矩阵头&lt;/p&gt;
&lt;p&gt;Mat::adjustROI
调整子阵大小及其在父矩阵中的位置&lt;/p&gt;
&lt;p&gt;Mat::operaotr
提取矩形子阵&lt;/p&gt;
&lt;p&gt;Mat::operator CvMat
创建矩阵CvMat 头&lt;/p&gt;
&lt;p&gt;Mat::operator IplImage
创建IplImage矩阵头&lt;/p&gt;
&lt;p&gt;Mat::total
返回数组元素的总数&lt;/p&gt;
&lt;p&gt;Mat::isContinuous
返回矩阵是否连续&lt;/p&gt;
&lt;p&gt;Mat::elemSize
返回矩阵元素大小&lt;/p&gt;
&lt;p&gt;Mat:type
返回一个矩阵元素的类型&lt;/p&gt;
&lt;p&gt;Mat::depth
返回一个矩阵元素的深度&lt;/p&gt;
&lt;p&gt;Mat::channels
返回矩阵通道的数目&lt;/p&gt;
&lt;p&gt;Mat::step1
返回矩阵归一化卖出的一步&lt;/p&gt;
&lt;p&gt;Mat::size
返回一个矩阵大小&lt;/p&gt;
&lt;p&gt;Mat::empyt
如果数组有没有elemens,则返回true&lt;/p&gt;
&lt;p&gt;Mat::ptr
返回指定矩阵行的指针&lt;/p&gt;
&lt;p&gt;Mat::at
返回对指定数组元素的引用&lt;/p&gt;
&lt;p&gt;Mat::begin
返回矩阵迭代器,并将其设置为第一矩阵元&lt;/p&gt;
&lt;p&gt;Mat::end
返回矩阵迭代器,并将其设置为最后元素之后的矩阵元&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;opencv在qt下的配置&#34;&gt;opencv在Qt下的配置&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;INCLUDEPATH += /usr/local/Cellar/opencv/4.5.1_2/include/opencv4/opencv2/
INCLUDEPATH += /usr/local/Cellar/opencv/4.5.1_2/include/opencv4/
INCLUDEPATH += /usr/local/Cellar/opencv/4.5.1_2/include/


LIBS += -L/usr/local/Cellar/opencv/4.5.1_2/lib  -lopencv_core -lopencv_highgui -lopencv_imgproc -lopencv_imgcodecs

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/opencv/" term="OpenCV" label="OpenCV" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Chips基础知识</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/chips%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" />
            <id>https://chenbokaix250.github.io/tech/chips%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
            <updated>2021-02-19T15:18:56&#43;08:00</updated>
            <published>2021-02-19T15:18:26&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">基于芯片中的一些知识 AI芯片的分类 Context的理解 CPU GPU ASIC FPGA AI芯片按应用场景分类……</summary>
            
                <content type="html">&lt;h1 id=&#34;基于芯片中的一些知识&#34;&gt;基于芯片中的一些知识&lt;/h1&gt;
&lt;h2 id=&#34;ai芯片的分类&#34;&gt;AI芯片的分类&lt;/h2&gt;
&lt;p&gt;Context的理解&lt;/p&gt;
&lt;p&gt;CPU GPU ASIC FPGA&lt;/p&gt;
&lt;p&gt;AI芯片按应用场景分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端(云端)&lt;/li&gt;
&lt;li&gt;移动端(终端)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算力-AI芯片的性能&lt;/p&gt;
&lt;p&gt;浮点运算或定点运算时的每秒的运算次数&lt;/p&gt;
&lt;p&gt;峰值性能或平均性能等&lt;/p&gt;
&lt;p&gt;灵活性:对不同场景的适应程度&lt;/p&gt;
&lt;p&gt;同构性:大量部署时,能不能利用现有的软硬件基础设施架构&lt;/p&gt;
&lt;p&gt;功耗:该芯片对数据中心带来的额外功耗负担&lt;/p&gt;
&lt;p&gt;成本:钱和时间,投入的人力和物力(研发成本和部署运维成本)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;昇腾AI芯片&lt;/p&gt;
&lt;p&gt;推动人工智能发展的三个推动力:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大数据积聚&lt;/li&gt;
&lt;li&gt;算法革新&lt;/li&gt;
&lt;li&gt;算力提升&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昇腾310 针对推理应用&lt;/p&gt;
&lt;p&gt;昇腾910 针对训练应用&lt;/p&gt;
&lt;p&gt;自研的达芬奇架构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能执行标量/向量和张量三种基础的运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;昇腾AI处理器架构的编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;硬件架构 软件栈 生态系统&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;m1&#34;&gt;M1&lt;/h1&gt;
&lt;p&gt;芯片设计的三个原则,对PPA进行优化:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POWER 功耗&lt;/li&gt;
&lt;li&gt;PERFORMANCE 性能&lt;/li&gt;
&lt;li&gt;AERA 面积&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;没有完美的设计,只有完美的平衡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5纳米的芯片制造工艺&lt;/li&gt;
&lt;li&gt;架构升级&lt;/li&gt;
&lt;li&gt;生态系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;fpga&#34;&gt;FPGA&lt;/h1&gt;
&lt;p&gt;FPGA的三个发展阶段:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发明阶段&lt;/li&gt;
&lt;li&gt;扩张阶段&lt;/li&gt;
&lt;li&gt;累积阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无晶圆厂模式:
只进行芯片的电路设计
再交由芯片代工厂进行制造
这样可以专注于芯片设计和销售
世界上绝大部分的芯片公司都采用这种模式
主要的芯片代工厂:台积电/中芯国际/三星电子等&lt;/p&gt;
&lt;p&gt;FPGA也是一种芯片,不同之处是,制造出来以后,可以通过编程来改变自身的逻辑功能.过程可重复进行.&lt;/p&gt;
&lt;p&gt;固定开发工具和开发环境.&lt;/p&gt;
&lt;p&gt;ASIC 专用集成电路
专用集成电路是为特定用户或特定应用场景设计和制造的集成电路.&lt;/p&gt;
&lt;p&gt;FPGA开发 用的是芯片公司的EDA集成工具&lt;/p&gt;
&lt;p&gt;xilinx使用的vivado/ISE&lt;/p&gt;
&lt;p&gt;FPGA底部是门电路,可以验证芯片设计的逻辑正确性.一般芯片设计阶段会用这个验证;但是FPGA时钟主频低,跑不快&lt;/p&gt;
&lt;p&gt;一般设计需求转化很快的可能会使用FPGA,而固定逻辑的一般使用ASIC&lt;/p&gt;
&lt;p&gt;FPGA地位很尴尬 通用性不如GPU 速度不如ASIC 功耗也没有明显优势&lt;/p&gt;
&lt;p&gt;当时AI加速芯片还没有起来,微软利用FPGA搭载己方的数据中心&lt;/p&gt;
&lt;p&gt;目前也就只有微软 百度 亚马逊在有限场景用了FPGA&lt;/p&gt;
&lt;p&gt;FPGA开发极其不友好 是一个asic部署的过渡阶段&lt;/p&gt;
&lt;p&gt;业内目前的主流也是使用Xavier这种异构的类GPU产品&lt;/p&gt;
&lt;p&gt;cpu + asic目前没有落地的迹象 感觉还是GPU靠谱&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;有后期需要再补充&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/gpu/" term="GPU" label="GPU" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Ros2学习2</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/ros2%E5%AD%A6%E4%B9%A02/" />
            <id>https://chenbokaix250.github.io/tech/ros2%E5%AD%A6%E4%B9%A02/</id>
            <updated>2021-02-18T15:05:46&#43;08:00</updated>
            <published>2021-02-18T15:02:05&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ros2 action 当需要实时反馈指令效果时,ROS需要应用级的通信机制--动作(action) ac……</summary>
            
                <content type="html">&lt;h1 id=&#34;ros2&#34;&gt;ros2&lt;/h1&gt;
&lt;h2 id=&#34;action&#34;&gt;action&lt;/h2&gt;
&lt;p&gt;当需要实时反馈指令效果时,ROS需要应用级的通信机制--动作(action)&lt;/p&gt;
&lt;p&gt;action也并不是一个全新的机制，而是由底层的三个话题和服务组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个任务目标（Goal，服务）&lt;/li&gt;
&lt;li&gt;一个执行结果（Result，服务）&lt;/li&gt;
&lt;li&gt;周期数据反馈（Feedback，话题）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;action是可抢占式的，由于需要执行一段时间，比如执行过程中你不想跑了，那可以随时发送取消指令，动作终止，如果执行过程中发送一个新的action目标，则会直接中断上一个目标开始执行最新的任务目标。&lt;/p&gt;
&lt;p&gt;action是一个客户端/服务器的通信模型，客户端发送一个任务目标，服务器端根据收到的目标执行并周期反馈状态，执行完成后反馈一个执行结果。&lt;/p&gt;
&lt;p&gt;利用按键 G|B|V|C|D|E|R|T 都是围绕“F”的，可以向客户端发送action的任务目标,海龟仿真器后台运行的服务器端接收到之后就会开始执行，执行完成后反馈给客户端类似下边的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/9507c218027e95ce08-11-17-09-18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;action是抢占式的，后一个action的执行直接中断了前一个action的执行。&lt;/p&gt;
&lt;h3 id=&#34;查看节点信息&#34;&gt;查看节点信息&lt;/h3&gt;
&lt;p&gt;海龟仿真器节点有哪些action：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 node info /turtlesim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/710fd713f4087a9608-11-17-09-18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到所有仿真器中的订阅者、发布者、服务、动作服务器和客户端。&lt;/p&gt;
&lt;h3 id=&#34;查看action列表&#34;&gt;查看action列表&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ros2 action list &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看action的数据类型
&lt;code&gt;ros2 action list -t&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/e61fc83d13fa9dae08-11-17-09-18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看action的信息&#34;&gt;查看action的信息&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ros2 action info /turtle1/rotate_absolute&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/da1a38a7e71ada7b08-11-17-09-18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到提供该action的服务器和客户端的数量&lt;/p&gt;
&lt;h3 id=&#34;查看action数据类型&#34;&gt;查看action数据类型&lt;/h3&gt;
&lt;p&gt;查看action更详细的数据结构&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 interface show turtlesim/action/RotateAbsolute.action&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/58327d86e2a8719308-11-17-09-18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一段是描述客户端发送的请求目标&lt;/li&gt;
&lt;li&gt;第二段描述的是的反馈结果&lt;/li&gt;
&lt;li&gt;第三段描述的是action执行过程中的周期反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令行发送action目标&#34;&gt;命令行发送action目标&lt;/h3&gt;
&lt;p&gt;发送goal的格式
&lt;code&gt;ros2 action send_goal &amp;lt;action_name&amp;gt; &amp;lt;action_type&amp;gt; &amp;lt;values&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;value&gt;利用YAML格式描述数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute &amp;quot;{theta: 1.57}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;利用feedback参数 终端会不断周期刷新反馈信息.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##rqt_console
运行ros2节点时,节点日志信息会在终端中显示出来.
ros2还提供了一个专门用于管理日志信息的可视化工具 &lt;strong&gt;rqt_console&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 run rqt_console rqt_console&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/d87a031277ec3d6008-14-09-26-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;日志的基本由高到低:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fatal：致命级，描述系统为了自我保护即将终止的消息&lt;/li&gt;
&lt;li&gt;Error：错误级，描述非致命但是会阻碍程序运行的消息&lt;/li&gt;
&lt;li&gt;Warn：警告级，描述不损坏功能运行但是预期之外的行为的消息&lt;/li&gt;
&lt;li&gt;Info：信息级，描述系统正常运行时事件和状态消息&lt;/li&gt;
&lt;li&gt;Debug：调试级，描述系统一步一步运行的详细消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ROS2中默认开启的日志级别是Info，会自动显示info级别以上的所有日志，包括Info、Warn、Error、Fatal。&lt;/p&gt;
&lt;p&gt;可以修改允许发布的日志级别&lt;/p&gt;
&lt;p&gt;比如只想显示Warn级别以上:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 run turtlesim turtlesim_node --ros-args --log-level WARN&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;launch&#34;&gt;launch&lt;/h2&gt;
&lt;p&gt;launch启动文件,可以通过一个类似脚本的文件,一起启动多个节点.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pyhton3&#34; data-lang=&#34;pyhton3&#34;&gt;

from launch import LaunchDescription
from launch_ros.actions import Node      # 引用模块

def generate_launch_description():       # 在LaunchDescription中描述三个节点的启动
    return LaunchDescription([
        Node(
            package=&#39;turtlesim&#39;,
            namespace=&#39;turtlesim1&#39;,
            executable=&#39;turtlesim_node&#39;,
            name=&#39;sim&#39;
        ),
        Node(
            package=&#39;turtlesim&#39;,
            namespace=&#39;turtlesim2&#39;,
            executable=&#39;turtlesim_node&#39;,
            name=&#39;sim&#39;
        ),
        Node(
            package=&#39;turtlesim&#39;,
            executable=&#39;mimic&#39;,
            name=&#39;mimic&#39;,
            remappings=[
                (&#39;/input/pose&#39;, &#39;/turtlesim1/turtle1/pose&#39;),
                (&#39;/output/cmd_vel&#39;, &#39;/turtlesim2/turtle1/cmd_vel&#39;),
            ]
        )
    ])

#mimic节点通过订阅turtle1的位置，转换成对turtle2的速度指令发布出去，最后应该可以达到让turtle2模仿turtle1完成同样的运动。

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;启动launch文件&#34;&gt;启动launch文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ros2 launch &amp;lt;package_name&amp;gt; &amp;lt;launch_file_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 launch turtlesim_mimic_launch.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以利用rqt_graph观测&lt;/p&gt;
&lt;p&gt;但是mac下的工具有bug,没有信号连接线&lt;/p&gt;
&lt;p&gt;launch中在&lt;code&gt;ros2_eloquent&lt;/code&gt;版本中有改动:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace  --&amp;gt;  node_namespace&lt;/code&gt;
&lt;code&gt;executable --&amp;gt;  node_executable&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ros2bag&#34;&gt;ros2bag&lt;/h2&gt;
&lt;p&gt;ros2 bag是一个命令行工具，可以实现对ROS2系统中话题数据的录制和回放，选定的数据会被打包放到一个数据库文件中，未来使用该工具即可按照时间轴回放所有话题数据。&lt;/p&gt;
&lt;p&gt;确认是否安装:
&lt;code&gt;sudo apt-get install ros-&amp;lt;distro&amp;gt;-ros2bag ros-&amp;lt;distro&amp;gt;-rosbag2*&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;ros2-bag录制话题数据&#34;&gt;ros2 bag录制话题数据&lt;/h3&gt;
&lt;p&gt;ros2 bag录制话题数据的命令是:
&lt;code&gt;ros2 bag recode &amp;lt;topic_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数据会保存在当前终端所在的路径下,最好先cd到创建的目录下,再运行record&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/8fb2142d36cf212d08-17-09-08-40.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;录制数据的日志提示&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;ctrl+C&lt;/code&gt;停止录制,已经录制好的数据会保存在&lt;code&gt;rosbag2_year_month_day-hour_minute_second&lt;/code&gt;命名的文件中。&lt;/p&gt;
&lt;p&gt;录制多个话题&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 bag record -o subset /turtle1/cmd_vel /turtle1/pose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-o 参数是用来设置数据库文件名的,此时文件名叫subset.多个话题名通过空格隔开.&lt;/p&gt;
&lt;p&gt;可以使用-a参数来录制所有话题的数据.&lt;/p&gt;
&lt;h3 id=&#34;查看数据库文件&#34;&gt;查看数据库文件&lt;/h3&gt;
&lt;p&gt;可以使用命令查看数据库文件的信息:
&lt;code&gt;ros2 nag info &amp;lt;bag_info_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/b7ac5a828353b3d508-17-09-08-40.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ros2-bag回放数据&#34;&gt;ros2 bag回放数据&lt;/h3&gt;
&lt;p&gt;回放数据的命令:
&lt;code&gt;ros2 bag play subset&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros2/" term="ros2" label="ros2" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ROS2学习</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/ros2%E5%AD%A6%E4%B9%A0/" />
            <id>https://chenbokaix250.github.io/tech/ros2%E5%AD%A6%E4%B9%A0/</id>
            <updated>2021-02-18T15:06:46&#43;08:00</updated>
            <published>2021-02-10T10:06:14&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">MAC中的ROS2入门教程 1.ROS2环境配置 mac上利用的是编译好的工程进行学习 主……</summary>
            
                <content type="html">&lt;h1 id=&#34;mac中的ros2入门教程&#34;&gt;MAC中的ROS2入门教程&lt;/h1&gt;
&lt;h2 id=&#34;1ros2环境配置&#34;&gt;1.ROS2环境配置&lt;/h2&gt;
&lt;p&gt;mac上利用的是编译好的工程进行学习 主要是对小海龟进行实践,图片向图床传太麻烦了 与linux下一月的利用了古月居的贴图.&lt;/p&gt;
&lt;p&gt;设置环境变量:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# bokaichen @ bokaideMacBook-Pro in ~ [10:24:51]
$ cd ros2_eloquent/ros2-osx

# bokaichen @ bokaideMacBook-Pro in ~/ros2_eloquent/ros2-osx [10:24:55]
$ source local_setup.bash
[connext_cmake_module] Warning: The location at which Connext was found when the workspace was built [[/Applications/rti_connext_dds-5.3.1]] does not point to a valid directory, and the NDDSHOME environment variable has not been set. Support for Connext will not be available.
        
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2小海龟仿真器&#34;&gt;2.小海龟仿真器&lt;/h2&gt;
&lt;p&gt;小海龟（Turtlesim）是ROS2中一个非常重要的入门级例程，通过海龟仿真，我们可以了解到很多ROS2的底层原理，涉及节点、话题、服务等核心概念。&lt;/p&gt;
&lt;h4 id=&#34;启动&#34;&gt;启动&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 run turtlesim turtlesim_node&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/4f90f61a25adb37e08-04-14-31-51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/970eaab5207f49b808-04-14-31-51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;让海龟动起来 需要控制键盘的按键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 run turtlesim turtle_teleop_key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/23a0b247dab463c008-04-14-31-51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过命令查看小海龟后台运行了哪些功能:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ros2 node list
ros2 topic list
ros2 service list
ros2 action list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/252e856ebd90607a08-04-14-31-51.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3rqt工具&#34;&gt;3.rqt工具&lt;/h2&gt;
&lt;p&gt;用来发布服务请求的，点击刷新按键之后，可以看到系统当前的所有服务。&lt;/p&gt;
&lt;p&gt;mac下的刷新图标没有显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/10/Q1gaol7hYeiq9Am.png&#34; alt=&#34;截屏2021-02-10 上午10.33.41.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过命令改变话题的名字&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里就把turtle1/cmd_vel这个话题名更改为了turtle2/cmd_vel，现在该节点就可以控制turtle2啦，不信在该终端中点击键盘试一下。&lt;/p&gt;
&lt;h4 id=&#34;节点node&#34;&gt;节点(Node)&lt;/h4&gt;
&lt;p&gt;ROS2中的各项资源也是通过计算图（“ ROS (2) graph”）联系到一起的。计算图是一个由各种ROS2元素组成的网络，共同完成数据的传输，其中每一个完成具体功能的模块称之为“节点”（Node），例如控制车轮速度、获取雷达数据等，节点之间通过话题（Topic）、服务（Service）、动作（Actions）或者参数（Parameter）实现数据的收发。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 node list&lt;/code&gt;可以显示当前系统中运行的所有节点名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/3d34c44327d13c5d08-05-14-01-53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;重映射remapping&#34;&gt;重映射(Remapping)&lt;/h4&gt;
&lt;p&gt;利用重定义节点的属性,更改节点名称/话题名称/服务名称
&lt;code&gt;ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/ffa4a92716e37e0608-05-14-01-53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;节点信息&#34;&gt;节点信息&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 node info /my_turtle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到节点的很多信息，包括订阅者、发布者、服务、动作等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/227e08c9dce0a06d08-05-14-01-53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-话题topic&#34;&gt;4 话题(topic)&lt;/h2&gt;
&lt;p&gt;节点之间则是通过一个至关重要的通道完成数据交换的，这个通道就是“话题”&lt;/p&gt;
&lt;p&gt;一个节点可以通过多个话题向外发布数据，也可以同时订阅多个其他节点发布的话题，相当于话题是一个多对多的订阅/发布模型。&lt;/p&gt;
&lt;p&gt;mac下的&lt;code&gt;rqt_graph&lt;/code&gt;工具存在一定问题,无法显示节点之间的链接&lt;/p&gt;
&lt;h4 id=&#34;ros2-topic-lsit&#34;&gt;ros2 topic lsit&lt;/h4&gt;
&lt;p&gt;利用&lt;code&gt;topic -t&lt;/code&gt;参数可以查看数据类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/36c3908e393af1e508-06-10-29-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ros2-topic-echo&#34;&gt;ros2 topic echo&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/b65141d3a66119e808-06-10-29-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当发布数据时,就可以产生数据流&lt;/p&gt;
&lt;h4 id=&#34;ros2-topic-info&#34;&gt;ros2 topic info&lt;/h4&gt;
&lt;p&gt;查看节点详细信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/36e015f6026aecb608-06-10-29-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ros2-interface-show&#34;&gt;ros2 interface show&lt;/h4&gt;
&lt;p&gt;查看话题的数据类型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 interface show geometry_msgs/msg/Twist&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/21cde1cdc05a388008-06-10-29-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Twist中包含了两个三维向量，分别表示线速度和角速度。&lt;/p&gt;
&lt;h4 id=&#34;ros2-topic-pub&#34;&gt;ros2 topic pub&lt;/h4&gt;
&lt;p&gt;直接通过命令行来发布一个话题消息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/449d8196f2568d0408-06-10-29-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;-once表示这个消息只发布一次就退出&lt;/p&gt;
&lt;p&gt;需要会用YAML的语法来描述.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist &amp;quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;利用特定频率发送
&lt;code&gt;-rate&lt;/code&gt;参数就表示频率,单位是HZ&lt;/p&gt;
&lt;h4 id=&#34;ros2-topic-hz&#34;&gt;ros2 topic hz&lt;/h4&gt;
&lt;p&gt;查看某个话题的发布频率&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 topic hz /turtle1/pose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/6a693890b2716c7108-06-10-29-04.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5服务service&#34;&gt;5.服务(Service)&lt;/h2&gt;
&lt;p&gt;服务是基于客户端/服务器模型的通信机制，服务器端只在接收到客户端请求时才会提供反馈数据。&lt;/p&gt;
&lt;h4 id=&#34;查看服务列表&#34;&gt;查看服务列表&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 service list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/264c5303dfaa9ed908-10-10-16-20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ros2服务类型&#34;&gt;ros2服务类型&lt;/h4&gt;
&lt;p&gt;通过命令查看某一个服务的数据结构&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 service type /clear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/612bdfff629a984f08-10-10-16-20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Empty类型表示服务请求部分的数据是没有的,发送请求的时候不需要任何数据.&lt;/p&gt;
&lt;h4 id=&#34;ros2-service-lsit--t&#34;&gt;ros2 service lsit -t&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/99f72292802c0d8908-10-10-16-20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;查看某类型数据的所有服务&#34;&gt;查看某类型数据的所有服务&lt;/h4&gt;
&lt;p&gt;查找所有提供std_srvs/srv/Empty数据类型的服务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 service find std_srvs/srv/Empty&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/e880233e478a601008-10-10-16-20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;查看服务数据类型的具体结构&#34;&gt;查看服务数据类型的具体结构&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 interface show std_srvs/srv/Empty.srv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里的“—”在服务的数据结构中是用来分割请求和应答两个部分的数据，这里只所以只有“—”，是应为Empty的请求和应答都不需要任何数据描述，类似一个出发信号。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 interface show turtlesim/srv/Spawn.srv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/16814d9c9e2ca35408-10-10-16-20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Spawn服务的请求部分，由必须的x、y、theta和可选的name组成，应答数据则是name这个字符串。&lt;/p&gt;
&lt;h4 id=&#34;通过终端发送服务请求&#34;&gt;通过终端发送服务请求&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 service call &amp;lt;service_name&amp;gt; &amp;lt;service_type&amp;gt; &amp;lt;arguments&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;arguments&gt;部分是可选的，比如Empty类型的服务就没有任何参数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ros2 service call /clear std_srvs/srv/Empty&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ROS2中的服务，简而言之，客户端发送请求，服务端完成处理后反馈应答，通信只会交互一次数据，不像话题是周期发送数据的。&lt;/p&gt;
&lt;h2 id=&#34;6参数parameter&#34;&gt;6.参数(Parameter)&lt;/h2&gt;
&lt;p&gt;主要作用是对节点功能的配置，在ROS2中，每个节点都有自己的参数，这些参数可以用整型数、浮点数、布尔型数、字符串和列表来描述。&lt;/p&gt;
&lt;h4 id=&#34;查看系统中的参数列表&#34;&gt;查看系统中的参数列表&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 param list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/47b06d490349139a08-11-15-37-46.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;获取参数值&#34;&gt;获取参数值&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 param get /turtlesim background_g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/84bb1416fbbbc28708-11-15-37-46.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;设置参数值&#34;&gt;设置参数值&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 param set /turtlesim background_r 150&lt;/code&gt;
终端会显示设置成功,仿真器背景色会更改
&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/cb2fd1afdd85897808-11-15-37-46.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;只能改变一次 下次重启就会失效&lt;/p&gt;
&lt;h4 id=&#34;保存参数&#34;&gt;保存参数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 param dump /turtlesim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.guyuehome.com/wp-content/uploads/2020/08/0d4c0d7dbb44415d08-11-15-37-46.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;加载参数文件&#34;&gt;加载参数文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ros2 run turtlesim turtlesim_node --ros-args --params-file ./turtlesim.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ROS2中的参数，通过命令行get或set参数值，利用文件保存和加载参数&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros/" term="ros" label="ros" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Windows相关激活</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/windows%E7%9B%B8%E5%85%B3%E6%BF%80%E6%B4%BB/" />
            <id>https://chenbokaix250.github.io/life/windows%E7%9B%B8%E5%85%B3%E6%BF%80%E6%B4%BB/</id>
            <updated>2021-02-02T11:51:14&#43;08:00</updated>
            <published>2021-02-02T11:49:50&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">KMS服务激活 朋友的激活服务器,白嫖一下 #@ Win10 专业版批量授权版激活步骤： 管理员权限运行……</summary>
            
                <content type="html">&lt;h1 id=&#34;kms服务激活&#34;&gt;KMS服务激活&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;朋友的激活服务器,白嫖一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#@ Win10 专业版批量授权版激活步骤：&lt;/p&gt;
&lt;h3 id=&#34;管理员权限运行cmd&#34;&gt;管理员权限运行CMD&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;Windows&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PowerShell&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;版权所有&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2015&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Corporation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;保留所有权利&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
 
&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-upk&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ipk&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;W269N-WFGWX&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-YVC9B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4J6C9-T83GX&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-skms&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ato&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slmgr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-dlv&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;激活Office 2016批量授权版步骤：
首先打开任意Office软件比如Word 2016，填入批量授权版激活码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;管理员模式打开命令行，切换到Office安装路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Office&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Office16&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;64位&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x86&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Office&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Office16&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;32位&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定KMS服务器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;cscript&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ospp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sethst&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;激活Office 2013/2016&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;cscript&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ospp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;下面提供各种版本的KMS KEY&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Windows 10 LTSC 2019 : M7XTQ-FN8P6-TTKYV-9D4CC-J462D
Windows Server 2019 ARM64 : GRFBW-QNDC4-6QBHG-CCK3B-2PR88
Windows Server 2019 Azure Core : FDNH6-VW9RW-BXPJ7-4XTYG-239TB
Windows Server 2019 Datacenter : WMDGN-G9PQG-XVVXX-R3X43-63DFG
Windows Server 2019 Essentials : WVDHN-86M7X-466P6-VHXV7-YY726
Windows Server 2019 Standard : N69G4-B89J2-4G8F4-WWYCC-J464C
Windows Server 2019 Datacenter (Semi-Annual Channel v.1809) : 6NMRW-2C8FM-D24W7-TQWMY-CWH2D
Windows Server 2019 Standard (Semi-Annual Channel v.1809) : N2KJX-J94YW-TQVFB-DG9YT-724CC
Windows Server 2019 Standard [Preview] : MFY9F-XBN2F-TYFMP-CCV49-RMYVH
Windows Server 2019 Datacenter [Preview] : 6XBNX-4JQGW-QX6QG-74P76-72V67
Windows 10 Enterprise LTSC 2019 : M7XTQ-FN8P6-TTKYV-9D4CC-J462D
Windows 10 Enterprise LTSC 2019 N : 92NFX-8DJQP-P6BBQ-THF9C-7CG2H
Windows 10 Enterprise G : YYVX9-NTFWV-6MDM3-9PT4T-4M68B
Windows 10 Enterprise G N : 44RPN-FTY23-9VTTB-MP9BX-T84FV
Windows 10 Enterprise 2016 LTSB : DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ
Windows 10 Enterprise 2016 LTSB N : QFFDN-GRT3P-VKWWX-X7T3R-8B639
Windows 10 Home / Core : TX9XD-98N7V-6WMQ6-BX7FG-H8Q99
Windows 10 Home / Core Country Specific : PVMJN-6DFY6-9CCP6-7BKTT-D3WVR
Windows 10 Home / Core N : 3KHY7-WNT83-DGQKR-F7HPR-844BM
Windows 10 Home / Core Single Language : 7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH
Windows 10 Education : NW6C2-QMPVW-D7KKK-3GKT6-VCFB2
Windows 10 Education N : 2WH4N-8QGBV-H22JP-CT43Q-MDWWJ
Windows 10 Enterprise : NPPR9-FWDCX-D2C8J-H872K-2YT43
Windows 10 Enterprise [Preview] : QNMXX-GCD3W-TCCT4-872RV-G6P4J
Windows 10 Enterprise S : H76BG-QBNM7-73XY9-V6W2T-684BJ
Windows 10 Enterprise 2015 LTSB : WNMTR-4C88C-JK8YV-HQ7T2-76DF9
Windows 10 Enterprise 2015 LTSB N : 2F77B-TNFGY-69QQF-B8YKP-D69TJ
Windows 10 Enterprise N : DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4
Windows 10 Enterprise S N : X4R4B-NV6WD-PKTVK-F98BH-4C2J8
Windows 10 Professional Workstation : NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J
Windows 10 Professional Workstation N : 9FNHH-K3HBT-3W4TD-6383H-6XYWF
Windows 10 Professional : W269N-WFGWX-YVC9B-4J6C9-T83GX
Windows 10 Professional Education : 6TP4R-GNPTD-KYYHQ-7B7DP-J447Y
Windows 10 Professional Education N : YVWGF-BXNMC-HTQYQ-CPQ99-66QFC
Windows 10 Professional N : MH37W-N47XK-V7XM9-C7227-GCQG9
Windows 10 Professional [Preview] : XQHPH-N4D9W-M8P96-DPDFP-TMVPY
Windows 10 Professional WMC [Pre-Release] : NKPM6-TCVPT-3HRFX-Q4H9B-QJ34Y
Windows 10 Enterprise for Virtual Desktops : CPWHC-NT2C7-VYW78-DHDB2-PG3GK
Windows 10 Remote Server : 7NBT4-WGBQX-MP4H7-QXFF8-YP3KX
Windows 10 S (Lean) : NBTWJ-3DR69-3C4V8-C26MC-GQ9M6
Windows 10 IoT Core [Pre-Release] : 7NX88-X6YM3-9Q3YT-CCGBF-KBVQF
Windows 10 Core Connected [Pre-Release] : DJMYQ-WN6HG-YJ2YX-82JDB-CWFCW
Windows 10 Core Connected N [Pre-Release] : JQNT7-W63G4-WX4QX-RD9M9-6CPKM
Windows 10 Core Connected Single Language [Pre-Release] : QQMNF-GPVQ6-BFXGG-GWRCX-7XKT7
Windows 10 Core Connected Country Specific [Pre-Release] : FTNXM-J4RGP-MYQCV-RVM8R-TVH24
Windows 10 Professional S [Pre-Release] : 3NF4D-GF9GY-63VKH-QRC3V-7QW8P
Windows 10 Professional S N [Pre-Release] : KNDJ3-GVHWT-3TV4V-36K8Y-PR4PF
Windows 10 Professional Student [Pre-Release] : YNXW3-HV3VB-Y83VG-KPBXM-6VH3Q
Windows 10 Professional Student N [Pre-Release] : 8G9XJ-GN6PJ-GW787-MVV7G-GMR99
Windows 7 Enterprise : 33PXH-7Y6KF-2VJC9-XBBR8-HVTHH
Windows 7 Enterprise E : C29WB-22CC8-VJ326-GHFJW-H9DH4
Windows 7 Enterprise N : YDRBP-3D83W-TY26F-D46B2-XCKRJ
Windows 7 Professional : FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4
Windows 7 Professional E : W82YF-2Q76Y-63HXB-FGJG9-GF7QX
Windows 7 Professional N : MRPKT-YTG23-K7D7T-X2JMM-QY7MG
Windows 7 Embedded POSReady : YBYF6-BHCR3-JPKRB-CDW7B-F9BK4
Windows 7 Embedded Standard : XGY72-BRBBT-FF8MH-2GG8H-W7KCW
Windows 7 ThinPC : 73KQT-CD9G6-K7TQG-66MRP-CQ22C
Windows 8 Core / Server 2012 : BN3D2-R7TKB-3YPBD-8DRP2-27GG4
Windows 8 Core / Server 2012 Country Specific : 4K36P-JN4VD-GDC6V-KDT89-DYFKP
Windows 8 Core / Server 2012 N : 8N2M2-HWPGY-7PGT9-HGDD8-GVGGY
Windows 8 Core / Server 2012 Single Language : 2WN2H-YGCQR-KFX6K-CD6TF-84YXQ
Windows 8 Professional WMC : GNBB8-YVD74-QJHX6-27H4K-8QHDG
Windows 8 Embedded Industry Professional : RYXVT-BNQG7-VD29F-DBMRY-HT73M
Windows 8 Embedded Industry Enterprise : NKB3R-R2F8T-3XCDP-7Q2KW-XWYQ2
Windows 8 Enterprise : 32JNW-9KQ84-P47T8-D8GGY-CWCK7
Windows 8 Enterprise N : JMNMF-RHW7P-DMY6X-RF3DR-X2BQT
Windows 8 Professional : NG4HW-VH26C-733KW-K6F98-J8CK4
Windows 8 Professional N : XCVCF-2NXM9-723PB-MHCB7-2RYQQ
Windows 8.1 Core : M9Q9P-WNJJT-6PXPY-DWX8H-6XWKK
Windows 8.1 Core ARM64 : XYTND-K6QKT-K2MRH-66RTM-43JKP
Windows 8.1 Core Country Specific : NCTT7-2RGK8-WMHRF-RY7YQ-JTXG3
Windows 8.1 Core N : 7B9N3-D94CG-YTVHR-QBPX3-RJP64
Windows 8.1 Core Single Language : BB6NG-PQ82V-VRDPW-8XVD2-V8P66
Windows 8.1 Professional Student : MX3RK-9HNGX-K3QKC-6PJ3F-W8D7B
Windows 8.1 Professional Student N : TNFGH-2R6PB-8XM3K-QYHX2-J4296
Windows 8.1 Professional WMC : 789NJ-TQK6T-6XTH8-J39CJ-J8D3P
Windows 8.1 Core Connected : 3PY8R-QHNP9-W7XQD-G6DPH-3J2C9
Windows 8.1 Core Connected Country Specific : R962J-37N87-9VVK2-WJ74P-XTMHR
Windows 8.1 Core Connected N : Q6HTR-N24GM-PMJFP-69CD8-2GXKR
Windows 8.1 Core Connected Single Language : KF37N-VDV38-GRRTV-XH8X6-6F3BB
Windows 8.1 Enterprise : MHF9N-XY6XB-WVXMC-BTDCT-MKKG7
Windows 8.1 Enterprise N : TT4HM-HN7YT-62K67-RGRQJ-JFFXW
Windows 8.1 Professional : GCRJD-8NW9H-F2CDX-CCM8D-9D6T9
Windows 8.1 Professional N : HMCNV-VVBFX-7HMBH-CTY9B-B4FXY
Windows 8.1 Embedded Industry Professional : NMMPB-38DD4-R2823-62W8D-VXKJB
Windows 8.1 Embedded Industry Automotive : VHXM3-NR6FT-RY6RT-CK882-KW2CJ
Windows 8.1 Embedded Industry Enterprise : FNFKF-PWTVT-9RC8H-32HB2-JB34X
Windows 8.1 Enterprise [Preview] : 2MP7K-98NK8-WPVF3-Q2WDG-VMD98
Windows 8.1 Professional (Blue) [Preview] : MTWNQ-CKDHJ-3HXW9-Q2PFX-WB2HQ
Windows 8 Professional WMC [RC] : MY4N9-TGH34-4X4VY-8FG2T-RRDPV
Windows 8.x [Preview] : MPWP3-DXNP9-BRD79-W8WFP-3YFJ6
Windows Server Next HI [Preview] : 7VX4N-3VDHQ-VYGHB-JXJVP-9QB26
Windows Server 2008 Web : WYR28-R7TFJ-3X2YQ-YCY4H-M249D
Windows Server 2008 HPC Edition : RCTX3-KWVHP-BR6TB-RB6DM-6X7HP
Windows Server 2008 Standard : TM24T-X9RMF-VWXK6-X8JC9-BFGM2
Windows Server 2008 Standard without Hyper-V : W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ
Windows Server 2008 Enterprise : YQGMW-MPWTJ-34KDK-48M3W-X4Q6V
Windows Server 2008 Enterprise without Hyper-V : 39BXF-X8Q23-P2WWT-38T2F-G3FPG
Windows Server 2008 Datacenter : 7M67G-PC374-GR742-YH8V4-TCBY3
Windows Server 2008 Datacenter without Hyper-V : 22XQ2-VRXRG-P8D42-K34TD-G3QQC
Windows Server 2008 for Itanium Systems : 4DWFP-JF3DJ-B7DTH-78FJB-PDRHK
Windows MultiPoint Server 2010 : 736RG-XDKJK-V34PF-BHK87-J6X3K
Windows Server 2008 R2 Web : 6TPJF-RBVHG-WBW2R-86QPH-6RTM4
Windows Server 2008 R2 HPC Edition : TT8MH-CG224-D3D7Q-498W2-9QCTX
Windows Server 2008 R2 Standard : YC6KT-GKW9T-YTKYR-T4X34-R7VHC
Windows Server 2008 R2 Enterprise : 489J6-VHDMP-X63PK-3K798-CPX3Y
Windows Server 2008 R2 Datacenter : 74YFP-3QFB3-KQT8W-PMXWJ-7M648
Windows Server 2008 R2 for Itanium Systems : GT63C-RJFQ3-4GMB6-BRFB9-CB83V
Windows Server 2012 Datacenter : 48HP8-DN98B-MYWDG-T2DCC-8W83P
Windows Server 2012 MultiPoint Premium : XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G
Windows Server 2012 MultiPoint Standard : HM7DN-YVMH3-46JC3-XYTG7-CYQJJ
Windows Server 2012 Standard : XC9B7-NBPP2-83J2H-RHMBY-92BT4
Windows Server 2012 R2 Cloud Storage : 3NPTF-33KPT-GGBPR-YX76B-39KDD
Windows Server 2012 R2 Datacenter : W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9
Windows Server 2012 R2 Essentials : KNC87-3J2TX-XB4WP-VCPJV-M4FWM
Windows Server 2012 R2 Standard : D2N9P-3P6X9-2R39C-7RTCD-MDVJX
Windows Server 2016 Azure Core : VP34G-4NPPG-79JTQ-864T4-R3MQX
Windows Server 2016 Cloud Storage : QN4C6-GBJD2-FB422-GHWJK-GJG2R
Windows Server 2016 Datacenter : CB7KF-BWN84-R7R2Y-793K2-8XDDG
Windows Server 2016 Essentials : JCKRF-N37P4-C2D82-9YXRT-4M63B
Windows Server 2016 Standard : WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY
Windows Server 2016 ARM64 : K9FYF-G6NCK-73M32-XMVPY-F9DRR
Windows Server 2016 Datacenter (Semi-Annual Channel v.1803) : 2HXDN-KRXHB-GPYC7-YCKFJ-7FVDG
Windows Server 2016 Standard (Semi-Annual Channel v.1803) : PTXN8-JFHJM-4WC78-MPCBR-9W4KR
Windows Server 2016 Datacenter [Preview] : VRDD2-NVGDP-K7QG8-69BR4-TVFHB
Windows Vista Business : YFKBB-PQJJV-G996G-VWGXY-2V3X8
Windows Vista Business N : HMBQG-8H2RH-C77VX-27R82-VMQBT
Windows Vista Enterprise : VKK3X-68KWM-X2YGT-QR4M6-4BWMV
Windows Vista Enterprise N : VTC42-BM838-43QHV-84HX6-XJXKV
Windows Vista Business [Preview 1] : XQYF4-QVCMY-YXQRD-9QPV8-3YP9V
Windows Vista Business [Preview 2] : YVT36-YVCP2-J97GQ-7T22R-RWV8P
Windows Vista Business N [Preview] : HGBJ9-RWD6M-6HDGW-6T2XD-JQ66F
Windows Vista Enterprise [Preview 1] : 3JHG3-Y66GP-B7F3K-JFVX2-VBH7K
Windows Vista Enterprise [Beta-2 build 5384] : MF9PG-RQK7R-26BPJ-TWFYK-RHXCM
Windows Longhorn Web [Preview] : MDRCM-4WKCW-J93FF-J9Q48-M6KBB
Windows Longhorn Standard : Q37JX-P3HHB-GKRH2-PDBKG-GGXPW
Windows Longhorn Enterprise : 7KYMQ-R788Q-4RF69-KTWKM-92PFJ
Windows Longhorn Datacenter [Preview] : HR8VD-7DHG2-48378-M9D73-28F4T
Windows Longhorn for Itanium Systems [Preview] : CWV9H-PHGPW-V93WV-QBQV9-8V336
Office Access 2010 : V7Y44-9T38C-R2VJK-666HK-T7DDX
Office Excel 2010 : H62QG-HXVKF-PP4HP-66KMR-CW9BM
Office Groove (SharePoint Workspace) 2010 : QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4
Office InfoPath 2010 : K96W8-67RPQ-62T9Y-J8FQJ-BT37T
Office Mondo 1 2010 : YBJTT-JG6MD-V9Q7P-DBKXJ-38W9R
Office Mondo 2 2010 : 7TC2V-WXF6P-TD7RT-BQRXR-B8K32
Office OneNote 2010 : Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX
Office OutLook 2010 : 7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ
Office PowerPoint 2010 : RC8FX-88JRY-3PF7C-X8P67-P4VTT
Office Professional Plus 2010 : VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB
Office Project Professional 2010 : YGX6F-PGV49-PGW3J-9BTGG-VHKC6
Office Project Standard 2010 : 4HP3K-88W3F-W2K3D-6677X-F9PGB
Office Publisher 2010 : BFK7F-9MYHM-V68C7-DRQ66-83YTP
Office Small Business Basics 2010 : D6QFG-VBYP2-XQHM7-J97RH-VVRCK
Office Standard 2010 : V7QKV-4XVVR-XYV4D-F7DFM-8R6BM
Office Visio Premium 2010 : D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ
Office Visio Professional 2010 : 7MCW8-VRQVK-G677T-PDJCM-Q8TCP
Office Visio Standard 2010 : 767HD-QGMWX-8QTDB-9G3R2-KHFGJ
Office Word 2010 : HVHB3-C6FV7-KQX9W-YQG79-CRY7T
Office Starter 2010 Retail : VXHHB-W7HBD-7M342-RJ7P8-CHBD6
Office SharePoint Designer (Frontpage) 2010 Retail : H48K6-FB4Y6-P83GH-9J7XG-HDKKX
Office Access 2013 : NG2JY-H4JBT-HQXYP-78QH9-4JM2D
Office Excel 2013 : VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB
Office InfoPath 2013 : DKT8B-N7VXH-D963P-Q4PHY-F8894
Office Lync 2013 : 2MG3G-3BNTT-3MFW9-KDQW3-TCK7R
Office Mondo 2013 : 42QTK-RN8M7-J3C4G-BBGYM-88CYV
Office OneNote 2013 : TGN6P-8MMBC-37P2F-XHXXK-P34VW
Office OutLook 2013 : QPN8Q-BJBTJ-334K3-93TGY-2PMBT
Office PowerPoint 2013 : 4NT99-8RJFH-Q2VDH-KYG2C-4RD4F
Office Professional Plus 2013 : YC7DK-G2NP3-2QQC3-J6H88-GVGXT
Office Project Professional 2013 : FN8TT-7WMH6-2D4X9-M337T-2342K
Office Project Standard 2013 : 6NTH3-CW976-3G3Y2-JK3TX-8QHTT
Office Publisher 2013 : PN2WF-29XG2-T9HJ7-JQPJR-FCXK4
Office Standard 2013 : KBKQT-2NMXY-JJWGP-M62JB-92CD4
Office Visio Professional 2013 : C2FG9-N6J68-H8BTJ-BW3QX-RM3B3
Office Visio Standard 2013 : J484Y-4NKBF-W2HMG-DBMJC-PGWR7
Office Word 2013 : 6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7
Office SharePoint Workspace (Groove) 2013 : H7R7V-WPNXQ-WCYYC-76BGV-VT7GH
Office SharePoint Designer (Frontpage) 2013 Retail : GYJRG-NMYMF-VGBM4-T3QD4-842DW
Office Access 2013 [Pre-Release] : DJBH8-RGN7Q-836KD-DMP3M-DM9MF
Office Excel 2013 [Pre-Release] : Q3BNP-3WXDT-GG8HF-24KMW-HMDBK
Office SharePoint Workspace (Groove) 2013 [Pre-Release] : WVCGG-NK4FG-7XKXM-BD4WF-3C624
Office InfoPath 2013 [Pre-Release] : 7KPJJ-N8TT7-CK3KR-QTV98-YPVXQ
Office Lync 2013 [Pre-Release] : XNVD3-RYC7T-7R6BT-WX6CF-8BYH7
Office Mondo 2013 [Pre-Release] : GCGCN-6FJRM-TR9Q3-BGMWJ-78KQV
Office OneNote 2013 [Pre-Release] : VYNYX-8GPBC-7FQMD-D6B7B-7MDFD
Office Outlook 2013 [Pre-Release] : X2KNB-FRRG2-WXDPH-739DM-DM9RH
Office PowerPoint 2013 [Pre-Release] : B8CT8-BTNFQ-XQXBK-BFWV8-HMDFQ
Office Professional Plus 2013 [Pre-Release] : PGD67-JN23K-JGVWV-KTHP4-GXR9G
Office Project Professional 2013 [Pre-Release] : NFKVM-DVG7F-TYWYR-3RPHY-F872K
Office Project Standard 2013 [Pre-Release] : N89QF-GGB8J-BKD28-C4V28-W4XTK
Office Publisher 2013 [Pre-Release] : NB67P-J8XP4-XDK9B-V73VH-M4CKR
Office Visio Professional 2013 [Pre-Release] : B3C7Q-D6NH2-2VRFW-HHWDG-FVQB6
Office Visio Standard 2013 [Pre-Release] : 9MKNF-J9XQ6-JV4XB-FJQPY-43F43
Office Word 2013 [Pre-Release] : JBGD4-3JNG7-JWWGV-CR6TP-DC62Q
Office Access 2016 : GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW
Office Excel 2016 : 9C2PK-NWTVB-JMPW8-BFT28-7FTBF
Office Mondo 2016 : HFTND-W9MK4-8B7MJ-B6C4G-XQBR2
Office Mondo Retail 2016 : DMTCJ-KNRKX-26982-JYCKT-P7KB6
Office OneNote 2016 : DR92N-9HTF2-97XKM-XW2WJ-XW3J6
Office Outlook 2016 : R69KK-NTPKF-7M3Q4-QYBHW-6MT9B
Office Powerpoint 2016 : J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6
Office Professional Plus 2016 : XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99
Office Project Professional 2016 : YG9NW-3K39V-2T3HJ-93F3Q-G83KT
Office Project Professional 2016 C2R [Preview] : WGT24-HCNMF-FQ7XH-6M8K7-DRTW9
Office Project Standard 2016 : GNFHQ-F6YQM-KQDGJ-327XX-KQBVC
Office Project Standard 2016 C2R [Preview] : D8NRQ-JTYM3-7J2DX-646CT-6836M
Office Publisher 2016 : F47MM-N3XJP-TQXJ9-BP99D-8K837
Office Skype for Business 2016 : 869NQ-FJ69K-466HW-QYCP2-DDBV6
Office Standard 2016 : JNRGM-WHDWX-FJJG3-K47QV-DRTFM
Office Visio Professional 2016 : PD3PC-RHNGV-FXJ29-8JK7D-RJRJK
Office Visio Professional 2016 C2R [Preview] : 69WXN-MBYV6-22PQG-3WGHK-RM6XC
Office Visio Standard 2016 : 7WHWN-4T7MP-G96JF-G33KR-W8GF4
Office Visio Standard 2016 C2R [Preview] : NY48V-PPYYH-3F4PX-XJRKJ-W4423
Office Word 2016 : WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6
Office Professional Plus 2019 C2R [Preview] : VQ9DP-NVHPH-T9HJC-J9PDT-KTQRG
Office Project Professional 2019 C2R [Preview] : XM2V9-DN9HH-QB449-XDGKC-W2RMW
Office Visio Professional 2019 C2R [Preview] : N2CG9-YD3YK-936X4-3WR82-Q3X4H
Office Access 2019 : 9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT
Office Excel 2019 : TMJWT-YYNMB-3BKTF-644FC-RVXBD
Office Outlook 2019 : 7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK
Office Powerpoint 2019 : RRNCX-C64HY-W2MM7-MCH9G-TJHMQ
Office Professional Plus 2019 : NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP
Office Project Professional 2019 : B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B
Office Project Standard 2019 : C4F7P-NCP8C-6CQPT-MQHV9-JXD2M
Office Publisher 2019 : G2KWX-3NW6P-PY93R-JXK2T-C9Y9V
Office Skype for Business 2019 : NCJ33-JHBBY-HTK98-MYCV8-HMKHJ
Office Standard 2019 : 6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK
Office Visio Professional 2019 : 9BGNQ-K37YR-RQHF2-38RQ3-7VCBB
Office Visio Standard 2019 : 7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2
Office Word 2019 : PBX3G-NWMT6-Q7XBW-PYJGG-WXD33

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;win10家庭版升级专业版的方法&#34;&gt;Win10家庭版升级专业版的方法&lt;/h2&gt;
&lt;p&gt;使用方法是：
1.“设定”（Settings）-&amp;gt;“升级与安全”（Update &amp;amp; Security）-&amp;gt;“激活”（Activation）-&amp;gt;“变更产品密钥”（Change Product Key）&lt;/p&gt;
&lt;p&gt;或直接在小娜里输入“Change Product Key”&lt;/p&gt;
&lt;p&gt;2.密钥为: &lt;strong&gt;&lt;code&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/code&gt;&lt;/strong&gt; 或  &lt;strong&gt;&lt;code&gt;DR9VN-GF3CR-RCWT2-H7TR8-82QGT&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之后你的系统将自动开始升级至Windows 10 Pro（专业版）。微软称，这仅仅适用于Build 10586的Windows 10家庭版用户。&lt;/p&gt;
&lt;p&gt;更为关键的是，升级是免费的，使用不免费，也就是说进入桌面后需要对专业版进行激活，购买方式是进入“设定”（Settings）“激活”（Activation）页面，然后点击“前往商店”（Go to Store）。&lt;/p&gt;
&lt;p&gt;Windows 10 Pro升级需要199美元，比Windows 10 Home贵80美元。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/kms/" term="kms" label="kms" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Mac安装ROS2</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/mac%E5%AE%89%E8%A3%85ros2/" />
            <id>https://chenbokaix250.github.io/tech/mac%E5%AE%89%E8%A3%85ros2/</id>
            <updated>2021-02-18T15:07:21&#43;08:00</updated>
            <published>2021-02-01T08:45:07&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Mac下ROS2的安装 一直想在mac上安装一下ROS2,感受一下ROS2的新特性 闲来……</summary>
            
                <content type="html">&lt;h1 id=&#34;mac下ros2的安装&#34;&gt;Mac下ROS2的安装&lt;/h1&gt;
&lt;p&gt;一直想在mac上安装一下ROS2,感受一下ROS2的新特性&lt;/p&gt;
&lt;p&gt;闲来无事 特此尝试了一下 期间遇到了很多坑 记录一下其中出现的问题和解决情况&lt;/p&gt;
&lt;p&gt;利用网站&lt;code&gt;https://index.ros.org/&lt;/code&gt;进行安装&lt;/p&gt;
&lt;p&gt;install参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://index.ros.org/doc/ros2/Installation/Eloquent/macOS-Install-Binary/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;building参考&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://index.ros.org/doc/ros2/Installation/Eloquent/macOS-Install-Binary/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;ROS2 Eloquent&lt;/code&gt;版本&lt;/p&gt;
&lt;p&gt;先贴一下官方的教程 再说一下不同与对比,及解决的问题&lt;/p&gt;
&lt;h2 id=&#34;system-requirements&#34;&gt;System requirements&lt;/h2&gt;
&lt;p&gt;We support macOS 10.14 (Mojave).&lt;/p&gt;
&lt;p&gt;However, some older versions like 10.13.x are known to work as well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我现在采用的是MacOS11.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;install-prerequisite&#34;&gt;Install prerequisite&lt;/h2&gt;
&lt;h3 id=&#34;1-xcode&#34;&gt;1. Xcode&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xcode-select --install
sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-brew更新&#34;&gt;2. brew更新&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew docker
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-利用brew安装组件&#34;&gt;3. 利用brew安装组件&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install cmake cppcheck eigen pcre poco python3 tinyxml wget

# install dependencies for Fast-RTPS if you are using it
brew install asio tinyxml2

brew install opencv

# install console_bridge for rosbag2
brew install console_bridge

# install OpenSSL for DDS-Security
brew install openssl
# if you are using ZSH, then replace &#39;.bashrc&#39; with &#39;.zshrc&#39;
echo &amp;quot;export OPENSSL_ROOT_DIR=$(brew --prefix openssl)&amp;quot; &amp;gt;&amp;gt; ~/.bashrc

# install dependencies for rcl_logging_log4cxx
brew install log4cxx

# install CUnit for Cyclone DDS
brew install cunit
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4install-rviz-dependencies&#34;&gt;4.Install rviz dependencies&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# install dependencies for Rviz
brew install qt freetype assimp

# Add the Qt directory to the PATH and CMAKE_PREFIX_PATH
export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/local/opt/qt
export PATH=$PATH:/usr/local/opt/qt/bin
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5install-rqt-dependencies&#34;&gt;5.Install rqt dependencies&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install graphviz pyqt5 sip

#Fix some path names when looking for sip stuff during install (see ROS 1 wiki):

ln -s /usr/local/share/sip/Qt5 /usr/local/share/sip/PyQt5 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在brew安装graphviz时 出现了很多问题&lt;/p&gt;
&lt;p&gt;首先是依赖的jdk包&lt;code&gt;openjdk-15.0.1_osx-x64_bin.tar&lt;/code&gt;无法完成下载&lt;/p&gt;
&lt;p&gt;经过尝试 出现两个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包的sha-256对不上&lt;/li&gt;
&lt;li&gt;无法下载完整的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;code&gt;google-driver&lt;/code&gt;中wget下载完整openjdk,然后重命名为&lt;code&gt;336948b1d9a8eba79fadf26569f4af0cb2fe147fde214fc9d9bf6b66f2f927d2--jdk-15.0.1-ga.tar&lt;/code&gt;
放在&lt;code&gt;User/bokaichen/Library/Caches/Homebrew/downloads&lt;/code&gt;底下
然后通过
brew时出现了个问题 ,brew安装了python3.9
随后setuptools安装又出现了问题 brew无法安装setuptools,然后pip安装时,安装在了python3.7下 并不会安装在python3.9下面&lt;/p&gt;
&lt;p&gt;之前&lt;code&gt;~/.bash_profile&lt;/code&gt;下控制python3版本:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PATH=&amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/bin:${PATH}&amp;quot;
export PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是现在发现这种方式的问题是 会产生brew中是python3.9,而&lt;code&gt;Python.framework&lt;/code&gt;中又存在很多版本&lt;/p&gt;
&lt;p&gt;随后重新来过&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rm -rf /Library/Frameworks/Python.framework
sudo rm -rf /usr/local/bin/python3

nano ~/.bash_profile
#清空所有内容

brew update
brew install python
brew install python3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成python3.9和python2.7的安装&lt;/p&gt;
&lt;p&gt;但是导致python3执行出错
&lt;code&gt;python3: error: can&#39;t exec &#39;/Applications/Xcode.app/Contents/Developer/usr/bin/python3&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是用python3.9可以打开编辑器&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew search python3
==&amp;gt; Formulae
boost-python3       python@3.7          python@3.8          python@3.9 ✔
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;忽略了这个问题 然后继续前进&lt;/p&gt;
&lt;h3 id=&#34;6-install-sros2-dependencies&#34;&gt;6. Install SROS2 dependencies&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 -m pip install catkin_pkg cryptography empy ifcfg lark-parser lxml netifaces numpy pyparsing pyyaml setuptools argcomplete
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;后发现python安装会出错,&lt;code&gt;python setup.py egg_info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为在&lt;code&gt;Python.framework&lt;/code&gt;无法找到对应的python库&lt;/p&gt;
&lt;p&gt;所以又安装了python3.8
感觉这块是一个ros2在macOS11.1下的bug
对于python链接位置,两块安装并不统一.&lt;/p&gt;
&lt;p&gt;但是python3.8下安装的库可以直接链接到ros2下使用
安装完成后pip3的命令又在python3.8下进行安装了&lt;/p&gt;
&lt;h2 id=&#34;downloading-ros2&#34;&gt;Downloading ros2&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;~/Downloads/ros2-release-distro-date-macos-amd64.tar.bz2.&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p ~/ros2_eloquent
cd ~/ros2_eloquent
tar xf ~/Downloads/ros2-release-distro-date-macos-amd64.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置环境变量&lt;code&gt;. ~/ros2_eloquent/ros2-osx/setup.bash&lt;/code&gt;
例子
&lt;code&gt;ros2 run demo_nodes_cpp talker&lt;/code&gt;
&lt;code&gt;ros2 run demo_nodes_py listener&lt;/code&gt;
也没有出现问题
都正常可以使用了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;homebrew-常用命令一览&#34;&gt;Homebrew 常用命令一览&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Homebrew 常用命令一览

$ brew --help #简洁命令帮助

$ man brew #完整命令帮助

$ brew install git #安装软件包(这里是示例安装的Git版本控制)

$ brew uninstall git #卸载软件包

$ brew search git #搜索软件包

$ brew list #显示已经安装的所有软件包

$ brew update #同步远程最新更新情况，对本机已经安装并有更新的软件用*标明

$ brew outdated #查看已安装的哪些软件包需要更新

$ brew upgrade git #更新单个软件包

$ brew info git #查看软件包信息

$ brew home git #访问软件包官方站

$ brew cleanup #清理所有已安装软件包的历史老版本

$ brew cleanup git #清理单个已安装软件包的历史版本
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;macos下ros2的编译&#34;&gt;macos下ros2的编译&lt;/h2&gt;
&lt;p&gt;不甘心 内心还想挑战一下在mac下的源码编译安装&lt;/p&gt;
&lt;p&gt;building参考&lt;code&gt;https://index.ros.org/doc/ros2/Installation/Eloquent/macOS-Install-Binary/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;python-vsc的安装&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew Install python3-vcstool
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;colcon的安装&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip3 install colcon-common-extensions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;遇到了两个无法解决的问题,目前无法解决:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;qt_gui_cpp&lt;/code&gt; 包编译失败&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tinyxml2&lt;/code&gt; 相关包的编译问题&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/02/ksEIZmbid1ePrjN.jpg&#34; alt=&#34;WechatIMG892.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;三个python执行&lt;/p&gt;
&lt;p&gt;第一个是python官网安装
第二个是brew安装
第三个是系统自带&lt;/p&gt;
&lt;p&gt;删除前面两个后,重新安装 python3.9后&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/02/UCLHjQDIA7zNYtM.jpg&#34; alt=&#34;WechatIMG966.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个是系统自带 无法删除&lt;/p&gt;
&lt;p&gt;从头开始安装,pyqt5和sip通过
但是tinyxml2安装问题导致编译无法通过 &lt;code&gt;tinyxml2_vendor&lt;/code&gt;编译出错&lt;/p&gt;
&lt;p&gt;tinyxml2只提供了依赖&lt;code&gt;Library/Frameworks/python3.8*&lt;/code&gt;中的路径,而且只有3.8.&lt;/p&gt;
&lt;h3 id=&#34;从而放弃&#34;&gt;从而放弃&lt;/h3&gt;
&lt;hr&gt;
&lt;h1 id=&#34;building失败后installing继续&#34;&gt;Building失败后,Installing继续&lt;/h1&gt;
&lt;p&gt;python接口需要rclpy库支持,但是python3.9没有相关库
无奈,又重新安装python3.8&lt;/p&gt;
&lt;p&gt;在python3.8下 安装依赖后,pyqt5与sip也没有出现问题,能正常运行
注意:一定是先卸载python,安装依赖后,再安装python3.8及依赖,这样rqt相关命令就不会有问题.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ros2的系统依赖升级还不够满足macos的升级,包括python的升级.
而且,mac最近的m1,带动了一大堆依赖库强行升级一波,但是ros2还没有跟进.&lt;/p&gt;
&lt;p&gt;后续等一段时间,接着尝试吧.&lt;/p&gt;
&lt;p&gt;先这样,贴一张tunrtlesim&lt;/p&gt;
&lt;p&gt;聊以慰藉&lt;/p&gt;
&lt;p&gt;也纪念逝去的三天时间&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/02/WwVJfuHOBqtSndX.png&#34; alt=&#34;截屏2021-02-02 上午10.05.13.png&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros/" term="ros" label="ros" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Jetson Inference中遇到的问题</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/jetson-inference%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/" />
            <id>https://chenbokaix250.github.io/tech/jetson-inference%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
            <updated>2021-01-28T15:37:14&#43;08:00</updated>
            <published>2021-01-28T15:35:06&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">jetson-inference 实践中的问题 实践pytorch、TensorRT技术栈 利用项目jetson-inf……</summary>
            
                <content type="html">&lt;h1 id=&#34;jetson-inference-实践中的问题&#34;&gt;jetson-inference 实践中的问题&lt;/h1&gt;
&lt;p&gt;实践pytorch、TensorRT技术栈&lt;/p&gt;
&lt;p&gt;利用项目jetson-inference学习&lt;/p&gt;
&lt;p&gt;项目地址：&lt;code&gt;https://github.com/dusty-nv/jetson-inference.git&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装中的问题&#34;&gt;安装中的问题&lt;/h2&gt;
&lt;h3 id=&#34;1recursive-没有安装git子模块&#34;&gt;1.recursive 没有安装git子模块&lt;/h3&gt;
&lt;p&gt;利用&lt;code&gt;git clone --recursive&lt;/code&gt;命令更新子模块&lt;/p&gt;
&lt;p&gt;完成utils等模块的克隆&lt;/p&gt;
&lt;h3 id=&#34;2cmake的问题&#34;&gt;2.cmake的问题&lt;/h3&gt;
&lt;p&gt;cmake时遇到&lt;code&gt;not detect python3.7&lt;/code&gt;的问题&lt;/p&gt;
&lt;p&gt;安装后，numpy无法找到 &lt;code&gt;ModuleNotFoundError: No module named &#39;numpy&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;没有找到python3.7的aarch64版本 提交issue，作者回答是python3.7不是必须安装的&lt;/p&gt;
&lt;p&gt;继而卸载python3.7，往前倒发现问题是没有安装Doxygen&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doxygen介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Doxygen是一款文档生成工具，它可以从代码中提取出相应的文档，并组织，输出成各种漂亮的文档&lt;/p&gt;
&lt;h3 id=&#34;安装命令&#34;&gt;安装命令&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install git cmake libpython3-dev python3-numpy
$ git clone --recursive https://github.com/dusty-nv/jetson-inference
$ cd jetson-inference
$ mkdir build
$ cd build
$ cmake ../
$ make -j$(nproc)
$ sudo make install
$ sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;install时出现问题&#34;&gt;install时出现问题&lt;/h3&gt;
&lt;p&gt;无法找到python/jetson的文件夹&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jetson-inference/python/bindings/../python/jetson&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Makefile:117: recipe for target &#39;install&#39; failed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;是因为&lt;code&gt;python/jetson&lt;/code&gt;无法找到 因为文件下目录时Jetson大写&lt;/p&gt;
&lt;p&gt;生成一个jetson的文件夹 复制Jetson/的内容,执行&lt;code&gt;sudo make install &lt;/code&gt;通过&lt;/p&gt;
&lt;h3 id=&#34;摄像头安装的问题&#34;&gt;摄像头安装的问题&lt;/h3&gt;
&lt;p&gt;工程支持的摄像头有:&lt;code&gt;MIPI-CSI-camera&lt;/code&gt; &lt;code&gt;V4L2-camera&lt;/code&gt; &lt;code&gt;RTP-stream&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前采用的摄像头属于V4L2-camera&lt;/p&gt;
&lt;p&gt;但是利用camera输出是,无法得到图像.&lt;/p&gt;
&lt;p&gt;作者提到了V4L2 Formats的问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, V4L2 cameras will be created using the camera format with the highest framerate that most closely matches the desired resolution (by default, that resolution is 1280x720). The format with the highest framerate may be encoded (for example with H.264 or MJPEG), as USB cameras typically transmit uncompressed YUV/RGB at lower framerates. In this case, that codec will be detected and the camera stream will automatically be decoded using the Jetson&#39;s hardware decoder to attain the highest framerate.&lt;/p&gt;
&lt;p&gt;If you explicitly want to choose the format used by the V4L2 camera, you can do so with the &lt;code&gt;--input-width&lt;/code&gt;, &lt;code&gt;--input-height&lt;/code&gt;, and &lt;code&gt;--input-codec&lt;/code&gt; options. Possible decoder codec options are &lt;code&gt;--input-codec=h264, h265, vp8, vp9, mpeg2, mpeg4, mjpeg&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是此摄像头输出是YUY2 应该只是帧数低,并不会没有stream输出.随后更换罗技C270摄像头,问题解决.&lt;/p&gt;
&lt;p&gt;查看v4l2摄像头参数&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get install v4l-utils
$ v4l2-ctl --device=/dev/video0 --list-formats-ext
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外,MIPI CSI摄像头支持命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ video-viewer csi://0                        # MIPI CSI camera 0 (substitue other camera numbers)
$ video-viewer csi://0 output.mp4             # save output stream to MP4 file (H.264 by default)
$ video-viewer csi://0 rtp://&amp;lt;remote-ip&amp;gt;:1234 # broadcast output stream over RTP to &amp;lt;remote-ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;imagenetdetectnetsegnet都很顺利&#34;&gt;&lt;code&gt;imagenet/detectnet/segnet&lt;/code&gt;都很顺利&lt;/h2&gt;
&lt;h2 id=&#34;训练数据中出现的问题&#34;&gt;训练数据中出现的问题&lt;/h2&gt;
&lt;p&gt;在安装pytorch时,在pypi网站无法找到对应版本,在NVIDIA完成版本,import时发送错误&lt;/p&gt;
&lt;p&gt;无法引入cuda下的开发包 后来通过编辑/etc/profile,引入cuda的全局变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export PATH=$PATH:/usr/local/cuda-10.0/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr.local/cuda-10.0/lib64
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda-10.0/lib64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而后出现cudann8.0无法导入&lt;/p&gt;
&lt;p&gt;需要降级pytorch版本&lt;/p&gt;
&lt;p&gt;在python的pypi站点没有找到支持aarch64版本的pytorch,从NVIDIA的一个链接找到了响应版本的下载地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-7-0-now-available/72048&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载后安装,没问题&lt;/p&gt;
&lt;p&gt;安装torch-vision时,也未能找到对应版本 而后在github的工程中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://github.com/pytorch/vision&lt;/code&gt;下载了对应版本&lt;/p&gt;
&lt;p&gt;pytorch1.5支持的是V0.6版本&lt;/p&gt;
&lt;p&gt;然后利用cat_dog开始训练,训练完成后获得&lt;code&gt;checkpoint.pth.rar&lt;/code&gt;和&lt;code&gt;model_best.pth.tar&lt;/code&gt;两个文件&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;onnx_export.py&lt;/code&gt;将其转换为&lt;code&gt;resnet18.onnx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后利用imagenet进行识别测试&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NET=models/cat_dog
DATASET=data/cat_dog

# C++
imagenet --model=$NET/resnet18.onnx --input_blob=input_0 --output_blob=output_0 --labels=$DATASET/labels.txt $DATASET/test/cat/01.jpg cat.jpg

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现的问题是 TensorRT无法导入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ERROR: ModelImporter.cpp:296 In function importModel:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搜索问题 &lt;code&gt;Re-training on the Cat/Dog Dataset #370&lt;/code&gt;以为是vision的版本问题&lt;/p&gt;
&lt;p&gt;回答中,作者写了自己安装的torchvision版本,安装后在后续答案中发现是pytorch版本过高导致的&lt;/p&gt;
&lt;p&gt;安装指示安装了`torch1.2版本&lt;/p&gt;
&lt;p&gt;安装地址是&lt;code&gt;https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-7-0-now-available/72048&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好像除此之外没有找到...&lt;/p&gt;
&lt;p&gt;重新完成训练,expert为onnx,在imagenet加载时,会将&lt;code&gt;resnet18.onnx&lt;/code&gt;转换为&lt;code&gt;resnet18.onnx.5106.GPU.FP16.engine&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/28/iWQqe2SIajMKnAY.png&#34; alt=&#34;result.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;识别过程只有0.13210ms&lt;/p&gt;
&lt;p&gt;整个图像识别30帧也不会掉帧.&lt;/p&gt;
&lt;p&gt;最后影响的主要问题来自于torch版本&lt;/p&gt;
&lt;p&gt;贴一张版本的对应图&lt;/p&gt;
&lt;img src=&#34;https://i.loli.net/2021/01/28/lKhdiOEws76TQRy.png&#34; alt=&#34;截屏2021-01-28 下午3.06.15.png&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;关于ros_deep_learning的搭载&#34;&gt;关于ros_deep_learning的搭载&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install ros-melodic-image-transport ros-melodic-vision-msgs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于创建工作空间之类的,太久不用就忘记了,记录一下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment#Create_a_ROS_Workspace&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ~/ros_workspace/src
$ git clone https://github.com/dusty-nv/ros_deep_learning

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;摄像头搭载:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MIPI CSI camera    :   csi://0&lt;/li&gt;
&lt;li&gt;V4L2 camera    :  v4l2:///dev/video0&lt;/li&gt;
&lt;li&gt;RTP stream.   :    rtp://@1234&lt;/li&gt;
&lt;li&gt;Video file.   :    file://my_video.mp4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;imagenet-node&#34;&gt;imagenet Node&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ROS Melodic
$ roslaunch ros_deep_learning imagenet.ros1.launch input:=csi://0 output:=display://0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;detectent-node&#34;&gt;detectent Node&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ROS Melodic
$ roslaunch ros_deep_learning detectnet.ros1.launch input:=csi://0 output:=display://0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;segnet-node&#34;&gt;segnet Node&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ROS Melodic
$ roslaunch ros_deep_learning segnet.ros1.launch input:=csi://0 output:=display://0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;imagenet-node-1&#34;&gt;imagenet Node&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic Name&lt;/th&gt;
&lt;th&gt;I/O&lt;/th&gt;
&lt;th&gt;Message Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;image_in&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Raw input image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;classification&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/vision_msgs/html/msg/Classification2D.html&#34;&gt;&lt;code&gt;vision_msgs/Classification2D&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Classification results (class ID + confidence)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vision_info&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/vision_msgs/html/msg/VisionInfo.html&#34;&gt;&lt;code&gt;vision_msgs/VisionInfo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Vision metadata (class labels parameter list name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Input image overlayed with the classification results&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;model_name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;googlenet&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Built-in model name (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference#image-recognition&#34;&gt;here&lt;/a&gt; for valid values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;model_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom caffe or ONNX model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prototxt_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom caffe prototxt file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input_blob&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;data&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN input layer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output_blob&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;prob&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN output layer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_labels_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom class labels file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_labels_HASH&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;class names&lt;/td&gt;
&lt;td&gt;List of class labels, where HASH is model-specific (actual name of parameter is found via the &lt;code&gt;vision_info&lt;/code&gt; topic)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;detectnet-node&#34;&gt;detectnet Node&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic Name&lt;/th&gt;
&lt;th&gt;I/O&lt;/th&gt;
&lt;th&gt;Message Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;image_in&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Raw input image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detections&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/vision_msgs/html/msg/Detection2DArray.html&#34;&gt;&lt;code&gt;vision_msgs/Detection2DArray&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Detection results (bounding boxes, class IDs, confidences)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vision_info&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/vision_msgs/html/msg/VisionInfo.html&#34;&gt;&lt;code&gt;vision_msgs/VisionInfo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Vision metadata (class labels parameter list name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Input image overlayed with the detection results&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;model_name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;ssd-mobilenet-v2&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Built-in model name (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference#object-detection&#34;&gt;here&lt;/a&gt; for valid values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;model_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom caffe or ONNX model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prototxt_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom caffe prototxt file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input_blob&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;data&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN input layer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output_cvg&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;coverage&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN output layer (coverage/scores)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output_bbox&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;bboxes&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN output layer (bounding boxes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_labels_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom class labels file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_labels_HASH&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;class names&lt;/td&gt;
&lt;td&gt;List of class labels, where HASH is model-specific (actual name of parameter is found via the &lt;code&gt;vision_info&lt;/code&gt; topic)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay_flags&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;box,labels,conf&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Flags used to generate the overlay (some combination of &lt;code&gt;none,box,labels,conf&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mean_pixel_value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;Mean pixel subtraction value to be applied to input (normally 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;threshold&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;Minimum confidence value for positive detections (0.0 - 1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;segnet-node-1&#34;&gt;segnet Node&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic Name&lt;/th&gt;
&lt;th&gt;I/O&lt;/th&gt;
&lt;th&gt;Message Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;image_in&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Raw input image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vision_info&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/vision_msgs/html/msg/VisionInfo.html&#34;&gt;&lt;code&gt;vision_msgs/VisionInfo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Vision metadata (class labels parameter list name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Input image overlayed with the classification results&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;color_mask&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Colorized segmentation class mask out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_mask&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;8-bit single-channel image where each pixel is a classID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;model_name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;fcn-resnet18-cityscapes-1024x512&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Built-in model name (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference#semantic-segmentation&#34;&gt;here&lt;/a&gt; for valid values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;model_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom caffe or ONNX model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prototxt_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom caffe prototxt file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input_blob&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;data&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN input layer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output_blob&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;score_fr_21classes&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of DNN output layer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_colors_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom class colors file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_labels_path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path to custom class labels file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;class_labels_HASH&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;class names&lt;/td&gt;
&lt;td&gt;List of class labels, where HASH is model-specific (actual name of parameter is found via the &lt;code&gt;vision_info&lt;/code&gt; topic)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mask_filter&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;linear&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Filtering to apply to color_mask topic (&lt;code&gt;linear&lt;/code&gt; or &lt;code&gt;point&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay_filter&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;linear&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Filtering to apply to overlay topic (&lt;code&gt;linear&lt;/code&gt; or &lt;code&gt;point&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overlay_alpha&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;180.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Alpha blending value used by overlay topic (0.0 - 255.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;video_source-node&#34;&gt;video_source Node&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic Name&lt;/th&gt;
&lt;th&gt;I/O&lt;/th&gt;
&lt;th&gt;Message Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;raw&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Raw output image (BGR8)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;resource&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;csi://0&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Input stream URI (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference/blob/master/docs/aux-streaming.md#input-streams&#34;&gt;here&lt;/a&gt; for valid protocols)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codec&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Manually specify codec for compressed streams (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference/blob/master/docs/aux-streaming.md#input-options&#34;&gt;here&lt;/a&gt; for valid values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;width&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Manually specify desired width of stream (0 = stream default)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;height&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Manually specify desired height of stream (0 = stream default)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;framerate&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Manually specify desired framerate of stream (0 = stream default)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;For video files: &lt;code&gt;0&lt;/code&gt; = don&#39;t loop, &lt;code&gt;&amp;gt;0&lt;/code&gt; = # of loops, &lt;code&gt;-1&lt;/code&gt; = loop forever&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;video_output-node&#34;&gt;video_output Node&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic Name&lt;/th&gt;
&lt;th&gt;I/O&lt;/th&gt;
&lt;th&gt;Message Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;image_in&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://docs.ros.org/melodic/api/sensor_msgs/html/msg/Image.html&#34;&gt;&lt;code&gt;sensor_msgs/Image&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Raw input image&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;resource&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;display://0&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output stream URI (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference/blob/master/docs/aux-streaming.md#output-streams&#34;&gt;here&lt;/a&gt; for valid protocols)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codec&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;h264&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Codec used for compressed streams (see &lt;a href=&#34;https://github.com/dusty-nv/jetson-inference/blob/master/docs/aux-streaming.md#input-options&#34;&gt;here&lt;/a&gt; for valid values)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bitrate&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4000000&lt;/td&gt;
&lt;td&gt;Target VBR bitrate of encoded streams (in bits per second)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;最后贴一张效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/28/AWgJjXdPzHLUlbs.png&#34; alt=&#34;ros_tensorRT.png&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorrt/" term="tensorRT" label="tensorRT" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">CUDA编程入门</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/cuda%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/" />
            <id>https://chenbokaix250.github.io/tech/cuda%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</id>
            <updated>2021-01-26T18:21:00&#43;08:00</updated>
            <published>2021-01-26T16:52:59&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">CUDA编程入门教程 前言 2006年，NVIDIA公司发布了CUDA，CUDA是建立在……</summary>
            
                <content type="html">&lt;h1 id=&#34;cuda编程入门教程&#34;&gt;CUDA编程入门教程&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;2006年，NVIDIA公司发布了CUDA，CUDA是建立在NVIDIA的CPUs上的一个通用并行计算平台和编程模型，基于CUDA编程可以利用GPUs的并行计算引擎来更加高效地解决比较复杂的计算难题。近年来，GPU最成功的一个应用就是深度学习领域，基于GPU的并行计算已经成为训练深度学习模型的标配。目前，最新的CUDA版本为CUDA 11。&lt;/p&gt;
&lt;p&gt;GPU并不是一个独立运行的计算平台，而需要与CPU协同工作，可以看成是CPU的协处理器，因此当我们在说GPU并行计算时，其实是指的基于CPU+GPU的 &lt;strong&gt;异构计算架构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在异构计算架构中，GPU与CPU通过PCIe总线连接在一起来协同工作，CPU所在位置称为为主机端（host），而GPU所在位置称为设备端（device）.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-df49a98a67c5b8ce55f1a9afcf21d982_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到GPU包括更多的运算核心，其特别适合数据并行的计算密集型任务，如大型矩阵运算，而CPU的运算核心较少，但是其可以实现复杂的逻辑运算，因此其适合控制密集型任务。另外，CPU上的线程是重量级的，上下文切换开销大，但是GPU由于存在很多核心，其线程是轻量级的。因此，基于CPU+GPU的异构计算平台可以优势互补，CPU负责处理逻辑复杂的串行程序，而GPU重点处理数据密集型的并行计算程序，从而发挥最大功效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-2959e07a36a8dc8f59280f53b43eb9d1_1440w.jpg&#34; alt=&#34;基于CPU+GPU的异构计算应用执行逻辑. 来源：Preofessional CUDA® C Programming&#34;&gt;&lt;/p&gt;
&lt;p&gt;CUDA是NVIDIA公司所开发的GPU编程模型，它提供了GPU编程的简易接口，基于CUDA编程可以构建基于GPU计算的应用程序。CUDA提供了对其它编程语言的支持，如C/C++，Python，Fortran等语言，这里我们选择CUDA C/C++接口对CUDA编程进行讲解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/v2-708897c8e1b627e3b08de922412a3347_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cuda编程模型基础&#34;&gt;CUDA编程模型基础&lt;/h2&gt;
&lt;p&gt;CUDA编程模型是一个异构模型，需要CPU和GPU协同工作。在CUDA中，host和device是两个重要的概念，我们用host指代CPU及其内存，而用device指代GPU及其内存。CUDA程序中既包含host程序，又包含device程序，它们分别在CPU和GPU上运行。同时，host与device之间可以进行通信，这样它们之间可以进行数据拷贝。典型的CUDA程序的执行流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配host内存，并进行数据初始化；&lt;/li&gt;
&lt;li&gt;分配device内存，并从host将数据拷贝到device上；&lt;/li&gt;
&lt;li&gt;调用CUDA的核函数在device上完成指定的运算；&lt;/li&gt;
&lt;li&gt;将device上的运算结果拷贝到host上；&lt;/li&gt;
&lt;li&gt;释放device和host上分配的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面流程中最重要的一个过程是调用CUDA的核函数来执行并行计算，kernel是CUDA中一个重要的概念，kernel是在device上线程中并行执行的函数，核函数用__global__符号声明，在调用时需要用&amp;lt;&amp;lt;&amp;lt;grid, block&amp;gt;&amp;gt;&amp;gt;来指定kernel要执行的线程数量，在CUDA中，每一个线程都要执行核函数，并且每个线程会分配一个唯一的线程号thread ID，这个ID值可以通过核函数的内置变量threadIdx来获得。&lt;/p&gt;
&lt;p&gt;由于GPU实际上是异构模型，所以需要区分host和device上的代码，在CUDA中是通过函数类型限定词开区别host和device上的函数，主要的三个函数类型限定词如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;global&lt;/strong&gt;：在device上执行，从host中调用（一些特定的GPU也可以从device上调用），返回类型必须是void，不支持可变参数参数，不能成为类成员函数。注意用__global__定义的kernel是异步的，这意味着host不会等待kernel执行完就执行下一步。
&lt;strong&gt;device&lt;/strong&gt;：在device上执行，单仅可以从device中调用，不可以和__global__同时用。
&lt;strong&gt;host&lt;/strong&gt;：在host上执行，仅可以从host上调用，一般省略不写，不可以和__global__同时用，但可和__device__，此时函数会在device和host都编译。&lt;/p&gt;
&lt;p&gt;要深刻理解kernel，必须要对kernel的线程层次结构有一个清晰的认识。首先GPU上很多并行化的轻量级线程。kernel在device上执行时实际上是启动很多线程，一个kernel所启动的所有线程称为一个网格（grid），同一个网格上的线程共享相同的全局内存空间，grid是线程结构的第一层次，而网格又可以分为很多线程块（block），一个线程块里面包含很多线程，这是第二个层次。线程两层组织结构如下图所示，这是一个gird和block均为2-dim的线程组织。grid和block都是定义为dim3类型的变量，dim3可以看成是包含三个无符号整数（x，y，z）成员的结构体变量，在定义时，缺省值初始化为1。因此grid和block可以灵活地定义为1-dim，2-dim以及3-dim结构，对于图中结构（主要水平方向为x轴），定义的grid和block如下所示，kernel在调用时也必须通过执行配置&amp;lt;&amp;lt;&amp;lt;grid, block&amp;gt;&amp;gt;&amp;gt;来指定kernel所使用的线程数及结构。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; dim3 grid(3, 2);
dim3 block(5, 3);
kernel_fun&amp;lt;&amp;lt;&amp;lt; grid, block &amp;gt;&amp;gt;&amp;gt;(prams...);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/v2-aa6aa453ff39aa7078dde59b59b512d8_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以，一个线程需要两个内置的坐标变量（blockIdx，threadIdx）来唯一标识，它们都是dim3类型变量，其中blockIdx指明线程所在grid中的位置，而threaIdx指明线程所在block中的位置，如图中的Thread (1,1)满足：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;threadIdx.x = 1
threadIdx.y = 1
blockIdx.x = 1
blockIdx.y = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个线程块上的线程是放在同一个流式多处理器（SM)上的，但是单个SM的资源有限，这导致线程块中的线程数是有限制的，现代GPUs的线程块可支持的线程数可达1024个。有时候，我们要知道一个线程在blcok中的全局ID，此时就必须还要知道block的组织结构，这是通过线程的内置变量blockDim来获得。它获取线程块各个维度的大小。对于一个2-dim的block (D&lt;sub&gt;x&lt;/sub&gt;,D&lt;sub&gt;y&lt;/sub&gt;) ，线程 (x,y) 的ID值为 (x+y*D&lt;sub&gt;x&lt;/sub&gt;) ，如果是3-dim的block(D&lt;sub&gt;x&lt;/sub&gt;,D&lt;sub&gt;y&lt;/sub&gt;,D&lt;sub&gt;z&lt;/sub&gt;) ，线程 (x,y,z) 的ID值为 (x+ y * D&lt;sub&gt;x&lt;/sub&gt;+z * D&lt;sub&gt;x&lt;/sub&gt; * D&lt;sub&gt;y&lt;/sub&gt;) 。另外线程还有内置变量gridDim，用于获得网格块各个维度的大小。&lt;/p&gt;
&lt;p&gt;kernel的这种线程组织结构天然适合vector,matrix等运算，如我们将利用上图2-dim结构实现两个矩阵的加法，每个线程负责处理每个位置的两个元素相加，代码如下所示。线程块大小为(16, 16)，然后将N*N大小的矩阵均分为不同的线程块来执行加法运算。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Kernel定义
__global__ void MatAdd(float A[N][N], float B[N][N], float C[N][N]) 
{ 
    int i = blockIdx.x * blockDim.x + threadIdx.x; 
    int j = blockIdx.y * blockDim.y + threadIdx.y; 
    if (i &amp;lt; N &amp;amp;&amp;amp; j &amp;lt; N) 
        C[i][j] = A[i][j] + B[i][j]; 
}
int main() 
{ 
    ...
    // Kernel 线程配置
    dim3 threadsPerBlock(16, 16); 
    dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y);
    // kernel调用
    MatAdd&amp;lt;&amp;lt;&amp;lt;numBlocks, threadsPerBlock&amp;gt;&amp;gt;&amp;gt;(A, B, C); 
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外这里简单介绍一下CUDA的内存模型，如下图所示。可以看到，每个线程有自己的私有本地内存（Local Memory），而每个线程块有包含共享内存（Shared Memory）,可以被线程块中所有线程共享，其生命周期与线程块一致。此外，所有的线程都可以访问全局内存（Global Memory）。还可以访问一些只读内存块：常量内存（Constant Memory）和纹理内存（Texture Memory）。内存结构涉及到程序优化，这里不深入探讨它们。&lt;/p&gt;
&lt;p&gt;!()[https://pic2.zhimg.com/80/v2-6456af75530956da6bc5bab7418ff9e5_1440w.jpg]&lt;/p&gt;
&lt;p&gt;还有重要一点，你需要对GPU的硬件实现有一个基本的认识。上面说到了kernel的线程组织层次，那么一个kernel实际上会启动很多线程，这些线程是逻辑上并行的，但是在物理层却并不一定。这其实和CPU的多线程有类似之处，多线程如果没有多核支持，在物理层也是无法实现并行的。但是好在GPU存在很多CUDA核心，充分利用CUDA核心可以充分发挥GPU的并行计算能力。GPU硬件的一个核心组件是SM，前面已经说过，SM是英文名是 Streaming Multiprocessor，翻译过来就是流式多处理器。SM的核心组件包括CUDA核心，共享内存，寄存器等，SM可以并发地执行数百个线程，并发能力就取决于SM所拥有的资源数。当一个kernel被执行时，它的gird中的线程块被分配到SM上，一个线程块只能在一个SM上被调度。SM一般可以调度多个线程块，这要看SM本身的能力。那么有可能一个kernel的各个线程块被分配多个SM，所以grid只是逻辑层，而SM才是执行的物理层。SM采用的是SIMT (Single-Instruction, Multiple-Thread，单指令多线程)架构，基本的执行单元是线程束（wraps)，线程束包含32个线程，这些线程同时执行相同的指令，但是每个线程都包含自己的指令地址计数器和寄存器状态，也有自己独立的执行路径。所以尽管线程束中的线程同时从同一程序地址执行，但是可能具有不同的行为，比如遇到了分支结构，一些线程可能进入这个分支，但是另外一些有可能不执行，它们只能死等，因为GPU规定线程束中所有线程在同一周期执行相同的指令，线程束分化会导致性能下降。当线程块被划分到某个SM上时，它将进一步划分为多个线程束，因为这才是SM的基本执行单元，但是一个SM同时并发的线程束数是有限的。这是因为资源限制，SM要为每个线程块分配共享内存，而也要为每个线程束中的线程分配独立的寄存器。所以SM的配置会影响其所支持的线程块和线程束并发数量。总之，就是网格和线程块只是逻辑划分，一个kernel的所有线程其实在物理层是不一定同时并发的。所以kernel的grid和block的配置不同，性能会出现差异，这点是要特别注意的。还有，由于SM的基本执行单元是包含32个线程的线程束，所以block大小一般要设置为32的倍数。&lt;/p&gt;
&lt;p&gt;!()[https://pic1.zhimg.com/80/v2-dcc0f678850d5bf1683753c34ca4b308_1440w.jpg]&lt;/p&gt;
&lt;p&gt;在进行CUDA编程前，可以先检查一下自己的GPU的硬件配置，这样才可以有的放矢，可以通过下面的程序获得GPU的配置属性：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int dev = 0;
    cudaDeviceProp devProp;
    CHECK(cudaGetDeviceProperties(&amp;amp;devProp, dev));
    std::cout &amp;lt;&amp;lt; &amp;quot;使用GPU device &amp;quot; &amp;lt;&amp;lt; dev &amp;lt;&amp;lt; &amp;quot;: &amp;quot; &amp;lt;&amp;lt; devProp.name &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;SM的数量：&amp;quot; &amp;lt;&amp;lt; devProp.multiProcessorCount &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;每个线程块的共享内存大小：&amp;quot; &amp;lt;&amp;lt; devProp.sharedMemPerBlock / 1024.0 &amp;lt;&amp;lt; &amp;quot; KB&amp;quot; &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;每个线程块的最大线程数：&amp;quot; &amp;lt;&amp;lt; devProp.maxThreadsPerBlock &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;每个EM的最大线程数：&amp;quot; &amp;lt;&amp;lt; devProp.maxThreadsPerMultiProcessor &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;每个EM的最大线程束数：&amp;quot; &amp;lt;&amp;lt; devProp.maxThreadsPerMultiProcessor / 32 &amp;lt;&amp;lt; std::endl;

    // 输出如下
    使用GPU device 0: GeForce GT 730
    SM的数量：2
    每个线程块的共享内存大小：48 KB
    每个线程块的最大线程数：1024
    每个EM的最大线程数：2048
    每个EM的最大线程束数：64
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;向量加法实例&#34;&gt;向量加法实例&lt;/h2&gt;
&lt;p&gt;知道了CUDA编程基础，我们就来个简单的实战，利用CUDA编程实现两个向量的加法，在实现之前，先简单介绍一下CUDA编程中内存管理API。首先是在device上分配内存的cudaMalloc函数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cudaError_t cudaMalloc(void** devPtr, size_t size);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个函数和C语言中的malloc类似，但是在device上申请一定字节大小的显存，其中devPtr是指向所分配内存的指针。同时要释放分配的内存使用cudaFree函数，这和C语言中的free函数对应。另外一个重要的函数是负责host和device之间数据通信的cudaMemcpy函数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cudaError_t cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中src指向数据源，而dst是目标区域，count是复制的字节数，其中kind控制复制的方向：cudaMemcpyHostToHost, cudaMemcpyHostToDevice, cudaMemcpyDeviceToHost及cudaMemcpyDeviceToDevice，如cudaMemcpyHostToDevice将host上数据拷贝到device上。&lt;/p&gt;
&lt;p&gt;现在我们来实现一个向量加法的实例，这里grid和block都设计为1-dim，首先定义kernel如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 两个向量加法kernel，grid和block均为一维
__global__ void add(float* x, float * y, float* z, int n)
{
    // 获取全局索引
    int index = threadIdx.x + blockIdx.x * blockDim.x;
    // 步长
    int stride = blockDim.x * gridDim.x;
    for (int i = index; i &amp;lt; n; i += stride)
    {
        z[i] = x[i] + y[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中stride是整个grid的线程数，有时候向量的元素数很多，这时候可以将在每个线程实现多个元素（元素总数/线程总数）的加法，相当于使用了多个grid来处理，这是一种grid-stride loop方式，不过下面的例子一个线程只处理一个元素，所以kernel里面的循环是不执行的。下面我们具体实现向量加法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main()
{
    int N = 1 &amp;lt;&amp;lt; 20;
    int nBytes = N * sizeof(float);
    // 申请host内存
    float *x, *y, *z;
    x = (float*)malloc(nBytes);
    y = (float*)malloc(nBytes);
    z = (float*)malloc(nBytes);

    // 初始化数据
    for (int i = 0; i &amp;lt; N; ++i)
    {
        x[i] = 10.0;
        y[i] = 20.0;
    }

    // 申请device内存
    float *d_x, *d_y, *d_z;
    cudaMalloc((void**)&amp;amp;d_x, nBytes);
    cudaMalloc((void**)&amp;amp;d_y, nBytes);
    cudaMalloc((void**)&amp;amp;d_z, nBytes);

    // 将host数据拷贝到device
    cudaMemcpy((void*)d_x, (void*)x, nBytes, cudaMemcpyHostToDevice);
    cudaMemcpy((void*)d_y, (void*)y, nBytes, cudaMemcpyHostToDevice);
    // 定义kernel的执行配置
    dim3 blockSize(256);
    dim3 gridSize((N + blockSize.x - 1) / blockSize.x);
    // 执行kernel
    add &amp;lt;&amp;lt; &amp;lt; gridSize, blockSize &amp;gt;&amp;gt; &amp;gt;(d_x, d_y, d_z, N);

    // 将device得到的结果拷贝到host
    cudaMemcpy((void*)z, (void*)d_z, nBytes, cudaMemcpyHostToDevice);

    // 检查执行结果
    float maxError = 0.0;
    for (int i = 0; i &amp;lt; N; i++)
        maxError = fmax(maxError, fabs(z[i] - 30.0));
    std::cout &amp;lt;&amp;lt; &amp;quot;最大误差: &amp;quot; &amp;lt;&amp;lt; maxError &amp;lt;&amp;lt; std::endl;

    // 释放device内存
    cudaFree(d_x);
    cudaFree(d_y);
    cudaFree(d_z);
    // 释放host内存
    free(x);
    free(y);
    free(z);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我们的向量大小为1&amp;lt;&amp;lt;20，而block大小为256，那么grid大小是4096，kernel的线程层级结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-e4258399e69394620daa1e199d53fe0e_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用nvprof工具可以分析kernel运行情况，结果如下所示，可以看到kernel函数费时约1.5ms。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nvprof cuda9.exe
==7244== NVPROF is profiling process 7244, command: cuda9.exe
最大误差: 4.31602e+008
==7244== Profiling application: cuda9.exe
==7244== Profiling result:
            Type  Time(%)      Time     Calls       Avg       Min       Max  Name
 GPU activities:   67.57%  3.2256ms         2  1.6128ms  1.6017ms  1.6239ms  [CUDA memcpy HtoD]
                   32.43%  1.5478ms         1  1.5478ms  1.5478ms  1.5478ms  add(float*, float*, float*, int)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你调整block的大小，对比不同配置下的kernel运行情况，我这里测试的是当block为128时，kernel费时约1.6ms，而block为512时kernel费时约1.7ms，当block为64时，kernel费时约2.3ms。看来不是block越大越好，而要适当选择。&lt;/p&gt;
&lt;p&gt;在上面的实现中，我们需要单独在host和device上进行内存分配，并且要进行数据拷贝，这是很容易出错的。好在CUDA 6.0引入统一内存（Unified Memory）来避免这种麻烦，简单来说就是统一内存使用一个托管内存来共同管理host和device中的内存，并且自动在host和device中进行数据传输。CUDA中使用cudaMallocManaged函数分配托管内存：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flag=0);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用统一内存，可以将上面的程序简化如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main()
{
    int N = 1 &amp;lt;&amp;lt; 20;
    int nBytes = N * sizeof(float);

    // 申请托管内存
    float *x, *y, *z;
    cudaMallocManaged((void**)&amp;amp;x, nBytes);
    cudaMallocManaged((void**)&amp;amp;y, nBytes);
    cudaMallocManaged((void**)&amp;amp;z, nBytes);

    // 初始化数据
    for (int i = 0; i &amp;lt; N; ++i)
    {
        x[i] = 10.0;
        y[i] = 20.0;
    }

    // 定义kernel的执行配置
    dim3 blockSize(256);
    dim3 gridSize((N + blockSize.x - 1) / blockSize.x);
    // 执行kernel
    add &amp;lt;&amp;lt; &amp;lt; gridSize, blockSize &amp;gt;&amp;gt; &amp;gt;(x, y, z, N);

    // 同步device 保证结果能正确访问
    cudaDeviceSynchronize();
    // 检查执行结果
    float maxError = 0.0;
    for (int i = 0; i &amp;lt; N; i++)
        maxError = fmax(maxError, fabs(z[i] - 30.0));
    std::cout &amp;lt;&amp;lt; &amp;quot;最大误差: &amp;quot; &amp;lt;&amp;lt; maxError &amp;lt;&amp;lt; std::endl;

    // 释放内存
    cudaFree(x);
    cudaFree(y);
    cudaFree(z);

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相比之前的代码，使用统一内存更简洁了，值得注意的是kernel执行是与host异步的，由于托管内存自动进行数据传输，这里要用cudaDeviceSynchronize()函数保证device和host同步，这样后面才可以正确访问kernel计算的结果。&lt;/p&gt;
&lt;h2 id=&#34;矩阵乘法实例&#34;&gt;矩阵乘法实例&lt;/h2&gt;
&lt;p&gt;最后我们再实现一个稍微复杂一些的例子，就是两个矩阵的乘法，设输入矩阵为 A和 B ，要得到 &lt;code&gt;C = A x B&lt;/code&gt; 。实现思路是每个线程计算 C 的一个元素值 C&lt;sub&gt;i,j&lt;/sub&gt; ，对于矩阵运算，应该选用grid和block为2-D的。首先定义矩阵的结构体：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 矩阵类型，行优先，M(row, col) = *(M.elements + row * M.width + col)
struct Matrix
{
    int width;
    int height;
    float *elements;
};

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-9d9053c750be6fded195bfbff464e5a1_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后实现矩阵乘法的核函数，这里我们定义了两个辅助的__device__函数分别用于获取矩阵的元素值和为矩阵元素赋值，具体代码如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 获取矩阵A的(row, col)元素
__device__ float getElement(Matrix *A, int row, int col)
{
    return A-&amp;gt;elements[row * A-&amp;gt;width + col];
}

// 为矩阵A的(row, col)元素赋值
__device__ void setElement(Matrix *A, int row, int col, float value)
{
    A-&amp;gt;elements[row * A-&amp;gt;width + col] = value;
}

// 矩阵相乘kernel，2-D，每个线程计算一个元素
__global__ void matMulKernel(Matrix *A, Matrix *B, Matrix *C)
{
    float Cvalue = 0.0;
    int row = threadIdx.y + blockIdx.y * blockDim.y;
    int col = threadIdx.x + blockIdx.x * blockDim.x;
    for (int i = 0; i &amp;lt; A-&amp;gt;width; ++i)
    {
        Cvalue += getElement(A, row, i) * getElement(B, i, col);
    }
    setElement(C, row, col, Cvalue);
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;采用统一内存编写矩阵相乘的测试实例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main()
{
    int width = 1 &amp;lt;&amp;lt; 10;
    int height = 1 &amp;lt;&amp;lt; 10;
    Matrix *A, *B, *C;
    // 申请托管内存
    cudaMallocManaged((void**)&amp;amp;A, sizeof(Matrix));
    cudaMallocManaged((void**)&amp;amp;B, sizeof(Matrix));
    cudaMallocManaged((void**)&amp;amp;C, sizeof(Matrix));
    int nBytes = width * height * sizeof(float);
    cudaMallocManaged((void**)&amp;amp;A-&amp;gt;elements, nBytes);
    cudaMallocManaged((void**)&amp;amp;B-&amp;gt;elements, nBytes);
    cudaMallocManaged((void**)&amp;amp;C-&amp;gt;elements, nBytes);

    // 初始化数据
    A-&amp;gt;height = height;
    A-&amp;gt;width = width;
    B-&amp;gt;height = height;
    B-&amp;gt;width = width;
    C-&amp;gt;height = height;
    C-&amp;gt;width = width;
    for (int i = 0; i &amp;lt; width * height; ++i)
    {
        A-&amp;gt;elements[i] = 1.0;
        B-&amp;gt;elements[i] = 2.0;
    }

    // 定义kernel的执行配置
    dim3 blockSize(32, 32);
    dim3 gridSize((width + blockSize.x - 1) / blockSize.x, 
        (height + blockSize.y - 1) / blockSize.y);
    // 执行kernel
    matMulKernel &amp;lt;&amp;lt; &amp;lt; gridSize, blockSize &amp;gt;&amp;gt; &amp;gt;(A, B, C);


    // 同步device 保证结果能正确访问
    cudaDeviceSynchronize();
    // 检查执行结果
    float maxError = 0.0;
    for (int i = 0; i &amp;lt; width * height; ++i)
        maxError = fmax(maxError, fabs(C-&amp;gt;elements[i] - 2 * width));
    std::cout &amp;lt;&amp;lt; &amp;quot;最大误差: &amp;quot; &amp;lt;&amp;lt; maxError &amp;lt;&amp;lt; std::endl;

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里矩阵大小为，设计的线程的block大小为(32, 32)，那么grid大小为(32, 32)，最终测试结果如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nvprof cuda9.exe
==16304== NVPROF is profiling process 16304, command: cuda9.exe
最大误差: 0
==16304== Profiling application: cuda9.exe
==16304== Profiling result:
            Type  Time(%)      Time     Calls       Avg       Min       Max  Name
 GPU activities:  100.00%  1.32752s         1  1.32752s  1.32752s  1.32752s  matMulKernel(Matrix*, Matrix*, Matrix*)
      API calls:   83.11%  1.32762s         1  1.32762s  1.32762s  1.32762s  cudaDeviceSynchronize
                   13.99%  223.40ms         6  37.233ms  37.341us  217.66ms  cudaMallocManaged
                    2.81%  44.810ms         1  44.810ms  44.810ms  44.810ms  cudaLaunch
                    0.08%  1.3300ms        94  14.149us       0ns  884.64us  cuDeviceGetAttribute
                    0.01%  199.03us         1  199.03us  199.03us  199.03us  cuDeviceGetName
                    0.00%  10.009us         1  10.009us  10.009us  10.009us  cuDeviceTotalMem
                    0.00%  6.5440us         1  6.5440us  6.5440us  6.5440us  cudaConfigureCall
                    0.00%  3.0800us         3  1.0260us     385ns  1.5400us  cudaSetupArgument
                    0.00%  2.6940us         3     898ns     385ns  1.5390us  cuDeviceGetCount
                    0.00%  1.9250us         2     962ns     385ns  1.5400us  cuDeviceGet

==16304== Unified Memory profiling result:
Device &amp;quot;GeForce GT 730 (0)&amp;quot;
   Count  Avg Size  Min Size  Max Size  Total Size  Total Time  Name
    2051  4.0000KB  4.0000KB  4.0000KB  8.011719MB  21.20721ms  Host To Device
     270  45.570KB  4.0000KB  1.0000MB  12.01563MB  7.032508ms  Device To Host
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;CUDA入门容易，但是深入难！&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cuda/" term="cuda" label="cuda" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Gitignore文件的使用</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/" />
            <id>https://chenbokaix250.github.io/tech/gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
            <updated>2021-01-26T16:51:31&#43;08:00</updated>
            <published>2021-01-26T16:10:42&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Git中.gitignore文件的配置使用 在使用Git的过程中，有的文件比如日志，临……</summary>
            
                <content type="html">&lt;h1 id=&#34;git中gitignore文件的配置使用&#34;&gt;Git中.gitignore文件的配置使用&lt;/h1&gt;
&lt;p&gt;在使用Git的过程中，有的文件比如日志，临时文件，编译的中间文件等不要提交到代码仓库，这时就要设置相应的忽略规则，来忽略这些文件的提交。简单来说一个场景：在你使用git add .的时候，遇到了把你不想提交的文件也添加到了缓存中去的情况，比如项目的本地配置信息，如果你上传到Git中去其他人pull下来的时候就会和他本地的配置有冲突，所以这样的个性化配置文件我们一般不把它推送到git服务器中，但是又为了偷懒每次添加缓存的时候都想用git add .而不是手动一个一个文件添加，该怎么办呢？很简单，git为我们提供了一个.gitignore文件，只要在这个文件中声明哪些文件你不希望添加到git中去，这样当你使用git add .的时候这些文件就会被自动忽略掉。&lt;/p&gt;
&lt;h2 id=&#34;git忽略文件的原则&#34;&gt;Git忽略文件的原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;忽略操作系统自动生成的文件，比如缩略图等；&lt;/li&gt;
&lt;li&gt;忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如产生的.log日志文件；&lt;/li&gt;
&lt;li&gt;忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;.gitignore文件的使用方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，在你的工作区新建一个名称为.gitignore的文件。 然后，把要忽略的文件名填进去，Git就会自动忽略这些文件。不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# dir 不需要提交的目录
/node_modules
​
# file 不需要提交的文件
config.ini
​
# log 不需要提交的任意包含后缀名为log的文件
*.log
​
# Package Files 不需要提交的任意包含后缀名为jar的文件
*.jar

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.gitignore注释用&#39;#&#39;, *表示匹配0个或多个任意字符，所以上面的模式就是要忽略所有的xml文件,log文件和apk文件。&lt;/p&gt;
&lt;p&gt;.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为版本管理带来很大的便利。&lt;/p&gt;
&lt;p&gt;如果有些文件已经被忽略了，当使用git add时是无法添加的。需要加上-f参数才能强制添加到git中去，这样就能强制添加到缓存中去了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add -f node_modules/jquery/dist/jquery.min.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用rm命令将其从中移除：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rm --cached test.js &lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;gitignore忽略规则的优先级&#34;&gt;.gitignore忽略规则的优先级&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;在 .gitingore 文件中，每一行指定一个忽略规则，Git检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：
1、从命令行中读取可用的忽略规则
2、当前目录定义的规则
3、父级目录定义的规则，依次递推
4、$GIT_DIR/info/exclude 文件中定义的规则
5、core.excludesfile中定义的全局规则
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gitignore忽略规则的匹配语法&#34;&gt;.gitignore忽略规则的匹配语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;在 .gitignore 文件中，每一行的忽略规则的语法如下：
1、空格不匹配任意文件，可作为分隔符，可用反斜杠转义
2、以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。
3、可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。
4、以斜杠&amp;quot;/&amp;quot;开头表示目录；&amp;quot;/&amp;quot;结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；&amp;quot;/&amp;quot;开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。
5、以星号&amp;quot;*&amp;quot;通配多个字符，即匹配多个任意字符；使用两个星号&amp;quot;**&amp;quot; 表示匹配任意中间目录，比如a/**/z可以匹配 a/z, a/b/z 或 a/b/c/z等。
6、以问号&amp;quot;?&amp;quot;通配单个字符，即匹配一个任意字符；
7、以方括号&amp;quot;[]&amp;quot;包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。
8、以叹号&amp;quot;!&amp;quot;表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用&amp;quot;!&amp;quot;规则是不起作用的。也就是说&amp;quot;!&amp;quot;开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用&amp;quot;!&amp;quot;也不会再次被包含。可以使用反斜杠进行转义。

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;需要谨记&lt;/strong&gt;：git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十分重要&lt;/strong&gt;：如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。简单来说出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。所以大家一定要养成在项目开始就创建.gitignore文件的习惯，否则一单push，处理起来会非常麻烦。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#               表示此为注释,将被Git忽略
*.a             表示忽略所有 .a 结尾的文件
!lib.a          表示但lib.a除外
/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；
doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt
 
bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
/bin:           表示忽略根目录下的bin文件
/*.c:           表示忽略cat.c，不忽略 build/cat.c
debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj
**/foo:         表示忽略/foo,a/foo,a/b/foo等
a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等
!/bin/run.sh    表示不忽略bin目录下的run.sh文件
*.log:          表示忽略所有 .log 文件
config.php:     表示忽略当前路径的 config.php 文件
 
/mtk/           表示过滤整个文件夹
*.zip           表示过滤所有.zip文件
/mtk/do.c       表示过滤某个具体文件


被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。
 
需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：
!*.zip
!/mtk/one.txt
 
唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？
想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：
/mtk/*
!/mtk/one.txt
 
假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！
注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！
 
----------------------------------------------------------------------------------
还有一些规则如下：
fd1/*
说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；
 
/fd1/*
说明：忽略根目录下的 /fd1/ 目录的全部内容；
 
/*
!.gitignore
!/fw/ 
/fw/*
!/fw/bin/
!/fw/sf/
说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你已经把不想上传的文件上传到了git仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后pull代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore文件中添加这些你想忽略的文件，然后再push到远程仓库。&lt;/p&gt;
&lt;p&gt;gitignor忽略规则查看 如果你发下.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git check-ignore -v xxx.js&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;editorconfig文件的作用&#34;&gt;.editorconfig文件的作用&lt;/h1&gt;
&lt;h2 id=&#34;基本介绍&#34;&gt;基本介绍&lt;/h2&gt;
&lt;p&gt;主要用于统一编辑代码时的风格,其中主要统一的是缩进的风格&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件形式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.editorconfig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有些编辑器自带了对这个文件的支持，无需安装插件。有些则需要再自行安装相应插件。&lt;/p&gt;
&lt;p&gt;在 VS Code 中，创建好文件和安装好插件后，需要重启编辑器，但是此时只是修改编辑器的编辑设置，并不会将你已经存在的代码进行规范，可以通过快捷键格式化：&lt;code&gt;shift + alt + F&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置信息&#34;&gt;配置信息&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
# 表明这是最顶层的配置文件，这样才会停止继续向上查找 .editorconfig 文件；
# 查找的 .editorconfig 文件是从顶层开始读取的，类似变量作用域的效果，内部
# 的 .editorconfig 文件属性优先级更高
root = true

# 指定作用文件格式
[*]

# 缩进的类型 [space | tab]
indent_style = space

# 缩进的大小 
# tab_width: 设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。
indent_size = 2

# 定义换行符 [lf | cr | crlf]
end_of_line = lf

# 编码格式。支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。
charset = utf-8

# 是否除去换行行首的任意空白字符
trim_trailing_whitespace = false

# 文件是否以一个空白行结尾 [true | false]
insert_final_newline = true

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/git/" term="git" label="git" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Psutil库</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/psutil%E5%BA%93/" />
            <id>https://chenbokaix250.github.io/tech/psutil%E5%BA%93/</id>
            <updated>2021-01-23T11:39:39&#43;08:00</updated>
            <published>2021-01-23T11:37:53&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">psutil库 用Python来编写脚本简化日常的运维工作是Python的一个重要用途……</summary>
            
                <content type="html">&lt;h1 id=&#34;psutil库&#34;&gt;psutil库&lt;/h1&gt;
&lt;p&gt;用Python来编写脚本简化日常的运维工作是Python的一个重要用途。在Linux下，有许多系统命令可以让我们时刻监控系统运行的状态，如ps，top，free等等。要获取这些系统信息，Python可以通过subprocess模块调用并获取结果。但这样做显得很麻烦，尤其是要写很多解析代码。&lt;/p&gt;
&lt;p&gt;在Python中获取系统信息的另一个好办法是使用psutil这个第三方模块。顾名思义，psutil = process and system utilities，它不仅可以通过一两行代码实现系统监控，还可以跨平台使用，支持Linux／UNIX／OSX／Windows等，是系统管理员和运维小伙伴不可或缺的必备模块。&lt;/p&gt;
&lt;h2 id=&#34;获取cpu信息&#34;&gt;获取CPU信息&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import psutil
psutil.cpu_count()  #8 是8核非超线程
psutil.cpu_count(logical=False) #4 是4核超线程
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;统计CPU的用户/系统/空闲时间&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; psutil.cpu_times()
scputimes(user=10963.31, nice=0.0, system=5138.67, idle=356102.45)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;获取内存信息&#34;&gt;获取内存信息&lt;/h3&gt;
&lt;p&gt;使用psutil获取物理内存和交换内存信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; psutil.virtual_memory()
svmem(total=8589934592, available=2866520064, percent=66.6, used=7201386496, free=216178688, active=3342192640, inactive=2650341376, wired=1208852480)
&amp;gt;&amp;gt;&amp;gt; psutil.swap_memory()
sswap(total=1073741824, used=150732800, free=923009024, percent=14.0, sin=10705981440, sout=40353792)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回的是字节为单位的整数，可以看到，总内存大小是8589934592 = 8 GB，已用7201386496 = 6.7 GB，使用了66.6%。&lt;/p&gt;
&lt;p&gt;而交换区大小是1073741824 = 1 GB。&lt;/p&gt;
&lt;h3 id=&#34;获取硬盘信息&#34;&gt;获取硬盘信息&lt;/h3&gt;
&lt;p&gt;通过psutil获取磁盘分区/磁盘使用率和磁盘IO信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; psutil.disk_partitions() # 磁盘分区信息
[sdiskpart(device=&#39;/dev/disk1&#39;, mountpoint=&#39;/&#39;, fstype=&#39;hfs&#39;, opts=&#39;rw,local,rootfs,dovolfs,journaled,multilabel&#39;)]
&amp;gt;&amp;gt;&amp;gt; psutil.disk_usage(&#39;/&#39;) # 磁盘使用情况
sdiskusage(total=998982549504, used=390880133120, free=607840272384, percent=39.1)
&amp;gt;&amp;gt;&amp;gt; psutil.disk_io_counters() # 磁盘IO
sdiskio(read_count=988513, write_count=274457, read_bytes=14856830464, write_bytes=17509420032, read_time=2228966, write_time=1618405)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，磁盘&#39;/&#39;的总容量是998982549504 = 930 GB，使用了39.1%。文件格式是HFS，opts中包含rw表示可读写，journaled表示支持日志。&lt;/p&gt;
&lt;h3 id=&#34;获取网络信息&#34;&gt;获取网络信息&lt;/h3&gt;
&lt;p&gt;psutil可以获取网络接口和网络连接信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; psutil.net_io_counters() # 获取网络读写字节／包的个数
snetio(bytes_sent=3885744870, bytes_recv=10357676702, packets_sent=10613069, packets_recv=10423357, errin=0, errout=0, dropin=0, dropout=0)
&amp;gt;&amp;gt;&amp;gt; psutil.net_if_addrs() # 获取网络接口信息
{
  &#39;lo0&#39;: [snic(family=&amp;lt;AddressFamily.AF_INET: 2&amp;gt;, address=&#39;127.0.0.1&#39;, netmask=&#39;255.0.0.0&#39;), ...],
  &#39;en1&#39;: [snic(family=&amp;lt;AddressFamily.AF_INET: 2&amp;gt;, address=&#39;10.0.1.80&#39;, netmask=&#39;255.255.255.0&#39;), ...],
  &#39;en0&#39;: [...],
  &#39;en2&#39;: [...],
  &#39;bridge0&#39;: [...]
}
&amp;gt;&amp;gt;&amp;gt; psutil.net_if_stats() # 获取网络接口状态
{
  &#39;lo0&#39;: snicstats(isup=True, duplex=&amp;lt;NicDuplex.NIC_DUPLEX_UNKNOWN: 0&amp;gt;, speed=0, mtu=16384),
  &#39;en0&#39;: snicstats(isup=True, duplex=&amp;lt;NicDuplex.NIC_DUPLEX_UNKNOWN: 0&amp;gt;, speed=0, mtu=1500),
  &#39;en1&#39;: snicstats(...),
  &#39;en2&#39;: snicstats(...),
  &#39;bridge0&#39;: snicstats(...)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要获取当前网络连接信息,使用&lt;code&gt;net_connections()&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; psutil.net_connections()
Traceback (most recent call last):
  ...
PermissionError: [Errno 1] Operation not permitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  ...
psutil.AccessDenied: psutil.AccessDenied (pid=3847)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;获取进程信息&#34;&gt;获取进程信息&lt;/h3&gt;
&lt;p&gt;通过psutil可以获取到所有进程的详细信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; psutil.pids() # 所有进程ID
[3865, 3864, 3863, 3856, 3855, 3853, 3776, ..., 45, 44, 1, 0]
&amp;gt;&amp;gt;&amp;gt; p = psutil.Process(3776) # 获取指定进程ID=3776，其实就是当前Python交互环境
&amp;gt;&amp;gt;&amp;gt; p.name() # 进程名称
&#39;python3.6&#39;
&amp;gt;&amp;gt;&amp;gt; p.exe() # 进程exe路径
&#39;/Users/michael/anaconda3/bin/python3.6&#39;
&amp;gt;&amp;gt;&amp;gt; p.cwd() # 进程工作目录
&#39;/Users/michael&#39;
&amp;gt;&amp;gt;&amp;gt; p.cmdline() # 进程启动的命令行
[&#39;python3&#39;]
&amp;gt;&amp;gt;&amp;gt; p.ppid() # 父进程ID
3765
&amp;gt;&amp;gt;&amp;gt; p.parent() # 父进程
&amp;lt;psutil.Process(pid=3765, name=&#39;bash&#39;) at 4503144040&amp;gt;
&amp;gt;&amp;gt;&amp;gt; p.children() # 子进程列表
[]
&amp;gt;&amp;gt;&amp;gt; p.status() # 进程状态
&#39;running&#39;
&amp;gt;&amp;gt;&amp;gt; p.username() # 进程用户名
&#39;michael&#39;
&amp;gt;&amp;gt;&amp;gt; p.create_time() # 进程创建时间
1511052731.120333
&amp;gt;&amp;gt;&amp;gt; p.terminal() # 进程终端
&#39;/dev/ttys002&#39;
&amp;gt;&amp;gt;&amp;gt; p.cpu_times() # 进程使用的CPU时间
pcputimes(user=0.081150144, system=0.053269812, children_user=0.0, children_system=0.0)
&amp;gt;&amp;gt;&amp;gt; p.memory_info() # 进程使用的内存
pmem(rss=8310784, vms=2481725440, pfaults=3207, pageins=18)
&amp;gt;&amp;gt;&amp;gt; p.open_files() # 进程打开的文件
[]
&amp;gt;&amp;gt;&amp;gt; p.connections() # 进程相关网络连接
[]
&amp;gt;&amp;gt;&amp;gt; p.num_threads() # 进程的线程数量
1
&amp;gt;&amp;gt;&amp;gt; p.threads() # 所有线程信息
[pthread(id=1, user_time=0.090318, system_time=0.062736)]
&amp;gt;&amp;gt;&amp;gt; p.environ() # 进程环境变量
{&#39;SHELL&#39;: &#39;/bin/bash&#39;, &#39;PATH&#39;: &#39;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:...&#39;, &#39;PWD&#39;: &#39;/Users/michael&#39;, &#39;LANG&#39;: &#39;zh_CN.UTF-8&#39;, ...}
&amp;gt;&amp;gt;&amp;gt; p.terminate() # 结束进程
Terminated: 15 &amp;lt;-- 自己把自己结束了
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;psutil使得Python程序获取系统信息变得易如反掌。&lt;/p&gt;
&lt;p&gt;psutil还可以获取用户信息、Windows服务等很多有用的系统信息.&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python语法糖</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python%E8%AF%AD%E6%B3%95%E7%B3%96/" />
            <id>https://chenbokaix250.github.io/tech/python%E8%AF%AD%E6%B3%95%E7%B3%96/</id>
            <updated>2021-01-23T11:40:32&#43;08:00</updated>
            <published>2021-01-23T10:42:44&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Python中的几个语法糖 语法糖是编程过程中的一些特殊写法 最近遇到的几个Python……</summary>
            
                <content type="html">&lt;h1 id=&#34;python中的几个语法糖&#34;&gt;Python中的几个语法糖&lt;/h1&gt;
&lt;p&gt;语法糖是编程过程中的一些特殊写法&lt;/p&gt;
&lt;p&gt;最近遇到的几个Python中的语法糖 记录一下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;长数字写法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一亿 可以通过下划线分割&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = 1000000
&amp;gt;&amp;gt;&amp;gt; b = 10_000_00
&amp;gt;&amp;gt;&amp;gt; a
1000000
&amp;gt;&amp;gt;&amp;gt; b
1000000
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;交换变量的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python中可以通过&lt;code&gt;a,b=b,a&lt;/code&gt;来对变量进行交换&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;判断变量在那个范围内&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以直接写
&lt;code&gt;if 90&amp;lt;=a&amp;lt;=100&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;列表拼接
可以通过加号,来拼接列表&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4,5]
&amp;gt;&amp;gt;&amp;gt; b = [6,7,8]
&amp;gt;&amp;gt;&amp;gt; a+b
[1, 2, 3, 4, 5, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;列表切片&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = [1,2,3,4,5,6,7,8,9]

#切片正数第三个到倒数第二个
a[3:-2]

#前三个
a[:3]
#后三个
a[-3:]

&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;打包与解包&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;x,y,z = a   //解包

a = (x,y,z) //打包

&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;with 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用读取文件流时,需要三步:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;read&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;异常处理(外加)
利用with时,自动关闭文件,自动处理文件异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;列表解析式&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#传统写法
a = [1,2,3,4]
for e in a:
    b.append(e+233)

#新写法
b = [e+233 for e in a]

&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;快速构造字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过乘法完成字符串构造&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;print(&#39;-&#39;*20)
--------------------
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">算法3——算法进阶</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E7%AE%97%E6%B3%953%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/" />
            <id>https://chenbokaix250.github.io/tech/%E7%AE%97%E6%B3%953%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/</id>
            <updated>2021-01-12T11:54:50&#43;08:00</updated>
            <published>2021-01-12T11:36:14&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">算法进阶 贪心算法 对问题求解时,总是做出在当前看来是最好的选择.不从整体最优上加以考虑……</summary>
            
                <content type="html">&lt;h1 id=&#34;算法进阶&#34;&gt;算法进阶&lt;/h1&gt;
&lt;h2 id=&#34;贪心算法&#34;&gt;贪心算法&lt;/h2&gt;
&lt;p&gt;对问题求解时,总是做出在当前看来是最好的选择.不从整体最优上加以考虑,所做出的是在某种意义上的局部最优解.
不保证会得到最优解,但是在某些问题上贪心算法的解就是最优解.
要会判定一个问题能否用贪心算法来计算.&lt;/p&gt;
&lt;p&gt;特殊问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找零问题&lt;/li&gt;
&lt;li&gt;背包问题(0-1背包/分数背包)&lt;/li&gt;
&lt;li&gt;拼接最大数字问题&lt;/li&gt;
&lt;li&gt;活动选择问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数字拼接&lt;/strong&gt;
有n个非负整数,将其按照字符串拼接的方式拼接为一个整数,如何拼接使其最大&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from functools import cmp_to_key
li = [32,94,128,1286,6,71]

def xy_cmp(x,y):
    if x+y &amp;lt; y+x:
        return 1
    elif x+y &amp;gt; y+x:
        return -1
    else:
        return 0


def number_join(li):
    li = list(map(str,li))
    li.sort(key=cmp_to_key(xy_cmp))
    return &amp;quot;&amp;quot;.join(li)

print(number_join(li))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;活动选择问题&lt;/strong&gt;
假设有n个活动,这些活动要占用用一片场地,而场地在某时刻只能提供一个活动使用.
安排哪些活动能够使该场地举办的活动个数最多?&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;activities = [(1,4),(3,5),(0,6),(5,7),(3,9),(5,9),(6,10),(8,11),(8,12),(2,14),(12,16)]

activities.sort(key=lambda x:x[1])

def activity_selection(a):
    res = [a[0]]
    for i in range(1,len(a)):
        if a[i][0] &amp;gt;= res[-1][1]:
            res.append(a[i])
    return res

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;动态规划&#34;&gt;动态规划&lt;/h2&gt;
&lt;p&gt;最优子结构&lt;/p&gt;
&lt;p&gt;可以将求解规模为n的原问题,划分为规模更小的子问题
组合两个子问题的最优解,并在所有肯恩的方案中选取组合收益最大的,构成原问题的最优解
&lt;strong&gt;最优子结构&lt;/strong&gt;:问题的最优解由相关子问题的最优解组合而成,这些子问题可以独立求解&lt;/p&gt;
&lt;p&gt;自顶向下 复杂度爆炸&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def cut_rod_recurision(p,n):
    if n==0:
        return 0
    else:
        res = p[n]
        for i in range(1,n):
            res = max(res,cut_rod_recurision(p,i) + cut_rod_recurision(p,n-i))
        return res

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自下而上 复杂度可控&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def cut_rod_extend(p,n):
    r = [0]
    s = [0]
    for i in range(1,n+1):
        res_r = 0 #价格的最大值
        res_s = 0 #价格最大值对应方案的左边不切割部分的长度
        for j in range(1,i+1):
            if p[j] + r[i - j] &amp;gt; res_r:
                res_r = p[j] + r[i-j]
                res_s = j
        r.append(res_r)
        s.append(res_s)
    return r[n],s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重构解(输出最优方案)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def cut_rod_solution(p,n):
    r,s = cut_rod_extend(p,n)
    ans = []
    while n &amp;gt; 0:
        ans.append(s[n])
        n -= s[n]
    return ans
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;动态规划问题关键特征&#34;&gt;动态规划问题关键特征&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;最优子结构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原问题的最优解中涉及多少个子问题&lt;/li&gt;
&lt;li&gt;在确定最优解使用哪些子问题时,需要考虑多少种选择
&lt;strong&gt;重叠子问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最长公共子序列问题&#34;&gt;最长公共子序列问题&lt;/h3&gt;
&lt;h3 id=&#34;欧几里得算法问题&#34;&gt;欧几里得算法问题&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def gcd(a,b):
    if b == 0:
        return a
    else:
        return gcd(b,a%b)

def gcd2(a,b):
    while b &amp;gt; 0:
        r = a % b
        a = b
        b = r
    return a
print(gcd(12,16))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rsa加密算法&#34;&gt;RSA加密算法&lt;/h2&gt;
&lt;p&gt;传统密码:加密算法是秘密的&lt;/p&gt;
&lt;p&gt;现代密码系统:加密算法是公开的,秘钥是秘密的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密&lt;/li&gt;
&lt;li&gt;非对称加密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RSA非对称加密系统:
公钥:用来加密,是公开的
私钥:用来解密,是私有的&lt;/p&gt;
&lt;p&gt;RSA加密算法过程&lt;/p&gt;
&lt;p&gt;随机选取两个质数p和q
计算n=p&lt;em&gt;q
选取一个与φ(n)互质的小奇数e,φ(n)=(p-1)(q-1)
对模φ(n),计算e的乘法逆元d,即满足(e&lt;/em&gt;d) mod φ(n) = 1
公钥(e,n)  私钥(d,n)&lt;/p&gt;
&lt;p&gt;加密过程:c = (m^e) mod n
解密过程:m = (c^d) mod n&lt;/p&gt;
&lt;h2 id=&#34;github-address&#34;&gt;github address:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://github.com/chenbokaix250/ForSomeForMySelf&lt;/code&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/algorithm/" term="algorithm" label="algorithm" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">算法2——数据结构</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E7%AE%97%E6%B3%952%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <id>https://chenbokaix250.github.io/tech/%E7%AE%97%E6%B3%952%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
            <updated>2021-01-12T11:54:43&#43;08:00</updated>
            <published>2021-01-12T11:35:31&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">数据结构 数据结构按照逻辑结构分为线性结构/树结构/图结构 线性结构 一对一 树结构 一对多 图……</summary>
            
                <content type="html">&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;
&lt;p&gt;数据结构按照逻辑结构分为线性结构/树结构/图结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性结构 一对一&lt;/li&gt;
&lt;li&gt;树结构 一对多&lt;/li&gt;
&lt;li&gt;图结构 一对多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;列表&#34;&gt;列表&lt;/h2&gt;
&lt;p&gt;列表(其他语言也称为数组)
数组和列表有两点不同:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数组元素类型要相同&lt;/li&gt;
&lt;li&gt;数组长度固定&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;栈&#34;&gt;栈&lt;/h2&gt;
&lt;p&gt;数据集合 只能在一端插入或删除操作的列表
栈的特点:后进先出
基本操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进栈   push&lt;/li&gt;
&lt;li&gt;出栈   pop&lt;/li&gt;
&lt;li&gt;取栈顶 gettop&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#栈的基本实现
class Stack:
    def __init__(self):
        self.stack = []
    def push(self,element):
        self.stack.append(element)
    def pop(self):
        return self.stack.pop()
    def get_top(self):
        if len(self.stack) &amp;gt; 0:
            return self.stack[-1]
        else:
            return None
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;栈的应用 &lt;strong&gt;括号匹配问题&lt;/strong&gt;
给一个字符串/其中包含小括号/中括号/大括号,求该字符串中的括号是否匹配.&lt;/p&gt;
&lt;h2 id=&#34;队列&#34;&gt;队列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;队列(Queue)是一个数据集合,仅允许在列表的一端进行插入,另一端进行删除&lt;/li&gt;
&lt;li&gt;进行插入的一端称为队尾(rear),插入动作称为进队或入队&lt;/li&gt;
&lt;li&gt;进行删除的一端称为队头(front),删除动作称为出队&lt;/li&gt;
&lt;li&gt;队列的性质,先进先出(First-in,First-out)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;环形队列&#34;&gt;环形队列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当队尾指针front=Maxsize-1时,再前进一个位置就自动到0&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;队首指针前进1:front=(front+1)%MaxSize&lt;/li&gt;
&lt;li&gt;队尾指针前进1:rear=(rear+1)%MaxSize&lt;/li&gt;
&lt;li&gt;队空条件:rear == front&lt;/li&gt;
&lt;li&gt;队满条件:(rear+1)%MaxSize == front&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# __*__ coding=utf-8 __*__

class Queue:
    def __init__(self,size=100):
        self.queue = [0 for _ in range(size)]
        self.size = size
        self.rear = 0
        self.front = 0

    def push(self,element):
        if not self.is_filled():
            self.rear = (self.rear + 1)%self.size
            self.queue[self.rear] = element
        else:
            raise IndexError(&amp;quot;Queue is filled.&amp;quot;)

    def pop(self):
        if not self.is_empty():
            self.front = (self.front + 1) % self.size
            return self.queue[self.front]

    def is_empty(self):
        return self.rear == self.front

    def is_filled(self):
        return (self.rear + 1) % self.size == self.front

q = Queue(5)
for i in range(4):
    q.push(i)
print(q.is_filled())

print(q.pop())
q.push(4)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;栈和队列的应用问题-迷宫问题&#34;&gt;栈和队列的应用问题 迷宫问题&lt;/h2&gt;
&lt;p&gt;深度优先搜索&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回溯法&lt;/strong&gt;
思路:从一个节点开始,任意找到下一个能走的点,当找不到能走的点时,退回上一个点寻找是否有其他方向的点.&lt;/p&gt;
&lt;p&gt;广度优先搜索
思路:从一个节点开始,寻找所有接下来能继续走的点,继续不断寻找,直到找到出口.&lt;/p&gt;
&lt;h2 id=&#34;链表&#34;&gt;链表&lt;/h2&gt;
&lt;p&gt;链表是由一系列节点组成的元素集合.每个节点包含两部分,数据域item和指向下一个节点的指针next.通过节点之间的相互连接,最终串联成一个链表.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Node(object):
    def __init__(self):
        self.item = item
        self.next = None
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;创建链表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;头插法
尾插法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# __*__ coding=utf-8 __*__

class Node:
    def __init__(self,item):
        self.item = item
        self.next = None

def create_linklist(li):
    head = Node(li[0])
    for element in li[1:]:
        node = Node(element)
        node.next = head
        head = node

    return head
def print_linklist(lk):
    while lk:
        print(lk.item,end=&#39;,&#39;)
        lk = lk.next
lk = create_linklist([1,2,3])
print_linklist(lk)
print(lk.item)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;链表的插入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;p.next = curNode.next
curNode.next = p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;链表的删除&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;p = curNode.next
curNode.next = curNode.next.next
del p
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;双链表&#34;&gt;双链表&lt;/h3&gt;
&lt;p&gt;双链表的每个节点有两个指针:一个指向后一个节点,另一个指向前一个节点&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Node(object):
    def __init__(self):
        self.item = item
        self.next = next
        self.prior = prior
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;双链表的插入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;p.next = curNode.next
curNode.next.prior = p
p.prior = curNode
curNode.next = p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;双链表的删除&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;p = curNode.next
curNode.next = p.next
p.next.prior = curNode
del p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;链表--复杂度分析&lt;/p&gt;
&lt;p&gt;顺序表与链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按元素值查找&lt;/li&gt;
&lt;li&gt;按下标查找&lt;/li&gt;
&lt;li&gt;在某元素后插入&lt;/li&gt;
&lt;li&gt;删除某元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链表的插入和删除的操作明显快于顺序表
链表的内存可以更灵活的分配
链表这种链式存储的数据结构对树和图的结构有很大的启发性&lt;/p&gt;
&lt;h2 id=&#34;哈希表&#34;&gt;哈希表&lt;/h2&gt;
&lt;p&gt;哈希表是一个通过哈希函数来计算数据存储位置的数据结构,通常支持操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert(key,value):插入键值对(key,value)&lt;/li&gt;
&lt;li&gt;get(key):如果存在键为key的键值对则返回其value,否则返回空值&lt;/li&gt;
&lt;li&gt;delete(key):产出键值为key的键值对&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接寻址表
当关键字的全域U比较小时,直接寻址是一种简单而有效的方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接寻址表 + 哈希 = 哈希表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接寻址表:key为k的元素放在k位置上
改进直接寻址表:哈希(Hashing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建大小为m的寻址表T&lt;/li&gt;
&lt;li&gt;key为k的元素放到h(k)位置上&lt;/li&gt;
&lt;li&gt;h(k)是一个函数,其将域U映射到表T[0,1,...,m-1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希冲突&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放寻址法&lt;/li&gt;
&lt;li&gt;拉链法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字典与集合都是通过哈希表来实现的&lt;/p&gt;
&lt;h2 id=&#34;树与二叉树&#34;&gt;树与二叉树&lt;/h2&gt;
&lt;p&gt;一个基于树的简单文件系统的实现&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Node:
    def __init__(self,name,type=&#39;dir&#39;):
        self.name = name
        self.type = type
        self.children = []
        self.parent = None

    def __repr__(self):
        return self.name

class FileSystemTree:
    def __init__(self):
        self.root = Node(&amp;quot;/&amp;quot;)
        self.now = self.root

    def mkdir(self,name):
        #name 以 / 结尾
        if name[-1] != &amp;quot;/&amp;quot;:
            name += &amp;quot;/&amp;quot;
        node = Node(name)
        self.now.children.append(node)
        node.parent = self.now

    def ls(self):
        return self.now.children

    def cd(self,name):
        if name[-1] != &amp;quot;/&amp;quot;:
            name += &amp;quot;/&amp;quot;
        for child in self.now.children:
            if child.name == name:
                self.now = child
                return
        raise ValueError(&amp;quot;invalid dir.&amp;quot;)



tree = FileSystemTree()
tree.mkdir(&amp;quot;var/&amp;quot;)
tree.mkdir(&amp;quot;bin/&amp;quot;)
tree.mkdir(&amp;quot;usr/&amp;quot;)

tree.cd(&amp;quot;bin/&amp;quot;)
tree.mkdir(&amp;quot;python/&amp;quot;)

print(tree.ls())
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二叉树的实现&#34;&gt;二叉树的实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class BiTreeNode:
    def __init__(self,data):
        self.data = data
        self.lchild = None
        self.rchild = None

a = BiTreeNode(&amp;quot;A&amp;quot;)
b = BiTreeNode(&amp;quot;B&amp;quot;)
c = BiTreeNode(&amp;quot;C&amp;quot;)
d = BiTreeNode(&amp;quot;D&amp;quot;)
e = BiTreeNode(&amp;quot;E&amp;quot;)
f = BiTreeNode(&amp;quot;F&amp;quot;)
g = BiTreeNode(&amp;quot;G&amp;quot;)

e.lchild = a
e.rchild = g
a.rchild = c
c.lchild = b
c.rchild = d
g.rchild = f

root = e
print(root.lchild.rchild.data)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##二叉树的遍历&lt;/p&gt;
&lt;p&gt;二叉树的遍历方式:
&lt;img src=&#34;https://i.loli.net/2021/01/04/4Mbv5yUN8ujet1P.png&#34; alt=&#34;截屏2021-01-04 下午4.11.47.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前序遍历:EACBDGF&lt;/li&gt;
&lt;li&gt;中序遍历:ABCDEGF&lt;/li&gt;
&lt;li&gt;后序遍历:BDCAFGE&lt;/li&gt;
&lt;li&gt;层次遍历:EAGCFBD&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#四种遍历方法的实现
def pre_order(root):
    if root:
        print(root.data,end=&amp;quot;,&amp;quot;)
        pre_order(root.lchild)
        pre_order(root.rchild)
#pre_order(root)

def in_order(root):
    if root:
        in_order(root.lchild)
        print(root.data,end=&amp;quot;,&amp;quot;)
        in_order(root.rchild)
#in_order(root)
def post_order(root):
    if root:
        post_order(root.lchild)
        post_order(root.rchild)
        print(root.data,end=&amp;quot;,&amp;quot;)
#post_order(root)

def level_order(root):
    queue = deque()
    queue.append(root)
    while len(queue) &amp;gt; 0:
        node = queue.popleft()
        print(node.data,end=&amp;quot;,&amp;quot;)
        if node.lchild:
            queue.append(node.lchild)
        if node.rchild:
            queue.append(node.rchild)
level_order(root)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;二叉树的删除操作&#34;&gt;二叉树的删除操作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;如果要删除的节点是叶子节点:直接删除.&lt;/li&gt;
&lt;li&gt;如果要删除的节点只有一个孩子,将此节点的父亲与孩子连接,然后删除该节点.&lt;/li&gt;
&lt;li&gt;如果要删除的节点有两个孩子:将其右子树的最小节点(该节点最多有一个右孩子)删除,并替换当前节点.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    def __remove_node_1(self, node):
        if not node.parent:
            self.root = None
        if node == node.parent.lchild:
            node.parent.lchild = None
        else:
            node.parent.rchild = None

    def __remove_node_2l(self, node):
        if not node.parent:
            self.root = node.lchild
            node.lchild.parent = None
        elif node == node.parent.lchild:
            node.parent.lchild = node.lchild
            node.lchild.parent = node.parent
        else:
            node.parent.rchild = node.lchild
            node.lchild.parent = node.parent

    def __remove_node_22(self, node):
        if not node.parent:
            self.root = node.rchild
        elif node == node.parent.lchild:
            node.parent.lchild = node.rchild
            node.rchild.parent = node.parent
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;二叉搜索树的效率&#34;&gt;二叉搜索树的效率&lt;/h3&gt;
&lt;p&gt;平均情况下,二叉搜索树进行搜索的时间复杂度为O(lgn)
最坏情况下,二叉搜索树可能非常偏斜
解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机化插入&lt;/li&gt;
&lt;li&gt;AVL树&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avl树&#34;&gt;AVL树&lt;/h3&gt;
&lt;p&gt;AVL树是一棵自平衡的二叉搜索树
AVL树具有以下性质:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根的左右子树的高度之差的绝对值不能超过1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根的左右子树都是平衡二叉树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入一个节点可能会破坏AVL树的平衡,可以通过 &lt;strong&gt;旋转&lt;/strong&gt;操作进行修正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AVL插入:&lt;/p&gt;
&lt;p&gt;不平衡是由于对K的右孩子的右子树插入导致的 -- &lt;strong&gt;左旋&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不平衡是由于对K的左孩子的左子树插入导致的 -- &lt;strong&gt;右旋&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不平衡是由于对K的右孩子的左子树插入导致的: &lt;strong&gt;右旋-左旋&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不平衡是由于对K的左孩子的右子树插入导致的: &lt;strong&gt;左旋-右旋&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;github-address&#34;&gt;github address:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://github.com/chenbokaix250/ForSomeForMySelf&lt;/code&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/algorithm/" term="algorithm" label="algorithm" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">算法1——排序</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E7%AE%97%E6%B3%951%E6%8E%92%E5%BA%8F/" />
            <id>https://chenbokaix250.github.io/tech/%E7%AE%97%E6%B3%951%E6%8E%92%E5%BA%8F/</id>
            <updated>2021-01-12T11:54:34&#43;08:00</updated>
            <published>2021-01-12T11:32:07&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">算法入门 课程第一部分 排序 程序等于数据结构+算法 复杂度 时间复杂度 时间复杂度排序 O(1) &amp;lt; O(logn)&amp;lt;O(n)&amp;lt;O(nlogn)&amp;lt;O(n2)&amp;lt;O(n2logn)&amp;lt;O(n3) 快……</summary>
            
                <content type="html">&lt;h1 id=&#34;算法入门&#34;&gt;算法入门&lt;/h1&gt;
&lt;p&gt;课程第一部分 排序&lt;/p&gt;
&lt;p&gt;程序等于数据结构+算法&lt;/p&gt;
&lt;h2 id=&#34;复杂度&#34;&gt;复杂度&lt;/h2&gt;
&lt;h3 id=&#34;时间复杂度&#34;&gt;时间复杂度&lt;/h3&gt;
&lt;p&gt;时间复杂度排序&lt;/p&gt;
&lt;p&gt;O(1) &amp;lt; O(logn)&amp;lt;O(n)&amp;lt;O(nlogn)&amp;lt;O(n&lt;sup&gt;2&lt;/sup&gt;)&amp;lt;O(n&lt;sup&gt;2&lt;/sup&gt;logn)&amp;lt;O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/p&gt;
&lt;p&gt;快速判定算法复杂度(绝大多数情况):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定问题规模n&lt;/li&gt;
&lt;li&gt;循环减半过程 -&amp;gt; logn&lt;/li&gt;
&lt;li&gt;k层关于n的循环-&amp;gt;n&lt;sup&gt;k&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂情况:根据算法执行过程判端&lt;/p&gt;
&lt;h3 id=&#34;空间复杂度&#34;&gt;空间复杂度&lt;/h3&gt;
&lt;p&gt;空间复杂度: 用来评估算法内存占用大小的式子&lt;/p&gt;
&lt;h2 id=&#34;递归&#34;&gt;递归&lt;/h2&gt;
&lt;p&gt;递归的两个特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用自身&lt;/li&gt;
&lt;li&gt;结束条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;汉诺塔问题&lt;/p&gt;
&lt;p&gt;n个盘子时:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把个盘子从A经过C移动到B&lt;/li&gt;
&lt;li&gt;把第n个盘子从A移动到C&lt;/li&gt;
&lt;li&gt;把n-1盘子从B经过A移动到C&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
def hanoi(n,a,b,c):
    if n &amp;gt; 0:
        hanoi(n-1,a,c,b)
        print(&amp;quot;moving form %s to %s&amp;quot;%(a,c))
        hanoi(n-1,b,a,c)


hanoi(2,&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查找问题&#34;&gt;查找问题&lt;/h2&gt;
&lt;p&gt;顺序查找&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def linear_search(li,val):
    for ind,v in enumerate(li):
        if v== val:
            return ind
        else:
            return None
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二分查找&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def binary_search(li,val):
    left = 0
    right = len(li) - 1
    while left &amp;lt;= right :
        mid = (left + right) // 2
        if li(mid) == val:
            return mid
        elif li(mid) &amp;gt; val:
            right = mid - 1
        elif li(mid) &amp;lt; val:
            left = mid + 1
    return None
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;列表排序&#34;&gt;列表排序&lt;/h2&gt;
&lt;h3 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;列表每两个相邻的数,如果前面比后面大,则交换这两个数&lt;/li&gt;
&lt;li&gt;一趟排序完成后,则无序区减少一个数,有序区增加一个数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键点: 趟 无序区数量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def bubble_sort(li):
    for i in range(len(li)- 1):
        exchange = False
        for j in range(len(li) - 1):
            if li[j] &amp;gt; li[j+1]:
                li[j],li[j+1]=li[j+1],li[j]
                exchange = True
        print(li)
        if not exchange:
            return
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂度 O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;
&lt;h3 id=&#34;选择排序&#34;&gt;选择排序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一趟排序记录最小的数,放在第一个位置&lt;/li&gt;
&lt;li&gt;再一趟排序记录列表无序区最小的数,放到第二个位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键点:有序区与无序区最小值的位置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def select_sort_simple(li):
    li_new = []
    for i in range(len(li)):
        min_val = min(li)
        li_new.append(min_val)
        li.remove(min_val)

    return li_new

def select_sort(li):
    for i in range(len(li)-1):
        min_loc = i
        for j in range(i+1,len(li)):
            if li[j] &amp;lt; li[min_loc]:
                min_loc = j
        li[i],li[min_loc] = li[min_loc],li[i]
    return li
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂度 O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;
&lt;h3 id=&#34;插入排序&#34;&gt;插入排序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;初始时手里(有序区)只有一张牌&lt;/li&gt;
&lt;li&gt;每次(从无序区)摸一张牌,插入到手里已有牌的正确位置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def insert_sort(li):
    for i in range(1,len(li)):
        tmp = li[i]
        j= i -1
        while li[j] &amp;gt; tmp and j &amp;gt;= 0:
            li[j+1] = li[j]
            j -= 1
        li[j+1] = tmp

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂度 O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;
&lt;h3 id=&#34;快速排序&#34;&gt;快速排序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;取一个元素p,使元素p归位&lt;/li&gt;
&lt;li&gt;列表被p分成两部分,左边都比p小,右边都比p大&lt;/li&gt;
&lt;li&gt;递归完成排序&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def partition(li,left,right):
    tmp = li[left]
    while left&amp;lt;right:
        while left &amp;lt; right and li[right] &amp;gt;= tmp:
            right -= 1
        li[left] = li[right]
        while left &amp;lt; right and li[left] &amp;lt;= tmp:
            left += 1
        li[right] = li[left]

    li[left] = tmp
    return left

def quick_sort(li,left,right):
    if left&amp;lt;right:
        mid = partition(li,left,right)
        quick_sort(li,left,mid-1)
        quick_sort(li,mid+1,right)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂度O(nlogn)&lt;/p&gt;
&lt;h3 id=&#34;堆排序&#34;&gt;堆排序&lt;/h3&gt;
&lt;p&gt;树与二叉树&lt;/p&gt;
&lt;p&gt;树是一种可以递归定义的数据结构
树是由n个节点组成的集合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果n=0 ,那么这是一棵空树&lt;/li&gt;
&lt;li&gt;如果n&amp;gt;0 ,那存在1个节点作为树的根节点,其他节点可以分为m个集合,每个集合本身又是一棵树
树的一些概念:&lt;/li&gt;
&lt;li&gt;根节点,叶子节点&lt;/li&gt;
&lt;li&gt;树的深度(高度)&lt;/li&gt;
&lt;li&gt;树的度&lt;/li&gt;
&lt;li&gt;孩子节点/父节点&lt;/li&gt;
&lt;li&gt;子树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树:度不超过2的树&lt;/p&gt;
&lt;p&gt;满二叉树:层节点达到最大值
完全二叉树:叶节点只能出现在最下层和次下层,并且最下面一层的结点都集中在该层最左边的若干位置的二叉树.&lt;/p&gt;
&lt;p&gt;二叉树的存储方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链式存储方式&lt;/li&gt;
&lt;li&gt;顺序存储方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二叉树的顺序存储方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;父节点和左孩子节点变化下表的关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;i -&amp;gt; 2i+1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父节点和右孩子节点的编号下标的关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;i -&amp;gt; 2i+2&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;堆:一种特殊的完全二叉树结构&lt;/p&gt;
&lt;p&gt;大根堆:一棵完全二叉树,满足任一节点都比其他孩子节点大
小根堆:一棵完全二叉树,满足任一节点都比其他孩子节点小&lt;/p&gt;
&lt;p&gt;堆的向下调整&lt;/p&gt;
&lt;p&gt;当根节点的左右子树都是堆时,可以通过一次向下的调整来将其变换成一个堆.
堆的向下调整性质:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设根节点的左右子树都是堆,但根节点不满足堆的性质&lt;/li&gt;
&lt;li&gt;可以通过一次向下的调整来将其变成一个堆&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;堆排序过程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立堆&lt;/li&gt;
&lt;li&gt;得到堆顶元素,为最大元素&lt;/li&gt;
&lt;li&gt;去掉堆顶,将堆最后一个元素放在堆顶,此时可通过一次调整重新使堆有序&lt;/li&gt;
&lt;li&gt;堆顶元素为第二大元素&lt;/li&gt;
&lt;li&gt;重复步骤三,直到堆变空&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#堆排序

def sift(li,low,high):
    &amp;quot;&amp;quot;&amp;quot;
    :param li:列表
    :param low:堆的根节点位置
    :param high:堆的最后一个元素的位置
    :return:
    &amp;quot;&amp;quot;&amp;quot;
    i= low # i 最开始指向根节点
    j= 2 * i + 1 # j开始是左孩子
    tmp = li[low] # 把堆顶存起来
    while j &amp;lt;= high: # 只要j位置有数
        if j + 1 &amp;lt; high and li[j+1]&amp;gt;li[j]: #如果右孩子有并且比较大
            j = j+1 # j指向右孩子
        if li[j] &amp;gt; tmp:
            li[i] = li[j]
            i = j #往下看一层
            j = 2 * i + 1
        else: # tmp更大，把tmp放到i的位置上
            li[i] = tmp #把tmp放到某一级领导位置上
            break
    else:
        li[i] = tmp  # 把tmp放到叶子节点上

def heap_sort(li):
    n = len(li)
    for i in range((n-2)//2,-1,-1):
        # i表示建堆的时候调整的部分的根的下标
        sift(li,i,n-1)
    # 建堆完成
    print(li)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;时间复杂度 O(nlogn)&lt;/p&gt;
&lt;h3 id=&#34;堆的python内部模块的使用&#34;&gt;堆的python内部模块的使用&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import heapq #q-queue 优先队列

import random

li = list(range(100))

random.shuffle(li)

print(li)

heapq.heapify(li) # 建堆
#print(li)

for i in range(len(li)):
    print(heapq.heappop(li),end=&amp;quot; ,&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;topk问题堆排序&#34;&gt;topk问题(堆排序)&lt;/h2&gt;
&lt;p&gt;有n个数,设计算法得到前k大的数(k&amp;lt;N)&lt;/p&gt;
&lt;p&gt;思路:
排序后切片            O(nlogn)
排序LowB三人组        O(mn)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆排序方法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取列表前k个元素建立一个小根堆.堆顶是目前第k大的数&lt;/li&gt;
&lt;li&gt;依次向后遍历原列表,对于列表中的元素,如果小于堆顶,则忽略该元素;如果大于堆顶,则将堆顶更换为该元素,并且对堆进行一次调整.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;复杂度 O(mlogn)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;归并排序&#34;&gt;归并排序&lt;/h2&gt;
&lt;p&gt;假设现在的列表分两段有序,如何将其合成为一个有序列表&lt;/p&gt;
&lt;p&gt;这种操作称为一次归并&lt;/p&gt;
&lt;p&gt;归并使用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分解:将列表越分越小,直至分成一个元素&lt;/li&gt;
&lt;li&gt;终止条件:一个元素是有序的&lt;/li&gt;
&lt;li&gt;合并:将两个有序列表归并,列表越来越大&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def merge(li,low,mid,high):
    i = low
    j = mid+1
    ltmp = []
    while i&amp;lt;=mid and j&amp;lt;= high:
        if li[i] &amp;lt; li[j]:
            ltmp.append(li[i])
            i += 1
        else:
            ltmp.append(li[j])
            j += 1
    while i &amp;lt;= mid:
        ltmp.append(li[i])
        i += 1
    while j &amp;lt;= high:
        ltmp.append(li[j])
        j += 1
    li[low:high+1] = ltmp

def merge_sort(li,low,high):
    if low&amp;lt;high:
        mid = (low + high)//2
        merge_sort(li,low,mid)
        merge_sort(li,mid+1,high)
        merge(li,low,mid,high)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂度 O(nlogn)&lt;/p&gt;
&lt;p&gt;python内的sort方法 是基于归并排序的&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nb三人组-排序总结&#34;&gt;NB三人组 排序总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;三种排序算法的时间复杂度都是O(nlogn)&lt;/li&gt;
&lt;li&gt;运行时间: 快速排序&amp;lt;归并排序&amp;lt;堆排序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种排序算法的缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速排序:极端情况下排序效率低&lt;/li&gt;
&lt;li&gt;归并排序:需要额外的内存开销&lt;/li&gt;
&lt;li&gt;堆排序:在快的排序算法中相对较慢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/01/03/p9Gh1QCxVZJsdPo.png&#34; alt=&#34;截屏2021-01-03 下午12.04.03.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h2&gt;
&lt;h2 id=&#34;计数排序&#34;&gt;计数排序&lt;/h2&gt;
&lt;p&gt;对列表进行排序,已知列表中的数范围都在0到100之间.设计时间复杂度为O(n)的算法.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def count_sort(li,max_count=100):
    count = [0 for _ in range(max_count+1)]
    for val in li:
        count[val] += 1
    li.clear()
    for ind,val in enumerate(count):
        for i in range(val):
            li.append(ind)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂度 O(n)&lt;/p&gt;
&lt;h2 id=&#34;桶排序&#34;&gt;桶排序&lt;/h2&gt;
&lt;p&gt;在计数排序中,如果元素的范围比较大(比如在1到1亿之间),如何改造算法&lt;/p&gt;
&lt;p&gt;桶排序(Bucket Sort):首先将元素分在不同的桶中,再对每个桶中的元素排序&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def bucket_sort(li,n=100,max_num=10000):
    buckets = [[] for _ in range(n)]
    for var in li:
        i = min(var // (max_num // n) ,n-1)# i 表示var放在几号桶里
        buckets[i].append(var)
        #保持桶内的顺序
        for j in range(len(buckets[i])-1,0,-1):
            if buckets[i][j] &amp;lt; buckets[i][j-1]:
                buckets[i][j],buckets[i][j-1] = buckets[i][j-1],buckets[i][j]
            else:
                break
    sorted_li = []
    for buc in buckets:
        sorted_li.extend(buc)
    return sorted_li
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;桶排序的表现取决于数据的分布.也就是需要对不同数据排序时采取不同的分桶策略.&lt;/p&gt;
&lt;p&gt;平均情况时间复杂度 O(n+k)
最坏情况时间复杂度 O(n&lt;sup&gt;2&lt;/sup&gt;k)
空间复杂度 O(nk)&lt;/p&gt;
&lt;h2 id=&#34;基数排序&#34;&gt;基数排序&lt;/h2&gt;
&lt;p&gt;多关键字排序:加入现在有一个员工表,要求按照薪资排序,年龄相同的员工按照年龄排序&lt;/p&gt;
&lt;p&gt;先按照年龄进行排序,再按照薪资进行稳定的排序&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def radix_sort(li):
    max_num = max(li) # 最大值
    it= 0
    while 10 ** it&amp;lt;= max_num:
        buckets= [[] for _ in range（10）]
        for var in li:
            digit = (var // 10**it )%10
            buckets[digit].append(var)
        li.clear()
        for buc in buckets:
            li.extend(buc)

        it += 1
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;github-address&#34;&gt;github address:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;https://github.com/chenbokaix250/ForSomeForMySelf&lt;/code&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/algorithm/" term="algorithm" label="algorithm" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">2020完结</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/2020%E5%AE%8C%E7%BB%93/" />
            <id>https://chenbokaix250.github.io/life/2020%E5%AE%8C%E7%BB%93/</id>
            <updated>2021-01-02T08:41:17&#43;08:00</updated>
            <published>2020-12-22T17:08:44&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">2020年终 好恶取代了茫然，观念取代了迷惑，安全感取代了好奇心。 今年发生了很多事 很多……</summary>
            
                <content type="html">&lt;h1 id=&#34;2020年终&#34;&gt;2020年终&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;好恶取代了茫然，观念取代了迷惑，安全感取代了好奇心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年发生了很多事 很多很多事&lt;/p&gt;
&lt;p&gt;开年的疫情 后来最深的记忆就是口罩&lt;/p&gt;
&lt;p&gt;可能往后的很多年里 口罩将是2020年最深刻的记忆&lt;/p&gt;
&lt;p&gt;今年30岁了 无数次想起北京 无数次想起离职 无数次想愤然离席 但是 一切又在一次次的抑制中 平息 平息&lt;/p&gt;
&lt;p&gt;琐碎的事情越来越多 不能专注在技术上&lt;/p&gt;
&lt;p&gt;每每汇报 总结的时候都被一帮搞汽车的围在中间 感觉很不适应&lt;/p&gt;
&lt;p&gt;做平庸的工作 有时候抱团就是一种自豪感&lt;/p&gt;
&lt;p&gt;我经常说一句话&lt;/p&gt;
&lt;p&gt;说英雄主义是有点悲壮的&lt;/p&gt;
&lt;p&gt;有时候确实是这样 总想着改变这一切 慢慢的 融入其中 连自己也无力改变&lt;/p&gt;
&lt;p&gt;回到正题&lt;/p&gt;
&lt;p&gt;今年经历了疫情
也没有出去几趟&lt;/p&gt;
&lt;p&gt;徐州 北京  长沙
其实长沙是个不错的城市 食品很对我胃口&lt;/p&gt;
&lt;p&gt;就是w一家在长沙过得不好 让人心疼 但是我又无能为力&lt;/p&gt;
&lt;p&gt;人应该向前看的&lt;/p&gt;
&lt;p&gt;今年让限制的很厉害 很多东西都没有搞&lt;/p&gt;
&lt;p&gt;感觉现在年薪没多多少钱 但是事情多了很多 自由度也很低&lt;/p&gt;
&lt;p&gt;挤不出时间来做别的&lt;/p&gt;
&lt;p&gt;今年下半年有坚持去踢球&lt;/p&gt;
&lt;p&gt;但是现在体力确实不够好 加速一下就非常累&lt;/p&gt;
&lt;p&gt;昨天刚得知之前认识的人(HH)突然心脏病去世了 很年轻 感到唏嘘 得注意身体注意休息了&lt;/p&gt;
&lt;p&gt;前几天看他朋友圈还在感慨2020年带走了马拉多纳和科比&lt;/p&gt;
&lt;p&gt;失去让一切变得更弥足珍贵&lt;/p&gt;
&lt;p&gt;所以 就像开头说的 好奇心剩下的不多 安全感需求更多了&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今年是周杰伦出道2020年了
这年头 还有不靠风评和流量的明星 是挺好的&lt;/p&gt;
&lt;p&gt;看了一下 今年听得最多的还是 周杰伦 其实觉得挺失望的 目前确实没有太多好听的东西&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;电影方面&lt;/p&gt;
&lt;p&gt;今年看了挺多电影的 也看了不少烂电影&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;成长/衰老&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爱尔兰人&lt;/li&gt;
&lt;li&gt;骡子
&lt;strong&gt;犯罪&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;天才枪手&lt;/li&gt;
&lt;li&gt;误杀&lt;/li&gt;
&lt;li&gt;小丑&lt;/li&gt;
&lt;li&gt;好莱坞往事&lt;/li&gt;
&lt;li&gt;寄生虫&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每每看奉俊昊的时候,就跟看孙兴慜的时候一模一样 那种让人嫉妒的酸&lt;/p&gt;
&lt;p&gt;跟着&amp;lt;&amp;lt;电影最TOP&amp;gt;&amp;gt;又看了一遍的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈利波特&lt;/li&gt;
&lt;li&gt;加勒比海盗&lt;/li&gt;
&lt;li&gt;回到未来&lt;/li&gt;
&lt;li&gt;香水&lt;/li&gt;
&lt;li&gt;罗拉快跑
应该还有很多
本来想撸一遍梁朝伟,最后也没能搞下来,希望来年有时间看吧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然最牛逼的还是信条
确实有点烧脑  诺兰还是可以的&lt;/p&gt;
&lt;p&gt;国产的也看了几个,但是觉得还是差点意思 很难有一个把故事讲好 讲完整&lt;/p&gt;
&lt;p&gt;觉得人物的成长还是不够陡峭&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今年看过的剧&amp;lt;没看完的也算&amp;gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浪客行&lt;/li&gt;
&lt;li&gt;纸牌屋&lt;/li&gt;
&lt;li&gt;纸房子&lt;/li&gt;
&lt;li&gt;暗黑1&lt;/li&gt;
&lt;li&gt;曼达洛人&lt;/li&gt;
&lt;li&gt;鬼灭之刃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然 今年最屌的还是 &lt;strong&gt;后翼弃兵&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最感谢的还是媳妇带安迪 能给我时间看&lt;/p&gt;
&lt;p&gt;有你和孩子真的挺好的&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;罗曼罗兰世界上只有一种真正的英雄主义就是认清了生活的真相后还依然热爱它&#34;&gt;罗曼·罗兰「世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它」&lt;/h2&gt;
&lt;p&gt;个人觉得还是自己不够强大&lt;/p&gt;
&lt;p&gt;内心 精神&lt;/p&gt;
&lt;p&gt;历练 接着历练&lt;/p&gt;
&lt;p&gt;积累 站得高才更能看到未来&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先想到的就这么多&lt;/p&gt;
&lt;p&gt;等之后再想到补充吧&lt;/p&gt;
&lt;p&gt;今年注定是平凡的一年 今年没之前那么丧了 觉得一切过得太快 总体就那样吧&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;12-日&#34;&gt;1.2 日&lt;/h3&gt;
&lt;p&gt;没别的 依旧是一天假 依旧是上班 遥遥无期&lt;/p&gt;
&lt;p&gt;应该尝试着做一些喜欢的事&lt;/p&gt;
&lt;p&gt;勇字当头 干就对了&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/%E5%B9%B4%E7%BB%88/" term="年终" label="年终" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Pytorch常用代码段</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/pytorch%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/" />
            <id>https://chenbokaix250.github.io/tech/pytorch%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5/</id>
            <updated>2020-12-19T10:48:17&#43;08:00</updated>
            <published>2020-12-19T10:17:54&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Pytorch常用代码段合集 PyTorch常用的代码段 集合整理 用于写程序时查询 1.基……</summary>
            
                <content type="html">&lt;h1 id=&#34;pytorch常用代码段合集&#34;&gt;Pytorch常用代码段合集&lt;/h1&gt;
&lt;p&gt;PyTorch常用的代码段 集合整理 用于写程序时查询&lt;/p&gt;
&lt;h2 id=&#34;1基本配置&#34;&gt;1.基本配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;导入包和版本查询&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torch&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torch.nn&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;nn&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;torchvision&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__version__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cuda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cudnn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cuda&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_device_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;可复现性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在硬件设备（CPU、GPU）不同时，完全的可复现性无法保证，即使随机种子相同。但是，在同一个设备上，应该保证可复现性。具体做法是，在程序开始的时候固定torch的随机种子，同时也把numpy的随机种子固定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manual_seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cuda&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manual_seed_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cudnn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deterministic&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cudnn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;显卡设置&lt;/strong&gt;
如果只需要一张显卡&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Device configuration&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;device&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cuda&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cuda&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cpu&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果需要多张显卡指定,比如0,1号显卡&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import os
os.environ[&#39;CUDA_VISIBLE_DEVICES&#39;] = &#39;0,1&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以在命令行运行代码时设置显卡&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0,1 python train.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;清除显存&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.cuda.empty_cache()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以使用在命令行重置GPU的指令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nvidia-smi --gpu-reset -i [gpu_id]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2张量tensor处理&#34;&gt;2.张量(Tensor)处理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;张量的数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyTorch有9种CPU张量类型和9种GPU张量类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mmbiz.qpic.cn/sz_mmbiz_jpg/gYUsOT36vfouFe7PiabXDb2iaAXq0FCUdnONvpcpnD1xKFIY04ghjwbtvQSCqWgteHnFV1ibH5tgY96xmdJFQXTWQ/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名张量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;张量命名是一个非常有用的方法，这样可以方便地使用维度的名字来做索引或其他操作，大大提高了可读性、易用性，防止出错。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 在PyTorch 1.3之前，需要使用注释
# Tensor[N, C, H, W]
images = torch.randn(32, 3, 56, 56)
images.sum(dim=1)
images.select(dim=1, index=0)

# PyTorch 1.3之后
NCHW = [‘N’, ‘C’, ‘H’, ‘W’]
images = torch.randn(32, 3, 56, 56, names=NCHW)
images.sum(&#39;C&#39;)
images.select(&#39;C&#39;, index=0)
# 也可以这么设置
tensor = torch.rand(3,4,1,2,names=(&#39;C&#39;, &#39;N&#39;, &#39;H&#39;, &#39;W&#39;))
# 使用align_to可以对维度方便地排序
tensor = tensor.align_to(&#39;N&#39;, &#39;C&#39;, &#39;H&#39;, &#39;W&#39;)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;数据类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
# 设置默认类型，pytorch中的FloatTensor远远快于DoubleTensor
torch.set_default_tensor_type(torch.FloatTensor)

# 类型转换
tensor = tensor.cuda()
tensor = tensor.cpu()
tensor = tensor.float()
tensor = tensor.long()

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;torch.Tensor与np.ndarray转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了CharTensor，其他所有CPU上的张量都支持转换为numpy格式然后再转换回来。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ndarray = tensor.cpu().numpy()
tensor = torch.from_numpy(ndarray).float()
tensor = torch.from_numpy(ndarray.copy()).float() # If ndarray has negative stride.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Torch.tensor与PIL.Image转换&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#pytorch中的张量默认采用[N, C, H, W]的顺序，并且数据范围在[0,1]，需要进行转置和规范化
#torch.Tensor -&amp;gt; PIL.Image
image = PIL.Image.fromarray(torch.clamp(tensor*255, min=0, max=255).byte().permute(1,2,0).cpu().numpy())
image = torchvision.transforms.functional.to_pil_image(tensor)  # Equivalently way

# PIL.Image -&amp;gt; torch.Tensor
path = r&#39;./figure.jpg&#39;
tensor = torch.from_numpy(np.asarray(PIL.Image.open(path))).permute(2,0,1).float() / 255
tensor = torchvision.transforms.functional.to_tensor(PIL.Image.open(path)) # Equivalently way
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;np.ndarray与PIL.Image的转换&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;image = PIL.Image.fromarray(ndarray.astype(np.uint8))

ndarray = np.asarray(PIL.Image.open(path))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;从只包含一个元素的张量中提取值&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;value = torch.rand(1).item()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;张量形变&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 在将卷积层输入全连接层的情况下通常需要对张量做形变处理，
# 相比torch.view，torch.reshape可以自动处理输入张量不连续的情况。
tensor = torch.rand(2,3,4)
shape = (6, 4)
tensor = torch.reshape(tensor, shape)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;打乱顺序&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tensor = tensor[torch.randperm(tensor.size(0))]  # 打乱第一个维度
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;水平翻转&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# pytorch不支持tensor[::-1]这样的负步长操作，水平翻转可以通过张量索引实现
# 假设张量的维度为[N, D, H, W].
tensor = tensor[:,:,:,torch.arange(tensor.size(3) - 1, -1, -1).long()]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;复制张量&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Operation                 |  New/Shared memory | Still in computation graph |
tensor.clone()            # |        New         |          Yes               |
tensor.detach()           # |      Shared        |          No                |
tensor.detach.clone()()   # |        New         |          No                |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;张量拼接&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;&#39;&#39;
注意torch.cat和torch.stack的区别在于torch.cat沿着给定的维度拼接，
而torch.stack会新增一维。例如当参数是3个10x5的张量，torch.cat的结果是30x5的张量，
而torch.stack的结果是3x10x5的张量。
&#39;&#39;&#39;
tensor = torch.cat(list_of_tensors, dim=0)
tensor = torch.stack(list_of_tensors, dim=0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;将整数标签转为one-hot编码&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# pytorch的标记默认从0开始
tensor = torch.tensor([0, 2, 1, 3])
N = tensor.size(0)
num_classes = 4
one_hot = torch.zeros(N, num_classes).long()
one_hot.scatter_(dim=1, index=torch.unsqueeze(tensor, dim=1), src=torch.ones(N, num_classes).long())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;得到非零元素&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.nonzero(tensor)               # index of non-zero elements
torch.nonzero(tensor==0)            # index of zero elements
torch.nonzero(tensor).size(0)       # number of non-zero elements
torch.nonzero(tensor == 0).size(0)  # number of zero elements
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;判断两个张量相等&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.allclose(tensor1, tensor2)  # float tensor
torch.equal(tensor1, tensor2)     # int tensor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;张量扩展&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Expand tensor of shape 64*512 to shape 64*512*7*7.
tensor = torch.rand(64,512)
torch.reshape(tensor, (64, 512, 1, 1)).expand(64, 512, 7, 7)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;矩阵乘法&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Matrix multiplcation: (m*n) * (n*p) * -&amp;gt; (m*p).
result = torch.mm(tensor1, tensor2)

# Batch matrix multiplication: (b*m*n) * (b*n*p) -&amp;gt; (b*m*p)
result = torch.bmm(tensor1, tensor2)

# Element-wise multiplication.
result = tensor1 * tensor2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;计算两组数据之间的两两欧式距离&lt;/strong&gt;
利用broadcast机制&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dist = torch.sqrt(torch.sum((X1[:,None,:] - X2) ** 2, dim=2))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-模型定义和操作&#34;&gt;3. 模型定义和操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一个简单两层卷积网络的示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# convolutional neural network (2 convolutional layers)
class ConvNet(nn.Module):
    def __init__(self, num_classes=10):
        super(ConvNet, self).__init__()
        self.layer1 = nn.Sequential(
            nn.Conv2d(1, 16, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))
        self.layer2 = nn.Sequential(
            nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))
        self.fc = nn.Linear(7*7*32, num_classes)

    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = out.reshape(out.size(0), -1)
        out = self.fc(out)
        return out


model = ConvNet(num_classes).to(device)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;卷积层的计算和展示可以用这个网站辅助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双线性汇合（bilinear pooling）&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;X = torch.reshape(N, D, H * W)                        # Assume X has shape N*D*H*W
X = torch.bmm(X, torch.transpose(X, 1, 2)) / (H * W)  # Bilinear pooling
assert X.size() == (N, D, D)
X = torch.reshape(X, (N, D * D))
X = torch.sign(X) * torch.sqrt(torch.abs(X) + 1e-5)   # Signed-sqrt normalization
X = torch.nn.functional.normalize(X)                  # L2 normalization
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;多卡同步 BN（Batch normalization）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当使用 torch.nn.DataParallel 将代码运行在多张 GPU 卡上时，PyTorch 的 BN 层默认操作是各卡上数据独立地计算均值和标准差，同步 BN 使用所有卡上的数据一起计算 BN 层的均值和标准差，缓解了当批量大小（batch size）比较小时对均值和标准差估计不准的情况，是在目标检测等任务中一个有效的提升性能的技巧。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sync_bn = torch.nn.SyncBatchNorm(num_features, eps=1e-05, momentum=0.1, affine=True, 
                                 track_running_stats=True)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;将已有网络的所有BN层改为同步BN层&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def convertBNtoSyncBN(module, process_group=None):
    &#39;&#39;&#39;Recursively replace all BN layers to SyncBN layer.

    Args:
        module[torch.nn.Module]. Network
    &#39;&#39;&#39;
    if isinstance(module, torch.nn.modules.batchnorm._BatchNorm):
        sync_bn = torch.nn.SyncBatchNorm(module.num_features, module.eps, module.momentum, 
                                         module.affine, module.track_running_stats, process_group)
        sync_bn.running_mean = module.running_mean
        sync_bn.running_var = module.running_var
        if module.affine:
            sync_bn.weight = module.weight.clone().detach()
            sync_bn.bias = module.bias.clone().detach()
        return sync_bn
    else:
        for name, child_module in module.named_children():
            setattr(module, name) = convert_syncbn_model(child_module, process_group=process_group))
        return module
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;类似 BN 滑动平均&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要实现类似 BN 滑动平均的操作，在 forward 函数中要使用原地（inplace）操作给滑动平均赋值。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class BN(torch.nn.Module)
    def __init__(self):
        ...
        self.register_buffer(&#39;running_mean&#39;, torch.zeros(num_features))

    def forward(self, X):
        ...
        self.running_mean += momentum * (current - self.running_mean)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;计算模型整体参数量&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;num_parameters = sum(torch.numel(parameter) for parameter in model.parameters())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看网络中的参数&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;可以通过model.state_dict()或者model.named_parameters()函数查看现在的全部可训练参数（包括通过继承得到的父类中的参数）

params = list(model.named_parameters())
(name, param) = params[28]
print(name)
print(param.grad)
print(&#39;-------------------------------------------------&#39;)
(name2, param2) = params[29]
print(name2)
print(param2.grad)
print(&#39;----------------------------------------------------&#39;)
(name1, param1) = params[30]
print(name1)
print(param1.grad)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;模型可视化（使用pytorchviz）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;szagoruyko/pytorchvizgithub.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;类似 Keras 的 model.summary() 输出模型信息，使用pytorch-summary&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sksq96/pytorch-summarygithub.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;模型权重初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意 model.modules() 和 model.children() 的区别：model.modules() 会迭代地遍历模型的所有子层，而 model.children() 只会遍历模型下的一层。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Common practise for initialization.
for layer in model.modules():
    if isinstance(layer, torch.nn.Conv2d):
        torch.nn.init.kaiming_normal_(layer.weight, mode=&#39;fan_out&#39;,
                                      nonlinearity=&#39;relu&#39;)
        if layer.bias is not None:
            torch.nn.init.constant_(layer.bias, val=0.0)
    elif isinstance(layer, torch.nn.BatchNorm2d):
        torch.nn.init.constant_(layer.weight, val=1.0)
        torch.nn.init.constant_(layer.bias, val=0.0)
    elif isinstance(layer, torch.nn.Linear):
        torch.nn.init.xavier_normal_(layer.weight)
        if layer.bias is not None:
            torch.nn.init.constant_(layer.bias, val=0.0)

# Initialization with given tensor.
layer.weight = torch.nn.Parameter(tensor)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提取模型中的某一层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;modules()会返回模型中所有模块的迭代器，它能够访问到最内层，比如self.layer1.conv1这个模块，还有一个与它们相对应的是name_children()属性以及named_modules(),这两个不仅会返回模块的迭代器，还会返回网络层的名字。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 取模型中的前两层
new_model = nn.Sequential(*list(model.children())[:2] 
# 如果希望提取出模型中的所有卷积层，可以像下面这样操作：
for layer in model.named_modules():
    if isinstance(layer[1],nn.Conv2d):
         conv_model.add_module(layer[0],layer[1])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;部分层使用预训练模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意如果保存的模型是 torch.nn.DataParallel，则当前的模型也需要是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;model.load_state_dict(torch.load(&#39;model.pth&#39;), strict=False)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将在 GPU 保存的模型加载到 CPU
&lt;code&gt;model.load_state_dict(torch.load(&#39;model.pth&#39;, map_location=&#39;cpu&#39;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;导入另一个模型的相同部分到新的模型&lt;/strong&gt;
模型导入参数时，如果两个模型结构不一致，则直接导入参数会报错。用下面方法可以把另一个模型的相同的部分导入到新的模型中。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# model_new代表新的模型
# model_saved代表其他模型，比如用torch.load导入的已保存的模型
model_new_dict = model_new.state_dict()
model_common_dict = {k:v for k, v in model_saved.items() if k in model_new_dict.keys()}
model_new_dict.update(model_common_dict)
model_new.load_state_dict(model_new_dict)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-数据处理&#34;&gt;4. 数据处理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;计算数据集的均值和标准差&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import os
import cv2
import numpy as np
from torch.utils.data import Dataset
from PIL import Image


def compute_mean_and_std(dataset):
    # 输入PyTorch的dataset，输出均值和标准差
    mean_r = 0
    mean_g = 0
    mean_b = 0

    for img, _ in dataset:
        img = np.asarray(img) # change PIL Image to numpy array
        mean_b += np.mean(img[:, :, 0])
        mean_g += np.mean(img[:, :, 1])
        mean_r += np.mean(img[:, :, 2])

    mean_b /= len(dataset)
    mean_g /= len(dataset)
    mean_r /= len(dataset)

    diff_r = 0
    diff_g = 0
    diff_b = 0

    N = 0

    for img, _ in dataset:
        img = np.asarray(img)

        diff_b += np.sum(np.power(img[:, :, 0] - mean_b, 2))
        diff_g += np.sum(np.power(img[:, :, 1] - mean_g, 2))
        diff_r += np.sum(np.power(img[:, :, 2] - mean_r, 2))

        N += np.prod(img[:, :, 0].shape)

    std_b = np.sqrt(diff_b / N)
    std_g = np.sqrt(diff_g / N)
    std_r = np.sqrt(diff_r / N)

    mean = (mean_b.item() / 255.0, mean_g.item() / 255.0, mean_r.item() / 255.0)
    std = (std_b.item() / 255.0, std_g.item() / 255.0, std_r.item() / 255.0)
    return mean, std
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;得到视频数据基本信息&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import cv2
video = cv2.VideoCapture(mp4_path)
height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))
width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
num_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
fps = int(video.get(cv2.CAP_PROP_FPS))
video.release()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;TSN 每段（segment）采样一帧视频&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;K = self._num_segments
if is_train:
    if num_frames &amp;gt; K:
        # Random index for each segment.
        frame_indices = torch.randint(
            high=num_frames // K, size=(K,), dtype=torch.long)
        frame_indices += num_frames // K * torch.arange(K)
    else:
        frame_indices = torch.randint(
            high=num_frames, size=(K - num_frames,), dtype=torch.long)
        frame_indices = torch.sort(torch.cat((
            torch.arange(num_frames), frame_indices)))[0]
else:
    if num_frames &amp;gt; K:
        # Middle index for each segment.
        frame_indices = num_frames / K // 2
        frame_indices += num_frames // K * torch.arange(K)
    else:
        frame_indices = torch.sort(torch.cat((                              
            torch.arange(num_frames), torch.arange(K - num_frames))))[0]
assert frame_indices.size() == (K,)
return [frame_indices[i] for i in range(K)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;常用训练和验证数据预处理&lt;/strong&gt;
其中 ToTensor 操作会将 PIL.Image 或形状为 H×W×D，数值范围为 [0, 255] 的 np.ndarray 转换为形状为 D×H×W，数值范围为 [0.0, 1.0] 的 torch.Tensor。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;train_transform = torchvision.transforms.Compose([
    torchvision.transforms.RandomResizedCrop(size=224,
                                             scale=(0.08, 1.0)),
    torchvision.transforms.RandomHorizontalFlip(),
    torchvision.transforms.ToTensor(),
    torchvision.transforms.Normalize(mean=(0.485, 0.456, 0.406),
                                     std=(0.229, 0.224, 0.225)),
 ])
 val_transform = torchvision.transforms.Compose([
    torchvision.transforms.Resize(256),
    torchvision.transforms.CenterCrop(224),
    torchvision.transforms.ToTensor(),
    torchvision.transforms.Normalize(mean=(0.485, 0.456, 0.406),
                                     std=(0.229, 0.224, 0.225)),
])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5-模型训练和测试&#34;&gt;5. 模型训练和测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;分类模型训练代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

# Train the model
total_step = len(train_loader)
for epoch in range(num_epochs):
    for i ,(images, labels) in enumerate(train_loader):
        images = images.to(device)
        labels = labels.to(device)

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward and optimizer
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (i+1) % 100 == 0:
            print(&#39;Epoch: [{}/{}], Step: [{}/{}], Loss: {}&#39;
                  .format(epoch+1, num_epochs, i+1, total_step, loss.item()))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;分类模型测试代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Test the model
model.eval()  # eval mode(batch norm uses moving mean/variance 
              #instead of mini-batch mean/variance)
with torch.no_grad():
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print(&#39;Test accuracy of the model on the 10000 test images: {} %&#39;
          .format(100 * correct / total))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;自定义loss&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继承torch.nn.Module类写自己的loss。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MyLoss(torch.nn.Moudle):
    def __init__(self):
        super(MyLoss, self).__init__()

    def forward(self, x, y):
        loss = torch.mean((x - y) ** 2)
        return loss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;标签平滑（label smoothing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写一个label_smoothing.py的文件，然后在训练代码里引用，用LSR代替交叉熵损失即可。label_smoothing.py内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import torch
import torch.nn as nn


class LSR(nn.Module):

    def __init__(self, e=0.1, reduction=&#39;mean&#39;):
        super().__init__()

        self.log_softmax = nn.LogSoftmax(dim=1)
        self.e = e
        self.reduction = reduction

    def _one_hot(self, labels, classes, value=1):
        &amp;quot;&amp;quot;&amp;quot;
            Convert labels to one hot vectors

        Args:
            labels: torch tensor in format [label1, label2, label3, ...]
            classes: int, number of classes
            value: label value in one hot vector, default to 1

        Returns:
            return one hot format labels in shape [batchsize, classes]
        &amp;quot;&amp;quot;&amp;quot;

        one_hot = torch.zeros(labels.size(0), classes)

        #labels and value_added  size must match
        labels = labels.view(labels.size(0), -1)
        value_added = torch.Tensor(labels.size(0), 1).fill_(value)

        value_added = value_added.to(labels.device)
        one_hot = one_hot.to(labels.device)

        one_hot.scatter_add_(1, labels, value_added)

        return one_hot

    def _smooth_label(self, target, length, smooth_factor):
        &amp;quot;&amp;quot;&amp;quot;convert targets to one-hot format, and smooth
        them.
        Args:
            target: target in form with [label1, label2, label_batchsize]
            length: length of one-hot format(number of classes)
            smooth_factor: smooth factor for label smooth

        Returns:
            smoothed labels in one hot format
        &amp;quot;&amp;quot;&amp;quot;
        one_hot = self._one_hot(target, length, value=1 - smooth_factor)
        one_hot += smooth_factor / (length - 1)

        return one_hot.to(target.device)

    def forward(self, x, target):

        if x.size(0) != target.size(0):
            raise ValueError(&#39;Expected input batchsize ({}) to match target batch_size({})&#39;
                    .format(x.size(0), target.size(0)))

        if x.dim() &amp;lt; 2:
            raise ValueError(&#39;Expected input tensor to have least 2 dimensions(got {})&#39;
                    .format(x.size(0)))

        if x.dim() != 2:
            raise ValueError(&#39;Only 2 dimension tensor are implemented, (got {})&#39;
                    .format(x.size()))


        smoothed_target = self._smooth_label(target, x.size(1), self.e)
        x = self.log_softmax(x)
        loss = torch.sum(- x * smoothed_target, dim=1)

        if self.reduction == &#39;none&#39;:
            return loss

        elif self.reduction == &#39;sum&#39;:
            return torch.sum(loss)

        elif self.reduction == &#39;mean&#39;:
            return torch.mean(loss)

        else:
            raise ValueError(&#39;unrecognized option, expect reduction to be one of none, mean, sum&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者直接在训练文件里做label smoothing&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for images, labels in train_loader:
    images, labels = images.cuda(), labels.cuda()
    N = labels.size(0)
    # C is the number of classes.
    smoothed_labels = torch.full(size=(N, C), fill_value=0.1 / (C - 1)).cuda()
    smoothed_labels.scatter_(dim=1, index=torch.unsqueeze(labels, dim=1), value=0.9)

    score = model(images)
    log_prob = torch.nn.functional.log_softmax(score, dim=1)
    loss = -torch.sum(log_prob * smoothed_labels) / N
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Mixup训练&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;beta_distribution = torch.distributions.beta.Beta(alpha, alpha)
for images, labels in train_loader:
    images, labels = images.cuda(), labels.cuda()

    # Mixup images and labels.
    lambda_ = beta_distribution.sample([]).item()
    index = torch.randperm(images.size(0)).cuda()
    mixed_images = lambda_ * images + (1 - lambda_) * images[index, :]
    label_a, label_b = labels, labels[index]

    # Mixup loss.
    scores = model(mixed_images)
    loss = (lambda_ * loss_function(scores, label_a)
            + (1 - lambda_) * loss_function(scores, label_b))
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;L1 正则化&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;l1_regularization = torch.nn.L1Loss(reduction=&#39;sum&#39;)
loss = ...  # Standard cross-entropy loss
for param in model.parameters():
    loss += torch.sum(torch.abs(param))
loss.backward()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;不对偏置项进行权重衰减（weight decay）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pytorch里的weight decay相当于l2正则&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bias_list = (param for name, param in model.named_parameters() if name[-4:] == &#39;bias&#39;)
others_list = (param for name, param in model.named_parameters() if name[-4:] != &#39;bias&#39;)
parameters = [{&#39;parameters&#39;: bias_list, &#39;weight_decay&#39;: 0},                
              {&#39;parameters&#39;: others_list}]
optimizer = torch.optim.SGD(parameters, lr=1e-2, momentum=0.9, weight_decay=1e-4)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;梯度裁剪（gradient clipping）&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=20)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;得到当前学习率&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# If there is one global learning rate (which is the common case).
lr = next(iter(optimizer.param_groups))[&#39;lr&#39;]

# If there are multiple learning rates for different layers.
all_lr = []
for param_group in optimizer.param_groups:
    all_lr.append(param_group[&#39;lr&#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一种方法，在一个batch训练代码里，当前的lr是optimizer.param_groups[0][&#39;lr&#39;]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习率衰减&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Reduce learning rate when validation accuarcy plateau.
scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=&#39;max&#39;, patience=5, verbose=True)
for t in range(0, 80):
    train(...)
    val(...)
    scheduler.step(val_acc)

# Cosine annealing learning rate.
scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=80)
# Reduce learning rate by 10 at given epochs.
scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[50, 70], gamma=0.1)
for t in range(0, 80):
    scheduler.step()    
    train(...)
    val(...)

# Learning rate warmup by 10 epochs.
scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda=lambda t: t / 10)
for t in range(0, 10):
    scheduler.step()
    train(...)
    val(...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;优化器链式更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从1.4版本开始，torch.optim.lr_scheduler 支持链式更新（chaining），即用户可以定义两个 schedulers，并交替在训练中使用。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import torch
from torch.optim import SGD
from torch.optim.lr_scheduler import ExponentialLR, StepLR
model = [torch.nn.Parameter(torch.randn(2, 2, requires_grad=True))]
optimizer = SGD(model, 0.1)
scheduler1 = ExponentialLR(optimizer, gamma=0.9)
scheduler2 = StepLR(optimizer, step_size=3, gamma=0.1)
for epoch in range(4):
    print(epoch, scheduler2.get_last_lr()[0])
    optimizer.step()
    scheduler1.step()
    scheduler2.step()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;模型训练可视化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyTorch可以使用tensorboard来可视化训练过程。&lt;/p&gt;
&lt;p&gt;安装和运行TensorBoard。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install tensorboard
tensorboard --logdir=runs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用SummaryWriter类来收集和可视化相应的数据，放了方便查看，可以使用不同的文件夹，比如&#39;Loss/train&#39;和&#39;Loss/test&#39;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from torch.utils.tensorboard import SummaryWriter
import numpy as np

writer = SummaryWriter()

for n_iter in range(100):
    writer.add_scalar(&#39;Loss/train&#39;, np.random.random(), n_iter)
    writer.add_scalar(&#39;Loss/test&#39;, np.random.random(), n_iter)
    writer.add_scalar(&#39;Accuracy/train&#39;, np.random.random(), n_iter)
    writer.add_scalar(&#39;Accuracy/test&#39;, np.random.random(), n_iter)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;保存与加载断点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意为了能够恢复训练，我们需要同时保存模型和优化器的状态，以及当前的训练轮数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;start_epoch = 0
# Load checkpoint.
if resume: # resume为参数，第一次训练时设为0，中断再训练时设为1
    model_path = os.path.join(&#39;model&#39;, &#39;best_checkpoint.pth.tar&#39;)
    assert os.path.isfile(model_path)
    checkpoint = torch.load(model_path)
    best_acc = checkpoint[&#39;best_acc&#39;]
    start_epoch = checkpoint[&#39;epoch&#39;]
    model.load_state_dict(checkpoint[&#39;model&#39;])
    optimizer.load_state_dict(checkpoint[&#39;optimizer&#39;])
    print(&#39;Load checkpoint at epoch {}.&#39;.format(start_epoch))
    print(&#39;Best accuracy so far {}.&#39;.format(best_acc))

# Train the model
for epoch in range(start_epoch, num_epochs): 
    ... 

    # Test the model
    ...

    # save checkpoint
    is_best = current_acc &amp;gt; best_acc
    best_acc = max(current_acc, best_acc)
    checkpoint = {
        &#39;best_acc&#39;: best_acc,
        &#39;epoch&#39;: epoch + 1,
        &#39;model&#39;: model.state_dict(),
        &#39;optimizer&#39;: optimizer.state_dict(),
    }
    model_path = os.path.join(&#39;model&#39;, &#39;checkpoint.pth.tar&#39;)
    best_model_path = os.path.join(&#39;model&#39;, &#39;best_checkpoint.pth.tar&#39;)
    torch.save(checkpoint, model_path)
    if is_best:
        shutil.copy(model_path, best_model_path)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提取 ImageNet 预训练模型某层的卷积特征&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# VGG-16 relu5-3 feature.
model = torchvision.models.vgg16(pretrained=True).features[:-1]
# VGG-16 pool5 feature.
model = torchvision.models.vgg16(pretrained=True).features
# VGG-16 fc7 feature.
model = torchvision.models.vgg16(pretrained=True)
model.classifier = torch.nn.Sequential(*list(model.classifier.children())[:-3])
# ResNet GAP feature.
model = torchvision.models.resnet18(pretrained=True)
model = torch.nn.Sequential(collections.OrderedDict(
    list(model.named_children())[:-1]))

with torch.no_grad():
    model.eval()
    conv_representation = model(image)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提取 ImageNet 预训练模型多层的卷积特征&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class FeatureExtractor(torch.nn.Module):
    &amp;quot;&amp;quot;&amp;quot;Helper class to extract several convolution features from the given
    pre-trained model.

    Attributes:
        _model, torch.nn.Module.
        _layers_to_extract, list&amp;lt;str&amp;gt; or set&amp;lt;str&amp;gt;

    Example:
        &amp;gt;&amp;gt;&amp;gt; model = torchvision.models.resnet152(pretrained=True)
        &amp;gt;&amp;gt;&amp;gt; model = torch.nn.Sequential(collections.OrderedDict(
                list(model.named_children())[:-1]))
        &amp;gt;&amp;gt;&amp;gt; conv_representation = FeatureExtractor(
                pretrained_model=model,
                layers_to_extract={&#39;layer1&#39;, &#39;layer2&#39;, &#39;layer3&#39;, &#39;layer4&#39;})(image)
    &amp;quot;&amp;quot;&amp;quot;
    def __init__(self, pretrained_model, layers_to_extract):
        torch.nn.Module.__init__(self)
        self._model = pretrained_model
        self._model.eval()
        self._layers_to_extract = set(layers_to_extract)

    def forward(self, x):
        with torch.no_grad():
            conv_representation = []
            for name, layer in self._model.named_children():
                x = layer(x)
                if name in self._layers_to_extract:
                    conv_representation.append(x)
            return conv_representation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;微调全连接层&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;model = torchvision.models.resnet18(pretrained=True)
for param in model.parameters():
    param.requires_grad = False
model.fc = nn.Linear(512, 100)  # Replace the last fc layer
optimizer = torch.optim.SGD(model.fc.parameters(), lr=1e-2, momentum=0.9, weight_decay=1e-4)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;以较大学习率微调全连接层，较小学习率微调卷积层&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;model = torchvision.models.resnet18(pretrained=True)
finetuned_parameters = list(map(id, model.fc.parameters()))
conv_parameters = (p for p in model.parameters() if id(p) not in finetuned_parameters)
parameters = [{&#39;params&#39;: conv_parameters, &#39;lr&#39;: 1e-3}, 
              {&#39;params&#39;: model.fc.parameters()}]
optimizer = torch.optim.SGD(parameters, lr=1e-2, momentum=0.9, weight_decay=1e-4)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6-其他注意事项&#34;&gt;6. 其他注意事项&lt;/h2&gt;
&lt;p&gt;不要使用太大的线性层。因为nn.Linear(m,n)使用的是的内存，线性层太大很容易超出现有显存。&lt;/p&gt;
&lt;p&gt;不要在太长的序列上使用RNN。因为RNN反向传播使用的是BPTT算法，其需要的内存和输入序列的长度呈线性关系。&lt;/p&gt;
&lt;p&gt;model(x) 前用 model.train() 和 model.eval() 切换网络状态。&lt;/p&gt;
&lt;p&gt;不需要计算梯度的代码块用 with torch.no_grad() 包含起来。&lt;/p&gt;
&lt;p&gt;model.eval() 和 torch.no_grad() 的区别在于，model.eval() 是将网络切换为测试状态，例如 BN 和dropout在训练和测试阶段使用不同的计算方法。torch.no_grad() 是关闭 PyTorch 张量的自动求导机制，以减少存储使用和加速计算，得到的结果无法进行 loss.backward()。
model.zero_grad()会把整个模型的参数的梯度都归零, 而optimizer.zero_grad()只会把传入其中的参数的梯度归零.&lt;/p&gt;
&lt;p&gt;torch.nn.CrossEntropyLoss 的输入不需要经过 Softmax。torch.nn.CrossEntropyLoss 等价于 torch.nn.functional.log_softmax + torch.nn.NLLLoss。&lt;/p&gt;
&lt;p&gt;loss.backward() 前用 optimizer.zero_grad() 清除累积梯度。&lt;/p&gt;
&lt;p&gt;torch.utils.data.DataLoader 中尽量设置 pin_memory=True，对特别小的数据集如 MNIST 设置 pin_memory=False 反而更快一些。num_workers 的设置需要在实验中找到最快的取值。
用 del 及时删除不用的中间变量，节约 GPU 存储。&lt;/p&gt;
&lt;p&gt;使用 inplace 操作可节约 GPU 存储，如
&lt;code&gt;x = torch.nn.functional.relu(x, inplace=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;减少 CPU 和 GPU 之间的数据传输。例如如果你想知道一个 epoch 中每个 mini-batch 的 loss 和准确率，先将它们累积在 GPU 中等一个 epoch 结束之后一起传输回 CPU 会比每个 mini-batch 都进行一次 GPU 到 CPU 的传输更快。&lt;/p&gt;
&lt;p&gt;使用半精度浮点数 half() 会有一定的速度提升，具体效率依赖于 GPU 型号。需要小心数值精度过低带来的稳定性问题。&lt;/p&gt;
&lt;p&gt;时常使用 assert tensor.size() == (N, D, H, W) 作为调试手段，确保张量维度和你设想中一致。
除了标记 y 外，尽量少使用一维张量，使用 n*1 的二维张量代替，可以避免一些意想不到的一维张量计算结果。&lt;/p&gt;
&lt;p&gt;统计代码各部分耗时&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;with torch.autograd.profiler.profile(enabled=True, use_cuda=False) as profile:    ...print(profile)# 或者在命令行运行python -m torch.utils.bottleneck main.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用TorchSnooper来调试PyTorch代码，程序在执行的时候，就会自动 print 出来每一行的执行结果的 tensor 的形状、数据类型、设备、是否需要梯度的信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# pip install torchsnooperimport torchsnooper# 对于函数，使用修饰器@torchsnooper.snoop()# 如果不是函数，使用 with 语句来激活 TorchSnooper，把训练的那个循环装进 with 语句中去。with torchsnooper.snoop():    原本的代码
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zasdfgbnm/TorchSnoopergithub.com&#34;&gt;https://github.com/zasdfgbnm/TorchSnoopergithub.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;模型可解释性，使用captum库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://captum.ai/captum.ai&#34;&gt;https://captum.ai/captum.ai&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">机翻TensorRT官方API_C&#43;&#43;</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E6%9C%BA%E7%BF%BBtensorrt%E5%AE%98%E6%96%B9api_c&#43;&#43;/" />
            <id>https://chenbokaix250.github.io/tech/%E6%9C%BA%E7%BF%BBtensorrt%E5%AE%98%E6%96%B9api_c&#43;&#43;/</id>
            <updated>2020-12-14T23:29:22&#43;08:00</updated>
            <published>2020-12-14T23:29:22&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"></summary>
            
                <content type="html"></content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">智能家居通讯协议</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/" />
            <id>https://chenbokaix250.github.io/life/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</id>
            <updated>2020-12-14T23:22:28&#43;08:00</updated>
            <published>2020-12-14T23:14:03&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">智能家居通讯协议汇总 智能家居通信技术分为有线和无线。 无线技术主要有：zigbee，z……</summary>
            
                <content type="html">&lt;h1 id=&#34;智能家居通讯协议汇总&#34;&gt;智能家居通讯协议汇总&lt;/h1&gt;
&lt;p&gt;智能家居通信技术分为有线和无线。&lt;/p&gt;
&lt;p&gt;无线技术主要有：zigbee，z-wave，RF，蓝牙，wifi，EnOcean，lora，NB-IOT等。下面分别介绍以上几种无线技术：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/837760aa1cf463bfebe4fc6979668627_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、zigbee：是基于IEEE802.15.4标准的低功耗局域网协议。根据国际标准规定，ZigBee技术是一种短距离、低功耗的无线通信技术。这一名称（又称紫蜂协议）来源于蜜蜂的八字舞，由于蜜蜂(bee)是靠飞翔和“嗡嗡”(zig)地抖动翅膀的“舞蹈”来与同伴传递花粉所在方位信息，也就是说蜜蜂依靠这样的方式构成了群体中的通信网络。&lt;/p&gt;
&lt;p&gt;其特点是近距离、低复杂度、自组织、低功耗、低数据速率。主要适合用于自动控制和远程控制领域，可以嵌入各种设备。简而言之，ZigBee就是一种便宜的，低功耗的近距离无线组网通讯技术。也可以说ZigBee是一种低速短距离传输的无线网络协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/a26b3fb125d145ac5f149f3be021658a_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、z-wave：Z-Wave是由丹麦公司Zensys所一手主导的无线组网规格，Z-wave联盟(Z-wave Alliance)虽然没有ZigBee联盟强大，但是Z-wave联盟的成员均是已经在智能家居领域有现行产品的厂商，该联盟已经具有160多家国际知名公司，范围基本覆盖全球各个国家和地区。&lt;/p&gt;
&lt;p&gt;Z-Wave是一种新兴的基于射频的、低成本、低功耗、高可靠、适于网络的短距离无线通信技术。工作频带为908.42MHz(美国)~868.42MHz(欧洲)，采用FSK(BFSK/GFSK)调制方式，数据传输速率为9.6 kbps，信号的有效覆盖范围在室内是30m，室外可超过100m，适合于窄带宽应用场合。随着通信距离的增大，设备的复杂度、功耗以及系统成本都在增加，相对于现有的各种无线通信技术，Z-Wave技术将是最低功耗和最低成本的技术，有力地推动着低速率无线个人区域网。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/27d0c2c827b70de68ad4cfe6233ff46c_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、RF：无线射频是20世纪90年代兴起的一种非接触式的自动识别技术。射频技术 相对于传统的磁卡及IC卡技术具有非接触、阅读速度快、无磨损等特点。 无线射频技术在阅读器和射频卡之间进行非接触双向数据传输，以达到目标识别和数据交换的目的。与传统的条形码、磁卡及IC卡相比，射频卡具有非接触、阅读速度快、无磨损、不受环境影响、寿命长、便于使用的特点和具有防冲突功能，能同时处理多张卡片。基于以上特点，平常用的大多数刷卡门禁用的都是射频技术，另外无线射频也被一些厂家应用在智能家居中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/04393912d09c38790711efc2274cfeba_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、蓝牙：是一种无线技术标准，可实现固定设备、移动设备和楼宇个人域网之间的短距离数据交换（使用2.4—2.485GHz的ISM波段的UHF无线电波）。蓝牙技术最初由电信巨头爱立信公司于1994年创制，当时是作为RS232数据线的替代方案。蓝牙可连接多个设备，克服了数据同步的难题。蓝牙是现在手机标配的功能。蓝牙主要应用在一些小型的智能硬件产品上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/1b653459d26ef6d29d6d13892deb6683_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、wifi：Wi-Fi是一种允许电子设备连接到一个无线局域网（WLAN）的技术，通常使用2.4G UHF或5G SHF ISM 射频频段。连接到无线局域网通常是有密码保护的；但也可是开放的，这样就允许任何在WLAN范围内的设备可以连接上。无线保真是一个无线网络通信技术的品牌，由wifi联盟所持有。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/237311df485284e5ad9774db720eac7a_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;6、EnOcean：2012年3月，国际电工技术委员会将EnOcean无线通信标准采纳为国际标准“ISO/IEC 14543-3-10”[1] ，这也是世界上唯一使用能量采集技术的无线国际标准。
EnOcean技术和同类技术相比，功耗最低，传输距离最远，可以组网并且支持中继等功能，主要应用在一些无线无源智能家居和智能楼宇产品上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-0cedae97e0c6b893a9e7e39fa8e811ce_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;7、Lora：LoRa 是LPWAN通信技术中的一种，是美国Semtech公司采用和推广的一种基于扩频技术的超远距离无线传输方案。这一方案改变了以往关于传输距离与功耗的折衷考虑方式，为用户提供一种简单的能实现远距离、长电池寿命、大容量的系统，进而扩展传感网络。目前，LoRa 主要在全球免费频段运行，包括433、868、915 MHz等。&lt;/p&gt;
&lt;p&gt;LoRa技术具有远距离、低功耗（电池寿命长）、多节点、低成本的特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/v2-ba8b60a2322ded798c3f360c6a0f009b_1440w.jpg&#34; alt=&#34;&#34;&gt;
8、NB-IOT：基于蜂窝的窄带物联网（Narrow Band Internet of Things, NB-IoT）,NB-IoT构建于蜂窝网络，只消耗大约180KHz的带宽，可直接部署于GSM网络、UMTS网络或LTE网络，以降低部署成本、实现平滑升级。&lt;/p&gt;
&lt;p&gt;NB-IoT是IoT领域一个新兴的技术，支持低功耗设备在广域网的蜂窝数据连接，也被叫作低功耗广域网(LPWAN)。NB-IoT支持待机时间长、对网络连接要求较高设备的高效连接。据说NB-IoT设备电池寿命可以提高至至少10年，同时还能提供非常全面的室内蜂窝数据连接覆盖。&lt;/p&gt;
&lt;p&gt;NB-IoT具备四大特点：一是广覆盖，将提供改进的室内覆盖，在同样的频段下，NB-IoT比现有的网络增益20dB，相当于提升了100倍覆盖区域的能力；二是具备支撑海量连接的能力，NB-IoT一个扇区能够支持10万个连接，支持低延时敏感度、超低的设备成本、低设备功耗和优化的网络架构；三是更低功耗，NB-IoT终端模块的待机时间可长达10年；四是更低的模块成本，企业预期的单个接连模块不超过5美元。&lt;/p&gt;
&lt;p&gt;NB-IOT聚焦于低功耗广覆盖（LPWA）物联网（IOT）市场，是一种可在全球范围内广泛应用的新兴技术。其具有覆盖广、连接多、速率低、成本低、功耗低、架构优等特点。NB-IOT使用License频段，可采取带内、保护带或独立载波三种部署方式，与现有网络共存。&lt;/p&gt;
&lt;p&gt;智能家居有线通信技术主要有：RS485、RS232、Modbus、KNX&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/9cba08fba4cc5c9343865d320161cef0_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、RS485：RS-485又名TIA-485-A, ANSI/TIA/EIA-485或TIA/EIA-485。&lt;/p&gt;
&lt;p&gt;RS485是一个定义平衡数字多点系统中的驱动器和接收器的电气特性的标准，该标准由电信行业协会和电子工业联盟定义。使用该标准的数字通信网络能在远距离条件下以及电子噪声大的环境下有效传输信号。RS-485使得廉价本地网络以及多支路通信链路的配置成为可能。&lt;/p&gt;
&lt;p&gt;RS485有两线制和四线制两种接线，四线制只能实现点对点的通信方式，现很少采用，现在多采用的是两线制接线方式，这种接线方式为总线式拓扑结构，在同一总线上最多可以挂接32个节点。&lt;/p&gt;
&lt;p&gt;很多主流的有线智能家居厂家采用的都是RS485协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/0aa1e478e770ffa01a4d79b2ddbfffb3_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、RS232：个人计算机上的通讯接口之一，由电子工业协会所制定的异步传输标准接口。通常 RS-232 接口以9个引脚 (DB-9) 或是25个引脚 (DB-25) 的型态出现，一般个人计算机上会有两组 RS-232 接口，分别称为 COM1 和 COM2。很多老式电脑的接口用的就是这种通讯协议。少数的智能家居产品会采用这种协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/0b3c6f0707fcfd1ba578e49a902a8cff_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、Modbus：Modbus是由Modicon（现为施耐德电气公司的一个品牌）在1979年发明的，是全球第一个真正用于工业现场的总线协议。&lt;/p&gt;
&lt;p&gt;ModBus网络是一个工业通信系统，由带智能终端的可编程序控制器和计算机通过公用线路或局部专用线路连接而成。其系统结构既包括硬件、亦包括软件。它可应用于各种数据采集和过程监控。&lt;/p&gt;
&lt;p&gt;ModBus网络只有一个主机，所有通信都由他发出。网络可支持247个之多的远程从属控制器，但实际所支持的从机数要由所用通信设备决定。采用这个系统，各PC可以和中心主机交换信息而不影响各PC执行本身的控制任务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/80/8ee0dd6c3c179e26d2505e71ff859a47_1440w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、KNX：1999年5月，欧洲三大总线协议EIB、BatiBus和EHSA合并成立了Konnex协会，提出了KNX协议。该协议以EIB为基础，兼顾了BatiBus和EHSA的物理层规范，并吸收了BatiBus和EHSA中配置模式等优点，提供了家庭、楼宇自动化的完整解决方案。&lt;/p&gt;
&lt;p&gt;KNX 总线是独立于制造商和应用领域的系统。 通过所有的总线设备连接到 KNX 介质上 ( 这些介质包括双绞线、射频、电力线或 IP/Ethernet), 它们可以进行信息交换。总线设备可以是传感器也可以是执行器，用于控制楼宇管理装置如： 照明 , 、遮光 / 百叶窗、保安系统、能源管理、 供暖、通风、空调系统、信号和监控系统、服务界面及楼宇控制系统、远程控制、计量、视频 / 音频控制、大型家电等。所有这些功能通过一个统一的系统就可以进行控制、监视和发送信号，不需要额外的控制中心。&lt;/p&gt;
&lt;p&gt;RS485、Modbus、KNX目前在有线智能家居领域应用较为广泛。&lt;/p&gt;
&lt;p&gt;上述所介绍的有线、无线智能家居技术仅是简要概括，需要详细了解可进一步搜索查找。&lt;/p&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ai/" term="AI" label="AI" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Docker常用命令汇总</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/" />
            <id>https://chenbokaix250.github.io/tech/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</id>
            <updated>2020-12-06T01:19:39&#43;08:00</updated>
            <published>2020-12-06T01:13:15&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker常用命令总结 1.目的 总结Docker常用命令，便于梳理和巩固对Docke……</summary>
            
                <content type="html">&lt;h1 id=&#34;docker常用命令总结&#34;&gt;docker常用命令总结&lt;/h1&gt;
&lt;h2 id=&#34;1目的&#34;&gt;1.目的&lt;/h2&gt;
&lt;p&gt;总结Docker常用命令，便于梳理和巩固对Docker的学习，也便于能够研究Docker更深层面的技术实现。&lt;/p&gt;
&lt;h2 id=&#34;2仓库相关&#34;&gt;2.仓库相关&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker search $KEY_WORD              # 查找镜像
$ docker pull $REGISTRY:$TAG           # 获取镜像
$ docker push $IMAGE_NAME:$IMAGE_TAG   # 推送镜像到仓库，需要先登录
$ docker login $REGISTRY_URL           # 登录仓库
$ docker logout $REGISTRY_URL          # 退出仓库
$ docker info                          # 显示Docker详细的系统信息，可查看仓库地址
$ docker --help                        # 显示Docker的帮助信息
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3容器相关&#34;&gt;3.容器相关&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker attach $CONTAINER_ID  # 启动一个已存在的docker容器
$ docker stop $CONTAINER_ID    # 停止docker容器
$ docker start $CONTAINER_ID   # 启动docker容器
$ docker restart $CONTAINER_ID # 重启docker容器
$ docker kill $CONTAINER_ID    # 强制关闭docker容器
$ docker pause $CONTAINER_ID   # 暂停容器
$ docker unpause $CONTAINER_ID # 恢复暂停的容器
$ docker rename $CONTAINER_ID  # 重新命名docker容器
$ docker rm $CONTAINER_ID      # 删除容器

$ docker logs $CONTAINER_ID    # 查看docker容器运行日志，确保正常运行
$ docker inspect $CONTAINER_ID # 查看container的容器属性，比如ip等等
$ docker port $CONTAINER_ID    # 查看container的端口映射
$ docker top $CONTAINER_ID     # 查看容器中正在运行的进程
$ docker commit $CONTAINER_ID $NEW_IMAGE_NAME:$NEW_IMAGE_TAG # 将容器保存为镜像
$ docker ps -a                 # 查看所有容器
$ docker stats                 # 查看容器的资源使用情况

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4镜像相关&#34;&gt;4.镜像相关&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker images                      # 查看本地镜像
$ docker rmi $IMAGE_ID               # 删除本地镜像
$ docker inspect $IMAGE_ID           # 查看镜像详情
$ docker save $IMAGE_ID &amp;gt; 文件路径   # 保存镜像为离线文件
$ docker save -o 文件路径 $IMAGE_ID  # 保存镜像为离线文件
$ docker load &amp;lt; 文件路径             # 加载文件为docker镜像
$ docker load -i 文件路径            # 加载文件为docker镜像
$ docker tag $IMAGE_ID $NEW_IMAGE_NAME:$NEW_IMAGE_TAG  # 修改镜像TAG
$ docker run 参数 $IMAGE_ID $CMD     # 运行一个镜像
$ docker history $IMAGE_ID           # 显示镜像每层的变更内容

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5run命令相关&#34;&gt;5.run命令相关&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -d，后台运行容器, 并返回容器ID；不指定时, 启动后开始打印日志, Ctrl+C退出命令同时会关闭容器
# -i，以交互模式运行容器, 通常与-t同时使用
# -t，为容器重新分配一个伪输入终端, 通常与-i同时使用
# --name container_name，设置容器名称, 不指定时随机生成
# -h container_hostname，设置容器的主机名, 默认随机生成
# --dns 8.8.8.8，指定容器使用的DNS服务器, 默认和宿主机一致
# -e docker_host=172.17.0.1，设置环境变量
# --cpuset=&amp;quot;0-2&amp;quot; or --cpuset=&amp;quot;0,1,2&amp;quot;，绑定容器到指定CPU运行
# -m 100M，设置容器使用内存最大值
# --net bridge，指定容器的网络连接类型, 支持bridge/host/none/container四种类型
# --ip 172.18.0.13，为容器指定固定IP（需要使用自定义网络none）
# --expose 8081 --expose 8082，开放一个端口或一组端口，会覆盖镜像设置中开放的端口
# -p [宿主机端口]:[容器内端口]，宿主机到容器的端口映射，可指定宿主机的要监听的IP，默认为0.0.0.0
# -P，注意是大写的, 宿主机随机指定一组可用的端口映射容器expose的所有端口
# -v [宿主机目录路径]:[容器内目录路径]，挂载宿主机的指定目录（或文件）到容器内的指定目录（或文件）
# --add-host [主机名]:[IP]，为容器hosts文件追加host, 默认会在hosts文件最后追加[主机名]:[容器IP]
# --volumes-from [其他容器名]，将其他容器的数据卷添加到此容器
# --link [其他容器名]:[在该容器中的别名]，添加链接到另一个容器，在本容器hosts文件中加入关联容器的记录，效果类似于--add-host

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Multi_task_learning</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/multi_task_learning/" />
            <id>https://chenbokaix250.github.io/tech/multi_task_learning/</id>
            <updated>2020-12-06T01:29:10&#43;08:00</updated>
            <published>2020-12-02T22:02:25&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">多任务学习简述 什么是多任务学习 多任务学习（Multi-Task Learning）顾名……</summary>
            
                <content type="html">&lt;h1 id=&#34;多任务学习简述&#34;&gt;多任务学习简述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;什么是多任务学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多任务学习（Multi-Task Learning）顾名思义就是把多个任务放在一起学习，即对多个任务的目标一起联合建模并训练
我们的大脑工作机制也是如此，我们时刻都在进行着多任务学习，而且不同任务之间在相互影响着。比如学习英语和法语，你学习其中的一门语言是有助于另一门语言的学习的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要多任务学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多任务学习可以将多个任务联合训练，只需一个流程就可以实现多个任务的学习
多任务学习可以挖掘不同任务间的联系，通过共享特征的方式实现迁移学习
多任务学习一定程度上对其中的任务进行泛化，使得模型不容易过拟合&lt;/p&gt;
&lt;h2 id=&#34;tensorflow实现&#34;&gt;TensorFlow实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;双任务学习示例图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/15606334-ead814b6c139d5c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1154/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;两个任务除了有各自的TaskLayer参数，还有个共享参数层SharedLayer，那么这样的网络如何来训练呢？下面介绍两种训练方法以及代码实现&lt;/p&gt;
&lt;h2 id=&#34;交替训练-alternative-trainning&#34;&gt;交替训练 Alternative Trainning&lt;/h2&gt;
&lt;p&gt;如图所示，交替训练的意思就是在迭代训练中你来我往地交替进行各自的loss学习&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/15606334-903af5f2062e954f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Import Tensorflow and Numpy
import tensorflow as tf
import numpy as np

# ======================
# Define the Graph
# ======================

# Define the Placeholders
X = tf.placeholder(&amp;quot;float&amp;quot;, [10, 10], name=&amp;quot;X&amp;quot;)
Y1 = tf.placeholder(&amp;quot;float&amp;quot;, [10, 20], name=&amp;quot;Y1&amp;quot;)
Y2 = tf.placeholder(&amp;quot;float&amp;quot;, [10, 20], name=&amp;quot;Y2&amp;quot;)

# Define the weights for the layers
initial_shared_layer_weights = np.random.rand(10,20)
initial_Y1_layer_weights = np.random.rand(20,20)
initial_Y2_layer_weights = np.random.rand(20,20)

shared_layer_weights = tf.Variable(initial_shared_layer_weights, name=&amp;quot;share_W&amp;quot;, dtype=&amp;quot;float32&amp;quot;)
Y1_layer_weights = tf.Variable(initial_Y1_layer_weights, name=&amp;quot;share_Y1&amp;quot;, dtype=&amp;quot;float32&amp;quot;)
Y2_layer_weights = tf.Variable(initial_Y2_layer_weights, name=&amp;quot;share_Y2&amp;quot;, dtype=&amp;quot;float32&amp;quot;)

# Construct the Layers with RELU Activations
shared_layer = tf.nn.relu(tf.matmul(X,shared_layer_weights))
Y1_layer = tf.nn.relu(tf.matmul(shared_layer,Y1_layer_weights))
Y2_layer = tf.nn.relu(tf.matmul(shared_layer,Y2_layer_weights))

# Calculate Loss
Y1_Loss = tf.nn.l2_loss(Y1-Y1_layer)
Y2_Loss = tf.nn.l2_loss(Y2-Y2_layer)
Joint_Loss = Y1_Loss + Y2_Loss

# optimisers
Optimiser = tf.train.AdamOptimizer().minimize(Joint_Loss)
Y1_op = tf.train.AdamOptimizer().minimize(Y1_Loss)
Y2_op = tf.train.AdamOptimizer().minimize(Y2_Loss)

with tf.Session() as session:
    session.run(tf.initialize_all_variables())
    for iters in range(10000):
        if np.random.rand() &amp;lt; 0.5:
            _, Y1_loss = session.run([Y1_op, Y1_Loss],
                            {
                              X: np.random.rand(10,10)*10,
                              Y1: np.random.rand(10,20)*10,
                              Y2: np.random.rand(10,20)*10
                              })
            print(&amp;quot;iteration:{}, y1_loss:{}&amp;quot;.format(iters, Y1_loss))
        else:
            _, Y2_loss = session.run([Y2_op, Y2_Loss],
                            {
                              X: np.random.rand(10,10)*10,
                              Y1: np.random.rand(10,20)*10,
                              Y2: np.random.rand(10,20)*10
                              })
            print(&amp;quot;iteration:{}, y2_loss:{}&amp;quot;.format(iters, Y2_loss))
    session.close()

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;什么时候选择交替训练呢？当不同任务有各自的训练数据时，就可以对不同的任务输入各自的数据，而无需去构造一份专门的数据。如果不同任务的数据集数量差距太大时，此时模型会偏向于数据量大的任务。&lt;/p&gt;
&lt;h2 id=&#34;联合训练--joint-training&#34;&gt;联合训练  Joint Training&lt;/h2&gt;
&lt;p&gt;当你有一份数据带有不同的标签时，就可以对多任务同时进行训练了，怎么做到呢，很简单，只需要把不同任务的loss做一个加权和即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/15606334-d07b839da2543e16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码-1&#34;&gt;代码&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Import Tensorflow and Numpy
import tensorflow as tf
import numpy as np

# ======================
# Define the Graph
# ======================

# Define the Placeholders
X = tf.placeholder(&amp;quot;float&amp;quot;, [10, 10], name=&amp;quot;X&amp;quot;)
Y1 = tf.placeholder(&amp;quot;float&amp;quot;, [10, 20], name=&amp;quot;Y1&amp;quot;)
Y2 = tf.placeholder(&amp;quot;float&amp;quot;, [10, 20], name=&amp;quot;Y2&amp;quot;)

# Define the weights for the layers

initial_shared_layer_weights = np.random.rand(10,20)
initial_Y1_layer_weights = np.random.rand(20,20)
initial_Y2_layer_weights = np.random.rand(20,20)

shared_layer_weights = tf.Variable(initial_shared_layer_weights, name=&amp;quot;share_W&amp;quot;, dtype=&amp;quot;float32&amp;quot;)
Y1_layer_weights = tf.Variable(initial_Y1_layer_weights, name=&amp;quot;share_Y1&amp;quot;, dtype=&amp;quot;float32&amp;quot;)
Y2_layer_weights = tf.Variable(initial_Y2_layer_weights, name=&amp;quot;share_Y2&amp;quot;, dtype=&amp;quot;float32&amp;quot;)

# Construct the Layers with RELU Activations
shared_layer = tf.nn.relu(tf.matmul(X,shared_layer_weights))
Y1_layer = tf.nn.relu(tf.matmul(shared_layer,Y1_layer_weights))
Y2_layer = tf.nn.relu(tf.matmul(shared_layer,Y2_layer_weights))

# Calculate Loss
Y1_Loss = tf.nn.l2_loss(Y1-Y1_layer)
Y2_Loss = tf.nn.l2_loss(Y2-Y2_layer)
Joint_Loss = 0.5*Y1_Loss + 0.5*Y2_Loss

# optimisers
Optimiser = tf.train.AdamOptimizer().minimize(Joint_Loss)
Y1_op = tf.train.AdamOptimizer().minimize(Y1_Loss)
Y2_op = tf.train.AdamOptimizer().minimize(Y2_Loss)

# Joint Training
# Calculation (Session) Code
# ==========================

# open the session
with tf.Session() as session:
    session.run(tf.initialize_all_variables())
    for iters in range(10000):
        _, Joint_loss = session.run([Optimiser, Joint_Loss],
                    {
                      X: np.random.rand(10,10)*10,
                      Y1: np.random.rand(10,20)*10,
                      Y2: np.random.rand(10,20)*10
                      })
        print(&amp;quot;iteration:{}, joint_loss:{}&amp;quot;.format(iters, Joint_loss))
    session.close()
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Gtest小结</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/gtest%E5%9C%A8xcode%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/" />
            <id>https://chenbokaix250.github.io/tech/gtest%E5%9C%A8xcode%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-11-24T15:00:18&#43;08:00</updated>
            <published>2020-11-21T14:39:56&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">gtest 小结 1. gtest在xcode的配置 Build Settings设置: Header Search Paths 添加 /usr/local/include Library Search Paths 添加 /usr/local/lib/……</summary>
            
                <content type="html">&lt;h1 id=&#34;gtest-小结&#34;&gt;gtest 小结&lt;/h1&gt;
&lt;h2 id=&#34;1-gtest在xcode的配置&#34;&gt;1. gtest在xcode的配置&lt;/h2&gt;
&lt;h3 id=&#34;build-settings设置&#34;&gt;Build Settings设置:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Header Search Paths&lt;/strong&gt; 添加 &lt;code&gt;/usr/local/include&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Library Search Paths&lt;/strong&gt; 添加 &lt;code&gt;/usr/local/lib/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other Linker Flags&lt;/strong&gt; 添加&lt;code&gt;/usr/local/lib/libgtest.a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;build-phases设置&#34;&gt;Build Phases设置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Link Binary With Libraries&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//添加
libgtest_main.a
libgtest.a
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2认识gtest&#34;&gt;2.认识gtest&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int Foo(int a, int b)
{
    if (a == 0 || b == 0)
    {
        throw &amp;quot;don&#39;t do that&amp;quot;;
    }
    int c = a % b;
    if (c == 0)
        return b;
    return Foo(b, c);
}
---------------------------------------
#include &amp;lt;gtest/gtest.h&amp;gt;

TEST(FooTest, HandleNoneZeroInput)
{
    EXPECT_EQ(2, Foo(4, 10));
    EXPECT_EQ(6, Foo(30, 18));
}

--------------------------------------
int _tmain(int argc, _TCHAR* argv[])
{
    testing::InitGoogleTest(&amp;amp;argc, argv);
    return RUN_ALL_TESTS();
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数是用来求最大公约数.&lt;/p&gt;
&lt;p&gt;使用了TEST这个宏,它有两个参数，官方的对这两个参数的解释为：[TestCaseName，TestName]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;testing::InitGoogleTest(&amp;amp;argc, argv)&lt;/code&gt; ：gtest的测试案例允许接收一系列的命令行参数，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN_ALL_TESTS()&lt;/code&gt;  运行所有测试案例.&lt;/p&gt;
&lt;h2 id=&#34;2断言&#34;&gt;2.断言&lt;/h2&gt;
&lt;p&gt;断言的宏可以理解为分为两类，一类是ASSERT系列，一类是EXPECT系列。一个直观的解释就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ASSERT_* 系列的断言，当检查点失败时，退出当前函数（注意：并非退出当前案例）。&lt;/li&gt;
&lt;li&gt;EXPECT_* 系列的断言，当检查点失败时，继续往下执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//int型比较,预期值:3,实际值:Add(1,2)
EXPECT_EQ(3,Add(1,2))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3事件机制&#34;&gt;3.事件机制&lt;/h2&gt;
&lt;p&gt;gtest提供了多种事件机制，非常方便我们在案例之前或之后做一些操作。总结一下gtest的事件一共有3种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局的，所有案例执行前后。&lt;/li&gt;
&lt;li&gt;TestSuite级别的，在某一批案例中第一个案例前，最后一个案例执行后。&lt;/li&gt;
&lt;li&gt;TestCase级别的，每个TestCase前后。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全局事件，必须写一个类，继承testing::Environment类，实现里面的SetUp和TearDown方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SetUp()方法在所有案例执行前执行&lt;/li&gt;
&lt;li&gt;TearDown()方法在所有案例执行后执行&lt;/li&gt;
&lt;li&gt;需要在main函数中通过testing::AddGlobalTestEnvironment方法将事件挂进来&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class FooEnvironment : public testing::Environment
{
public:
    virtual void SetUp()
    {
        std::cout &amp;lt;&amp;lt; &amp;quot;Foo FooEnvironment SetUP&amp;quot; &amp;lt;&amp;lt; std::endl;
    }
    virtual void TearDown()
    {
        std::cout &amp;lt;&amp;lt; &amp;quot;Foo FooEnvironment TearDown&amp;quot; &amp;lt;&amp;lt; std::endl;
    }
};

int _tmain(int argc, _TCHAR* argv[])
{
    testing::AddGlobalTestEnvironment(new FooEnvironment);
    testing::InitGoogleTest(&amp;amp;argc, argv);
    return RUN_ALL_TESTS();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;运行参数&#34;&gt;运行参数&lt;/h2&gt;
&lt;p&gt;gtest提供了一系列的运行参数（环境变量、命令行参数或代码里指定），使得我们可以对案例的执行进行一些有效的控制。&lt;/p&gt;
&lt;p&gt;gtest提供了三种设置的途径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;系统环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码中指定FLAG
比较理想的优先级:
命令行参数 &amp;gt; 代码中指定FLAG &amp;gt; 系统环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--gtest_filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--gtest_output=xml[:DIRECTORY_PATH|:FILE_PATH]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--gtest_catch_exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时使用--gtest_filter和--gtest_output=xml:时，在xml测试报告中能否只包含过滤后的测试案例的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有时，我在代码中设置 testing::GTEST_FLAG(catch_exceptions) = 1和我在命令行中使用--gtest_catch_exceptions结果稍有不同，在代码中设置FLAG方式有时候捕捉不了某些异常，但是通过命令行参数的方式一般都不会有问题。这是我曾经遇到过的一个问题，最后我的处理办法是既在代码中设置FLAG，又在命令行参数中传入--gtest_catch_exceptions。不知道是gtest在catch_exceptions方面不够稳定，还是我自己测试案例的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[转]家庭网络指南</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/" />
            <id>https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/</id>
            <updated>2020-11-18T22:59:31&#43;08:00</updated>
            <published>2020-11-18T22:58:34&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Awesome Home Networking 本文档主要用于整理家庭网络相关知识，目前由 Blanboom 维护。 感谢原作者 目录 Awesome Home Networking 目录 网站……</summary>
            
                <content type="html">&lt;h1 id=&#34;awesome-home-networking&#34;&gt;Awesome Home Networking&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://awesome.re&#34;&gt;&lt;img src=&#34;https://awesome.re/badge.svg&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文档主要用于整理家庭网络相关知识，目前由 &lt;a href=&#34;https://blanboom.org/&#34;&gt;Blanboom&lt;/a&gt; 维护。&lt;/p&gt;
&lt;h2 id=&#34;感谢原作者&#34;&gt;感谢原作者&lt;/h2&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#awesome-home-networking&#34;&gt;Awesome Home Networking&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%9B%AE%E5%BD%95&#34;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BD%91%E7%AB%99%E4%B8%8E%E8%B5%84%E6%BA%90&#34;&gt;网站与资源&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E4%B8%BB%E9%A2%98%E7%BD%91%E7%AB%99&#34;&gt;主题网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%AE%A8%E8%AE%BA%E5%8C%BA&#34;&gt;讨论区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%9B%B8%E5%85%B3%E7%BB%84%E7%BB%87&#34;&gt;相关组织&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#youtuberbilibili-up-%E4%B8%BB&#34;&gt;YouTuber、Bilibili UP 主&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E4%B9%A6%E7%B1%8D%E6%95%99%E7%A8%8B&#34;&gt;书籍、教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%A1%AC%E4%BB%B6%E8%AE%BE%E5%A4%87&#34;&gt;硬件设备&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%AE%BE%E5%A4%87%E7%B1%BB%E5%9E%8B&#34;&gt;设备类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%97%A0%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8&#34;&gt;无线路由器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%97%A0%E7%BA%BF-mesh-%E7%B3%BB%E7%BB%9F%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1&#34;&gt;无线 mesh 系统/分布式路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%97%A0%E7%BA%BF-ap&#34;&gt;无线 AP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E4%BA%A4%E6%8D%A2%E6%9C%BA&#34;&gt;交换机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%9C%89%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8&#34;&gt;有线路由器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%BD%AF%E8%B7%AF%E7%94%B1&#34;&gt;软路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%85%89%E7%8C%AB&#34;&gt;光猫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%BC%80%E5%8F%91%E6%9D%BF&#34;&gt;开发板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%AE%BE%E5%A4%87&#34;&gt;企业级设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%85%B6%E4%BB%96&#34;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97&#34;&gt;选购指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%AE%BE%E5%A4%87%E5%8E%82%E5%95%86%E4%B8%8E%E5%93%81%E7%89%8C&#34;&gt;设备厂商与品牌&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#tp-link--mercury--fast&#34;&gt;TP-LINK / MERCURY / FAST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%8D%8E%E7%A1%95-asus&#34;&gt;华硕 ASUS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BD%91%E4%BB%B6-netgear&#34;&gt;网件 NETGEAR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E9%A2%86%E5%8A%BF-linksys&#34;&gt;领势 Linksys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%96%90%E8%AE%AF&#34;&gt;斐讯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%96%B0%E8%B7%AF%E7%94%B1-newifi&#34;&gt;新路由 newifi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%85%BE%E8%BE%BE-tenda&#34;&gt;腾达 Tenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%B0%8F%E7%B1%B3&#34;&gt;小米&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%8D%8E%E4%B8%BA%E8%8D%A3%E8%80%80&#34;&gt;华为、荣耀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%96%B0%E5%8D%8E%E4%B8%89-h3c&#34;&gt;新华三 H3C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%8F%8B%E8%AE%AF-d-link&#34;&gt;友讯 D-Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#360&#34;&gt;360&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BE%A4%E6%99%96-synology&#34;&gt;群晖 Synology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E4%BC%98%E5%80%8D%E5%BF%AB-ubiquiti&#34;&gt;优倍快 Ubiquiti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#apple-airport&#34;&gt;Apple AirPort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#mikrotik&#34;&gt;MikroTik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%AB%9E%E6%96%97%E4%BA%91&#34;&gt;竞斗云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%88%B1%E5%BF%AB-ikuai&#34;&gt;爱快 iKuai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%A3%8A%E7%A7%91&#34;&gt;磊科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#eero&#34;&gt;eero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#google-nest-wi-fi&#34;&gt;Google Nest Wi-Fi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%AF%BA%E5%9F%BA%E4%BA%9A-nokia&#34;&gt;诺基亚 Nokia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%8A%AF%E7%89%87%E5%8E%82%E5%95%86&#34;&gt;芯片厂商&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&#34;&gt;操作系统&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#openwrt&#34;&gt;OpenWrt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#asuswrt&#34;&gt;ASUSWRT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#padavanrt-n56u&#34;&gt;padavan/rt-n56u&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#routeros&#34;&gt;RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#pfsenceopnsense&#34;&gt;pfSence/OPNSense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#vyos&#34;&gt;VyOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#edgeos&#34;&gt;EdgeOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%88%B1%E5%BF%AB-ikuaios&#34;&gt;爱快 iKuaiOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#tomato&#34;&gt;Tomato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#dd-wrt&#34;&gt;DD-WRT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BB%84%E7%BD%91%E7%9B%B8%E5%85%B3&#34;&gt;组网相关&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#mesh-%E7%BD%91%E7%BB%9C%E6%9C%89%E7%BA%BF%E5%9B%9E%E7%A8%8B&#34;&gt;mesh 网络、有线回程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%9C%89%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8--ac--ap&#34;&gt;有线路由器 + AC + AP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#vlan-%E5%88%92%E5%88%86&#34;&gt;VLAN 划分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1&#34;&gt;单臂路由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5&#34;&gt;技术概念&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#mu-mimo&#34;&gt;MU-MIMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#wi-fi-6wi-fi-6ewi-fi-6&#34;&gt;Wi-Fi 6、Wi-Fi 6E、Wi-Fi 6+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#160mhz-%E9%A2%91%E5%AE%BD&#34;&gt;160MHz 频宽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#palna%E5%8A%9F%E6%94%BE&#34;&gt;PA/LNA/功放&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8A%9F%E8%83%BD&#34;&gt;软硬件功能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#upnpnat-pmp%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84&#34;&gt;UPnP/NAT-PMP/端口映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#ddns&#34;&gt;DDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%B5%81%E9%87%8F%E6%95%B4%E5%BD%A2%E4%B8%8E-qos&#34;&gt;流量整形与 QoS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#captive-portal&#34;&gt;Captive Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F&#34;&gt;内网穿透&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%AE%B6%E9%95%BF%E6%8E%A7%E5%88%B6&#34;&gt;家长控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%86%85%E5%AE%B9%E8%BF%87%E6%BB%A4&#34;&gt;内容过滤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#ipsids&#34;&gt;IPS/IDS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%B5%81%E9%87%8F%E7%BB%9F%E8%AE%A1dpi&#34;&gt;流量统计/DPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%A4%9A-wan-%E5%8F%A3%E5%A4%9A%E6%8B%A8&#34;&gt;多 WAN 口、多拨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%B8%A6%E5%AE%BD%E6%8F%90%E5%8D%87&#34;&gt;带宽提升&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F&#34;&gt;游戏加速&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E6%95%B4%E5%90%88&#34;&gt;智能家居整合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8&#34;&gt;运行第三方应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%99%9A%E6%8B%9F%E5%8C%96&#34;&gt;虚拟化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%89%8B%E6%9C%BA-app&#34;&gt;手机 App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#snmp&#34;&gt;SNMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8%E5%AA%92%E4%BD%93%E4%B8%AD%E5%BF%83&#34;&gt;网络存储、媒体中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E6%95%B4%E5%90%88&#34;&gt;第三方服务整合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#bonjourmdns&#34;&gt;Bonjour/mDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%A0%A1%E5%9B%AD%E7%BD%91&#34;&gt;校园网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%AE%89%E5%85%A8%E6%80%A7&#34;&gt;安全性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0&#34;&gt;相关文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%BC%80%E6%BA%90%E5%9B%BA%E4%BB%B6-vs-%E9%97%AD%E6%BA%90%E5%9B%BA%E4%BB%B6&#34;&gt;开源固件 vs 闭源固件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%AE%98%E6%96%B9%E7%89%88%E5%9B%BA%E4%BB%B6-vs-%E4%BF%AE%E6%94%B9%E7%89%88%E5%9B%BA%E4%BB%B6&#34;&gt;官方版固件 vs 修改版固件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B0&#34;&gt;软件更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#linux-%E5%AE%89%E5%85%A8%E7%89%B9%E6%80%A7%E7%9A%84%E5%BA%94%E7%94%A8&#34;&gt;Linux 安全特性的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#krack&#34;&gt;KRACK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#wpa3&#34;&gt;WPA3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE&#34;&gt;防火墙配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BD%91%E7%BB%9C%E8%B4%A8%E9%87%8F%E4%BC%98%E5%8C%96&#34;&gt;网络质量优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD&#34;&gt;基础设施&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%A3%85%E4%BF%AE%E4%B8%8E%E5%B8%83%E7%BA%BF&#34;&gt;装修与布线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%BC%B1%E7%94%B5%E7%AE%B1%E6%9C%BA%E6%9F%9C&#34;&gt;弱电箱、机柜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%85%B6%E4%BB%96%E5%88%9B%E6%84%8F&#34;&gt;其他创意&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BD%91%E7%BB%9C%E8%AF%8A%E6%96%AD%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7&#34;&gt;网络诊断、调试工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#isp-%E7%9B%B8%E5%85%B3&#34;&gt;ISP 相关&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%BF%90%E8%90%A5%E5%95%86%E9%80%89%E6%8B%A9&#34;&gt;运营商选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%85%AC%E7%BD%91-ipipv6-%E5%9C%B0%E5%9D%80%E7%9A%84%E8%8E%B7%E5%8F%96&#34;&gt;公网 IP、IPv6 地址的获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%85%89%E7%8C%AB%E6%94%B9%E6%A1%A5%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8B%A8%E5%8F%B7&#34;&gt;光猫改桥接，使用路由器拨号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#iptv-%E7%9B%B8%E5%85%B3&#34;&gt;IPTV 相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%9B%B8%E5%85%B3%E6%94%BF%E7%AD%96%E6%8A%95%E8%AF%89%E6%96%B9%E5%BC%8F&#34;&gt;相关政策、投诉方式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BAqa&#34;&gt;常见误区、Q&amp;amp;A&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BB%88%E7%AB%AF%E5%8F%AA%E6%94%AF%E6%8C%81-2x2-mimo%E6%B2%A1%E6%9C%89%E5%BF%85%E8%A6%81%E9%80%89%E7%94%A8-3x3-mimo-%E6%88%96-4x4-mimo-%E7%9A%84%E6%97%A0%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8&#34;&gt;终端只支持 2x2 MIMO，没有必要选用 3x3 MIMO 或 4x4 MIMO 的无线路由器？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B&#34;&gt;综合案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E6%AC%A2%E8%BF%8E%E5%8F%82%E4%B8%8E&#34;&gt;欢迎参与&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%AE%B8%E5%8F%AF%E8%AF%81&#34;&gt;许可证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Created by &lt;a href=&#34;https://github.com/ekalinin/github-markdown-toc.go&#34;&gt;gh-md-toc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;网站与资源&#34;&gt;网站与资源&lt;/h2&gt;
&lt;h3 id=&#34;主题网站&#34;&gt;主题网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwifi.net/&#34;&gt;acwifi.net 路由器交流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/tag/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87&#34;&gt;少数派：#网络设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/fenlei/wangluoshebei/&#34;&gt;什么值得买：网络设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/&#34;&gt;SmallNetBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.servethehome.com/&#34;&gt;ServeTheHome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20191022065144/https://wikidevi.com/wiki/Main_Page&#34;&gt;WikiDevi&lt;/a&gt;: 一个关于无线芯片、网络设备等硬件的 Wiki，目前网站已关闭&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fccid.io/&#34;&gt;fccid.io&lt;/a&gt;: 能够找到各种无线设备的说明书、照片、拆机图等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讨论区&#34;&gt;讨论区&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://koolshare.cn/&#34;&gt;KoolShare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.anywlan.com/&#34;&gt;Anywlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/forum.php&#34;&gt;恩山无线论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bbs.mydigit.cn/thread.php?fid=147&#34;&gt;数码之家：WiFi/路由器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/go/bb&#34;&gt;V2EX: 宽带症候群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/go/router&#34;&gt;V2EX: 路由器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chiphell.com/forum.php?mod=forumdisplay&amp;amp;fid=36&amp;amp;filter=typeid&amp;amp;typeid=736&#34;&gt;Chiphell: 电脑讨论 - 网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.snbforums.com/&#34;&gt;SmallNetBuilder Forums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/homelab/&#34;&gt;Reddit: r/homelab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/HomeNetworking/&#34;&gt;Reddit: r/HomeNetworking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;网络设备厂商官网的讨论区&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关组织&#34;&gt;相关组织&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wi-fi.org/zh-hans&#34;&gt;Wi-Fi Alliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.srrc.org.cn/index2018.aspx&#34;&gt;国家无线电监测中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;youtuberbilibili-up-主&#34;&gt;YouTuber、Bilibili UP 主&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCHkYOD-3fZbuGhwsADBd9ZQ&#34;&gt;YouTube: Lawrence Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCVS6ejD9NLZvjsvhcbiDzjw&#34;&gt;YouTube: Crosstalk Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCD-QkofF-bFBAcI83U8ZZeg&#34;&gt;YouTube: Willie Howe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/108142407&#34;&gt;Bilibili: BIG东东&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/28457&#34;&gt;Bilibili: 司波图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/30496941&#34;&gt;Bilibili: NGXHK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/28459251&#34;&gt;Bilibili: Vedio Talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/250915741&#34;&gt;Bilibili: 悟空的日常&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;书籍教程&#34;&gt;书籍、教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lartc.org/&#34;&gt;Linux Advanced Routing &amp;amp; Traffic Control HOWTO&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lartc.org/LARTC-zh_CN.GB2312.pdf&#34;&gt;Linux 的高级路由和流量控制 HOWTO 中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;硬件设备&#34;&gt;硬件设备&lt;/h2&gt;
&lt;h3 id=&#34;设备类型&#34;&gt;设备类型&lt;/h3&gt;
&lt;h4 id=&#34;无线路由器&#34;&gt;无线路由器&lt;/h4&gt;
&lt;p&gt;我们平时最常见的无线路由器（SOHO 无线路由器），其实不仅仅包含路由器的功能，而是整合了路由器、防火墙、交换机、无线 AP 等多种功能为一体。操作和设置相对简单，能够满足绝大多数家庭的需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wireless_router&#34;&gt;Wireless router - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无线-mesh-系统分布式路由&#34;&gt;无线 mesh 系统/分布式路由&lt;/h4&gt;
&lt;p&gt;在单个无线路由器无法满足覆盖面积时，可以通过多台设备组网，扩展无线面积。无线 mesh 系统的多个节点之间可以相互通信，组成网状网络，并在通信时自动选择最佳路径。目前已有大量厂商推出家用的无线 mesh 系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wireless_mesh_network&#34;&gt;Wireless mesh network - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无线-ap&#34;&gt;无线 AP&lt;/h4&gt;
&lt;p&gt;无线 AP 一般仅提供 Wi-Fi 接入功能，需要配合交换机和路由器，才能搭建一个完整的无线网络。多个无线 AP 组网的方式，比起家用无线 mesh 系统，在稳定性、速率、覆盖面积上都占有优势。缺点是安装复杂，主要用于企业，家庭使用时一般需要在装修初期考虑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A%E6%8E%A5%E5%85%A5%E9%BB%9E&#34;&gt;无线接入点 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;交换机&#34;&gt;交换机&lt;/h4&gt;
&lt;p&gt;交换机工作于数据链路层，能够连接同一网络内的多个设备。例如家中有多台电脑、游戏机等设备，而普通无线路由器上的网口数量不足时，就可以使用交换机扩展网口，连接多个设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E4%BA%A4%E6%8F%9B%E5%99%A8&#34;&gt;网络交换机 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;有线路由器&#34;&gt;有线路由器&lt;/h4&gt;
&lt;p&gt;路由器工作于网络层，用于连接两个或多个网络，在多个网络之间转发数据。对于家用场景，路由器一般用于连接运营商网络和家庭网络，负责让家中的设备访问 Internet。&lt;/p&gt;
&lt;p&gt;在普通的无线路由器无法满足需求时，可以使用功能更强大的有线路由器，结合交换机和无线 AP，搭建家庭网络。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8&#34;&gt;路由器 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;软路由&#34;&gt;软路由&lt;/h4&gt;
&lt;p&gt;软路由一般是使用通用的硬件平台，例如 x86 服务器搭建的路由器。报文转发等功能，与普通路由器相比，较少以来专用硬件的加速，而是通过纯软件的形式处理。&lt;/p&gt;
&lt;p&gt;由于软路由使用通用的硬件、拥有较大的内存、大多运行基于 Linux 或 FreeBSD 的操作系统，能够通过软件扩充更多功能，具有更强的灵活性。在性能上，软路由具有更强大的 CPU，但普通的路由器能够通过专门的硬件实现路由转发、QoS、NAT 等功能，无法进行简单的对比。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/263523980&#34;&gt;软路由是什么？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;光猫&#34;&gt;光猫&lt;/h4&gt;
&lt;p&gt;光猫用于将光信号转换为电信号。目前大部分家用光猫也同时具有路由和 Wi-Fi 的功能。&lt;/p&gt;
&lt;p&gt;光猫一般由运营商提供，在安装宽带时租用。部分对网络有追求的用户也会选择自行购买，但不同地区对光猫的要求不同，设置方式也不一定相同，购买前需要先了解相关信息。&lt;/p&gt;
&lt;p&gt;此外还有 PON Stick 这样的硬件，将光猫集成在 SFP+ 模块中，可以直接搭配支持 SFP+ 接口的路由器或交换机使用，减少体积占用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://koolshare.cn/thread-127073-1-1.html&#34;&gt;家用千兆光猫该如何选择？ - 网络设备 - KoolShare - 源于玩家 服务玩家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/thread-170674-1-1.html&#34;&gt;抛弃光猫esxi+光卡+gpon stick模块上网 - 网络设备 - KoolShare - 源于玩家 服务玩家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.natywish.net/product/detail/219.html&#34;&gt;双模 PON STICK ONU SFP-深圳市南天威视科技有限公司&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;开发板&#34;&gt;开发板&lt;/h4&gt;
&lt;p&gt;目前市面上有不少开发板，具有单个或多个网口，运行标准 Linux 或 OpenWrt，部分甚至支持 Wi-Fi，能够实现如下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自制无线路由器&lt;br&gt;大部分开发板性能不一定够用，或者只有一个网口，并没有太多人这样做&lt;/li&gt;
&lt;li&gt;做为 DNS 服务器、代理服务器、HomeBridge/HomeAssistant 服务器等使用&lt;br&gt;部分家用无线路由器也可通过安装软件实现这些功能。不过考虑到性能和稳定性，通过独立的开发板运行相关服务，是一种更好的选择&lt;/li&gt;
&lt;li&gt;连接传感器、显示屏、继电器等，实现物联网、智能家居相关功能&lt;br&gt;开发板大多拥有丰富的 IO 口资源，可以连接更多模块，来实现物联网相关功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的带网络功能的开发板有如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org&#34;&gt;Raspberry Pi&lt;/a&gt; 等单板计算机&lt;br&gt;热门的单板电脑，在网上能够找到大量资源&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wrtnode.cc/&#34;&gt;wrtnode&lt;/a&gt;&lt;br&gt;运行 OpenWrt 的开发板&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.widora.io/&#34;&gt;Widora&lt;/a&gt;&lt;br&gt;运行 OpenWrt 的开发板&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.arduino.cc/usa/arduino-yun-rev-2&#34;&gt;Arduino Yún&lt;/a&gt;&lt;br&gt;运行 OpenWrt 的开发板，且内部与一块 AVR 单片机相互连接，扩展 IO 口资源，并同时融合 Arduino 和 OpenWrt 两种生态。更适合用来制作物联网相关的 DIY 作品&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.banana-pi.org.cn/r1.html&#34;&gt;BPI-R1&lt;/a&gt;&lt;br&gt;带有五个网口、SATA、USB 的开发板&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://espressobin.net/#1479827193124-28c92b06-d318&#34;&gt;Marvell ESPRESSObin&lt;/a&gt;&lt;br&gt;带有三个网口、SATA 接口的开发板，并具有硬件转发芯片&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S/zh&#34;&gt;NanoPi R2S&lt;/a&gt;&lt;br&gt;带有两个网口的开发板，能够运行 Linux，体积小巧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;企业级设备&#34;&gt;企业级设备&lt;/h4&gt;
&lt;p&gt;对于网络爱好者，也可考虑企业级网络设备，例如 Aruba、Ruckus、CISCO，或者国内华为、H3C、锐捷等厂商的设备。&lt;/p&gt;
&lt;p&gt;由于本 List 主要关注家庭网络，不会过多整理企业级设备的相关知识。&lt;/p&gt;
&lt;h4 id=&#34;其他&#34;&gt;其他&lt;/h4&gt;
&lt;p&gt;除了路由器、交换机等设备，市面上还有不少辅助设备，用于增强家庭网络的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wi-Fi 扩展器/信号放大器&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hsk.oray.com/device/&#34;&gt;花生棒&lt;/a&gt;等内网穿透工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fing.com/products/fingbox&#34;&gt;Fingbox&lt;/a&gt;: 集成了局域网扫描、家长控制、带宽监控等功能的独立硬件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://meetcircle.com/&#34;&gt;Circle&lt;/a&gt;: 具有家长控制功能的独立硬件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选购指南&#34;&gt;选购指南&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/basics/wireless-basics/33177-how-to-buy-a-wireless-router-2018-edition&#34;&gt;How To Buy A Wireless Router - 2018 Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/basics/wireless-basics/33029-how-to-buy-a-wireless-router-2017-edition&#34;&gt;How To Buy A Wireless Router - 2017 Edition&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://yach.me/2020/10/06/2020-%E7%94%9F%E6%B4%BB%E6%89%8B%E5%86%8C%E7%B3%BB%E5%88%97%EF%BC%9A%E5%AE%B6%E7%94%A8%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/&#34;&gt;2020 生活手册系列：家用网络配置与选购指南 – Yachen&#39;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设备厂商与品牌&#34;&gt;设备厂商与品牌&lt;/h3&gt;
&lt;h4 id=&#34;tp-link--mercury--fast&#34;&gt;TP-LINK / MERCURY / FAST&lt;/h4&gt;
&lt;p&gt;TP-LINK 是国内最知名的无线路由器品牌。价格相对较低，如果只是想快速搭建一个简单稳定的家庭网络，TP-LINK 是一个不错的选择。当然，TP-LINK 也有不少支持 OpenWrt 的型号。&lt;/p&gt;
&lt;p&gt;另外，TP-LINK 在国内和国外，在产品布局、营销策略上也有不少差异，甚至连国内外的 logo 都不相同。在淘宝、闲鱼等平台，能够买到部分国外版本的硬件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tp-link.com.cn&#34;&gt;TP-LINK 国内官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tp-link.com/us/&#34;&gt;TP-LINK 国际官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mercurycom.com.cn&#34;&gt;MERCURY 水星网络官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fastcom.com.cn&#34;&gt;FAST 迅捷网络官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;华硕-asus&#34;&gt;华硕 ASUS&lt;/h4&gt;
&lt;p&gt;华硕无线路由器有着较为丰富的产品线，从入门的百元级别型号，到 4000 元以上的高端型号都有覆盖，同时也有 ROG 玩家国度等特色型号。&lt;/p&gt;
&lt;p&gt;AiMesh 是华硕路由器的一个标志性功能，能够在不同型号的设备间进行 mesh 组网，降低成本。&lt;/p&gt;
&lt;p&gt;华硕的 ASUSWRT 操作系统功能丰富，另外还可以方便地安装 asuswrt-merlin 修改版系统。关于 ASUSWRT 的详细介绍可参考后面「操作系统」部分的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/Networking/&#34;&gt;华硕无线路由器官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/ASUSWRT/&#34;&gt;ASUSWRT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/asus-router-app/&#34;&gt;ASUS Router App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com/Microsite/AiMesh/cn/&#34;&gt;AiMesh 家用网状 mesh 系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/Networking/RT-AX88U/&#34;&gt;RT-AX88U&lt;/a&gt;: 经典型号 &lt;a href=&#34;https://www.asus.com.cn/Networking/RT-AC88U/&#34;&gt;RT-AC88U&lt;/a&gt; 的 Wi-Fi 6 升级版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/Networking/RT-AX89X/&#34;&gt;RT-AX89X&lt;/a&gt;: 支持 Wi-Fi 6，带有双万兆网口的高端型号&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com/ROG-Republic-Of-Gamers/Wireless-Routers-Products/&#34;&gt;ASUS ROG 游戏路由器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/Networking/Lyra/&#34;&gt;ASUS Lyra 家用 mesh 无线路由器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;网件-netgear&#34;&gt;网件 NETGEAR&lt;/h4&gt;
&lt;p&gt;网件是一家网络设备设备生产商，其生产的家用设备也覆盖了低端到高端不同型号，部分型号支持 Plex Media Server 等特色功能。&lt;/p&gt;
&lt;p&gt;自带固件在功能和易用性上，与 ASUSWRT 等相比有一些不足之处，不过网件的不少型号都对 OpenWrt 友好，可以方便地刷 OpenWrt 等第三方系统。&lt;/p&gt;
&lt;p&gt;其中网件 R6300v2，虽然已经是多年前的产品，但由于性能够用，能刷 asuswrt-merlin，至今受到不少用户的喜爱。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.netgear.com.cn/&#34;&gt;网件官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.netgear.com/support/product/R6300v2.aspx&#34;&gt;R6300v2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/366708/&#34;&gt;路由界一代神器：网件R6300v2开箱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.netgear.com.cn/orbi/&#34;&gt;NETGEAR Orbi&lt;/a&gt;: 家用 mesh Wi-Fi 系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.netgear.com.cn/home/products/networking/wifi-routers/R9000.aspx&#34;&gt;Nighthawk X10 R9000&lt;/a&gt;: 支持 Plex Media Server 的无线路由器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;领势-linksys&#34;&gt;领势 Linksys&lt;/h4&gt;
&lt;p&gt;Linksys 成立于 1988 年，后来被 CISCO 收购。但在 2013 年 CISCO 又将 Linysys 卖给了 Belkin。&lt;/p&gt;
&lt;p&gt;其中 Linksys 的 WRT54G，是历史上较早使用 Linux 的家用无线路由器，所以其固件按照 GPL 协议需要开源。不少爱好者基于 WRT54G 的开源固件进行修改，增加功能。知名的开源路由器操作系统 OpenWrt、DD-Wrt 等，都与 WRT54G 或多或少有一定的渊源。&lt;/p&gt;
&lt;p&gt;目前，Linksys 依然有着不少有竞争力的产品，例如 mesho 系统 Velop。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linksys.com/cn/&#34;&gt;Linksys 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linksys_WRT54G_series&#34;&gt;WRT54G&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linksys.com/cn/velop/&#34;&gt;Velop&lt;/a&gt;: 家用 mesh Wi-Fi 系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;斐讯&#34;&gt;斐讯&lt;/h4&gt;
&lt;p&gt;因为采取「0元购」模式而受到大家的熟知。常见的型号有 K2P、K3C 和 K3。目前能在部分二手交易平台以较低的价格买到。&lt;/p&gt;
&lt;p&gt;斐讯路由器整体配置和做工都不错，也有不少人为其适配开源固件。不过购买时需要注意不用版本硬件的区别，比如 K2P 的 A 版和 B 版；K3 等型号可能还需要自己改装一下硬件，才能避免「漏油」等问题。如果喜欢折腾，可以在二手价比较低时购买。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phicomm.com/cn/&#34;&gt;斐讯官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phicomm.com/cn/index.php/Products/family_details/cateid/18/id/122.html&#34;&gt;K2P&lt;/a&gt;: AC1200，根据版本的不同，支持 OpenWrt、Padavan 或 asuswrt-merlin 等
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwifi.net/3761.html&#34;&gt;K2P A 版和 B 版的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phicomm.com/cn/index.php/Products/family_details/cateid/18/id/121.html&#34;&gt;K3&lt;/a&gt;: AC3150，支持 OpenWrt 和 asuswrt-merlin
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-252057-1-1.html&#34;&gt;K3 闪存坏块问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-326035-1-1.html&#34;&gt;K3 漏油问题改造&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phicomm.com/cn/index.php/Products/family_details/cateid/18/id/124.html&#34;&gt;K3C&lt;/a&gt;: AC1900，支持 asuswrt-merlin&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phicomm.com/cn/index.php/Products/family_details/cateid/18/id/125.html&#34;&gt;K2T&lt;/a&gt;: AC1200，分体式设计，适合做为 AP 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;新路由-newifi&#34;&gt;新路由 newifi&lt;/h4&gt;
&lt;p&gt;来自联想，曾经由于挖矿功能和还不错的性能而受到欢迎，支持刷开源固件。目前已停产，能以非常低的价格在二手交易平台买到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20171215072313/https://www.newifi.com/&#34;&gt;newifi 官网（存档）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://new.qq.com/omn/20191014/20191014A0OL7F00.html&#34;&gt;联想新路由3 newifi 3简评，100块的简易矿渣究竟值不值得买？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwifi.net/5638.html&#34;&gt;新路由3(Newifi D2)与斐讯K2P对比测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;腾达-tenda&#34;&gt;腾达 Tenda&lt;/h4&gt;
&lt;p&gt;国内的无线路由器品牌，价格较低，部分型号能刷 OpenWrt。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tenda.com.cn/&#34;&gt;腾达官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;小米&#34;&gt;小米&lt;/h4&gt;
&lt;p&gt;小米路由器采用「互联网模式」进行开发。官方固件就提供了丰富的功能（例如和迅雷合作推出远程下载），且 UI 相对更为现代和美观。但同时也存在劫持「404 页面劫持」等问题。&lt;/p&gt;
&lt;p&gt;不过，小米路由器的大多数不带硬盘的型号，都能较好地支持 OpenWrt、Padavan 等系统；在工业设计、硬件配置、性价比方面存在一定优势。可考虑购买后使用第三方系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.miwifi.com/&#34;&gt;小米路由器官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/2015/06/xiaom-hijack&#34;&gt;小米路由器劫持用户浏览器事件始末&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/30358197&#34;&gt;如何看待小米路由进行 404 网页劫持？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;华为荣耀&#34;&gt;华为、荣耀&lt;/h4&gt;
&lt;p&gt;华为原有业务主要侧重于运营商网络，较晚推出家用无线路由器。&lt;/p&gt;
&lt;p&gt;主要特色包括支持 HiLink 智能家居平台、部分型号采用自研芯片等。但使用自研新品也为支持 OpenWrt 等系统带来了一定的难度。&lt;/p&gt;
&lt;p&gt;由于华为和荣耀家用路由器已有较多型号，不同型号间差异较大，具体的功能、性能、稳定性等，建议购买前上网自行搜索了解和判断。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://consumer.huawei.com/cn/routers/&#34;&gt;华为家用路由器官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.honor.cn/products/home-internet-media/&#34;&gt;荣耀家用路由器官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;新华三-h3c&#34;&gt;新华三 H3C&lt;/h4&gt;
&lt;p&gt;H3C 原有业务主要侧重于企业网络，较晚推出家用无线路由器。&lt;/p&gt;
&lt;p&gt;根据官方宣传资料，H3C 家用路由器使用 MINIWARE 操作系统（与 H3C 的部分商用无线 AP 使用的操作系统名称相同），支持 IPS 等安全功能。系统主要关注基本的网络功能，界面较为简单、功能没有互联网厂商的家用路由器那样丰富。但也在理论上保证了一定程度的稳定性。硬件上 Magic B1 等型号工业设计比较独特。&lt;/p&gt;
&lt;p&gt;其产品线除了无线路由器、mesh 系统外，还包括家用 AC+AP 套装等。目前暂未发现支持 OpenWrt 等第三方系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.h3c.com/cn&#34;&gt;H3C 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.h3c.com/cn/Products___Technology/IntelligentTerminalProducts/Standard-Network/B/H3C_Magic_B1/&#34;&gt;H3C Magic B1&lt;/a&gt;: 分体式设计，外观较为简洁&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.h3c.com/cn/Products___Technology/IntelligentTerminalProducts/Intelligence-Home/H/H5/&#34;&gt;H3C H5&lt;/a&gt;: AC+AP 套装&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;友讯-d-link&#34;&gt;友讯 D-Link&lt;/h4&gt;
&lt;p&gt;网络设备品牌，提供路由器、交换机、无线网卡等设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dlink.com.cn/&#34;&gt;友讯官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;360&#34;&gt;360&lt;/h4&gt;
&lt;p&gt;以「互联网模式」开发的家用路由器，以「安全」功能作为卖点。但其「孕妇模式」等营销概念受到了不少人的反感。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://luyou.360.cn/&#34;&gt;360 家用路由器官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/31207364&#34;&gt;如何评价 360 安全路由器 的「孕妇模式」？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;群晖-synology&#34;&gt;群晖 Synology&lt;/h4&gt;
&lt;p&gt;NAS 厂商，较晚进入无线路由器领域。目前推出 RT1900ac、RT2600ac，以及 mesh 路由器 MR2200ac 三款产品。其特色在于自带的 Synology Router Manager (SRM) 操作系统。&lt;/p&gt;
&lt;p&gt;SRM 基于群晖的 NAS 操作系统 &lt;a href=&#34;https://www.synology.com/zh-cn/dsm&#34;&gt;DSM&lt;/a&gt;，具有友好的用户界面，外接移动硬盘后，具有一定的 NAS 功能。并支持与其 NAS 相同的 &lt;a href=&#34;https://www.synology.com/zh-cn/knowledgebase/DSM/help/FileStation/FileBrowser_desc&#34;&gt;File Station&lt;/a&gt;、&lt;a href=&#34;https://www.synology.com/zh-cn/knowledgebase/DSM/help/DownloadStation/DownloadStation_desc&#34;&gt;Download Station&lt;/a&gt;、&lt;a href=&#34;https://www.synology.com/zh-cn/knowledgebase/DSM/help/MediaServer/application_mediaserver_desc&#34;&gt;Media Server&lt;/a&gt; 三大软件。&lt;/p&gt;
&lt;p&gt;SRM 对新技术的应用比较积极，例如 WPA3、DNS over HTTPS 等。SRM 上的家长控制/访问控制功能，以及基于 Suricata 的 IPS 功能，在同类产品中都较为强大。&lt;/p&gt;
&lt;p&gt;另外 SRM 一定程度上拥有安装第三方软件的功能。部分 DSM 软件经过修改后，可在 SRM 上运行。同时也可以在 SRM 上安装 optware/entware，通过 &lt;code&gt;opkg&lt;/code&gt; 命令来安装更多软件。&lt;/p&gt;
&lt;p&gt;但群晖做为家用路由器的新厂商，在软件开发与发布流程上经验不足。曾经遇到过同一天发布多个版本才彻底解决一个问题的情况，以及新版本导致原先设置的计划任务失效、需要重新设置的问题（参考&lt;a href=&#34;https://www.synology.com/en-uk/releaseNote/RT2600ac&#34;&gt;此链接&lt;/a&gt;，版本 1.2.3-8017-4 中的描述）。另外在个人使用过程中，也遇到过网络不稳定，重启路由器才能恢复的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.synology.com/zh-cn&#34;&gt;Synology 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.synology.com/en-us/products/RT2600ac&#34;&gt;RT2600ac&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.synology.com/en-us/products/MR2200ac&#34;&gt;MR2200ac&lt;/a&gt;: mesh 路由器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/srm&#34;&gt;Synology Router Manager (SRM) 操作系统&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/srm/feature/secure_network_foundation&#34;&gt;网络安全/IPS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.synology.com/building-an-intrusion-prevention-system-for-small-businesses-and-homes/&#34;&gt;Building an intrusion prevention system for small businesses and homes&lt;/a&gt;&lt;br&gt;本文介绍了 Synology 如何优化 Suricata，使其能在家用路由器上流畅运行的&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.synology.com/dns-over-https/&#34;&gt;DNS over HTTPS: things to consider when you go “private”&lt;/a&gt;&lt;br&gt;本文介绍了 SRM 对于 DNS over HTTPS 的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/srm/feature/device_content_control&#34;&gt;访问控制/家长控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装第三方软件
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blanboom.org/2017/plex-on-rt1900ac/&#34;&gt;RT1900ac 路由器折腾笔记：安装 Homebridge 和 Plex Media Server&lt;/a&gt;&lt;br&gt;我的一篇博文，涉及如何在 SRM 上安装 entware 和 DSM 套件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://synopackages.wordpress.com/&#34;&gt;nelek&#39;s soapbox - A blog about creating packages for Synology DSM&lt;/a&gt;&lt;br&gt;一个个人博客，定期分享自己编译的、适用于 DSM/SRM 的软件（但没有开源，请自行判断是否存在安全风险）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优倍快-ubiquiti&#34;&gt;优倍快 Ubiquiti&lt;/h4&gt;
&lt;p&gt;网络设备厂商，创始人为 Apple AirPort 系列的硬件工程师。其 UniFi 系列提供了价格低廉（相对 CISCO、Aruba、Ruckus 来说）的商用 Wi-Fi 系统，也因为工业设计、易用性等原因，受到了部分个人/家庭用户的喜爱。后续 Ubiquiti Labs 也推出过 AmpliFi 系列的家用产品。&lt;/p&gt;
&lt;p&gt;另外，Ubiquiti 的产品，在软件（Web 界面与移动 App）的用户界面和用户体验上比较出色，对于 Dark Mode 等也能在第一时间支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ui.com.cn/&#34;&gt;Ubiquiti 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unifi-network.ui.com.cn/&#34;&gt;UniFi 系列&lt;/a&gt;：主打商用无线 AP，同时有配套的交换机、路由器、摄像头、NVR 等硬件，可通过 UniFi Controller 统一管理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ui.com.cn/products/#edgemax&#34;&gt;EdgeMax 系列&lt;/a&gt;：主打企业级的网络设备，包括路由器和交换机，配置比较丰富，可通过免费的 UNMS 实现部分的管理功能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amplifi.com.cn/&#34;&gt;AmpliFi 系列&lt;/a&gt;：主打家用 mesh 系统，较早提出「家用 mesh 路由器」的概念。工业设计出色
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ui.com.cn/post/evolution-home-wi-fi/&#34;&gt;家用 Wi-Fi 的变迁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;apple-airport&#34;&gt;Apple AirPort&lt;/h4&gt;
&lt;p&gt;Apple 的无线路由器，特色功能包括：来自 Apple 的工业设计、与 macOS 和 iOS 的紧密整合、支持 Time Machine 无线备份、支持连接音箱进行 AirPlay 音乐播放、支持无线打印等。&lt;/p&gt;
&lt;p&gt;另外 AirPort Extreme 也较早支持多台路由器之间的组网和漫游，虽然 Apple 没有以「mesh」的卖点公开宣传。&lt;/p&gt;
&lt;p&gt;目前 AirPort 系列已停产，部分国家和地区的 Apple Online Store 仍有销售，国内可在二手交易网站购买到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/airport&#34;&gt;AirPort 官方支持页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20150613231653/http://www.apple.com/airport-express/&#34;&gt;AirPort Express（存档）&lt;/a&gt;: 小巧、支持 AirPlay&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20150616190421/http://www.apple.com/airport-extreme/&#34;&gt;AirPort Extreme（存档）&lt;/a&gt;: 性能强大&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20150613231648/http://www.apple.com/airport-time-capsule/&#34;&gt;AirPort Time Capsule（存档）&lt;/a&gt;: 在 AirPort Extreme 的基础上，内置了硬盘，支持 Time Machine 无线备份&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT204616&#34;&gt;Wi-Fi 基站：设置和配置漫游网络&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chiphell.com/thread-1772731-4-1.html&#34;&gt;简单实惠的无缝漫游家庭网络——AirPort Extreme × 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mikrotik&#34;&gt;MikroTik&lt;/h4&gt;
&lt;p&gt;MikroTik 为知名软路由操作系统 RouterOS 的开发商，也推出了自有品牌的硬件。其硬件产品官方支持 RouterOS，并附送 RouterOS 软件授权。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mikrotik.com/&#34;&gt;MikroTik 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mikrotik.com/products/group/wireless-for-home-and-office&#34;&gt;MikroTik SOHO 无线路由器系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mikrotik.com/product/audience&#34;&gt;MikroTik Audience&lt;/a&gt;: 家用 mesh 路由器&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/58247964&#34;&gt;最强家用路由器: RB4011&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;竞斗云&#34;&gt;竞斗云&lt;/h4&gt;
&lt;p&gt;原先以「区块链路由器」的名义高价销售，目前可以用较低的二手价购买，并安装第三方系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/amm5355p/&#34;&gt;我爱捡垃圾：100包邮的竞斗云 G-DOCK TTL 刷机教程 X-wrt 很好用！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-776593-1-1.html&#34;&gt;竞斗云2.0 终于找到原始型号和固件了。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;爱快-ikuai&#34;&gt;爱快 iKuai&lt;/h4&gt;
&lt;p&gt;爱快为软路由操作系统 iKuai OS 的开发商，也推出了自有品牌的硬件，包括无线路由器、企业级路由器、交换机、无线 AP 等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ikuai8.com/&#34;&gt;爱快官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;磊科&#34;&gt;磊科&lt;/h4&gt;
&lt;p&gt;网络设备厂商，其路由器的 QoS 功能比较有特色。曾和 360、腾讯等厂商合作推出过定制款无线路由器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.netcoretec.com/&#34;&gt;磊科官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;eero&#34;&gt;eero&lt;/h4&gt;
&lt;p&gt;家用无线路由器厂商，目前已被亚马逊收购。外观小巧，主打 mesh 功能，并有付费订阅的 eero Secure 服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eero.com/&#34;&gt;eero 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eero.com/shop/eero-secure&#34;&gt;eero Secure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;google-nest-wi-fi&#34;&gt;Google Nest Wi-Fi&lt;/h4&gt;
&lt;p&gt;来自 Google 的无线路由器，主打 mesh 功能。其 mesh 节点上集成了麦克风和音箱，支持 Google Assistant，可同时做为智能音箱使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://store.google.com/product/nest_wifi&#34;&gt;Google Store 中的 Nest Wifi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;诺基亚-nokia&#34;&gt;诺基亚 Nokia&lt;/h4&gt;
&lt;p&gt;来在诺基亚的 mesh Wi-Fi 系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nokia.com/zh_int/node/76546/&#34;&gt;Nokia Wi-Fi 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;芯片厂商&#34;&gt;芯片厂商&lt;/h3&gt;
&lt;p&gt;大多家用无线路由器中的 SoC，一般来自 MediaTek/Ralink、Broadcom、Qualcomm/Atheros、Realtek、Intel 等几大芯片厂商。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.broadcom.cn/&#34;&gt;Broadcom Inc. | Connecting Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qualcomm.com/&#34;&gt;Wireless Technology &amp;amp; Innovation | Mobile Technology | Qualcomm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mediatek.cn/&#34;&gt;联发科技-全球尖端无晶元半导体公司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.realtek.com/zh/&#34;&gt;首页 - 瑞昱半导体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/products/devices-systems/home-networking.html&#34;&gt;Intel - Smart and Connected Home Products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/whatnamecaniuse/article/details/80358415&#34;&gt;看完它，你就全懂了十大Wifi芯片原厂！_嵌入式_whatnamecaniuse的专栏-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/746035/&#34;&gt;咦WiFi怎么又断了？选对路由器芯片很关键！_值客原创_什么值得买&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-219324-1-1.html&#34;&gt;MTK路由器和博通路由器有什么差距呢？博通使用上有提升吗？ - 斐讯无线路由器以及其它斐迅网络设备 - 恩山无线论坛 - Powered by Discuz!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/lightrain0/article/details/84979245&#34;&gt;无线路由器CPU浅析 MT7621A、 BCM47189 到底谁强？_嵌入式_lightrain0的博客-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/thread-23553-1-1.html&#34;&gt;无线路由器未来大家是看好博通、高通还是联发科？ - 网络设备 - KoolShare - 源于玩家 服务玩家&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作系统&#34;&gt;操作系统&lt;/h2&gt;
&lt;p&gt;本节主要介绍通用（支持在不同品牌设备上运行）的网络操作系统。对于 Synology Router Manager 等私有操作系统，请参考&lt;a href=&#34;https://chenbokaix250.github.io/life/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8C%87%E5%8D%97/#%E8%AE%BE%E5%A4%87%E5%8E%82%E5%95%86%E4%B8%8E%E5%93%81%E7%89%8C&#34;&gt;设备厂商与品牌&lt;/a&gt;部分。&lt;/p&gt;
&lt;h3 id=&#34;openwrt&#34;&gt;OpenWrt&lt;/h3&gt;
&lt;p&gt;OpenWrt 是最知名的开源无线路由器操作系统，已支持大量厂商和品牌的路由器，也支持在 x86 电脑/服务器上运行。在 2016 年，OpenWrt 派生出 LEDE 项目，但在 2018 年，LEDE 重新合并回 OpenWrt，合并后继续使用 OpenWrt 的名称。&lt;/p&gt;
&lt;p&gt;OpenWrt 目前有着广泛的使用范围，不少个人和团队基于 OpenWrt 推出了修改版固件，一些商业公司的无线路由器、无线 AP 等设备，也是基于 OpenWrt 进行开发的。OpenWrt 社区也为开源社区做出了较多贡献，例如拥塞控制算法 CAKE，最早就是在 OpenWrt 上使用，后续进入 Linux 主线的。&lt;/p&gt;
&lt;p&gt;OpenWrt 使用 opkg 包管理系统，支持通过安装软件来扩展功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/start?id=zh/start&#34;&gt;OpenWrt 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/zh/reasons_to_use_openwrt&#34;&gt;选用 OpenWrt 的原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/start?id=zh/about&#34;&gt;OpenWrt 与 LEDE 的关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/toh/start&#34;&gt;OpenWrt 支持的设备列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/openwrt/&#34;&gt;清华大学 OpenWrt 软件源镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenWrt 第三方修改版
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/forum-97-1.html&#34;&gt;OpenWrt Koolshare 修改版&lt;/a&gt;&lt;br&gt;提供「软件中心」，方便安装来自 Koolshare 和第三方开发者的特色软件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coolsnowwolf/lede&#34;&gt;OpenWrt Lean 修改版&lt;/a&gt;&lt;br&gt;代码开源。在添加适合中国用户的特色功能的基础上，尽量保持精简。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gargoyle-router.com/&#34;&gt;Gargoyle&lt;/a&gt;&lt;br&gt;在国内常被称做「石像鬼固件」，具有强大的 QoS 功能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linino.org/&#34;&gt;Linino&lt;/a&gt;&lt;br&gt;基于 OpenWrt 的操作系统，内置 &lt;code&gt;cpu-mcu-bridge&lt;/code&gt;，能够方便的在 OpenWrt 和单片机之间通信，更适合物联网应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asuswrt&#34;&gt;ASUSWRT&lt;/h3&gt;
&lt;p&gt;华硕路由器官方固件。同时存在知名的 asuswrt-merlin 修改版固件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.asus.com.cn/ASUSWRT/&#34;&gt;ASUSWRT 官网&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/AiProtection/&#34;&gt;AiProtection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/AiCloud/&#34;&gt;AiCloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com/Microsite/AiMesh/cn/&#34;&gt;AiMesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.asuswrt-merlin.net/&#34;&gt;Asuswrt-Merlin&lt;/a&gt;：基于 ASUSWRT 的修改版固件，在国内常被称做「梅林固件」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/forum-96-1.html&#34;&gt;Koolshare 修改版梅林固件&lt;/a&gt;：在 Asuswrt-Merlin 的基础上，增加了软件中心等 Koolshare 特色功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ctrl.blog/entry/review-asuswrt.html&#34;&gt;Review: ASUSWRT router firmware&lt;/a&gt;：关于 ASUSWRT 的一篇评测，指出了系统的一些缺点和安全性弱点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;padavanrt-n56u&#34;&gt;padavan/rt-n56u&lt;/h3&gt;
&lt;p&gt;基于华硕 RT-N56U 等型号路由器的开源代码二次开发而成的路由器固件，支持基于 MT7620 系列芯片的大量无线路由器。在国内经常被称做 Padavan 或老毛子固件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/padavan/rt-n56u&#34;&gt;padavan/rt-n56u 官方 Bitbucket 仓库&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://80x86.io/page/padavan&#34;&gt;荒野无灯修改版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opt.cn2qq.com/padavan/&#34;&gt;hiboy 修改版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-215106-1-1.html&#34;&gt;开源固件的前世今生&lt;/a&gt;：关于 ASUSWRT 和 padavan 的一些历史&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;routeros&#34;&gt;RouterOS&lt;/h3&gt;
&lt;p&gt;来自 MikroTik 的无线路由器操作系统，可在通用 x86 硬件（软路由）、以及 MikroTik 自家硬件上运行。&lt;/p&gt;
&lt;p&gt;在 x86 软路由上使用 RouterOS，需要购买软件授权。但大部分 MikroTik 自家的硬件附送了 RouterOS 授权，可免费使用。&lt;/p&gt;
&lt;p&gt;RouterOS 功能强大，但入门门槛较高，需要经过专门的学习才能熟练操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mikrotik.com/software&#34;&gt;RouterOS 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pfsenceopnsense&#34;&gt;pfSence/OPNSense&lt;/h3&gt;
&lt;p&gt;基于 FreeBSD 的开源网络操作系统，防火墙功能比较强大。内置的软件包管理器可以方便地安装更多软件、扩充功能，例如 Suricata IPS、ntopng 流量统计工具等。&lt;/p&gt;
&lt;p&gt;由于 pfSense/OPNSense 基于 FreeBSD，也可以方便地安装 FreeBSD 软件包，例如安装 java 后运行 UniFi Controller。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pfsense.org/download/&#34;&gt;pfSense 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opnsense.org/&#34;&gt;OPNSense&lt;/a&gt;: 原为 pfSense 的一个分支，因不满 pfSense 开源许可证的变化而创建
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.firewallhardware.it/en/pfsense-vs-opnsense-technical-comparison/&#34;&gt;pfSense® CE vs OPNsense®: technical comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vyos&#34;&gt;VyOS&lt;/h3&gt;
&lt;p&gt;开源的路由器/防火墙操作系统，基于 Vyatta，功能强大，但仅支持通过 CLI 配置，不支持图形化界面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vyos.io/&#34;&gt;VyOS 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.vyos.net/wiki/Vyatta&#34;&gt;Vyatta - VyOS Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;edgeos&#34;&gt;EdgeOS&lt;/h3&gt;
&lt;p&gt;来自 Ubiquiti 的网络操作系统，与 VyOS 同样基于 Vyatta，但拥有图形化界面，支持通过 &lt;a href=&#34;https://unms.com/&#34;&gt;UNMS&lt;/a&gt; 集中管理。&lt;/p&gt;
&lt;p&gt;EdgeOS 仅能运行在 Ubiquiti 自己的 &lt;a href=&#34;https://www.ui.com.cn/edgemax/edgerouter/&#34;&gt;EdgeRouter&lt;/a&gt; 硬件上。另外 &lt;a href=&#34;https://www.ui.com.cn/unifi-routing/usg/&#34;&gt;UniFi Security Gateway&lt;/a&gt; 的操作系统也基于旧版的 EdgeOS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.ubnt.com/guides/edgemax/EdgeOS_UG.pdf&#34;&gt;EdgeOS User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;爱快-ikuaios&#34;&gt;爱快 iKuaiOS&lt;/h3&gt;
&lt;p&gt;免费的软路由操作系统，具有强大的流控功能。&lt;/p&gt;
&lt;p&gt;部分旧版本的 iKuaiOS，有不少人反映有流量劫持等问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ikuai8.com/product/rjcp/routersystem.html&#34;&gt;iKuaiOS 官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.anywlan.com/thread-393451-1-1.html&#34;&gt;强烈谴责爱快的劫持行为。速来测试&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tomato&#34;&gt;Tomato&lt;/h3&gt;
&lt;p&gt;易用的开源路由器操作系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.polarcloud.com/tomato&#34;&gt;Tomato Firmware | Polarcloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tomato.groov.pl/&#34;&gt;Tomato by Shibby » Alternatywne oprogramowamie na routery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://advancedtomato.com/&#34;&gt;AdvancedTomato :: Open Source Broadcom Firmware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/forum-102-1.html&#34;&gt;Tomato Koolshare 修改版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Tomato&#34;&gt;Tomato - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dd-wrt&#34;&gt;DD-WRT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dd-wrt.com/&#34;&gt;DD-WRT 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;组网相关&#34;&gt;组网相关&lt;/h2&gt;
&lt;h3 id=&#34;mesh-网络有线回程&#34;&gt;mesh 网络、有线回程&lt;/h3&gt;
&lt;p&gt;mesh 网络在多台无线路由器间相互组网，以提高 Wi-Fi 覆盖范围。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mr-wu.cn/mesh-wu-xian-wang-luo-de-ding-yi-yu-wifi-de-qu-bie/&#34;&gt;Mesh无线网络的定义与WiFi的区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同型号设备间的 mesh&lt;br&gt;部分厂商的不同型号设备间，可以进行 mesh 组网，从而可以充分利用旧设备，节省成本。典型的有华硕的 AiMesh。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com/Microsite/AiMesh/cn/&#34;&gt;AiMesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同厂商设备间的 mesh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有线回程&lt;br&gt;大多数厂商的无线 mesh 系统，都支持有线回程功能。即 mesh 节点之间的通信，通过有线的方式进行，进一步增大带宽和稳定性。确定是需要重新复杂的布线工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://xoyozo.net/Blog/Details/mesh-wired-backhaul#&#34;&gt;Mesh 路由器有线回程布线方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三频 mesh&lt;br&gt;部分厂商的高端无线路由器型号，拥有一个独立的 5GHz 频段，用于 mesh 节点之前的通信，不占用无线路由器与终端进行通信的频段。这样做也能一定程度上提高带宽、稳定性，且减少了布线带来的麻烦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/akmr7wq4/&#34;&gt;豪宅必备的2200Mbps三频Mesh路由器：Linksys 领势 Velop 3只套装版评测&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;有线路由器--ac--ap&#34;&gt;有线路由器 + AC + AP&lt;/h3&gt;
&lt;p&gt;通过有线路由器 + AC + AP 的方式，能够保证最佳的速度和稳定性。不过这样的方案需要更复杂的布线，一般用于企业、酒店、商场等场所。家用时需要在装修前考虑。&lt;/p&gt;
&lt;p&gt;大部分厂商的 AC + AP 方案也不是为家用涉及，一般配置比较复杂。不过 TP-LINK、H3C 等厂商目前也推出了家用 AP 套装，并将路由器与 AC 整合在单个设备上，可直接放入弱电箱，节省空间。&lt;/p&gt;
&lt;p&gt;另外，Ubiquiti 的无线 AP 方案，由于不需要 AC、配置简单、拥有友好的图形化界面，也受到了一部分家庭用户的喜爱。&lt;/p&gt;
&lt;p&gt;无线 AP 除了可以防止在桌面和柜子，也可以选择面板式或吸顶式，从而更好地融入装修风格，并节省空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ligowave.com/difference-between-access-point-and-router&#34;&gt;Difference Between Access Point and Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/59991119&#34;&gt;无线AP,胖AP和瘦AP的区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/35789817&#34;&gt;如何组建一个完善的家庭无线 Wi-Fi 网络？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chiphell.com/thread-1930326-1-1.html&#34;&gt;老生常谈，搭建无线AP，到底面板好还是吸顶好&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://koolshare.cn/thread-123920-1-1.html&#34;&gt;吸顶式AP挂墙、放桌面，哪种效果好？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vlan-划分&#34;&gt;VLAN 划分&lt;/h3&gt;
&lt;p&gt;通过划分 VLAN 的方式，可以使用一根网线传输多个网络的流量。例如同一根网线实现 Internet 和 IPTV 流量的复用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/thread-120569-1-1.html&#34;&gt;IPTV单线复用折腾记--新思路近完美解决0812更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单臂路由&#34;&gt;单臂路由&lt;/h3&gt;
&lt;p&gt;对于只有一个网口的设备（例如普通家用电脑、Intel NUC、Raspberry Pi 开发板等），如果想做为路由器使用，可通过单臂路由的方式实现。&lt;/p&gt;
&lt;p&gt;单臂路由相当于在一个接口上创建多个子接口，不同子接口对应不同的 VLAN，从而实现将一个接口做为多个接口来使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nipgeihou.com/router-on-a-stick/&#34;&gt;【教程】LEDE单臂软路由安装心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术概念&#34;&gt;技术概念&lt;/h2&gt;
&lt;h3 id=&#34;mu-mimo&#34;&gt;MU-MIMO&lt;/h3&gt;
&lt;p&gt;MU-MIMO 是 802.11ac Wave 2 中增加的特性，能够让多个设备同时与无线路由器进行通信，提高无线的利用效率和吞吐量。&lt;/p&gt;
&lt;p&gt;但 MU-MIMO 需要终端设备的支持，且存在较多限制，目前对网络体验的提升并不明显。&lt;/p&gt;
&lt;p&gt;在 Wi-Fi 6 中，MU-MIMO 的到了增强，可能会随着 Wi-Fi 6 的普及而变得更加实用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Multi-user_MIMO&#34;&gt;Multi-user MIMO - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tp-link.com/common/Promo/en/MU-MIMO/MU-MIMO.html&#34;&gt;TP-LINK 的 MU-MIMO 介绍页面&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/wireless/wireless-features/33100-why-you-don-t-need-mu-mimo&#34;&gt;Why You Don&#39;t Need MU-MIMO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wi-fi-6wi-fi-6ewi-fi-6&#34;&gt;Wi-Fi 6、Wi-Fi 6E、Wi-Fi 6+&lt;/h3&gt;
&lt;p&gt;Wi-Fi 6 是最新一代的 Wi-Fi 标准，基于 IEEE 802.11ax，通过多项技术提升了多用户接入下的稳定性和吞吐量。2019 年之后上市的不少无线路由器，已经支持 Wi-Fi 6。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.arubanetworks.com/assets/_zh-hans/so/SO_80211ax.pdf&#34;&gt;何为 802.11AX (WI-FI 6)？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wi-fi.org/discover-wi-fi/wi-fi-certified-6&#34;&gt;Wi-Fi CERTIFIED 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/60464&#34;&gt;Wi-Fi 6 对我们的日常生活有哪些帮助 | 科普 - 少数派&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wi-Fi 6E 则将 Wi-Fi 6 扩展到了 6GHz 频段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wi-fi.org/news-events/newsroom/wi-fi-alliance-brings-wi-fi-6-into-6-ghz&#34;&gt;Wi-Fi Alliance® brings Wi-Fi 6 into 6 GHz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wi-Fi 6+ 是华为的 Wi-Fi 6 方案，增加了动态窄频宽等特性，能够自动调整频宽，兼顾吞吐量和覆盖范围。具体技术细节暂时没有太多公开文档。&lt;/p&gt;
&lt;h3 id=&#34;160mhz-频宽&#34;&gt;160MHz 频宽&lt;/h3&gt;
&lt;p&gt;802.11ac 和 Wi-Fi 6 支持 160MHz 频宽，使用 160MHz 频宽能够大幅度提升 Wi-Fi 带宽，但是由于兼容性和干扰等问题，实际效果需要受到多种因素的影响，需要自行测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/wireless/wireless-features/33210-160-mhz-wi-fi-channels-friend-or-foe&#34;&gt;160 MHz Wi-Fi Channels: Friend or Foe? - SmallNetBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/wireless/wireless-features/33212-160-mhz-wi-fi-channels-revisited&#34;&gt;160 MHz Wi-Fi Channels: Revisited - SmallNetBuilder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;palna功放&#34;&gt;PA/LNA/功放&lt;/h3&gt;
&lt;p&gt;在阅读路由器的评测、产品介绍页面时，经常会看到 PA、LNA 等概念。其中，PA 为功率放大器，用于增强发射信号的功率，LNA 为低噪声放大器，用于增强接收到的信号。&lt;/p&gt;
&lt;p&gt;拥有 PA/LNA 的无线路由器/AP，能够获得更好的信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://m.elecfans.com/article/711953.html&#34;&gt;什么是PA，与LNA的区别是什么-电子发烧友网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digikey.com/en/articles/techzone/2013/oct/understanding-the-basics-of-low-noise-and-power-amplifiers-in-wireless-designs&#34;&gt;Understanding the Basics of Low-Noise | DigiKey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://electronics.stackexchange.com/questions/237267/what-is-a-pa-lna&#34;&gt;amplifier - What is a PA/LNA? - Electrical Engineering Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软硬件功能&#34;&gt;软硬件功能&lt;/h2&gt;
&lt;h3 id=&#34;upnpnat-pmp端口映射&#34;&gt;UPnP/NAT-PMP/端口映射&lt;/h3&gt;
&lt;p&gt;路由器通过家用宽带接入 Internet 时，运营商会为其分配一个 IP 地址。但家庭中会有电脑、手机等多种设备，多个设备都需要访问 Internet，这时候路由器为各个设备分配一个内网 IP，通过网络地址转换（NAT）来访问 Internet。&lt;/p&gt;
&lt;p&gt;但是，通过 NAT 的方式，内网中的设备只能主动发起对外的连接，而不能做为服务器，接收外部的连接。这种情况下，想从外部访问家中的 NAS 等设备、远程控制家中的电脑等，都会变得比较困难。同时 BT、eMule 等 P2P 分享工具的上传下载速度也会受到影响、部分语音/视频通话工具的连接质量也可能受到影响。&lt;/p&gt;
&lt;p&gt;针对这种情况，可通过端口映射，将内网设备的端口映射到公网，来实现外部访问。大部分家用路由器都支持手动配置端口映射，也支持通过 UPnP/NAT-PMP 的方式进行自动端口映射。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/40407669&#34;&gt;P2P 网络核心技术：UPnP 和 SSDP 协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/NAT%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E5%8D%8F%E8%AE%AE&#34;&gt;NAT端口映射协议 - 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6886&#34;&gt;RFC6886 - NAT Port Mapping Protocol (NAT-PMP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ddns&#34;&gt;DDNS&lt;/h3&gt;
&lt;p&gt;DDNS 也是大部分家用路由器都会拥有的一个常见功能。由于家庭宽带的公网 IP 是不固定的，每次重启路由器，都可能获取到一个新的 IP 地址。通过 DDNS，能够通过一个固定的域名来从外部访问家庭网络中的设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E5%8B%95%E6%85%8BDNS&#34;&gt;动态DNS - 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/46580280&#34;&gt;DDNS简单教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流量整形与-qos&#34;&gt;流量整形与 QoS&lt;/h3&gt;
&lt;p&gt;在家用场景下，部分应用需要比较高的带宽，但对延迟不敏感（例如在线视频、P2P 下载等）；部分应用对带宽要求不高，但对延迟敏感（例如网络游戏、语音/视频通话等）。&lt;/p&gt;
&lt;p&gt;在家中，往往会遇到 P2P 下载等占用了较大的带宽，影响了网络游戏、音视频通话等应用的流畅程度，甚至正常的浏览网页也会变慢。通过 QoS 可以解决这一问题。&lt;/p&gt;
&lt;p&gt;大部分中高端型号的家用路由器都提供 QoS 功能，能够手动设置不同设备、不同应用的优先级，例如提高某款游戏，或家中某台游戏机的优先级。&lt;/p&gt;
&lt;p&gt;另外 fq_codel 和 CAKE 等算法在家用路由器上也逐渐得到了应用，可以做到无需复杂的配置，智能的管理流量。这项功能在 OpenWrt 中被称为 SQM，在其他路由器固件中的「智能 QoS」、「智能队列」等选项，一般也是指的这项功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F&#34;&gt;服务质量 - 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bufferbloat.net/projects/bloat/wiki/Introduction/&#34;&gt;Introduction - Bufferbloat.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/network/traffic-shaping/packet.scheduler&#34;&gt;OpenWrt Project: QoS (aka Network Traffic Control)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/network/traffic-shaping/sqm&#34;&gt;OpenWrt Project: SQM (aka Smart Queue Management)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bufferbloat.net/projects/codel/wiki/&#34;&gt;Codel Wiki - Bufferbloat.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bufferbloat.net/projects/codel/wiki/CakeTechnical/&#34;&gt;CakeTechnical - Bufferbloat.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/758353/&#34;&gt;Let them run CAKE - LWN.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://koolshare.cn/thread-71762-1-1.html&#34;&gt;可能是家庭路由里最好的QoS——在线游戏者的福音 - 网络设备 - KoolShare - 源于玩家 服务玩家&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-511173-1-1.html&#34;&gt;openwrt下各种qos(sqm,石像鬼，qosv4，nft-qos，emong-qos)使用心得 - OPENWRT专版 - 恩山无线论坛 - Powered by Discuz!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.netgate.com/pfsense/en/latest/trafficshaper/traffic-shaping-guide.html&#34;&gt;Traffic Shaper — Configuring Traffic Shaping | pfSense Documentation&lt;/a&gt;&lt;br&gt;pfSense 中的流量整形配置指南
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.speedtest.net/insights/blog/maximized-speed-non-gigabit-internet-connection/&#34;&gt;How I Maximized the Speed of My Non-Gigabit Internet Connection&lt;/a&gt;&lt;br&gt;speedtest.net 工程师的一篇博文，介绍了作者在家中的 pfSense 路由器上，是如何配置 QoS 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;captive-portal&#34;&gt;Captive Portal&lt;/h3&gt;
&lt;p&gt;Captive Portal 提供了一个网页认证页面，在网页中输入密码，才能访问网络。&lt;/p&gt;
&lt;p&gt;在家庭网络中，Captive Portal 常用于访客网络，访客需要在网页中输入密码后连接，避免了 Wi-Fi 密码被类似「Wi-Fi 万能钥匙」等软件泄漏。 同时，也可以在 Portal 页面加入使用须知、免责声明等内容，用户同意后才能连接；如果是在店铺中使用，还可以利用 Portal 页面投放广告。&lt;/p&gt;
&lt;p&gt;Captive Portal 功能常见于商用和企业级设备，家用路由器支持此功能的不多。对于 OpenWrt 等开源系统，可使用 WiFiDog 等工具实现 Captive Portal。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.wifidog.org/&#34;&gt;WiFiDog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/captive-portal/wireless.hotspot.wifidog&#34;&gt;OpenWrt Project: WiFiDog captive portal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubnt.com/hc/en-us/articles/115000166827-UniFi-Guest-Network-Guest-Portal-and-Hotspot-System&#34;&gt;UniFi - Guest Network, Guest Portal, and Hotspot System – Ubiquiti Networks Support and Help Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内网穿透&#34;&gt;内网穿透&lt;/h3&gt;
&lt;p&gt;由于 IPv4 地址资源有限，部分运营商不会给家庭宽带用户分配公网 IPv4 地址。这时候，如果需要访问家庭网络中的服务，就需要内网穿透功能。&lt;/p&gt;
&lt;p&gt;常见的内网穿透方式有两种，一种是通过服务器进行中转，不过一般需要自己购买 VPS 服务器并搭建环境。或者购买专门的商业服务。&lt;/p&gt;
&lt;p&gt;另一种是通过 NAT 打洞的方式实现。这种方式优点是设备间能够直接通信，避免消耗服务器流量，一定程度上提高速度。缺点是 NAT 打洞一般使用 UDP 协议，流量较大的情况下可能会被部分 ISP 限速。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过服务器中转方式实现的内网穿透工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html&#34;&gt;SSH 端口转发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时支持 NAT 打洞和服务器中转的内网穿透工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zerotier.com/&#34;&gt;ZeroTier&lt;/a&gt;: 主打 NAT 打洞，NAT 打洞成功率较高。打洞失败后回退到服务器中转。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;frp&lt;/a&gt;: 支持多种协议的内网穿透工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ehang-io/nps&#34;&gt;nps&lt;/a&gt;: 支持多种协议的内网穿透工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hsk.oray.com/&#34;&gt;花生壳&lt;/a&gt;：商业服务，包含 DDNS 和内网穿透，操作简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/knowledgebase/SRM/help/SRM/RouterApp/internet_quickconnect&#34;&gt;Synology QuickConnect&lt;/a&gt;：群晖路由器/NAS 中的外部访问服务，通过群晖的服务器进行中转，仅支持访问路由器、NAS 中的部分应用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubnt.com/hc/en-us/articles/115012240067-UniFi-How-to-Enable-Remote-Access-for-Remote-Management&#34;&gt;UniFi Remote Access&lt;/a&gt;: Ubiquiti UniFi Controller 中的外部访问服务，通过 NAT 打洞或通过 Ubiquiti 服务器进行中转，仅支持访问 UniFi Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;家长控制&#34;&gt;家长控制&lt;/h3&gt;
&lt;p&gt;家长控制功能能够控制特定设备的上网时长，避免子女上网时间过长。&lt;/p&gt;
&lt;p&gt;部分路由器的家长控制功能，还可以限制设备访问不良网站，同时强制打开 Google 搜索、YouTube 的安全搜索功能，避免子女接触到不良内容。&lt;/p&gt;
&lt;p&gt;而 Synology Safe Access 等提供了更强大的家长控制，除了控制上网时长、限制访问内容，还拥有强大的分析与统计功能，能够根据统计信息来分析家庭中不同人的上网习惯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/srm/feature/device_content_control&#34;&gt;Synology Safe Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/AiProtection/&#34;&gt;华硕 AiProtection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eero.com/shop/eero-secure&#34;&gt;eero Secure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内容过滤&#34;&gt;内容过滤&lt;/h3&gt;
&lt;p&gt;通过内容过滤功能，可以根据规则，过滤恶意广告、恶意网站、追踪器、成人网站等内容，保护安全与隐私，获取更好的上网体验。同时可以与家长控制结合，限制未成年人访问不适合当前年龄的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 DNS 的过滤工具
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pi-hole.net/&#34;&gt;Pi-hole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adguard.com/zh_cn/adguard-home/overview.html&#34;&gt;AdGuard Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;大部分路由器的广告过滤功能，也是基于 DNS 实现的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于代理服务器的过滤工具&lt;br&gt;基于代理服务器的过滤工具，拥有更好的过滤效果，但需要通过 HTTPS 中间人攻击的方式，来实现更复杂的过滤规则。在安全性方面，需要自行了解其工作原理并选择是否使用。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/thread-64086-1-1.html&#34;&gt;KoolProxy&lt;/a&gt;（已停止维护）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;广告过滤的法律/道德问题&lt;br&gt;部分人认为，是否选择过滤广告是用户的自由；部分人认为，广告过滤会对互联网生态产生不利影响。关于是否应该进行广告过滤，请参考互联网中的讨论。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipsids&#34;&gt;IPS/IDS&lt;/h3&gt;
&lt;p&gt;IPS/IDS 功能通过分析报文中的内容，来记录和阻止具有安全风险的报文，提高家庭网络的安全性。与其他基于域名/DNS 的方案相比，IPS/IDS 能够识别更多安全威胁，但也消耗了更多 CPU 和内存资源。&lt;/p&gt;
&lt;p&gt;常见的开源 IPS/IDS 软件有 Snort 和 Suricata，部分路由器的官方固件也提供有 IPS/IDS 功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.snort.org/&#34;&gt;Snort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://suricata-ids.org/&#34;&gt;Suricata&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/srm/feature/secure_network_foundation&#34;&gt;Synology Threat Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubnt.com/hc/en-us/articles/360006893234-UniFi-USG-UDM-Configuring-Internet-Security-Settings&#34;&gt;UniFi Threat Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asus.com.cn/AiProtection/&#34;&gt;华硕 AiProtection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://us.norton.com/core&#34;&gt;Norton Core Router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流量统计dpi&#34;&gt;流量统计/DPI&lt;/h3&gt;
&lt;p&gt;流量统计功能能够分析和统计网络中各个设备流量的使用情况。不过因为需要占用 CPU 和存储资源，部分低端型号的路由器不具备这样的功能。&lt;/p&gt;
&lt;p&gt;而一部分路由器拥有基于 DPI 的流量统计，除了能统计各个设备的流量使用情况，还能统计各个应用的流量，从而提供更详细的流量统计数据。&lt;/p&gt;
&lt;p&gt;对于开源系统，可使用 ntopng 等工具实现流量统计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ntop.org/products/traffic-analysis/ntop/&#34;&gt;ntopng – ntop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多-wan-口多拨&#34;&gt;多 WAN 口、多拨&lt;/h3&gt;
&lt;p&gt;部分路由器拥有多个 WAN 口，可接入多条宽带，实现带宽叠加。并实现一条宽带故障时切换到另一条宽带。&lt;/p&gt;
&lt;p&gt;此外还有路由器能通过 USB 接口连接 LTE 网卡，或者使用 Android、iOS 的 USB 网络共享功能，实现在宽带故障时，使用 4G/LTE 链路实现 Internet 的备份。&lt;/p&gt;
&lt;p&gt;对于 OpenWrt、RouterOS 等系统，还可以在一个 WAN 口上建立多个 PPPoE 会话，实现「单线多拨」，提高带宽。但部分运营商不支持多拨，具体请参考办理宽带时，与运营商签订的协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/network/wan/multiwan/multiwan_package&#34;&gt;OpenWrt Project: Multiwan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://acris.me/2017/06/25/Load-balancing-multiple-PPPoE-on-LEDE/&#34;&gt;LEDE/OpenWrt使用macvlan和mwan3实现单线多拨 | Acris&#39; Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vediotalk.com/archives/3040&#34;&gt;VLOG | 你想知道的ROS如何实现单线多拨，多线接入叠加宽带，轻松实现千兆网速。 – Vedio Talk - VLOG、科技、生活、乐分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过 4G/LTE 实现 Internet 备份
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/compatibility?search_by=category&amp;amp;category=usb_3g_4g_dongles&amp;amp;p=1&#34;&gt;Synology 的 USB/3G/4G 网络共享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unifi-lte.ui.com/&#34;&gt;Ubiquiti | UniFi | Manageable LTE WAN Failover&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;带宽提升&#34;&gt;带宽提升&lt;/h3&gt;
&lt;p&gt;一些路由器宣称具有「物理带宽提升」的功能，实际上是通过与运营商合作的方式实现的，运营商可以动态地调整带宽限制，付费后自动提高带宽。&lt;/p&gt;
&lt;p&gt;「迅雷快鸟」是比较著名的一个网络加速服务，同时有第三方开发者将其移植到路由器，能够在路由器上方便地打开提速服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fffonion/Xunlei-Fastdick&#34;&gt;迅雷快鸟 Xunlei Network Accelerator For Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://koolshare.cn/thread-34888-1-1.html&#34;&gt;迅雷快鸟 - 带宽加速神器插件 - KoolShare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;游戏加速&#34;&gt;游戏加速&lt;/h3&gt;
&lt;p&gt;游戏加速也是不少家用无线路由器的一大卖点。一般通过提高游戏的 QoS 优先级来实现，同时内置「网易 UU 加速器」等服务，通过第三方提供的代理服务器连接到更高质量的网络，实现网游加速。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://uu.163.com/router/direction.html&#34;&gt;网易UU网游加速器 - 路由器插件&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://uu.163.com/router/crossover.html&#34;&gt;网易UU网游加速器 - 合作款路由器&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/geforce-now/recommended/&#34;&gt;Recommended Routers &amp;amp; Controllers | NVIDIA GeForce NOW&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;智能家居整合&#34;&gt;智能家居整合&lt;/h3&gt;
&lt;p&gt;智能家居属于新兴领域，在路由器中整合智能家居相关功能，不同厂商有着不同的思路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apple: 自动为 HomeKit 设备设置严格的防火墙规则，提高安全性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://9to5mac.com/2019/11/27/apple-lists-the-cameras-and-routers-that-will-be-compatible-with-the-latest-homekit-features/&#34;&gt;Apple lists the cameras and routers that will be compatible with the latest HomeKit features - 9to5Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/guide/home/hme76f51a4f3/mac&#34;&gt;在 Mac 上使用“家庭”配置路由器 - Apple 支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.eero.com/eero-now-supports-apple-homekit/&#34;&gt;eero Now Supports Apple HomeKit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小米：米家设备连 Wi-Fi 免输密码，提高初次设置设备时的便捷程度；同时为只能设备提供独立的频段，避免过多智能设备拖慢网速&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mi.com/r3600&#34;&gt;小米AIoT路由器 AX3600&lt;/a&gt;（参考「智能设备接入」相关描述）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google: 整合语音助手 Google Assistant；之前的 OnHub 产品还可以充当 ZigBee 网关，控制 Phillips Hue 智能照明系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://9to5google.com/2019/09/17/exclusive-google-nest-wifi-assistant/&#34;&gt;Exclusive: New Google Nest Wifi adds an Assistant speaker - 9to5Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www2.meethue.com/en-ca/friends-of-hue/google-onhub&#34;&gt;Google OnHub | Philips Hue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;华为：为智能家居设备提升 QoS 优先级，使设备能够快速响应；同时也支持为自动智能家居设备设置防火墙规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vmall.com/product/10086534540521.html&#34;&gt;华为路由 A2 - 华为商城&lt;/a&gt;（参考页面中关于 IoT 设备的描述）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HomeBridge、Home Assistant 整合&lt;br&gt;对于开放的路由器操作系统，还可以实现在路由器上运行 HomeBridge，或者将路由器接入 Home Assistant。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blanboom.org/2017/plex-on-rt1900ac/&#34;&gt;RT1900ac 路由器折腾笔记：安装 Homebridge 和 Plex Media Server – Blanboom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/openwrt/&#34;&gt;OpenWRT - Home Assistant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/misenhower/homebridge-unifi-led-control&#34;&gt;misenhower/homebridge-unifi-led-control&lt;/a&gt;: 通过 HomeBridge 控制 UniFi 设备上的 LED&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行第三方应用&#34;&gt;运行第三方应用&lt;/h3&gt;
&lt;p&gt;不少路由器操作系统，可以通过一定的方式运行第三方应用，扩展路由器的功能，使路由器更加「智能」。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件包管理系统&lt;br&gt;和不少 Linux/UNIX 发行版一样，一些基于 Linux/UNIX 的路由器操作系统，也有着自己的软件包管理系统。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/additional-software/opkg&#34;&gt;OpenWrt 的 Opkg Package Manager&lt;/a&gt;&lt;br&gt;OpenWrt 完全采用 Opkg 做为其软件包管理系统，整个系统，包括内核模块和驱动，都由 Opkg 管理。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.netgate.com/pfsense/en/latest/packages/package-manager.html&#34;&gt;pfSense 的软件包管理系统&lt;/a&gt;&lt;br&gt;pfSense 基于 FreeBSD，除了安装 pfSense 自己的软件包，也可以方便地安装 FreeBSD 软件包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件中心&lt;br&gt;不少路由器操作系统拥有带有图形化界面的软件中心，可以方便地以图形化的方式添加软件。不过也有一部分路由器，例如 TP-LINK 的部分型号，其「软件中心」只是一系列内置功能的开关，无法做到安装第三方软件扩充功能。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/forum.php?mod=forumdisplay&amp;amp;fid=98&amp;amp;filter=typeid&amp;amp;typeid=103&#34;&gt;Koolshare 软件中心&lt;/a&gt;&lt;br&gt;来自 Koolshare 论坛的软件中心，支持 OpenWrt、ASUSWRT 等多种路由器操作系统，提供了适合国内用户使用的特色软件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.synology.com/zh-cn/srm/packages&#34;&gt;Synology SRM 套件中心&lt;/a&gt;&lt;br&gt;Synology Router Manager (SRM) 操作系统自带的软件中心，目前仅有来自 Synology 的少量软件。但是来自 Synology DSM 的部分软件，经过修改后，也可以在 SRM 软件中心中手动安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Entware/Optware&lt;br&gt;不少路由器操作系统，例如 Asuswrt-Merlin、DD-WRT、Synology Router Manager 等，默认不支持安装第三方软件，或者对第三方软件的支持有限，可通过 Entware/Optware 的方式来安装软件。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Entware/Entware&#34;&gt;Entware/Entware: Ultimate repo for embedded devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Optware/Optware-ng&#34;&gt;Optware/Optware-ng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/Entware&#34;&gt;Entware · RMerl/asuswrt-merlin Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.dd-wrt.com/wiki/index.php/Installing_Entware&#34;&gt;Installing Entware - DD-WRT Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker&lt;br&gt;由于部分支持 Docker 的路由器操作系统，还可以通过 Docker 运行容器，来运行第三方软件。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Ubiquiti/comments/dvik8g/persistent_pihole_via_docker_on_udmpro/&#34;&gt;Persistent PiHole via Docker on UDMPro : Ubiquiti&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;虚拟化&#34;&gt;虚拟化&lt;/h3&gt;
&lt;p&gt;部分路由器操作系统具有一定的虚拟化功能，能够在路由器中运行其他的容器或操作系统。&lt;/p&gt;
&lt;p&gt;一种常见的应用，利用 RouterOS 的 Metarouter 功能来运行 OpenWrt，实现在一台设备上同时使用 RouterOS 和 OpenWrt 的特色功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.mikrotik.com/wiki/Manual:KVM&#34;&gt;RouterOS KVM&lt;/a&gt;: 在路由器中运行虚拟机&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.mikrotik.com/wiki/Manual:Metarouter&#34;&gt;RouterOS Metarouter&lt;/a&gt;: 轻量级的虚拟路由器，能够运行 RouterOS、OpenWrt 等系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;手机-app&#34;&gt;手机 App&lt;/h3&gt;
&lt;p&gt;目前的不少主流的家用路由器，都支持使用手机 App 来控制。但对于一些较为流行的开源的路由器操作系统，会有一些第三方开发者为其开发 App。&lt;/p&gt;
&lt;p&gt;这些第三方 App 的质量和安全性不一定有保证，使用前需要先对 App 的功能、作者、开源情况等做一个初步的了解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.right.com.cn/forum/thread-315066-1-1.html&#34;&gt;啪嗒路由器app，适配Padavan老毛子固件的手机端控制app - 恩山无线论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://septudio.com/winboxmobile&#34;&gt;WinboxMobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/dd-wrt/id897098616&#34;&gt;‎DD-WRT on the App Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;snmp&#34;&gt;SNMP&lt;/h3&gt;
&lt;p&gt;少量的家用路由器操作系统（例如 Synology Router Manager），以及绝大多数商用/企业级网络设备，都支持 SNMP。通过 SNMP 协议，可实现对设备的集中管理和集中监控（例如利用 Cacti 采集流量统计数据 ）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.edcwifi.com/index.php?title=UniFi%E5%BC%80%E5%90%AFsnmp%E5%8A%9F%E8%83%BD%E5%8F%AF%E4%BE%9B%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E7%9B%91%E6%B5%8B%E5%B7%A5%E5%85%B7%E6%8A%93%E5%8F%96UniFi-AP%E6%95%B0%E6%8D%AE&#34;&gt;UniFi开启snmp功能可供网络流量监测工具抓取UniFi-AP数据 - 深圳捷联讯通科技有限公司&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络存储媒体中心&#34;&gt;网络存储、媒体中心&lt;/h3&gt;
&lt;p&gt;有很多路由器带有 USB 接口，可以连接 USB 移动硬盘，实现网络存储等功能。&lt;/p&gt;
&lt;p&gt;此外，也有带有 SATA 接口和带有 M.2 接口的无线路由器，可以直接将硬盘装入路由器内部，外观更加紧凑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mi.com/miwifihd&#34;&gt;小米路由器HD&lt;/a&gt;: 内置 SATA 接口的硬盘&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.asus.com/Business-Networking/BRT-AC828/&#34;&gt;华硕 BRT-AC828&lt;/a&gt;: 内置 M.2 接口，可以安装 M.2 接口的 SSD&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在功能上，连接硬盘后，无线路由器完成如下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 SMB/AFP/NFS 等协议实现文件共享
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/nas/cifs.server&#34;&gt;OpenWrt Project: Samba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Machine（Mac 电脑备份）
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/zh/docs/guide-user/services/nas/netatalk_configuration&#34;&gt;OpenWrt Project: AFP Netatalk 分享配置 (又名 Apple Time Machine).&lt;/a&gt;（本教程使用 AFP 协议实现 Time Machine，但 AFP 协议目前已过时，可参考教程内容，改用 SMB 协议实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebDAV&lt;br&gt;不少 App 支持使用 WebDAV 协议同步文件（例如 DEVONthink 笔记软件），通过 WebDAV，可使用自己的路由器做为文件同步服务。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lookas2001.com/openwrt-%E4%B8%8A%E9%80%9A%E8%BF%87-webdav-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/&#34;&gt;OpenWrt 上通过 WebDAV 共享文件 – lookas2001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OwnCloud / NextCloud&lt;br&gt;OwnCloud 和 NextCloud 是一款多功能的网盘/个人云软件，可用于搭建个人网盘，同时支持安装插件扩展功能。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/nas/owncloud&#34;&gt;OpenWrt Project: OwnCloud or NextCloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;远程下载&lt;br&gt;通过远程下载功能，可以将路由器做为下载机使用，无需长期打开电脑下载。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mivm.cn/openwrt-aria2/&#34;&gt;OpenWrt 安装及配置 Aria2 教程 | 米V米&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/downloading_and_filesharing/transmission&#34;&gt;OpenWrt Project: Transmission configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://butui.me/post/amule-on-openwrt/&#34;&gt;在 OpenWRT 上使用 aMule 下載資源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;媒体中心&lt;br&gt;通过媒体中心，可以将路由器做为媒体服务器使用，在手机、平板、电视、游戏机等设备上直接播放路由器硬盘中的视频。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/services/media_server/dlna&#34;&gt;OpenWrt Project: DLNA Media Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blanboom.org/2017/plex-on-rt1900ac/&#34;&gt;RT1900ac 路由器折腾笔记：安装 Homebridge 和 Plex Media Server – Blanboom&lt;/a&gt;（由于大部分家用路由器性能不足，不推荐安装 Plex Media Server）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netgear.com/landings/plex/&#34;&gt;Easiest Plex Set-Up Ever: Nighthawk X10 R9000 Router by NETGEAR&lt;/a&gt;: 官方支持 Plex Media Server 的无线路由器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将第三方软件安装在外部存储设备&lt;br&gt;大部分无线路由器的内置存储空间一般较小，可通过外部存储设备扩展空间，将软件安装在外部存储设备上。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/5549241429d0&#34;&gt;OpenWrt安装软件到外置存储（U盘/移动硬盘） - 简书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第三方服务整合&#34;&gt;第三方服务整合&lt;/h3&gt;
&lt;p&gt;部分无线路由器能够整合第三方服务，实现更高级的自动化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ifttt.com/asusrouter&#34;&gt;ASUS Router works better with IFTTT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ifttt.com/tplink_router&#34;&gt;TP-Link Router works better with IFTTT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/z-george-ma/openwrt-iot&#34;&gt;z-george-ma/openwrt-iot: IoT support for OpenWRT based router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/guide/shortcuts/welcome/ios&#34;&gt;iOS 快捷指令&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/ds-router/id963699443&#34;&gt;‎DS router on the App Store&lt;/a&gt;: Synology Router Manager 的手机 App，支持 iOS 快捷指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alexa
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/ASUS-ROUTER/dp/B07285G1RK&#34;&gt;ASUS ROUTER: Alexa Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netgear.com/landings/amazon-alexa/&#34;&gt;Amazon Alexa Smart Home Connected Routers by NETGEAR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tp-link.com/us/support/faq/1569/&#34;&gt;What is the TP-Link Router Alexa Skill and how do I use it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://us.dlink.com/en/alexa&#34;&gt;Amazon Alexa | D-Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eero.com/announcing-eeros-alexa-skill-available-today/&#34;&gt;eero now works with Amazon’s Alexa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bonjourmdns&#34;&gt;Bonjour/mDNS&lt;/h3&gt;
&lt;p&gt;通过 Bonjour 功能，能够使 Apple 设备直接通过 &lt;code&gt;.local&lt;/code&gt; 域名访问路由器，无需记住复杂的 IP 地址。&lt;/p&gt;
&lt;p&gt;除了 Apple 设备，目前有不少智能家居设备（例如米家的 Wi-Fi 设备），以及 Chromecast 等，也开始使用 Bonjour 协议。如果家中的网络比较复杂（例如有多个子网/多个 VLAN），可使用 Bonjour 网关的功能，来实现在多个网络之间通过 Bonjour 来发现设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/network/zeroconfig/zeroconf&#34;&gt;OpenWrt Project: Zero configuration networking in OpenWrt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chrisreinking.com/need-bonjour-across-vlans-set-up-an-avahi-gateway/&#34;&gt;Need Bonjour across VLANs? Set Up an Avahi Reflector!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubnt.com/hc/en-us/articles/360001004034-UniFi-Best-Practices-for-Managing-Chromecast-Google-Home-on-UniFi-Network#create&#34;&gt;UniFi - Best Practices for Managing Chromecast/Google Home on UniFi Network – Ubiquiti Networks Support and Help Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;校园网&#34;&gt;校园网&lt;/h3&gt;
&lt;p&gt;不同学校的校园网有着不同的认证方式，部分学校还会使用私有协议。对于校园网，建议先在学校论坛等社区了解本校的校园网是否可以在 OpenWrt 等设备上连接和认证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/liuqun/njit8021xclient&#34;&gt;liuqun/njit8021xclient: 南京工程学院802.1X客户端（Linux版兼容H3C/iNode V2.40-F0335）&lt;/a&gt;：802.1x 认证&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/MentoHUST_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&#34;&gt;MentoHUST (简体中文) - ArchWiki&lt;/a&gt;：锐捷认证&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drcoms/drcom-generic&#34;&gt;drcoms/drcom-generic: Dr.COM/DrCOM 现已覆盖 d p x三版。&lt;/a&gt;：Dr.COM 认证&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.zhenglee.top/2018/08/09/%E8%B7%AF%E7%94%B1%E5%99%A8%E8%AE%A4%E8%AF%81%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/index.html&#34;&gt;路由器认证校园网的一个思路 | Damon Lee &#39;s blog&lt;/a&gt;：Portal 认证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安全性&#34;&gt;安全性&lt;/h2&gt;
&lt;h3 id=&#34;相关文章&#34;&gt;相关文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fkie.fraunhofer.de/content/dam/fkie/de/documents/HomeRouter/HomeRouterSecurity_2020_Bericht.pdf&#34;&gt;Home Router Security Report 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开源固件-vs-闭源固件&#34;&gt;开源固件 vs 闭源固件&lt;/h3&gt;
&lt;p&gt;在有条件的情况下，尽量使用开源固件，或使用声誉良好的闭源固件/原厂固件。&lt;/p&gt;
&lt;p&gt;如下为部分商业固件/闭源固件可能会拥有的「特色功能」：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;劫持 404 页面
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/30358197&#34;&gt;如何看待小米路由进行 404 网页劫持？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网页中插入广告
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/51273981&#34;&gt;网页篡改，满屏广告，你的斐讯路由器被绑架了！ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;收集统计信息/遥测数据、甚至直接收集用户的隐私数据
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=21430997&#34;&gt;Ubiquiti adds phone-home to the access point firmware | Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.landiannews.com/archives/21406.html&#34;&gt;斐讯路由收集用户隐私数据 用户应立刻使用第三方固件|蓝点网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于部分安全漏洞，厂商没有动力及时修复
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/2016/12/ton-popular-netgear-routers-exposed-no-easy-fix/&#34;&gt;Several Netgear Router Models Are Vulnerable to Hackers | WIRED&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;官方版固件-vs-修改版固件&#34;&gt;官方版固件 vs 修改版固件&lt;/h3&gt;
&lt;p&gt;有不少人和不少组织，会基于 OpenWrt、Padavan、Asuswrt-Merlin 等开源系统，或者部分厂商的官方固件进行修改，使其符合更多人的使用习惯。&lt;/p&gt;
&lt;p&gt;一般来说，在安全性方面，使用官方发布的固件，或者基于开源代码自行编译，是最为安全的。而修改版固件质量参差不齐，可能会解决官方固件中的一些安全问题，但又有可能引入新的安全风险。在安全性方面，可以从如下几点做一个简单的判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改版固件是否开源&lt;br&gt;修改版固件保持开源，有利于用户通过检查源代码等方式，确保相关修改不引入安全漏洞。例如 &lt;a href=&#34;coolsnowwolf/lede&#34;&gt;coolsnowwolf/lede&lt;/a&gt;，就在 GitHub 上公开了基于 OpenWrt 修改后的源代码。&lt;/li&gt;
&lt;li&gt;修改版固件的知名度/使用人数&lt;br&gt;用户较多的修改版固件，如有安全漏洞，有利于更快地被发现和暴露。从而有利于及时修复。&lt;/li&gt;
&lt;li&gt;修改版固件是否通过安全的方式发布&lt;br&gt;如果固件以 HTTPS 方式下载，并提供 HASH 和 GPG 签名校验，有利于保证固件的下载过程不被中间人攻击。而通过 HTTP 下载、通过百度网盘等方式下载的固件，可能会导致下载过程被中间人攻击，导致下载到被替换的固件。&lt;/li&gt;
&lt;li&gt;修改版固件是否跟随主项目，同步合入主项目最新的安全更新&lt;br&gt;可通过版本日志、Git commit log 等方式，观察修改版固件是否及时跟随主项目，进行安全性相关更新与修改。&lt;/li&gt;
&lt;li&gt;排查修改版固件的默认设置是否安全
&lt;ul&gt;
&lt;li&gt;防火墙规则是否默认允许从外部访问路由器中的服务&lt;/li&gt;
&lt;li&gt;是否默认使用不安全的协议（HTTP、telnet 等）进行外部访问&lt;br&gt;（例如从&lt;a href=&#34;http://koolshare.cn/thread-10237-1-1.html&#34;&gt;这篇帖子&lt;/a&gt;的配图可以看到，Koolshare 梅林固件之前的远程 Telnet 功能，是通过 HTTP 协议实现的，可能会存在安全性问题。不过目前 Koolshare 梅林固件已经采取其他方式实现远程登录）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统更新、软件中心等功能，是否使用不安全的协议下载，且不进行签名校验&lt;br&gt;一般来说，系统更新或者软件中心等功能，需要实现 HTTPS 下载或签名校验，以避免中间人攻击。Koolshare 软件中心&lt;a href=&#34;http://koolshare.cn/forum.php?mod=viewthread&amp;amp;tid=60134&#34;&gt;旧版就使用过 HTTP 方式&lt;/a&gt;进行下载，不过已经及时修复。&lt;/li&gt;
&lt;li&gt;部分比较小众的功能，建议评估安全风险后使用
&lt;ul&gt;
&lt;li&gt;例如是否存在功能需要通过 HTTPS 解密，在电脑上安装证书后才能使用&lt;/li&gt;
&lt;li&gt;或者是否存在使用 FTP、HTTP WebDAV 等未加密协议的文件共享功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件更新&#34;&gt;软件更新&lt;/h3&gt;
&lt;p&gt;厂商和固件开发者可通过软件更新等方式，修复安全漏洞。选择固件时，需要考虑固件是否及时进行安全更新、是否采用安全的方式进行更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于商业固件/闭源固件
&lt;ul&gt;
&lt;li&gt;确认自动更新时是否使用加密方式，或进行签名校验&lt;/li&gt;
&lt;li&gt;从更新日志中，观察软件更新是否及时、是否有安全漏洞休息&lt;/li&gt;
&lt;li&gt;在 &lt;a href=&#34;https://cve.mitre.org/cve/search_cve_list.html&#34;&gt;CVE List&lt;/a&gt;、&lt;a href=&#34;https://www.cnvd.org.cn/flaw/list.htm?flag=true&#34;&gt;国家信息安全漏洞共享平台&lt;/a&gt;等网站进行搜索和调查，观察相关漏洞是否及时修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于开源固件&lt;br&gt;部分开源固件不包含自动更新功能，需要通过一定的方式关注其软件更新。主要要如下集中方式。
&lt;ul&gt;
&lt;li&gt;定期关注系统的 Release Notes&lt;/li&gt;
&lt;li&gt;订阅开源项目的邮件列表，通过邮件的方式获取安全更新相关信息&lt;/li&gt;
&lt;li&gt;在 GitHub 中 watch 对应的开源项目，及时收到项目更新的通知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux-安全特性的应用&#34;&gt;Linux 安全特性的应用&lt;/h3&gt;
&lt;p&gt;不少家用路由器，并没有应用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;ALSR&lt;/a&gt; 等 Linux 内核已经提供的安全特性。一定成带上上削弱了设备的安全性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cyber-itl.org/assets/papers/2018/build_safety_of_software_in_28_popular_home_routers.pdf&#34;&gt;Build Safety of Software in 28 Popular Home Routers&lt;/a&gt;&lt;br&gt;本文分析了 28 款最流行的家用路由器对 Linux 相关安全特性的应用，并给出了购买建议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;krack&#34;&gt;KRACK&lt;/h3&gt;
&lt;p&gt;KRACK 是对 WPA2 协议的一种攻击方式，在购买无线路由器或选择固件时，需要考虑对应的路由器或固件，是否已包含针对 KRACK 的修复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.krackattacks.com/&#34;&gt;KRACK Attacks: Breaking WPA2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/KRACK&#34;&gt;KRACK - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://paper.seebug.org/512/&#34;&gt;WPA2 “KRACK”漏洞简介与重现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wpa3&#34;&gt;WPA3&lt;/h3&gt;
&lt;p&gt;WPA3 是新的 Wi-Fi 安全协议，改进了 WPA2 的一些安全性弱点。&lt;/p&gt;
&lt;p&gt;同时，WPA3 支持 Wi-Fi Enhanced Open 模式，为开放、无密码的 Wi-Fi 网络提供了加密机制，一定程度上增强了安全性，适合图书馆、商场等公共场所的 Wi-Fi 网络。&lt;/p&gt;
&lt;p&gt;目前已有少量无线路由器支持 WPA3。另外，部分无线路由器（例如 Synology RT2600ac）和终端设备（例如 iPhone），已通过软件更新的方式支持了 WPA3。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wi-fi.org/zh-hans/discover-wi-fi/security&#34;&gt;安全性 | Wi-Fi Alliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtogeek.com/339765/what-is-wpa3-and-when-will-i-get-it-on-my-wi-fi/&#34;&gt;What Is WPA3, and When Will I Get It On My Wi-Fi?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wi-fi.org/news-events/newsroom/wi-fi-certified-enhanced-open-delivers-data-protection-in-open-wi-fi-networks&#34;&gt;Wi-Fi CERTIFIED Enhanced Open™ delivers data protection in open Wi-Fi® networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防火墙配置&#34;&gt;防火墙配置&lt;/h3&gt;
&lt;p&gt;在能够获取到公网 IP 的环境中，合理配置防火墙，避免路由器中的服务被外部访问，有利于提高安全性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/40836019&#34;&gt;适用于家用场景的电信 IPv6 网络和防火墙配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/t/530084&#34;&gt;请教： IPv6“内网”设备透出到到公网的正确姿势 - V2EX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###SSID 隐藏、MAC 地址过滤等功能是否能提高安全性？&lt;/p&gt;
&lt;p&gt;隐藏 SSID、MAC 地址过滤等功能，对提高安全性的作用有限，所以不建议打开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT202068&#34;&gt;Wi-Fi 路由器和接入点的推荐设置 - Apple 支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络质量优化&#34;&gt;网络质量优化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;无线网络相关参数的调整与优化
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beijinglug.club/wiki/doku.php?id=docs:wifi&#34;&gt;802.11 无线网络参数解惑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AirTime Fairness
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://routerguide.net/airtime-fairness-on-or-off/&#34;&gt;Airtime Fairness On or Off&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础设施&#34;&gt;基础设施&lt;/h2&gt;
&lt;h3 id=&#34;装修与布线&#34;&gt;装修与布线&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://network.51cto.com/art/201801/563938.htm&#34;&gt;五类/超五类/六类/超六类/七类等多类网线的比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/560761/&#34;&gt;装修那点破事 篇三：外番 — 被坑的网线 - 什么值得买&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/av59732534/&#34;&gt;万兆光纤布网实战攻略，让光纤铺满你家！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/21170551&#34;&gt;对于数码控，在装修方面有哪些好的设计？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yach.me/2020/08/29/%E5%AE%B6%E5%BA%AD-10gbps-%E7%BD%91%E7%BB%9C%E6%96%BD%E5%B7%A5%E6%8C%87%E5%8D%97/&#34;&gt;家庭 10Gbps 网络施工指南 – Yachen&#39;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;弱电箱机柜&#34;&gt;弱电箱、机柜&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/427001/&#34;&gt;抢救家庭弱电箱大作战 - 什么值得买&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/alpoe0k0/&#34;&gt;风扇多真可以为所欲为之弱电箱整理 - 什么值得买&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chiphell.com/thread-1209486-1-1.html&#34;&gt;开年第一贴:家庭网络机柜及网络拓扑 - Chiphell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他创意&#34;&gt;其他创意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.ui.com/stories/How-my-Mini-Lego-Unifi-Rack-came-to-be/5eaabfb6-390c-4db0-a323-7ed938a5b651&#34;&gt;使用乐高积木搭建 UniFi 机架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://otichi.com/from-asus-to-unifi.html&#34;&gt;3D 打印的 UniFi 机架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.d3d.shop/listing/779073493/ubiquiti-unifi-dream-machine-wall-mount&#34;&gt;Ubiquiti Unifi Dream Machine Wall Mount&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络诊断调试工具&#34;&gt;网络诊断、调试工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.speedtest.net/&#34;&gt;Speedtest by Ookla&lt;/a&gt; 知名的测速工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dslreports.com/&#34;&gt;DSLReports Speed Test&lt;/a&gt; 网络测速工具，支持 Bufferbloat 测试&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fing.com/products/fing-app&#34;&gt;Fing App&lt;/a&gt; 局域网扫描、测速工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://iperf.fr/&#34;&gt;iPerf&lt;/a&gt; 命令行测速工具，可以搭建在云端进行 ISP 测速，也可以搭建在本地，测试路由器、交换机、Wi-Fi 的最大吞吐量&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ui.com/2018/12/11/introducing-wifiman/&#34;&gt;WiFiman&lt;/a&gt; Wi-Fi 扫描、局域网扫描、测速工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipip.net/product/client.html&#34;&gt;BestTrace&lt;/a&gt; 图形化的 &lt;code&gt;traceroute&lt;/code&gt; 工具，能够将 traceroute 结果显示在地图上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/meteoral/Nali&#34;&gt;nali&lt;/a&gt; 为 &lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;traceroute&lt;/code&gt;, &lt;code&gt;nslookup&lt;/code&gt; 等命令增加中文地理位置信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wis.ruijie.com.cn/wmg/static/homepager/index.htm&#34;&gt;WiFi魔盒&lt;/a&gt; 多功能 Wi-Fi 检测工具，能够在多个 AP、mesh 组网等情况下，进行 Wi-Fi 漫游测试&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/airport-%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/id427276530&#34;&gt;AirPort 实用工具&lt;/a&gt; Wi-Fi 扫描与信号强度检测工具（由于系统的限制，这是 iOS 上唯一一个能实现相关功能的工具）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istumbler.net/&#34;&gt;iStumbler&lt;/a&gt; macOS 上的 Wi-Fi 扫描工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adriangranados.com/&#34;&gt;WiFi Explorer&lt;/a&gt; macOS 上的 Wi-Fi 扫描工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://networktools.he.net/&#34;&gt;Hurricane Electric Network Tools&lt;/a&gt; 用于 iOS 和 Android 的网络工具箱，包含 DNS 查询、接口信息、iPerf、Bonjour 浏览器等多种工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rumble.run/&#34;&gt;Rumble Network Discovery&lt;/a&gt; 功能强大的局域网扫描工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/guide/mac-help/mchlf4de377f/mac&#34;&gt;macOS 自带的无线诊断&lt;/a&gt; macOS 自带「无线诊断」工具，具有 Wi-Fi 扫描、查看 Wi-Fi 日志、推荐最佳 Wi-Fi 频段、Wi-Fi 性能监控、抓包等功能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/id1502063951&#34;&gt;TP-LINK 网络百宝箱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://netool.io/&#34;&gt;Netool.io - Network Engineer Tool&lt;/a&gt; 小巧便携的网络诊断工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isp-相关&#34;&gt;ISP 相关&lt;/h2&gt;
&lt;h3 id=&#34;运营商选择&#34;&gt;运营商选择&lt;/h3&gt;
&lt;p&gt;按照大部分人的经验，移动宽带访问国外网站速度快，电信宽带国内线路质量较高，联通宽带则比较均衡。不过，不同地区之间存在较大差异，需要实际测试才能知道真实情况。&lt;/p&gt;
&lt;p&gt;另外，部分地区运营商还提供「国际精品网」等业务，能够加速国外网站的访问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/30744052&#34;&gt;电信，联通，和移动哪个宽带更好? - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/t/566413&#34;&gt;联通和电信宽带区别 - V2EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/20749587&#34;&gt;中国电信的国际精品网业务到底有什么用？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/t/452546&#34;&gt;吐一下中国移动的宽带。DNS 污染的不只是一点点呀... - V2EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/54220923&#34;&gt;为什么同是移动网络，移动4G 与 移动宽带 体验怎么差别那么大? - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/52390237&#34;&gt;运营商流量穿透是什么？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;公网-ipipv6-地址的获取&#34;&gt;公网 IP、IPv6 地址的获取&lt;/h3&gt;
&lt;p&gt;目前国内 IPv6 逐渐普及，越来越多的运营商，开始分配 IPv6 地址，设置路由器后就能分配到。&lt;/p&gt;
&lt;p&gt;但 IPv4 地址资源更加紧缺，不少地区已经无法获取到公网 IPv4 地址。&lt;/p&gt;
&lt;p&gt;在无法获取到 IPv6 地址，或者没有公网 IPv4 地址的情况下，可以尝试拨打运营商客服电话，申请获取公网 IP 或 IPv6 地址。但由于 IPv4 地址资源有限，即使是拨打客服电话，也有可能申请不到公网 IP。&lt;/p&gt;
&lt;p&gt;另外，部分地区可以通过特殊的用户名、或者通过付费购买的方式获取公网 IP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;amp;tid=1789805&#34;&gt;广东电信拨号加pub就是公网ip-远景论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;光猫改桥接使用路由器拨号&#34;&gt;光猫改桥接，使用路由器拨号&lt;/h3&gt;
&lt;p&gt;在光猫 NAT 性能不足的情况下，可将光猫修改为桥接模式，使用路由器拨号，提高性能。&lt;/p&gt;
&lt;p&gt;大部分地区都可以拨打运营商电话，要求运营商远程将光猫修改为桥接模式。也可以上网根据光猫型号，查找光猫的超级密码或进行破解，并在管理页面中修改为桥接模式。&lt;/p&gt;
&lt;p&gt;但部分地区的千兆宽带，光猫改桥接之后，带宽反而会下降。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yeboyzq.com/luyoujiaohuan/984.html&#34;&gt;中国电信天翼光猫改桥接模式方法 | Yeboyzq Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://koolshare.cn/thread-151416-1-1.html&#34;&gt;上海电信千兆改桥接会限速？好像，被我不小心破解了？ - KoolShare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iptv-相关&#34;&gt;IPTV 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IPTV 单线复用
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://post.smzdm.com/p/alpzdxpo/&#34;&gt;网络设备 篇一：家庭网络改造-单线复用实践总结_值客原创_什么值得买&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组播转单播，实现在电脑、iPad 等设备上观看电视
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/3f9018c6d2bf&#34;&gt;udpxy+xupnpd，IPTV+智能电视 完美解决方案 - 简书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关政策投诉方式&#34;&gt;相关政策、投诉方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;家用宽带不允许对外提供 Web 服务
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/t/608821&#34;&gt;家庭宽带 私设 web 被检测 魔都电信被停宽带 - V2EX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工信部投诉
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/22405071&#34;&gt;如何更快更好地投诉运营商？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.miit.gov.cn/&#34;&gt;中华人民共和国工业和信息化部&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见误区qa&#34;&gt;常见误区、Q&amp;amp;A&lt;/h2&gt;
&lt;h3 id=&#34;终端只支持-2x2-mimo没有必要选用-3x3-mimo-或-4x4-mimo-的无线路由器&#34;&gt;终端只支持 2x2 MIMO，没有必要选用 3x3 MIMO 或 4x4 MIMO 的无线路由器？&lt;/h3&gt;
&lt;p&gt;目前大多数移动设备只支持 1x1 MIMO 或者 2x2 MIMO，但不少高端的家用路由器，都已经支持 4x4 MIMO 了。不少人认为选择 4x4 MIMO 的无线路由器并没有必要。&lt;/p&gt;
&lt;p&gt;但实际上，路由器和终端的无线电发射功率是固定的，支持 4x4 MIMO 的无线路由器，能够通过多根天线接收和发送相同的数据，来提高吞吐量和 Wi-Fi 覆盖面积。&lt;/p&gt;
&lt;p&gt;具体请参考如下链接中的介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smallnetbuilder.com/basics/wireless-basics/33177-how-to-buy-a-wireless-router-2018-edition&#34;&gt;How To Buy A Wireless Router - 2018 Edition - SmallNetBuilder&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Diversity_gain&#34;&gt;Diversity gain - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Spatial_multiplexing_gain&#34;&gt;Spatial multiplexing gain - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;综合案例&#34;&gt;综合案例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bbs.ui.com.cn/t/unifi/48147&#34;&gt;Unifi全家桶高级组网方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Ev0PL892zSE&#34;&gt;Tour of Home Network 2020 - The 8-Bit Guy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/av15823557/&#34;&gt;EP19 - 安装配置pfsense 配置安全可靠的家用网关 - NGXHK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;欢迎参与&#34;&gt;欢迎参与&lt;/h2&gt;
&lt;p&gt;欢迎通过&lt;a href=&#34;https://github.com/blanboom/awesome-home-networking-cn/issues/new&#34;&gt;提交 Issue&lt;/a&gt;，或&lt;a href=&#34;https://github.com/blanboom/awesome-home-networking-cn/pulls&#34;&gt;提交 Pull request&lt;/a&gt; 的方式，为本文档做出贡献。&lt;/p&gt;
&lt;p&gt;本文档遵守&lt;a href=&#34;code-of-conduct.md&#34;&gt;参与者公约&lt;/a&gt;，此外，在做出贡献时，请注意以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本文档遵守 CC BY 协议，请确保新增内容与此协议兼容，避免加入有版权的内容&lt;/li&gt;
&lt;li&gt;本文档不接受违反中华人民共和国法律法规，或不适合在中国大陆地区公开讨论的内容&lt;/li&gt;
&lt;li&gt;本文档主要关注家用网络设备，暂不考虑过于专业的企业级设备&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;许可证&#34;&gt;许可证&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by/4.0/88x31.png&#34; alt=&#34;CC-BY&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本作品采用&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;知识共享署名 4.0 国际许可协议&lt;/a&gt;进行许可。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/info/" term="info" label="info" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Boost在xcode出现的问题及解决</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/boost%E5%9C%A8xcode%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/" />
            <id>https://chenbokaix250.github.io/tech/boost%E5%9C%A8xcode%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
            <updated>2020-11-18T09:06:11&#43;08:00</updated>
            <published>2020-11-17T12:21:52&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">boost在xcode出现的问题及解决 安装boost 利用xcode编译含&amp;lt;bo……</summary>
            
                <content type="html">&lt;h1 id=&#34;boost在xcode出现的问题及解决&#34;&gt;boost在xcode出现的问题及解决&lt;/h1&gt;
&lt;p&gt;安装boost 利用xcode编译含&lt;code&gt;&amp;lt;boost/filesystem.hpp&amp;gt;&lt;/code&gt;头文件的代码
&lt;img src=&#34;https://i.loli.net/2020/11/18/Nx2u3rV5Gfb6KIw.png&#34; alt=&#34;20160526211659072.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行后有错误提示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/18/P8IhJf7rdTReB9S.png&#34; alt=&#34;20160526211927278.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;说明boost库及头文件所在位置不在编译器搜索范围!
于是 &lt;strong&gt;增加搜索路径&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到Build Settings&lt;/li&gt;
&lt;li&gt;找到Library Search Paths&lt;/li&gt;
&lt;li&gt;单击或双击方框中的位置&lt;/li&gt;
&lt;li&gt;增加方框中的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/18/LT4PqDYegyx98oB.png&#34; alt=&#34;20160526212001810.jpg&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;找到Header Search Paths&lt;/li&gt;
&lt;li&gt;点击或双击方框中的位置&lt;/li&gt;
&lt;li&gt;增加方框中的内容
&lt;img src=&#34;https://i.loli.net/2020/11/18/1wLE4YFbzV7qDic.png&#34; alt=&#34;20160526211820824.jpg&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;头文件增加操作,再次编译,又出现错误信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/18/P8IhJf7rdTReB9S.png&#34; alt=&#34;20160526211927278.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;说明编译器找不到boost库,对xcode进行设置,增加库搜索路径&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到Build Phases&lt;/li&gt;
&lt;li&gt;找到Link Binary With Libraries&lt;/li&gt;
&lt;li&gt;点击添加 Add Other&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;command + shift + G&lt;/strong&gt; 前往&lt;code&gt;/usr/local/lib&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/18/3OdQvj7snA4V18P.png&#34; alt=&#34;20160526211756198.jpg&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;添加&lt;code&gt;libboost_system-mt.dylib&lt;/code&gt;
&lt;img src=&#34;https://i.loli.net/2020/11/18/GQnWq7FNPVKM2wc.png&#34; alt=&#34;20160526212157421.jpg&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加&lt;code&gt;libboost_filesystem-mt.dylib&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;添加完这两个lib后，代码就能正常编译了～&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/18/bRjLHKTqPGMWzoO.png&#34; alt=&#34;20160526212246513.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;编译&lt;code&gt;boost threads&lt;/code&gt;时,发现error&lt;/p&gt;
&lt;p&gt;随后在&lt;code&gt;Other Linker Flags&lt;/code&gt;中添加&lt;code&gt;/usr/local/lib/libboost_thread-mt.a&lt;/code&gt;, &lt;strong&gt;without -l&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/17/gNG43EQZjpwaiKO.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">TensorRT小结2</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tensorrt%E5%B0%8F%E7%BB%932/" />
            <id>https://chenbokaix250.github.io/tech/tensorrt%E5%B0%8F%E7%BB%932/</id>
            <updated>2020-11-17T12:06:31&#43;08:00</updated>
            <published>2020-11-16T08:39:41&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">TensorRT小结2 学习TensorFlow-TensorRT项目,总结学习心得.……</summary>
            
                <content type="html">&lt;h1 id=&#34;tensorrt小结2&#34;&gt;TensorRT小结2&lt;/h1&gt;
&lt;p&gt;学习TensorFlow-TensorRT项目,总结学习心得.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://github.com/ardianumam/Tensorflow-TensorRT&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read input Tensroflow model&lt;/li&gt;
&lt;li&gt;Convert to frozen model &amp;quot;.pb&amp;quot;&lt;/li&gt;
&lt;li&gt;Convert (optimize) to TensorRT model&lt;/li&gt;
&lt;li&gt;Inference using TensorRT model&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;利用keras训练mnist数据集-利用tensorrt改造后-推理加速&#34;&gt;利用keras训练mnist数据集 利用tensorRT改造后 推理加速&lt;/h2&gt;
&lt;h3 id=&#34;1设置训练过程-读取图片&#34;&gt;1.设置训练过程 读取图片&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keras.preprocessing.image.ImageDataGenerator(featurewise_center=False,  
                                             samplewise_center=False, 
                                             featurewise_std_normalization=False, 
                                             samplewise_std_normalization=False, 
                                             zca_whitening=False, 
                                             zca_epsilon=1e-06, 
                                             rotation_range=0, 
                                             width_shift_range=0.0, 
                                             height_shift_range=0.0, 
                                             brightness_range=None, 
                                             shear_range=0.0, 
                                             zoom_range=0.0, 
                                             channel_shift_range=0.0, 
                                             fill_mode=&#39;nearest&#39;, 
                                             cval=0.0, 
                                             horizontal_flip=False, 
                                             vertical_flip=False, 
                                             rescale=None, 
                                             preprocessing_function=None, 
                                             data_format=None, 
                                             validation_split=0.0, 
                                             dtype=None)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过实时数据增强生成张量图像数据批次,数据将不断循环.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rescale&lt;/strong&gt;: 重缩放因子。默认为 None。如果是 None 或 0，不进行缩放，否则将数据乘以所提供的值（在应用任何其他转换之前）&lt;/p&gt;
&lt;p&gt;置放缩因子为1/255，把像素值放缩到0和1之间有利于模型的收敛，避免神经元“死亡”。&lt;/p&gt;
&lt;p&gt;创建train_generator和testing_generator&lt;/p&gt;
&lt;h3 id=&#34;2定义网络&#34;&gt;2.定义网络&lt;/h3&gt;
&lt;p&gt;定义keras网络,利用Sequential搭建:
input_tensor --&amp;gt; Conv2D_1 --&amp;gt; Conv2D_2 --&amp;gt; Conv2D_3 --&amp;gt; Flatten --&amp;gt; Dense --&amp;gt; output_tensor&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Layer (type)                 Output Shape              Param #   
=================================================================
input_tensor (Conv2D)        (None, 28, 28, 20)        520       
_________________________________________________________________
activation (Activation)      (None, 28, 28, 20)        0         
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 14, 14, 20)        0         
_________________________________________________________________
conv2d (Conv2D)              (None, 14, 14, 20)        10020     
_________________________________________________________________
activation_1 (Activation)    (None, 14, 14, 20)        0         
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 7, 7, 20)          0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 7, 7, 20)          10020     
_________________________________________________________________
activation_2 (Activation)    (None, 7, 7, 20)          0         
_________________________________________________________________
flatten (Flatten)            (None, 980)               0         
_________________________________________________________________
dense (Dense)                (None, 10)                9810      
_________________________________________________________________
output_tensor (Dense)        (None, 3)                 33        
=================================================================
Total params: 30,403
Trainable params: 30,403
Non-trainable params: 0

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3训练网络&#34;&gt;3.训练网络&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;model.fit_generator&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;4推理&#34;&gt;4.推理&lt;/h3&gt;
&lt;p&gt;利用&lt;code&gt;load_model&lt;/code&gt;读取网络
利用&lt;code&gt;np.asarray&lt;/code&gt;转numpy的asarray格式&lt;/p&gt;
&lt;p&gt;predict_classes与predict函数的区别
当使用predict()方法进行预测时，返回值是数值，表示样本属于每一个类别的概率，我们可以使用numpy.argmax()方法找到样本以最大概率所属的类别作为样本的预测标签。
当使用predict_classes()方法进行预测时，返回的是类别的索引，即该样本所属的类别标签。&lt;/p&gt;
&lt;h3 id=&#34;出现的问题&#34;&gt;出现的问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Q1&lt;/strong&gt;
&lt;code&gt;a bytes-like object is required,not &#39;str&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在保存模型结果时,出现这种问题
encoding搞了半天也没有解决
最后将hdf5的版本由2.4.0升级到了2.5.0后问题解决.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2&lt;/strong&gt;
&lt;code&gt;Cuda Error in nvinfer1::cudnn::findFastestTactic&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可能是因为cuda内存管理问题 导致溢出 多试了几次解决了&lt;/p&gt;
&lt;p&gt;==================== &lt;strong&gt;YOLOv3&lt;/strong&gt; =====================&lt;/p&gt;
&lt;p&gt;利用权重文件 &lt;code&gt;yolov3_gpu_nms&lt;/code&gt;
转换成&lt;code&gt;TensorRT_YOLOv3_2.pb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;读取模型的输入输出:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;input_tensor, output_tensors = \
utils.read_pb_return_tensors(tf.get_default_graph(),
                             TENSORRT_YOLOv3_MODEL,
                             [&amp;quot;Placeholder:0&amp;quot;, &amp;quot;concat_9:0&amp;quot;, &amp;quot;mul_9:0&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Session读取&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; boxes, scores = sess.run(output_tensors, 
                                 feed_dict={input_tensor: 
                                            np.expand_dims(
                                                img_resized, axis=0)})
        boxes, scores, labels = utils.cpu_nms(boxes, 
                                              scores, 
                                              num_classes, 
                                              score_thresh=0.4, 
                                              iou_thresh=0.5)
        image = utils.draw_boxes(image, boxes, scores, labels, 
                                 classes, SIZE, show=False)
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">TensorRT小结1</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tensorrt%E5%B0%8F%E7%BB%931/" />
            <id>https://chenbokaix250.github.io/tech/tensorrt%E5%B0%8F%E7%BB%931/</id>
            <updated>2020-11-14T14:50:55&#43;08:00</updated>
            <published>2020-11-14T13:44:04&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">TensorRT小结 利用Xavier的硬件 集中学习了tensorRT 记录一下 1.Te……</summary>
            
                <content type="html">&lt;h1 id=&#34;tensorrt小结&#34;&gt;TensorRT小结&lt;/h1&gt;
&lt;p&gt;利用Xavier的硬件 集中学习了tensorRT 记录一下&lt;/p&gt;
&lt;h2 id=&#34;1tensorrt介绍&#34;&gt;1.TensorRT介绍&lt;/h2&gt;
&lt;p&gt;NVIDIA TensorRT是一种高性能神经网络推理(Inference)引擎，用于在生产环境中部署深度学习应用程序，应用有图像分类、分割和目标检测等，可提供最大的推理吞吐量和效率。TensorRT是第一款可编程推理加速器，能加速现有和未来的网络架构。
TensorRT需要CUDA的支持。通过TensorRT的大幅度加速，服务提供商能够以经济实惠的成本部署这些计算密集型人工智能工作负载。
TensorRT是一个C++库。TensorRT只能用来做Inference(推理)，不能用来进行train。
TensorRT基本处理过程：(1)、caffe model转化GIE的model，或者从磁盘或者网络加载GIE可用的model；(2)、运行GIE引擎(数据提前copy到GPU中)；(3)、提取结果。&lt;/p&gt;
&lt;p&gt;转化GIE model两种方式：(1)、caffeToGIEModel；(2)、参考sampleMNIST API自己构建GIE model.&lt;/p&gt;
&lt;p&gt;用深度神经网络解决监督机器学习问题包含两个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步是使用GPU对海量标签数据进行深度神经网络训练，训练时需要迭代的通过网络进行前向传播和反向传播。最终会生成训练好的model文件。&lt;/li&gt;
&lt;li&gt;第二步是推理(Inference)即使用训练好的模型对新数据做出预测，仅需通过网络进行前向传播。TensorRT是一款高性能的推理引擎，旨在为常见的深度学习应用如图像分类、分割、目标检测等提供最大的推理吞吐量和效率。针对运行时性能，TensorRT会优化已训练的神经网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用TensorRT包含两个阶段：构建(build)和部署(deployment)。在构建阶段，TensorRT对网络配置进行优化，并生成一个优化了的plan用于计算深度神经网络的前向传播。这个plan是一个优化了的目标代码，可以序列化存储在内存或磁盘上。部署阶段通常采用长时间运行的服务或用户应用程序的形式，该服务或用户应用程序接受批量输入数据，通过对输入数据执行plan来执行推理，并返回批量输出数据。使用TensorRT，你无需在部署硬件上安装并运行深度学习框架。&lt;/p&gt;
&lt;p&gt;TensorRT构建阶段：TensorRT运行时需要三个文件来部署一个分类神经网络：一个网络体系结构文件(deploy.prototxt)，已训练的权值(net.caffemodel)和一个标签文件为每个输出类提供一个名称。另外，你必须定义batch size和输出层。&lt;/p&gt;
&lt;p&gt;TensorRT对神经网络图(neural network graph)进行了几个重要的转换和优化：消除未使用的输出的层以避免不必要的计算；在可能的情况下，convolution、bias和ReLU层被融合以形成单个层，包括垂直层融合和水平层融合。在TensorRT解析器读入已训练的网络和配置文件后，TensorRT在构建阶段对API用户透明地执行其转换。&lt;/p&gt;
&lt;p&gt;在构建阶段，TensorRT优化网络，在部署阶段，TensorRT以最小化延迟和最大化吞吐量运行优化了的网络。&lt;/p&gt;
&lt;h2 id=&#34;2tensorrt相关各种版本查询&#34;&gt;2.TensorRT相关各种版本查询&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;查看jetpack版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ head -n 1 /etc/nv_tegra_release

R28 (release), REVISION: 2.1, GCID: 11272647, BOARD: t186ref, EABI: aarch64, DATE: Thu May 17 07:29:06 UTC 2018
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看TensorRT版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ii  graphsurgeon-tf                               5.1.6-1+cuda10.0                                arm64        GraphSurgeon for TensorRT package
ii  libnvinfer-dev                                5.1.6-1+cuda10.0                                arm64        TensorRT development libraries and headers
ii  libnvinfer-samples                            5.1.6-1+cuda10.0                                all          TensorRT samples and documentation
ii  libnvinfer5                                   5.1.6-1+cuda10.0                                arm64        TensorRT runtime libraries
ii  python-libnvinfer                             5.1.6-1+cuda10.0                                arm64        Python bindings for TensorRT
ii  python-libnvinfer-dev                         5.1.6-1+cuda10.0                                arm64        Python development package for TensorRT
ii  python3-libnvinfer                            5.1.6-1+cuda10.0                                arm64        Python 3 bindings for TensorRT
ii  python3-libnvinfer-dev                        5.1.6-1+cuda10.0                                arm64        Python 3 development package for TensorRT
ii  tensorrt                                      5.1.6.1-1+cuda10.0                              arm64        Meta package of TensorRT
ii  uff-converter-tf                              5.1.6-1+cuda10.0                                arm64        UFF converter for TensorRT package
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看系统版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold:~$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION=&amp;quot;Ubuntu 18.04.3 LTS&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看系统内核&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold:~$ uname -a
Linux AiROS 4.9.140-tegra #1 SMP PREEMPT Tue Nov 5 13:37:19 PST 2019 aarch64 aarch64 aarch64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看内存&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:          15690        2630        3852          82        9207       12921
Swap:          7845           0        7845

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看CPU&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ lscpu
Architecture:         aarch64
Byte Order:           Little Endian
CPU(s):               8
On-line CPU(s) list:  0-3
Off-line CPU(s) list: 4-7
Thread(s) per core:   1
Core(s) per socket:   2
Socket(s):            2
Vendor ID:            Nvidia
Model:                0
Model name:           ARMv8 Processor rev 0 (v8l)
Stepping:             0x0
CPU max MHz:          2265.6001
CPU min MHz:          115.2000
BogoMIPS:             62.50
L1d cache:            64K
L1i cache:            128K
L2 cache:             2048K
L3 cache:             4096K
Flags:                fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看硬盘空间&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/mmcblk0p1   28G   17G  9.8G  63% /
none            7.7G     0  7.7G   0% /dev
tmpfs           7.7G     0  7.7G   0% /dev/shm
tmpfs           7.7G   29M  7.7G   1% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           7.7G     0  7.7G   0% /sys/fs/cgroup
/dev/nvme0n1p1  229G   97G  121G  45% /home
tmpfs           1.6G  136K  1.6G   1% /run/user/1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看cuda版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ /usr/local/cuda/bin/nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Mon_Mar_11_22:13:24_CDT_2019
Cuda compilation tools, release 10.0, V10.0.326
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看cudnn版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ cat /usr/include/cudnn.h | grep CUDNN_MAJOR -A 2
#define CUDNN_MAJOR 7
#define CUDNN_MINOR 5
#define CUDNN_PATCHLEVEL 0
--
#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)

#include &amp;quot;driver_types.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看opencv版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ pkg-config --modversion opencv
3.3.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**查看python3版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ python3 -V 
Python 3.6.8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看tensorflow版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cold@cold-desktop:~$ python3
Python 3.6.8 (default, Oct  7 2019, 12:59:55)
[GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import tensorflow as tf
2020-11-14 14:36:47.129201: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library libcudart.so.10.0
&amp;gt;&amp;gt;&amp;gt; tf.__version__
&#39;1.14.0&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当运行tensorflow出现&lt;code&gt;No module named &#39;tensorflow.contrib&#39;&lt;/code&gt; 时,说明目前程序支持的是tensorflow1,而安装的是tensorflow2,需要退回到1.xx版本
&lt;code&gt;pip3 install tensorflow==1.14.0&lt;/code&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Caffe编译错误：Makefile：619</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/caffe%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AFmakefile619/" />
            <id>https://chenbokaix250.github.io/tech/caffe%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AFmakefile619/</id>
            <updated>2020-11-06T19:02:09&#43;08:00</updated>
            <published>2020-11-06T18:54:37&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">编译caffe-SSD时,准备编译caffe遇到整屏幕的错误 错误描述是Makefil……</summary>
            
                <content type="html">&lt;p&gt;编译caffe-SSD时,准备编译caffe遇到整屏幕的错误&lt;/p&gt;
&lt;p&gt;错误描述是&lt;code&gt;Makefile:619: recipe for target &#39;.build_release/tools/upgrade_net_proto_binary.bin&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180803110244603?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDUxMTE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CXX/LD -o .build_release/tools/net_speed_benchmark.bin
CXX/LD -o .build_release/tools/caffe.bin
CXX/LD -o .build_release/tools/device_query.bin
CXX/LD -o .build_release/tools/convert_imageset.bin
CXX/LD -o .build_release/tools/finetune_net.bin
CXX/LD -o .build_release/tools/train_net.bin
CXX/LD -o .build_release/tools/upgrade_net_proto_binary.bin
CXX/LD -o .build_release/tools/compute_image_mean.bin
CXX/LD -o .build_release/tools/upgrade_net_proto_text.bin
CXX/LD -o .build_release/tools/get_image_size.bin
CXX/LD -o .build_release/tools/extract_features.bin
CXX/LD -o .build_release/tools/convert_annoset.bin
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/upgrade_net_proto_binary.bin&#39; failed
make: *** [.build_release/tools/upgrade_net_proto_binary.bin] Error 1
make: *** Waiting for unfinished jobs....
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/convert_imageset.bin&#39; failed
make: *** [.build_release/tools/convert_imageset.bin] Error 1
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/compute_image_mean.bin&#39; failed
make: *** [.build_release/tools/compute_image_mean.bin] Error 1
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/caffe.bin&#39; failed
make: *** [.build_release/tools/caffe.bin] Error 1
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/get_image_size.bin&#39; failed
make: *** [.build_release/tools/get_image_size.bin] Error 1
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/upgrade_net_proto_text.bin&#39; failed
make: *** [.build_release/tools/upgrade_net_proto_text.bin] Error 1
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform_primary(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::cpp_regex_traits_implementation&amp;lt;char&amp;gt;::transform(char const*, char const*) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;::maybe_assign(boost::match_results&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::.allocatorbuild_release&amp;lt;/charlib&amp;gt; &amp;gt; &amp;gt;,/ libcaffe.sostd:: :undefinedallocator &amp;lt;referenceboost :to: sub_match`&amp;lt;boost__gnu_cxx::::re_detail__normal_iterator:&amp;lt;:charcpp_regex_traits_implementation &amp;lt;constchar*&amp;gt;,: :stdtransform_primary:(:char__cxx11 :const:*basic_string,&amp;lt; char charconst,* )std :const:&#39;char_traits
&amp;lt;.charbuild_release&amp;gt;/lib,/ libcaffe.sostd:: :undefinedallocator &amp;lt;referencechar to `&amp;gt;boost: :&amp;gt;re_detail: :&amp;gt; &amp;gt; cpp_regex_traits_implementation&amp;gt;&amp;lt;,char &amp;gt;:boost::transform:(regex_traitschar&amp;lt; charconst,* ,boost :char: cpp_regex_traitsconst&amp;lt;*char)&amp;gt;  const&amp;gt;&#39; 
&amp;gt;.:build_release/:libconstruct_init/(libcaffe.soboost:: undefined: basic_regexreference to &amp;lt;`charboost,: :match_results&amp;lt;boost__gnu_cxx::::regex_traits__normal_iterator&amp;lt;&amp;lt;charchar,  constboost*:,: cpp_regex_traitsstd&amp;lt;:char:&amp;gt; __cxx11&amp;gt;: :&amp;gt;basic_string &amp;lt;constchar&amp;amp;,,  std:boost::char_traits:&amp;lt;regex_constantschar:&amp;gt;:,_match_flags )std&#39;:
:.allocatorbuild_release&amp;lt;/charlib&amp;gt; &amp;gt;/ libcaffe.so&amp;gt;:,  undefinedstd :reference: allocatorto `boost&amp;lt;:boost::re_detail::sub_match:&amp;lt;verify_options__gnu_cxx(:unsigned:__normal_iterator &amp;lt;intchar,  constboost*:,: regex_constantsstd::::__cxx11_match_flags:):&#39;basic_string
&amp;lt;.char,build_release /stdlib:/:libcaffe.sochar_traits:&amp;lt; undefinedchar&amp;gt; ,reference std :to: allocator`&amp;lt;boostchar:&amp;gt;: &amp;gt; &amp;gt;re_detail &amp;gt; :&amp;gt;: &amp;gt;get_default_error_string:(:boostmaybe_assign:(:boostregex_constants::::match_resultserror_type&amp;lt;)__gnu_cxx&#39;:
:__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::collect2: error: ld returned 1 exit status
basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::put_mem_block(void*)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_mem_block()&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::do_assign(char const*, char const*, unsigned int)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::raise_runtime_error(std::runtime_error const&amp;amp;)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::cpp_regex_traits&amp;lt;char&amp;gt;::toi(char const*&amp;amp;, char const*, int) const&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::perl_matcher&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;Makefile:619: recipe for target &#39;.build_release/tools/extract_features.bin&#39; failed
char, std::make: *** [.build_release/tools/extract_features.bin] Error 1
char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;, std::allocator&amp;lt;boost::sub_match&amp;lt;__gnu_cxx::__normal_iterator&amp;lt;char const*, std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt;, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt;::construct_init(boost::basic_regex&amp;lt;char, boost::regex_traits&amp;lt;char, boost::cpp_regex_traits&amp;lt;char&amp;gt; &amp;gt; &amp;gt; const&amp;amp;, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::verify_options(unsigned int, boost::regex_constants::_match_flags)&#39;
.build_release/lib/libcaffe.so: undefined reference to `boost::re_detail::get_default_error_string(boost::regex_constants::error_type)&#39;
collect2: error: ld returned 1 exit status
Makefile:619: recipe for target &#39;.build_release/tools/convert_annoset.bin&#39; failed
make: *** [.build_release/tools/convert_annoset.bin] Error 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;h3 id=&#34;修改-makefile文件&#34;&gt;修改 Makefile文件&lt;/h3&gt;
&lt;p&gt;进入到下载的caffe目录&lt;/p&gt;
&lt;p&gt;在  Makefile  文件中，按住crtl+f  搜索：stdc++&lt;/p&gt;
&lt;p&gt;注意不是  Makefile.config！！！&lt;/p&gt;
&lt;p&gt;添加   boost_regex  到 LIBRARIES +=  的最后&lt;/p&gt;
&lt;p&gt;即原来的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LIBRARIES += boost_thread stdc++&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在变成:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LIBRARIES += boost_thread stdc++ boost_regex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180803110716157?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDUxMTE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;重新make&#34;&gt;重新make&lt;/h3&gt;
&lt;p&gt;注意 一定先&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;否则,错误无法解除&lt;/p&gt;
&lt;p&gt;重新`` make &amp;amp;&amp;amp; make distribute` 后&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编译通过&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180803110604874?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDUxMTE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/caffe/" term="caffe" label="caffe" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Autoware Vision部分代码解析</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/autoware-vision%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/" />
            <id>https://chenbokaix250.github.io/tech/autoware-vision%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
            <updated>2020-11-06T18:52:10&#43;08:00</updated>
            <published>2020-11-06T10:48:45&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">vision_ssd_detect 代码解读 在Autoware平台的Core Perception模块中实现了如何利用S……</summary>
            
                <content type="html">&lt;h2 id=&#34;vision_ssd_detect-代码解读&#34;&gt;vision_ssd_detect 代码解读&lt;/h2&gt;
&lt;p&gt;在Autoware平台的Core Perception模块中实现了如何利用SSD模型进行图片目标检测的示例，下面将对该部分的代码及所需的环境配置进行详细介绍和解读。首先进入&lt;code&gt;src/autoware/core_perception/vision_ssd_detect/launch/vision_ssd_detect.launch&lt;/code&gt;文件，可以看到这部分主要包含vision_ssd_detect和visualize_rects两个节点，如下图2所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412085243363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里还需注意的是在argument list中定义了网络配置文件(network_definition_file)和预训练模型文件(pretrained_model_file)地址，可以根据实际需要进行自定义。&lt;/p&gt;
&lt;h3 id=&#34;ssd-caffe环境配置&#34;&gt;SSD Caffe环境配置&lt;/h3&gt;
&lt;p&gt;在开始代码解读前，首先需要配置SSD Caffe环境。Caffe[3]是一个开源的深度学习框架，专注于计算机视觉的应用研究。配置SSD Caffe环境主要包括以下几个步骤：&lt;/p&gt;
&lt;p&gt;(1) 进入Caffe官网，进行ubuntu系统的Caffe预编译过程。值得注意的是，ubuntu系统对Caffe框架支持较好，对CPU和GPU两个版本的Caffe都有很好的兼容性。&lt;/p&gt;
&lt;p&gt;(2) 将SSD Caffe项目克隆到本地，并根据项目要求进行预编译。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% git clone -b ssd https://github.com/weiliu89/caffe.git ssdcaffe
% cd ssdcaffe
% git checkout 4817bf8b4200b35ada8ed0dc378dceaf38c539e4

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(3) 编译Caffe&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make &amp;amp;&amp;amp; make distribute&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(4) (可选) 从SSD Caffe项目中下载预训练模型(&lt;a href=&#34;https://github.com/weiliu89/caffe/tree/ssd&#34;&gt;https://github.com/weiliu89/caffe/tree/ssd&lt;/a&gt;)，或也可以选择自己训练好的模型。&lt;/p&gt;
&lt;p&gt;(5) 一旦编译完成，在终端(terminal)中运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;roslaunch vision_ssd_detect vision_ssd_detect network_definition_file:=/PATH/TO/deploy.prototxt pretrained_model_file:=/PATH/TO/model.caffemodel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;特别注意的是，需要将这里&lt;code&gt;network_definition_file&lt;/code&gt;和&lt;code&gt;pretrained_model_file&lt;/code&gt;与&lt;code&gt;src/autoware/core_perception/vision_ssd_detect/launch/vision_ssd_detect.launch&lt;/code&gt;中相应的地址保持一致。这样，就可以完成SSD Caffe的环境配置，以便在Autoware Core Perception模块中使用。&lt;/p&gt;
&lt;h3 id=&#34;vision_ssd_detect节点&#34;&gt;vision_ssd_detect节点&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/vision_ssd_detect/src/vison_ssd_detect_node.cpp&lt;/code&gt;中定义了SSD检测算法的主要操作细节。首先，找到main()函数入口，其中对SSD算法参数进行初始化，调用类方法ROSSSDApp()，并执行run()，如下图3所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412111813630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;类方法rosssdapp&#34;&gt;类方法ROSSSDApp()&lt;/h3&gt;
&lt;p&gt;在类方法中,声明了ROS接收节点 命名空间节点以及opencv中图像像素参数.
同时定义了 置信阈值,GPU设备号,是否使用GPU,目标类别的命名空间参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200411172653699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;convert_to_detected_object方法&#34;&gt;convert_to_detected_object()方法&lt;/h3&gt;
&lt;p&gt;该函数对检测结果进行信息转换用来组装out_message发布检测结果
将in_object转移到obj中,在push_back到out_message&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2020041117324158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;image_callback方法&#34;&gt;image_callback()方法&lt;/h3&gt;
&lt;p&gt;回调函数中定义了输入图片的预处理操作,其功能包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转换图片格式 toCvCopy&lt;/li&gt;
&lt;li&gt;调用SSD算法进行目标检测  ssd_detector_-&amp;gt;Detect&lt;/li&gt;
&lt;li&gt;发布结果 publisher_detected_objects_.publish&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;run方法&#34;&gt;Run()方法&lt;/h3&gt;
&lt;p&gt;利用构造函数的信息 INFO到terminal,定义字符变量/接收输入/网络配置文件和预训练模型文件等.
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200411190503574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后将定义好的内容,在&lt;strong&gt;SSDDetector&lt;/strong&gt;类方法中进行模型初始化
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200411191053384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用advertise和subscriber实现发布和接收 advertise方法能够回调一个publisher对象 并通过publish发布信息.
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200411191448835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;visualize_rects节点&#34;&gt;visualize_rects节点&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/visualization/detected_objects_visualizer/src/visualize_rects_main.cpp&lt;/code&gt;是visualize_rects节点的主函数入口。如下图10所示，main()主函数下同样包含参数初始化、调用类方法VisualizeRects以及spin()节点等操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412091955697.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;类方法visualizerects&#34;&gt;类方法VisualizeRects()&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/visualization/detected_objects_visualizer/include/visualize_rects.h&lt;/code&gt;下定义类方法VisualizeRects。除了常规地声明ROS命名空间和信息收发节点、标准变量等操作外，这里进一步定义SyncedDetectionCallback()方法、IsObjectValid()方法以及ObjectsToRects()方法。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412093949871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;synceddetectioncallback方法&#34;&gt;SyncedDetectionCallback()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/visualization/detected_objects_visualizer/src/visualize_rects.cpp&lt;/code&gt;中对SyncedDetectionCall()方法进行具体化。，该方法主要是利用ObjectToRects()方法，在图片上画出目标的区域并将检测的结果(目标坐标位置、类别信息等)发布。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412094631304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;objecttorects方法&#34;&gt;ObjectToRects()方法&lt;/h3&gt;
&lt;p&gt;同样，在&lt;code&gt;src/autoware/core_perception/visualization/detected_objects_visualizer/src/visualize_rects.cpp&lt;/code&gt;中对ObjectToRects()方法进行具体化。首先对图片进行复制，以便后续绘制目标矩形框。接着利用IsObjectValid()方法判断目标的有效性，并进行一以下操作：确定矩形框的中心坐标、宽度、高度、目标类别标签等信息，并设置所要添加的文字字体、尺寸等参数。最后，在先前复制的图片上绘制目标矩形框，并添加必要的信息。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412095835769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;isobjectvalid方法&#34;&gt;IsObjectValid()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/visualization/detected_objects_visualizer/src/visualize_rects.cpp&lt;/code&gt;中通过IsObjectValid()方法简单判断目标是否有效，即通过目标尺寸的正负形来确定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200412100457350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;trafficlight_recognizer&#34;&gt;trafficlight_recognizer&lt;/h2&gt;
&lt;p&gt;首先进入&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/launch&lt;/code&gt;，在该文件夹下共包含&lt;code&gt;feat_proj.launch、roi_extractor.launch、traffic_llight_recognition_mxnet.launch、traffic_light_recognition_ssd.launch、traffic_light_recognition.launch&lt;/code&gt;等五个文件。&lt;/p&gt;
&lt;h3 id=&#34;feat_proj&#34;&gt;feat_proj&lt;/h3&gt;
&lt;p&gt;feat_proj部分的主要功能是通过一些投影变换获取信号灯的位置信息.
在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/launch中，feat_proj.launch&lt;/code&gt;文件主要包含一些基础参数信息，如camera_id、use_path_info等，以及节点feat_proj信息.
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421112217749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点feat_proj&#34;&gt;节点feat_proj&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/feat_proj/feat_proj.cpp&lt;/code&gt;
文件中找到主函数main()，其中包含参数初始化、加载vector_map()方法(load_point()、load_lines()、load_vectors()方法等)、并调用cameraInfoCallback()、adjust_xyCallback()、getTransform()、echSignals2()等方法来获取信号灯的位置，
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421113810286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;vector_map方法&#34;&gt;vector_map()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/common/libvectormap/src/vector_map.cpp&lt;/code&gt;中定义了相关方法的具体操作，以load_points()方法为例。如下图3所示，该方法主要是用于加载point并进行一些必要的操作，以获取点坐标信息及位置关系。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421115257407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;camerainfocallback方法&#34;&gt;cameraInfoCallback()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/feat_proj/feat_proj.cpp&lt;/code&gt;文件中定义了cameraInfoCallback()方法的具体操作，其主要用于获取相机参数信息及图片相关参数.
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421115928648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;adjust_xycallback方法&#34;&gt;adjust_xyCallback()方法&lt;/h3&gt;
&lt;p&gt;同样在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/feat_proj/feat_proj.cpp&lt;/code&gt;文件中定义了adjust_xyCallback()方法的具体操作.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421120242548.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;gettransform方法&#34;&gt;getTransform()方法&lt;/h3&gt;
&lt;p&gt;getTransform()方法主要是用于进行图片变换，以便获取位置和方向参数
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421150923266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;echosignals2方法&#34;&gt;echoSignals2()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/feat_proj/feat_proj.cpp&lt;/code&gt;文件中还定义了echoSignals2()方法，通过一系列的投影变换获取信号灯不同角度的位置信息，如下图7所示。首先，建立服务器(server)与信号灯之间的相应关系，以获取信号灯数据；随后，调用project2()方法对位置坐标进行变换，得到相应的投影坐标；最后，利用GetSignalAngleInCameraSystem()方法计算相机坐标系下信号灯角度信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421152024129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;project2方法&#34;&gt;project2()方法&lt;/h3&gt;
&lt;p&gt;project2()方法的返回结果是一个布尔值，该方法主要是用于获取世界坐标点在图像平面的投影变换结果，随后进一步判断点坐标与图像平面的位置关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421152839726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;getsignalangleincamerasystem方法&#34;&gt;GetSignalAngleInCameraSystem()方法&lt;/h3&gt;
&lt;p&gt;该方法的返回结果是一个双精度值，用于获取相机坐标系统下信号灯的角度信息。
首选通过ConvertDegreeToRadian()方法将vector_map进行弧度变换，获取ROS格式下的几何信息(roll、pitch、yaw等)；然后，通过相机坐标系统分别对信号灯的几何信息进行转换；最后再调用ConvertRadianToDegree()方法获取信号灯角度信息。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421153655481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;convertdegreetoradian方法和convertradiantodegree方法&#34;&gt;ConvertDegreeToRadian()方法和ConvertRadianToDegree()方法&lt;/h3&gt;
&lt;p&gt;ConvertDegreeToRadian()和ConvertRadianToDegree()两种方法的返回结果均为双精度值，主要功能是实现角度-弧度、弧度-角度的变换过程.
&lt;img src=&#34;https://img-blog.csdnimg.cn/2020042115405662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;roi_extractor&#34;&gt;roi_extractor&lt;/h3&gt;
&lt;p&gt;roi_extractor部分主要是用于获取信号灯的roi区域，在src/autoware/core_perception/trafficlight_recognizer/launch中，roi_extractor.launch文件包含一些基础参数信息，如target_directory、minimum_height、similarity_threshold等，以及节点roi_extractor信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421161713402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点roi_extractor&#34;&gt;节点roi_extractor&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/roi_extractor/roi_extractor.cpp&lt;/code&gt;文件中找到主函数main()，首先对节点参数进行初始化并获取必要的参数信息(image_topic_name、target_directory_name等)；随后分别调用CreateTargetDirectory()、ImageRawCallback()、ROISignalCallback()方法接收并存储信号灯roi区域图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421162834728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;createtargetdirectory方法&#34;&gt;CreateTargetDirectory()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/roi_extractor/roi_extractor.cpp&lt;/code&gt;中定义了CreateTargetDirectory()方法的具体操作，如下图13所示，该方法通过调用MakeDirectoryTree()方法创建目录并调用CountFileNum()方法统计目录下的文件数量，最后根据所确定的目录名和文件名存储信号灯roi图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421163933254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;makedirectorytree方法&#34;&gt;MakeDirectoryTree()方法&lt;/h3&gt;
&lt;p&gt;MakeDirectoryTree()方法的功能是用于创建目录结构
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421164223834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;countfilenum方法&#34;&gt;CountFileNum()方法&lt;/h3&gt;
&lt;p&gt;CountFileNum()方法的返回结果是一个整型值，用于统计目标目录下所包含的文件数.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421164441677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;imagerawcallback方法&#34;&gt;ImageRawCallback()方法&lt;/h3&gt;
&lt;p&gt;ImageRawCallback()方法用于对图片进行处理，并保留系统时间戳数据以确保相同图片不会被重复处理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421164935624.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;roisignalcallback方法&#34;&gt;ROISignalCallback()方法&lt;/h3&gt;
&lt;p&gt;ROISignalCallback()方法用于获取信号灯roi区域的位置信息。该方法首先确定图片中顶部信号灯的初步位置，并提取其roi区域；随后调用CalculateSimilarity()方法计算图片的相似度，以进一步获取确定的roi信息。最后保存相应的信号的roi图片并记录时间戳信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421165711951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;calculatesimilarity方法&#34;&gt;CalculateSimilarity()方法&lt;/h3&gt;
&lt;p&gt;CalculateSimilarity()方法返回一个双精度结果，主要是通过对比两张图片的直方图差异性来间接计算图片的相似度。首先，创建对图片进行颜色空间变换并量化hue值；然后，分别计算两张图片的直方图差异性得到相似度水平。&lt;/p&gt;
&lt;h3 id=&#34;traffic_light_recognition_mxnet-方法&#34;&gt;traffic_light_recognition_mxnet() 方法&lt;/h3&gt;
&lt;p&gt;traffic_light_recognition_mxnet部分主要是通过深度学习框架mxnet[1]，调用目标识别模型来解决交通信号灯识别问题。值得注意的是，在开始该部分学习之前需要安装mxnet框架并配置相关的运行环境。进入src/autoware/core_perception/trafficlight_recognizer/launch，在traffic_light_recognition_mxnet.launch文件中包含了参数列表以及节点region_tlr_mxnet信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421173220912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点region_tlr_mxnet&#34;&gt;节点region_tlr_mxnet&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/region_tlr_mxnet/region_tlr_mxnet.cpp&lt;/code&gt;文件中找到main()函数，其中包括初始化ROS节点参数，并调用类方法RegionTLRMxNetROSNode()的RunRecognition()方法进行信号灯识别等操作.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421173827724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;runrecognition方法&#34;&gt;RunRecognition()方法&lt;/h3&gt;
&lt;p&gt;RunRecognition()方法主要定义了信号灯的识别过程
首先调用GetROSParam()方法从ROS服务端获取参数信息；然后，调用Init()方法初始化目标识别模型参数；最后通过StartSubscribersAndPublishers()方法开启ROS节点，用于接收和发布信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200421181443374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;getrosparam方法&#34;&gt;GetROSParam()方法&lt;/h3&gt;
&lt;p&gt;GetROSParam()方法主要用于获取ROS节点参数信息，包括图片名(image_topic_name)、网络配置文件(network_definition_file)、预训练模型文件(pretrained_model_file)等&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422145914970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;init方法&#34;&gt;Init()方法&lt;/h3&gt;
&lt;p&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/region_tlr_mxnet/mxnet_traffic_light_recognizer.cpp，文件中定义了Init()方法的具体操作，该方法的主要功能是初始化网络参数并进行信号灯识别。首先定义一些必要参数，包括是否使用gpu、gpu id、前向传播过程(num_input_nodes)，并对输入尺寸的格式进行限制等；然后利用mxnet框架创建预测层(MXPredCreate)，导入预训练模型文件和网络配置文件进行信号灯识别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422151743806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;startsubscribersandpublishers方法&#34;&gt;StartSubscribersAndPublishers()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/region_tlr_mxnet/mxnet_traffic_light_recognizer.cpp&lt;/code&gt;文件中，StartSubscribersAndPublishers()方法用于启动ROS信息接收节点。首先，启动信息接收节点，并调用ImageRawCallback()、ROISignalCallback()和SuperimposeCb()方法接收输入图片、信号灯ROI区域并对其进行处理；然后，通过信息发布节点，将信号灯状态(颜色)、信号灯位置识别结果等信息发布。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422152421837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;imagerawcallback方法-1&#34;&gt;ImageRawCallback()方法&lt;/h3&gt;
&lt;p&gt;ImageRawCallback()方法主要用于对图片进行创建、复制等初步处理.
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422153614287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;roisignalcallback方法-1&#34;&gt;ROISignalCallback()方法&lt;/h3&gt;
&lt;p&gt;ROISignalCallback()方法主要用于对信号灯ROI区域进行处理，从而获取信号灯状态信息。首先在图中对应信号灯ROI区域，以确定信号灯位置；然后，调用RecognizeLightState()、DetermineState()方法识别并更新信号灯状态；最后通过PublishTrafficLight()、PublishString()、PublishMarkerArray()、PublishImage()方法将识别结果发布，并保存时间戳信息。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422161906786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;recognizelightstate方法&#34;&gt;RecognizeLightState()方法&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/region_tlr_mxnet/mxnet_traffic_light_recognizer.cpp&lt;/code&gt;文件中，RecognizeLightState()方法用于识别信号灯的状态。该方法接收信号灯图片并调用PreProccessImage()方法对图片进行预处理；然后调用mxnet框架中预测层方法进行信号灯识别，并根据识别结果将其转为对应的信号灯状态。
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422163302586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;preprocessimage方法&#34;&gt;PreProcessImage()方法&lt;/h3&gt;
&lt;p&gt;PreProcessImage()方法主要用于对输入图片的尺寸、通道进行预处理，以适应网络输入的尺寸&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422163658356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;traffic_light_recognition_ssd&#34;&gt;traffic_light_recognition_ssd&lt;/h3&gt;
&lt;p&gt;traffic_light_recognition_ssd部分主要是通过利用SSD模型来识别交通信号灯
这里侧重介绍如何Autoware平台中调用SSD模型并识别交通信号灯。进入s&lt;code&gt;rc/autoware/core_perception/trafficlight_recognizer/launch，在traffic_light_recognition_ssd.launch&lt;/code&gt;文件中包含了参数列表以及节点region_tlr_ssd信息
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422174514891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点region_tlr_ssd&#34;&gt;节点region_tlr_ssd&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/nodes/region_tlr_ssd/region_tlr_ssd.cpp&lt;/code&gt;文件中找到main()函数入口，其中包括初始化ROS节点参数，并调用类方法RegionTLRSSDROSNode()的RunRecognition()方法进行信号灯识别等操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422175157929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;runrecognition方法-1&#34;&gt;RunRecognition()方法&lt;/h3&gt;
&lt;p&gt;RunRecognition()方法同样是用于识别信号灯
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422180215185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;该方法首先调用GetROSParam()方法从ROS服务端获取参数信息；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用Init()方法初始化SSD模型参数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用StartSubscribersAndPublishers()方法开启ROS信息收发节点：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;信息接收节点：ImageRawCallback()和ROISignalCallback()方法接收信号灯图片并获取位置信息,ROISignalCallback()方法调用RecognizeLightState()、DetermineState()方法确定信号灯状态：RecognizeLightState()方法调用WrapInputLayer()、Preprocess()方法对图片进行处理；ROISignalCallback()方法调用PublishTrafficLight()、PublishString()、PublishMarkerArray()等方法以特定格式发布结果&lt;/p&gt;
&lt;p&gt;信息发布节点：发布信号灯状态(颜色)、识别结果等信息。&lt;/p&gt;
&lt;h3 id=&#34;traffic_light_recognition&#34;&gt;traffic_light_recognition&lt;/h3&gt;
&lt;p&gt;traffic_light_recognition部分主要用于识别交通信号灯并对识别结果进行微调，在&lt;code&gt;src/autoware/core_perception/trafficlight_recognizer/launch&lt;/code&gt;中，traffic_light_recognition.launch文件主要包含节点region_lr、节点tl_switch及其相关参数信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422200032271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点region_tlr&#34;&gt;节点region_tlr&lt;/h3&gt;
&lt;p&gt;在src/autoware/core_perception/trafficlight_recognizer/nodes/region_tlr/region_tlr.cpp文件中定义了该部分所采用的具体方法。
在main()函数中首先定义了红、黄、绿三种颜色的HSV取值阈值，并初始化ROS节点参数；然后，调用image_raw_cb()、extractedPos_cb()、tunedResult_cb()和superimpose_cb()方法提取信号灯位置信息并对结果进行微调显示；最后，通过ROS节点将识别结果发布。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422200701137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;image_raw_cb方法&#34;&gt;image_raw_cb()方法&lt;/h3&gt;
&lt;p&gt;对输入图片进行预处理,调用putResult_inText方法将识别结果添加到图片上
&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422201456222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;putresult_intext方法&#34;&gt;putResult_inText()方法&lt;/h3&gt;
&lt;p&gt;put_Result_inText()方法主要是将信号灯识别结果与状态标签对应起来，并在图片上添加状态标签、车道等信息.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200422202012451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmNodW5taWFu,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Autoware平台开展交通信号灯识别项目，主要包括feat_proj、roi_extractor、region_tlr_mxnet、region_tlr_ssd、region_tlr和tl.switch五个节点内容，理清整个项目的流程并解析各个方法的具体操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MXNet: &lt;a href=&#34;http://mxnet.incubator.apache.org/&#34;&gt;http://mxnet.incubator.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/autoware/" term="Autoware" label="Autoware" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Xavier中orb Slam的研究</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/xavier%E4%B8%ADorb-slam%E7%9A%84%E7%A0%94%E7%A9%B6/" />
            <id>https://chenbokaix250.github.io/tech/xavier%E4%B8%ADorb-slam%E7%9A%84%E7%A0%94%E7%A9%B6/</id>
            <updated>2020-11-03T16:46:05&#43;08:00</updated>
            <published>2020-11-03T16:45:39&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Xavier中orb_slam 安装ORB_SLAM3 ORB-SLAM3是西班牙萨拉戈……</summary>
            
                <content type="html">&lt;h1 id=&#34;xavier中orb_slam&#34;&gt;Xavier中orb_slam&lt;/h1&gt;
&lt;h2 id=&#34;安装orb_slam3&#34;&gt;安装ORB_SLAM3&lt;/h2&gt;
&lt;p&gt;ORB-SLAM3是西班牙萨拉戈萨大学于2020年7月中旬开源的作品，与ORB-SLAM、ORB-SLAM2一脉相承，是一个能够使用单目、立体、RGB-D相机，兼容针孔及鱼眼相机模型进行视觉、视觉+惯导和多地图的综合性SLAM方案。&lt;/p&gt;
&lt;h4 id=&#34;orb3的主要创新&#34;&gt;ORB3的主要创新：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;实现了基于视觉与IMU的紧耦合SLAM系统，该系统完全依赖最大似然估计（即便在初始化阶段也是如此）。该方案无论在小型或者大型室内室外环境中都能够稳定的运行，并且比以前的方法精确了2-5倍。&lt;/li&gt;
&lt;li&gt;多地图系统。依赖于一种新的位置识别和改进的回环检测，能够保证ORB3能够长时间在特征缺失环境下有效运行，当它跟丢时会重新启动一个新的地图，当检测到回环之后系统能够无缝拼接多个地图。&lt;/li&gt;
&lt;li&gt;第一个能在算法阶段重用所有历史信息的系统，包含了共视帧之间的捆集调整（BA），即使共视帧在时间上相差甚远，甚至来自不同的地图。
实验表明，在所有的传感器配置中，ORB3与文献中最好的系统一样鲁棒，且更准确。双目惯性SLAM在EuRoC数据集上的平均精度为3.6厘米，在TUM-VI数据集（AR/VR场景的一个典型场景）中，快速手持式移动时的平均精度为9毫米。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;下载源码&lt;/strong&gt;:
&lt;code&gt;git clone https://github.com/UZ-SLAMLab/ORB_SLAM3.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用C++11编译器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装Pangolin&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/stevenlovegrove/Pangolin.git
cd Pangolin
mkdir build
cd build
cmake ..
cmake --build .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ORB3编译运行&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ORB_SLAM3/
chmod +x ./build.sh
./build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试ORB3的相机和IMU的效果 下载数据集
&lt;code&gt;https://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/code&gt;
在ORB3的根目录下打开终端,运行&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单目相机+IMU &lt;code&gt;./Examples/Monocular-Inertial/mono_inertial_euroc ./Vocabulary/ORBvoc.txt ./Examples/Monocular-Inertial/EuRoC.yaml /home/yikang/Downloads/MH_05 ./Examples/Monocular-Inertial/EuRoC_TimeStamps/MH05.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仅单目相机 &lt;code&gt;./Examples/Monocular/mono_euroc ./Vocabulary/ORBvoc.txt ./Examples/Monocular/EuRoC.yaml /home/yikang/Downloads/MH_05 ./Examples/Monocular/EuRoC_TimeStamps/MH05.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kitti2bag-的使用&#34;&gt;kitti2bag 的使用&lt;/h2&gt;
&lt;p&gt;kitti2bag是把kitti的数据转换成rosbag的工具&lt;/p&gt;
&lt;p&gt;地址如下:
&lt;code&gt;https://github.com/tomas789/kitti2bag&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装kitti2bag&#34;&gt;安装kitti2bag&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pip install kitti2bag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载kitti数据,使用raw data的数据
data_drive_tracklets.zip是涉及标注信息
&lt;img src=&#34;https://pic3.zhimg.com/v2-df15b3268126b6de38cfb2e6c671d1a2_r.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行kitti2bag&#34;&gt;运行kitti2bag&lt;/h3&gt;
&lt;p&gt;2011_09_26是解压后的文件夹名称,0096是第几次drive的idx,raw_synced是几个指令中的一个.是指加载的文件是raw_data的意思
&lt;code&gt;kitti2bag -t 2011_09_26 -r 0096 raw_synced&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以利用rosbag来测试结果
&lt;code&gt;rosbag info xxx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行ros,并rviz可视化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;roscore
rviz
rosbag play -l kitti_2011_09_26_drive_0096_synced.bag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在rviz的Fixed Frame中选择base_link;
在add-&amp;gt;By topic,选择下图中的PointCloud2添加雷达图像,再添加Image
&lt;img src=&#34;https://img-blog.csdnimg.cn/2019092122102272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5OTlz,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;修改topic&#34;&gt;修改Topic&lt;/h4&gt;
&lt;p&gt;将PointCloud2的Topic修改为&amp;quot;kitti/velo/pointcloud&amp;quot;
将Image的Topic修改为&amp;quot;/kitti/camera_color_left/image_raw&amp;quot;&lt;/p&gt;
&lt;h4 id=&#34;返回终端播放&#34;&gt;返回终端播放&lt;/h4&gt;
&lt;p&gt;终端里空格键可以用来暂停和播放
返回rviz可以观察到点云和图像
&lt;img src=&#34;https://img-blog.csdnimg.cn/20190921221444807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5OTlz,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;q1&#34;&gt;Q1&lt;/h3&gt;
&lt;p&gt;当时遇到了一个问题,执行kitti2bag命令时,显示&lt;code&gt;command not found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在kitti2bagissue20上找到了答案:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip uninstall kitti2bag

sudo pip install kitti2bag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;问题解决!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;orb-slam2_ros编译安装及跑kitti数据集&#34;&gt;ORB-SLAM2_ROS编译安装及跑kitti数据集&lt;/h2&gt;
&lt;p&gt;###Q2
问题困扰了很久&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是没有理解ORB-SLAM2-ROS是在ORB-SLAM2上编译完成的 对CMakeList修改的路径不明晰.导致修改中产生错误 或顺序不对 无法产生依赖包 编译不下去&lt;/li&gt;
&lt;li&gt;g2o和DBow2两个依赖库不用提前安装 ORB-SLAM2中带有相应的安装文件 会随着编译安装完成.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装过程&#34;&gt;安装过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载KITTI-grayscale数据集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装ROS版本的ORB-SLAM2&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用ROS创建workspace&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p ~/catkin_orb_slam2_ws/src
cd ~/catkin_orb_slam2_ws/
catkin_make
mkdir ORB_SLAM2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;下载ORB-SLAM2:
&lt;code&gt;git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装编译:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ORB_SLAM2
chmod +x build.sh
vim build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;q1-1&#34;&gt;Q1&lt;/h3&gt;
&lt;p&gt;编译构建的过程中出现error:usleep()函数未定义的错误
需要在system.h中增加&lt;code&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;的头文件&lt;/p&gt;
&lt;h3 id=&#34;q2&#34;&gt;Q2&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CMakeFiles/ORB_SLAM2.dir/build.make:134: recipe for target &#39;CMakeFiles/ORB_SLAM2.dir/src/LoopClosing.cc.o&#39; failed
make[2]: *** [CMakeFiles/ORB_SLAM2.dir/src/LoopClosing.cc.o] Error 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开&lt;code&gt;LoopClosing.h&lt;/code&gt;,将:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef map&amp;lt;KeyFrame*,g2o::Sim3,std::less&amp;lt;KeyFrame*&amp;gt;,
        Eigen::aligned_allocator&amp;lt;std::pair&amp;lt;const KeyFrame*, g2o::Sim3&amp;gt; &amp;gt; &amp;gt; KeyFrameAndPose;

#更改为:
typedef map&amp;lt;KeyFrame*,g2o::Sim3,std::less&amp;lt;KeyFrame*&amp;gt;,
        Eigen::aligned_allocator&amp;lt;std::pair&amp;lt;KeyFrame *const, g2o::Sim3&amp;gt; &amp;gt; &amp;gt; KeyFrameAndPose;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新编译即可通过.&lt;/p&gt;
&lt;p&gt;这将在lib文件夹中创建libORB_SLAM2.so，并在Examples文件夹中创建可执行文件mono_tum，mono_kitti，rgbd_tum，stereo_kitti，mono_euroc和stereo_euroc。
&lt;strong&gt;这个很重要&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;然后利用&lt;code&gt;build_ros.sh&lt;/code&gt;安装ros&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;q3&#34;&gt;Q3&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rosbuild] rospack found package &amp;quot;ORB_SLAM&amp;quot; at &amp;quot;&amp;quot;, but the current
directory is &amp;quot;/home/josh/Desktop/ORB_SLAM&amp;quot;. You should double-check your
ROS_PACKAGE_PATH to ensure that packages are found in the correct
precedence order.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要在ROS下添加&lt;code&gt;ROS_PACKAGE_PATH&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;quot;source ~/catkin_orb_slam2_ws/devel/setup.bash&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;运行build.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo gedit ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;修改环境变量(user就是用户的名字,把它改成你自己的路径名字，ORB-SLAM2/Examples/ROS所在的完整路径。)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:/home/(user)/catkin_orb_slam2_ws/ORB_SLAM2/Examples/ROS
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;编译安装ROS版本的ORB-SLAM2&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ORB_SLAM2
chmod +x build_ros.sh
./build_ros.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;q4&#34;&gt;Q4&lt;/h3&gt;
&lt;p&gt;在编译时出现库的错误&lt;/p&gt;
&lt;h4 id=&#34;错误信息&#34;&gt;错误信息&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;error:
0%] Built target rosbuild_precompile
make[2]: *** No rule to make target &#39;/opt/ros/kinetic/lib/libopencv_calib3d3.so.3.2.0&#39;, needed by &#39;../Mono&#39;. Stop.
CMakeFiles/Makefile2:718: recipe for target &#39;CMakeFiles/Mono.dir/all&#39; failed
make[1]: *** [CMakeFiles/Mono.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
make[2]: *** No rule to make target &#39;/opt/ros/kinetic/lib/libopencv_calib3d3.so.3.2.0&#39;, needed by &#39;../RGBD&#39;. Stop.
CMakeFiles/Makefile2:67: recipe for target &#39;CMakeFiles/RGBD.dir/all&#39; failed
make[1]: *** [CMakeFiles/RGBD.dir/all] Error 2
make[2]: *** No rule to make target &#39;/opt/ros/kinetic/lib/libopencv_calib3d3.so.3.2.0&#39;, needed by &#39;../Stereo&#39;. Stop.
CMakeFiles/Makefile2:104: recipe for target &#39;CMakeFiles/Stereo.dir/all&#39; failed
make[1]: *** [CMakeFiles/Stereo.dir/all] Error 2
make[2]: *** No rule to make target &#39;/opt/ros/kinetic/lib/libopencv_calib3d3.so.3.2.0&#39;, needed by &#39;../MonoAR&#39;. Stop.
CMakeFiles/Makefile2:820: recipe for target &#39;CMakeFiles/MonoAR.dir/all&#39; failed
make[1]: *** [CMakeFiles/MonoAR.dir/all] Error 2
Makefile:127: recipe for target &#39;all&#39; failed
make: *** [all] Error 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;要在&lt;code&gt;/Examples/ROS/ORB-SLAM2/CMakeLists.txt&lt;/code&gt;文件下修改 加上 &lt;code&gt;-lboost_system&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set(LIBS
${OpenCV_LIBS}
${EIGEN3_LIBS}
${Pangolin_LIBRARIES}
${PROJECT_SOURCE_DIR}/../../../Thirdparty/DBoW2/lib/libDBoW2.so
${PROJECT_SOURCE_DIR}/../../../Thirdparty/g2o/lib/libg2o.so
${PROJECT_SOURCE_DIR}/../../../lib/libORB_SLAM2.so
#加上这一句
-lboost_system
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;之前理解有误 耽误了很多时间&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ros之环境变量path小结&#34;&gt;ROS之环境变量PATH小结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建一个工作空间后,编译后需要设置一下环境变量,不然在其他终端运行不了或者找不到相应功能包等。
&lt;code&gt;vim ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在里面添加一句:&lt;code&gt;source ~/工作空间/devel/setup.bash&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180814192938425?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yX2RoeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34;&gt;
3. 这里的my_catkin是我的工作空间，相应更改你的工作空间的名字即可。这里也可以直接一句命令搞定，不用进来文件添加。
&lt;code&gt;export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:~/my_catkin/&lt;/code&gt;
4. 接下来 刷新
&lt;code&gt;source ~/.bashrc&lt;/code&gt;
5. 之后可以利用以下命令来查看你是否设置成功。
&lt;code&gt;echo $ROS_PACKAGE_PATH&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;环境变量处理的一些操作&#34;&gt;环境变量处理的一些操作&lt;/h2&gt;
&lt;p&gt;查看环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export

echo $PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;暂时加入环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export PATH=/lib/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;永久加入环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;针对当前用户
vim ~/.bashrc 或 vim ~/.profile
export PATH=&amp;quot;/lib/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;针对所有用户
vim /etc/profile
export PATH=&amp;quot;/lib/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改后可以使用命令使其立即生效
&lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置~/.bashrc后下次登录shell无效问题&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim ~/.profile
加入：
if [ -s ~/.bashrc ]; then
    source ~/.bashrc;
fi

或

source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;orb-slam2_ros单目摄像头运行和kitti&#34;&gt;orb-slam2_ros单目摄像头运行和kitti&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装usb_cam编译&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要运行monoslam的demo要修改一下
需要修改&lt;code&gt;ORB_SLAM2/src&lt;/code&gt;下的&lt;code&gt;ros_mono.cc&lt;/code&gt;,将程序里面的topic改为/usb_cam/image_raw.
通过rviz工具选择image通过订阅/usb/image_raw/确认是否OK.
**更改后需要重新&lt;code&gt;build_ros.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行测试demo&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rosrun ORB_SLAM2 Mono ~/catkin_ws/src/ORB_SLAM2/Vocabulary/ORBvoc.txt  ~/catkin_ws/src/ORB_SLAM2/Examples/Monocular/TUM1.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;利用kitti&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTI00-02.yaml ../dataset/sequences/00/
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/xavier/" term="Xavier" label="Xavier" />
                            
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/slam/" term="SLAM" label="SLAM" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Autoware安装</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/autoware%E5%AE%89%E8%A3%85/" />
            <id>https://chenbokaix250.github.io/tech/autoware%E5%AE%89%E8%A3%85/</id>
            <updated>2020-10-30T10:08:14&#43;08:00</updated>
            <published>2020-10-23T15:01:20&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Xavier入门教程软件篇-源码安装autoware1.13.0 环境 xavier4.2.3 安装 autoware1.13.0 安装系统……</summary>
            
                <content type="html">&lt;h1 id=&#34;xavier入门教程软件篇-源码安装autoware1130&#34;&gt;Xavier入门教程软件篇-源码安装autoware1.13.0&lt;/h1&gt;
&lt;h2 id=&#34;环境-xavier423&#34;&gt;环境 xavier4.2.3&lt;/h2&gt;
&lt;h2 id=&#34;安装-autoware1130&#34;&gt;安装 autoware1.13.0&lt;/h2&gt;
&lt;p&gt;安装系统依赖:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install -y python-catkin-pkg python-rosdep ros-$ROS_DISTRO-catkin
$ sudo apt-get install -y python3-pip python3-colcon-common-extensions python3-setuptools python3-vcstool
$ pip3 install -U setuptools
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载源码:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p autoware.ai/src
$ cd autoware.ai
wget -O autoware.ai.repos &amp;quot;https://gitlab.com/autowarefoundation/autoware.ai/autoware/raw/1.13.0/autoware.ai.repos?inline=false&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更改mrt_cmake_modules使用master版本，修改后如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;url: https://github.com/KIT-MRT/mrt_cmake_modules.git
version: master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载源码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vcs import src &amp;lt; autoware.ai.repos
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装autoware依赖&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rosdep update
$ rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译支持cuda&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ AUTOWARE_COMPILE_WITH_CUDA=1 colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载demo包&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir ~/autoware.ai/demo
$ cd ~/autoware.ai/demo
$ wget http://db3.ertl.jp/autoware/sample_data/sample_moriyama_data.tar.gz
$ wget http://db3.ertl.jp/autoware/sample_data/sample_moriyama_150324.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压复制到特定位置:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ~
$ mkdir .autoware
$ cd .autoware
$ cp ~/~/autoware.ai/demo/sample_moriyama_* .
$ tar zxfv sample_moriyama_150324.tar.gz
$ tar zxfv sample_moriyama_data.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改run脚本,改为正确source路径&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ~/autoware.ai/install/runtime_manager/share/runtime_manager/scripts
vim run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改对应的bash位置:
&lt;code&gt;${OPTION_COMMAND}=&amp;quot;bash -c &#39;source ~/autoware.ai/install/setup.bash;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改后,重新编译&lt;/strong&gt;
install/runtime_manager中run的参数也会随之更改&lt;/p&gt;
&lt;p&gt;启动autoware&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ~/autoware.ai
$ source install/setup.bash
$ roslaunch runtime_manager runtime_manager.launch

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;官方推荐的不同版本的build方式&#34;&gt;官方推荐的不同版本的build方式&lt;/h2&gt;
&lt;p&gt;How to build&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For 1.12.0 and Newer&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Create a workspace
$ mkdir -p autoware.ai/src
$ cd autoware.ai


Download the workspace configuration for Autoware.AI.
For the 1.12.0 release:
$ wget -O autoware.ai.repos &amp;quot;https://gitlab.com/autowarefoundation/autoware.ai/autoware/raw/1.12.0/autoware.ai.repos?inline=false&amp;quot;
For newer releases, replace 1.12.0 with the version you want to install.
For the master version (bleeding edge):
$ wget -O autoware.ai.repos &amp;quot;https://gitlab.com/autowarefoundation/autoware.ai/autoware/raw/master/autoware.ai.repos?inline=false&amp;quot;


Download Autoware.AI into the workspace.
$ vcs import src &amp;lt; autoware.ai.repos


Install dependencies using rosdep.
$ rosdep update
$ rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO


Compile the workspace
With CUDA support
$ AUTOWARE_COMPILE_WITH_CUDA=1 colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
Without CUDA Support
$ colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;For 1.11.1 and Older&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Clone the GitHub repository.
$ cd $HOME
$ git clone https://gitlab.com/autowarefoundation/autoware.ai/autoware.git
$ cd autoware


Check out the tag for the appropriate version. To see a list of versions, type git tag.
$ git checkout 1.11.1
$ cd ros


Install dependencies using rosdep.
$ rosdep update
$ rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO


Compile the workspace
Version 1.11.0 or 1.11.1 Compile using colcon
$ ./colcon_release
Version 1.10 or older Compile using catkin
$ ./catkin_make_release
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Q1 编译velodyne时,无法完成&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/ros-drivers/velodyne.git

cd velodyne
mkdir build
cd build
cmake ..
make 

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者安装
&lt;code&gt;sudo apt-get install ros-melodic-velodyne-pointcloud&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;随后出现了尴尬的问题 由于Xavier只有16G运行内存和32G eMMc flash
安装导致存储满了
于是购买了ssd&lt;/p&gt;
&lt;h2 id=&#34;jetson-xavier之ubuntu安装固态硬盘并挂载到home目录下&#34;&gt;Jetson Xavier之ubuntu安装固态硬盘并挂载到/home目录下&lt;/h2&gt;
&lt;p&gt;1.查看硬盘所有分区
指令:sudo fdisk -lu
会有一个 &lt;strong&gt;/dev/nvme0n1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.对硬盘进行分区
指令:sudo fdisk /dev/nvme0n1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202217797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Command (m for help)提示符后面输入m，可以查看支持的命令。
在Command (m for help)提示符后面输入n，执行 add a new partition 指令给硬盘增加新分区。
Partition type: Select  根据自己的情况 我选择了 primary 主分区。
出现Partition number(1-4)时，输入１表示只分一个区。
后续指定起启柱面（First sector）,默认起始地址为 2048，结束地址为：****，不输入数字按ENTER，将填入默认值。
在Command (m for help)提示符后面输入p，打印分区情况，可以看到已正确完成分区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202234395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Command (m for help)提示符后面输入w，保存分区表。退出。&lt;/p&gt;
&lt;p&gt;再次输入指令：sudo fdisk -lu&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202240837.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;显示/dev/nvme0n1p1 则表示分区完成
3、格式化分区为ext4
指令：sudo mkfs -t ext4 /dev/nvme0n1p1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202251335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、挂载硬盘分区
先把新硬盘挂在一个临时目录下
cd /mnt/
sudo mkdir home
sudo mount /dev/nvme0n1p1 /mnt/home 挂载到/mnt/home
df -h 查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2018112020230062.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、替换原home目录
sudo cp -a /home/* /mnt/home/ 把home下的东西拷到挂载的目录下，备份
sudo rm -rf /home/* 把home下的东西删干净 删除后 整个桌面的菜单、任务栏等都没有了 只剩下终端窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202411112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;sudo umount /dev/nvme0n1p1 卸载硬盘
df -h 查看 卸载成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202432798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;6、设置开机挂载
sudo gedit /etc/fstab
末尾增加一行
/dev/nvme0n1p1    /home     ext4     defaults    1    2
保存退出
df -h 查看 /home是否被挂载 此时并未被挂在&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120202445919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;sudo mount -a 挂载/etc/fstab 中未挂载的分区
df -h 查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181120203110845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdkb3U1MjA=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搞定！！！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;完成autoware中quickstart的例程&#34;&gt;完成Autoware中QuickStart的例程&lt;/h2&gt;
&lt;p&gt;下载数据集:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载3D pointcloud/vector map data
&lt;code&gt;wget http://db3.ertl.jp/autoware/sample_data/sample_moriyama_data.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载ROSBAG data
&lt;code&gt;wget http://db3.ertl.jp/autoware/sample_data/sample_moriyama_150324.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;创建.autoware&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ~
$ mkdir .autoware
$ cd .autoware
$ cp ~/autoware_demo/sample_moriyama_* .
$ tar zxfv sample_moriyama_150324.tar.gz
$ tar zxfv sample_moriyama_data.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设autoware安装在autoware.ai，启动autoware&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ~/autoware.ai
$ source install/setup.bash
$ roslaunch runtime_manager runtime_manager.launch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动后出现一个管理界面，点击Simulation按钮
再点击ref，选择~/.autoware下选择对应的rosbag包
具体路径：
&lt;code&gt;/home/ubuntu/.autoware/sample_moriyama_150324.bag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;启动rviz
在弹出的rviz，选择File -&amp;gt; Open Config
具体路径
&lt;code&gt;~/autoware.ai/src/autoware/documentation/autoware_quickstart_examples/launch/rosbag_demo/default.rviz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;点击管理界面的Quick Start按钮
具体路径为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/autoware.ai/src/autoware/documentation/autoware_quickstart_examples/launch/rosbag_demo/&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载map输入行后面的ref，选择对应的的luanch文件，my_map.launch&lt;/li&gt;
&lt;li&gt;加载sensing输入行后面的ref，选择对应的的luanch文件，my_sensing.launch&lt;/li&gt;
&lt;li&gt;加载localization输入行后面的ref，选择对应的的luanch文件，my_localization.launch&lt;/li&gt;
&lt;li&gt;加载detection输入行后面的ref，选择对应的的luanch文件，my_detection.launch&lt;/li&gt;
&lt;li&gt;加载mission_planning输入行后面的ref，选择对应的的luanch文件，my_mission_planning.launch&lt;/li&gt;
&lt;li&gt;加载motion_planning输入行后面的ref，选择对应的的luanch文件，my_motion_planning.launch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://images.ncnynl.com/ros/2019/autoware-demo-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/xavier/" term="Xavier" label="Xavier" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Xavier中Eigen3.3.7的安装</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/xavier%E4%B8%ADeigen3.3.7%E7%9A%84%E5%AE%89%E8%A3%85/" />
            <id>https://chenbokaix250.github.io/tech/xavier%E4%B8%ADeigen3.3.7%E7%9A%84%E5%AE%89%E8%A3%85/</id>
            <updated>2020-10-29T19:10:32&#43;08:00</updated>
            <published>2020-10-17T16:44:19&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">升级Eigen到达3.3.7版本 查看当前版本 vim /usr/include/eigen3/Eigen/src/Core/util/Macros.h #define EIGEN_WORLD_VERSION 3 #define EIGEN_MAJOR_VERSION 3 #define EIGEN_MINOR_VERSION 4 即为版本3.3.4……</summary>
            
                <content type="html">&lt;h2 id=&#34;升级eigen到达337版本&#34;&gt;升级Eigen到达3.3.7版本&lt;/h2&gt;
&lt;p&gt;查看当前版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim /usr/include/eigen3/Eigen/src/Core/util/Macros.h


#define EIGEN_WORLD_VERSION 3
#define EIGEN_MAJOR_VERSION 3
#define EIGEN_MINOR_VERSION 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即为版本3.3.4&lt;/p&gt;
&lt;p&gt;下载Eigen3.3.7&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir ~/eigen
cd ~/eigen
wget http://bitbucket.org/eigen/eigen/get/3.3.7.tar.gz
tar zxvf 3.3.7.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bitbucket已经不提供下载 现在需要在gitlab上下载&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://gitlab.com/libeigen/eigen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先备份&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo mv /usr/include/eigen3  ~/eigen3.old&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;移动位置
&lt;code&gt;sudo mv ~/eigen/eigen-eigen-323c052e1731 /usr/include/eigen3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;兼容处理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo cp -r /usr/include/eigen3/Eigen /usr/include 
sudo ln -s /usr/include/eigen3  /usr/local/include/eigen3 
sudo ln -s /usr/include/eigen3/Eigen /usr/local/include/Eigen 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证
&lt;code&gt;locate eigen3&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd eigen-mater
mkdir build
cmake …/
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo cp -r /usr/local/include/eigen3 /usr/include
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/xavier/" term="Xavier" label="Xavier" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Xavier安装caffe</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/xavier%E5%AE%89%E8%A3%85caffe/" />
            <id>https://chenbokaix250.github.io/tech/xavier%E5%AE%89%E8%A3%85caffe/</id>
            <updated>2020-10-17T16:36:51&#43;08:00</updated>
            <published>2020-10-17T16:35:56&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Xavier 安装caffe 1.安装各种依赖包 sudo apt-get update sudo apt-get install build-essential cmake git pkg-config`` sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler`` sudo apt-get install libatlas-base-dev`` sudo apt-get install……</summary>
            
                <content type="html">&lt;h1 id=&#34;xavier-安装caffe&#34;&gt;Xavier 安装caffe&lt;/h1&gt;
&lt;h3 id=&#34;1安装各种依赖包&#34;&gt;1.安装各种依赖包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install build&lt;/code&gt;-essential&lt;code&gt; cmake git pkg&lt;/code&gt;-config``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install libprotobuf&lt;/code&gt;-dev&lt;code&gt; libleveldb&lt;/code&gt;-dev&lt;code&gt; libsnappy&lt;/code&gt;-dev&lt;code&gt; libhdf5&lt;/code&gt;-serial-dev&lt;code&gt; protobuf&lt;/code&gt;-compiler``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install libatlas&lt;/code&gt;-base-dev``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install libboost&lt;/code&gt;-all-dev``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install libgflags&lt;/code&gt;-dev&lt;code&gt; libgoogle&lt;/code&gt;-glog-dev&lt;code&gt; liblmdb&lt;/code&gt;-dev``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install python&lt;/code&gt;-pip``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install libopencv-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install python&lt;/code&gt;-dev&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install python&lt;/code&gt;-numpy&lt;code&gt; python&lt;/code&gt;-scipy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt&lt;/code&gt;-get&lt;code&gt; install libopenblas&lt;/code&gt;-dev&lt;code&gt; liblapack&lt;/code&gt;-dev&lt;code&gt; libatlas&lt;/code&gt;-base-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2安装caffe&#34;&gt;2.安装caffe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github&lt;/code&gt;.com&lt;code&gt;/BVLC/caffe&lt;/code&gt;.git&lt;code&gt;   //从github上git caffe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改Makefile.conf配置文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd caffe&lt;/li&gt;
&lt;li&gt;sudo cp Makefile.config.example Makefile.config&lt;/li&gt;
&lt;li&gt;sudo gedit Makefile.config&lt;/li&gt;
&lt;li&gt;若使用cudnn，则将****# USE_CUDNN := 1**** 修改成： &lt;em&gt;&lt;strong&gt;*USE_CUDNN := 1*&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;若要使用python来编写layer，则需要将****# WITH_PYTHON_LAYER := 1**** 修改为 &lt;em&gt;&lt;strong&gt;*WITH_PYTHON_LAYER := 1*&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;若使用的opencv版本是3的，则将****# OPENCV_VERSION := 3**** 修改为： &lt;em&gt;&lt;strong&gt;*OPENCV_VERSION := 3*&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200618175454599.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzdGVuNjE4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重要的一项将****# Whatever else you find you need goes here.****下面的&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;*INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include*&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;*LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib*&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;*修改为：*&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;***\*INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\****&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;***\*LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/aarch64-linux-gnu /usr/lib/aarch64-linux-gnu/hdf5/serial\****&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_20,code=sm_21 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_30,code=sm_30 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_35,code=sm_35 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_50,code=sm_50 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_52,code=sm_52 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_60,code=sm_60 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_61,code=sm_61 \&lt;/p&gt;
&lt;p&gt;​        -gencode arch=compute_61,code=compute_61&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    -gencode arch=compute_20,code=sm_20 \&lt;/p&gt;
&lt;p&gt;​    -gencode arch=compute_20,code=sm_21 \&lt;/p&gt;
&lt;p&gt;​    -gencode arch=compute_30,code=sm_30 \&lt;/p&gt;
&lt;p&gt;​    -gencode arch=compute_35,code=sm_35 \&lt;/p&gt;
&lt;p&gt;删除，如果不删除，对caffe进行编译时会报错。报错如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200618175930349.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzdGVuNjE4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改Makefile文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;将Makefile文件中的
NVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)
替换为NVCCFLAGS +=-D_FORCE_INLINES-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)将LIBRARIES+= glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5
修改为：
LIBRARIES += glog gflags protobuf boost_system boost_filesystem boost_regex m hdf5_hl hdf5
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;修改host_config.h文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo gedit /usr/local/cuda/include/crt/host_config.h&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将&lt;/strong&gt;&lt;code&gt;#error -- unsupported GNU version! gcc versions later than 7 are not supported!&lt;/code&gt; &lt;strong&gt;注释掉&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;设置环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo gedit ~/.bashrc&lt;/li&gt;
&lt;li&gt;在最后加入以下内容：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;export PYTHONPATH=/home/nvidia/caffe/python:$PYTHONPATH&lt;/p&gt;
&lt;p&gt;export PATH=$PATH:/usr/local/cuda-10.0/bin&lt;/p&gt;
&lt;p&gt;export PATH=/usr/local/cuda-10.0/bin:$PATH&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进入caffe目录进行编译&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd caffe&lt;/li&gt;
&lt;li&gt;make all&lt;/li&gt;
&lt;li&gt;make runtest&lt;/li&gt;
&lt;li&gt;make pycaffe&lt;/li&gt;
&lt;li&gt;最后，终端输入&lt;strong&gt;python&lt;/strong&gt;，然后再输入&lt;strong&gt;import caffe&lt;/strong&gt;，如果无问题则安装成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200624125507937.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzdGVuNjE4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果在make runtest的时候出现如下错误，可能是CUDA_ARCH 的问题，但不影响后续的使用，可忽略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/19441913-44b90742ef8a6e4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">U盘在Ubuntu下变成只读的解决方案</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/u%E7%9B%98%E5%9C%A8ubuntu%E4%B8%8B%E5%8F%98%E6%88%90%E5%8F%AA%E8%AF%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" />
            <id>https://chenbokaix250.github.io/tech/u%E7%9B%98%E5%9C%A8ubuntu%E4%B8%8B%E5%8F%98%E6%88%90%E5%8F%AA%E8%AF%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
            <updated>2020-10-17T16:34:41&#43;08:00</updated>
            <published>2020-10-17T16:32:12&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Ubuntu下U盘变成只读的解决方法 运行命令：tail -f /var/log/syslog 2）当有问题的优盘插入电脑……</summary>
            
                <content type="html">&lt;h1 id=&#34;ubuntu下u盘变成只读的解决方法&#34;&gt;Ubuntu下U盘变成只读的解决方法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;运行命令：tail -f /var/log/syslog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2）当有问题的优盘插入电脑中时，寻找打印出的信息中有没有以下类似信息&lt;/p&gt;
&lt;p&gt;FAT-fs (sdc4): error, fat_get_cluster:&lt;/p&gt;
&lt;p&gt;这种信息表示u盘出了问题，被挂在为只读的了，使用dosfsck修复一下，注意记住【sdc4】，下一步中会用到&lt;/p&gt;
&lt;p&gt;3）依次运行以下两条命令：&lt;/p&gt;
&lt;p&gt;umount /media/（U盘被挂在后的名字）
sudo dosfsck -v -a /dev/sdc4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修复后，u盘就可以读写了。&lt;/strong&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/linux/" term="Linux" label="Linux" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">近来发生的一些事</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E8%BF%91%E6%9D%A5%E5%8F%91%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%BD%E4%BA%8B/" />
            <id>https://chenbokaix250.github.io/life/%E8%BF%91%E6%9D%A5%E5%8F%91%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%BD%E4%BA%8B/</id>
            <updated>2020-09-02T00:47:20&#43;08:00</updated>
            <published>2020-09-02T00:06:29&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">六月之后,天气开始炎热,就没有再接着跑步了. 体重也有些反弹. 整个疫情在一步一步的变好……</summary>
            
                <content type="html">&lt;p&gt;六月之后,天气开始炎热,就没有再接着跑步了.
体重也有些反弹.&lt;/p&gt;
&lt;p&gt;整个疫情在一步一步的变好,也可以出差,或者是走动了.&lt;/p&gt;
&lt;h2 id=&#34;可惜今年并没有高温假期也没有能如愿出去转转&#34;&gt;可惜,今年并没有高温假期,也没有能如愿出去转转.&lt;/h2&gt;
&lt;p&gt;这段时间也发生了不少好事&lt;/p&gt;
&lt;p&gt;最好的则是拜仁夺得了三冠王 一晃7年了  上次其实只记得在西安南门酒吧里 和一帮不认识的人 共同庆祝&lt;/p&gt;
&lt;p&gt;但令我印象更为深刻的还是2012年决赛后,瘫坐在椅子上的那种无力和绝望.&lt;/p&gt;
&lt;p&gt;那种刻骨铭心的绝望 .&lt;/p&gt;
&lt;p&gt;其实今年,从弗里克职教以来,一切感觉都顺风顺水&lt;/p&gt;
&lt;p&gt;从没有人觉得能赢得欧冠,到后来赢到麻木 . 弗里克带给人的感觉 就像是一下叫醒了所有人,特别是穆勒 博阿滕&lt;/p&gt;
&lt;p&gt;在失去里贝里 罗本后的一年 感觉一切要从废墟开始 虽知道却到了最高点&lt;/p&gt;
&lt;p&gt;我本应该买一件拜仁的球衣 老版本看不上 新版本又觉得不划算 哎 难受&lt;/p&gt;
&lt;p&gt;往后再观望观望看吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我买了篮球鞋&lt;/p&gt;
&lt;p&gt;先后看了很多 包括 欧文 罗斯 哈登 维斯布鲁克等等
最后买了kt5 感觉保护好自己是关键 膝盖时不时有点痛&lt;/p&gt;
&lt;p&gt;更应该保护好自己&lt;/p&gt;
&lt;p&gt;还有就是 9月到了 我更应该跑步了 这个月应该&lt;/p&gt;
&lt;h3 id=&#34;从新上路&#34;&gt;从新上路&lt;/h3&gt;
&lt;p&gt;剩下的没什么了 再就是最好能去跟着多踢踢球吧 再就没别的了&lt;/p&gt;
&lt;p&gt;希望我 明年能再买一双传奇 这双有点不合脚 不过先踢着吧&lt;/p&gt;
&lt;p&gt;如果破了 就买阿迪的COPA KAPITAN袋鼠皮MG短钉&lt;/p&gt;
&lt;p&gt;应该也很不错&lt;/p&gt;
&lt;p&gt;当然一切都需要抽出时间 加油工作是前提&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今年还有很多事要做&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;orb-slam 调试&lt;/li&gt;
&lt;li&gt;无线胎压预警系统&lt;/li&gt;
&lt;li&gt;H轴仪表&lt;/li&gt;
&lt;li&gt;ros-tensorflow包括c++调用tensorflow&lt;/li&gt;
&lt;li&gt;系统读视觉/感知论文&lt;/li&gt;
&lt;li&gt;看APOLLO最新的视觉代码&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;今天出差到徐州&lt;/p&gt;
&lt;p&gt;上周刚去过了长沙 其实挺羡慕别人工作的环境的 但是也只是羡慕 没有改变的能力&lt;/p&gt;
&lt;p&gt;深夜在酒店 难得明天没有紧急的事情&lt;/p&gt;
&lt;p&gt;安静坐下来 改改PPT 做点想做的事&lt;/p&gt;
&lt;p&gt;写点东西&lt;/p&gt;
&lt;p&gt;梅西要走 火箭抢7&lt;/p&gt;
&lt;p&gt;深夜里 做点事 少看看手机 安静睡了&lt;/p&gt;
&lt;h2 id=&#34;晚安&#34;&gt;晚安&lt;/h2&gt;
&lt;p&gt;今年注定不平凡 尽快做完工作上的事 到长沙调试 让自己变得更强 加油&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Yolov3训练kitti</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/yolov3%E8%AE%AD%E7%BB%83kitti/" />
            <id>https://chenbokaix250.github.io/tech/yolov3%E8%AE%AD%E7%BB%83kitti/</id>
            <updated>2020-08-18T11:55:25&#43;08:00</updated>
            <published>2020-08-18T09:57:50&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">YOLOv3训练kitti数据集 1.获取KITTI数据集及标签 KITTI官网链接 2D……</summary>
            
                <content type="html">&lt;h1 id=&#34;yolov3训练kitti数据集&#34;&gt;YOLOv3训练kitti数据集&lt;/h1&gt;
&lt;h2 id=&#34;1获取kitti数据集及标签&#34;&gt;1.获取KITTI数据集及标签&lt;/h2&gt;
&lt;p&gt;KITTI官网&lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_object.php?obj_benchmark=2d&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2D对象检测 需要下载第一项&lt;a href=&#34;http://www.cvlibs.net/download.php?file=data_object_image_2.zip&#34;&gt;Download left color images of object data set (12 GB)&lt;/a&gt;和对应的标签&lt;a href=&#34;http://www.cvlibs.net/download.php?file=data_object_label_2.zip&#34;&gt;Download training labels of object data set (5 MB)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载并解压完毕后，我们可以发现文件夹data_object_image_2存放了训练集和测试集图片，其中训练集有7481张，测试集有7518张，共有 8个类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Car（小轿车），&lt;/li&gt;
&lt;li&gt;Van（面包车），&lt;/li&gt;
&lt;li&gt;Truck（卡车），&lt;/li&gt;
&lt;li&gt;Tram（电车），&lt;/li&gt;
&lt;li&gt;Pedestrain（行人），&lt;/li&gt;
&lt;li&gt;Person(sit-ting)（行人），&lt;/li&gt;
&lt;li&gt;Cyclist（骑行人），&lt;/li&gt;
&lt;li&gt;Misc（杂项）。
还有一项DontCare为不关心的物体，文件夹training存放了训练集的标签，而测试集没有给出标签。文件目录树分布如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├── data_object_image_2
│   ├── testing
│   │   └── image_2
                 ├── 000000.png 
                 ├── 000001.png 
│   └── training
│   │   └── image_2
                 ├── 000000.png 
                 ├── 000001.png 
│   └── image_2
└── training
    └── label_2
        ├── 000000.txt
        ├── 000001.txt
        ├── 000002.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里用全部的7481张图片来训练&lt;/p&gt;
&lt;h2 id=&#34;2将kitti的标签格式转换为voc数据格式的标签xxxxml&#34;&gt;2.将KITTI的标签格式转换为VOC数据格式的标签xxx.xml&lt;/h2&gt;
&lt;p&gt;我们创建一个PASCAL VOC结构的文件夹目录形式,原PASCAL VOC目录结构如下:
&lt;img src=&#34;https://img-blog.csdnimg.cn/20190111222351577.png&#34; alt=&#34;结构&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Annotations&lt;/code&gt;文件夹存放标签文件&lt;code&gt;xxx.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImageSets&lt;/code&gt;文件夹存放了各种任务需要的训练集和验证集的图片名汇总,这里不需要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPEGImages&lt;/code&gt;文件夹存放了所有的拖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;labels&lt;/code&gt;文件夹存放了darknet框架的标签格式文件&lt;code&gt;xxx.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;10103.txt&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# class_id x y w h
18 0.546 0.5165165165165165 0.908 0.9669669669669669
14 0.145 0.6501501501501501 0.042 0.15915915915915915

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;10103.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;annotation&amp;gt;
    &amp;lt;folder&amp;gt;VOC2012&amp;lt;/folder&amp;gt;
    &amp;lt;filename&amp;gt;2008_000003.jpg&amp;lt;/filename&amp;gt;
    &amp;lt;source&amp;gt;
        &amp;lt;database&amp;gt;The VOC2008 Database&amp;lt;/database&amp;gt;
        &amp;lt;annotation&amp;gt;PASCAL VOC2008&amp;lt;/annotation&amp;gt;
        &amp;lt;image&amp;gt;flickr&amp;lt;/image&amp;gt;
    &amp;lt;/source&amp;gt;
    &amp;lt;size&amp;gt;
        &amp;lt;width&amp;gt;500&amp;lt;/width&amp;gt;
        &amp;lt;height&amp;gt;333&amp;lt;/height&amp;gt;
        &amp;lt;depth&amp;gt;3&amp;lt;/depth&amp;gt;
    &amp;lt;/size&amp;gt;
    &amp;lt;segmented&amp;gt;0&amp;lt;/segmented&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;train&amp;lt;/name&amp;gt;
        &amp;lt;pose&amp;gt;Unspecified&amp;lt;/pose&amp;gt;
        &amp;lt;truncated&amp;gt;1&amp;lt;/truncated&amp;gt;
        &amp;lt;occluded&amp;gt;0&amp;lt;/occluded&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;46&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;11&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;500&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;333&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
        &amp;lt;difficult&amp;gt;0&amp;lt;/difficult&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;person&amp;lt;/name&amp;gt;
        &amp;lt;pose&amp;gt;Right&amp;lt;/pose&amp;gt;
        &amp;lt;truncated&amp;gt;1&amp;lt;/truncated&amp;gt;
        &amp;lt;occluded&amp;gt;0&amp;lt;/occluded&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;62&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;190&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;83&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;243&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
        &amp;lt;difficult&amp;gt;0&amp;lt;/difficult&amp;gt;
    &amp;lt;/object&amp;gt;
&amp;lt;/annotation&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模仿PASCAL VOC目录格式,创建一个VOC_KITTI文件夹,里面分别创建Annotations文件夹（用于存放将要生成的标签文件xxxx.xml），JPEGImages文件夹（用于存放KITTI所有的训练图片），Labels文件夹（用于存放了KITTI的标签格式文件xxxx.txt），还有两个脚本文件modify_annotations_txt.py和kitti_txt_to_xml.py，具体用法下面再讲。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190111222750840.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;这里Annotations有14962项的原因是生成了xml和下面要讲的生成的darknet格式的标签文件。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-使用modify_annotations_txtpy调整原来的8类为3类&#34;&gt;2.1 使用modify_annotations_txt.py调整原来的8类为3类&lt;/h3&gt;
&lt;p&gt;以下提供一个脚本modify_annotations_txt.py来将原来的8类物体转换为我们现在需要的3类：Car，Pedestrain，Cyclist。我们把原来的Car、Van、Truck，Tram合并为Car类，把原来的Pedestrain，Person(sit-ting)合并为现在的Pedestrain，原来的Cyclist这一类保持不变。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# modify_annotations_txt.py
import glob
import string
txt_list = glob.glob(&#39;./Labels/*.txt&#39;) # 存储Labels文件夹所有txt文件路径
def show_category(txt_list):
    category_list= []
    for item in txt_list:
        try:
            with open(item) as tdf:
                for each_line in tdf:
                    labeldata = each_line.strip().split(&#39; &#39;) # 去掉前后多余的字符并把其分开
                    category_list.append(labeldata[0]) # 只要第一个字段，即类别
        except IOError as ioerr:
            print(&#39;File error:&#39;+str(ioerr))
    print(set(category_list)) # 输出集合
def merge(line):
    each_line=&#39;&#39;
    for i in range(len(line)):
        if i!= (len(line)-1):
            each_line=each_line+line[i]+&#39; &#39;
        else:
            each_line=each_line+line[i] # 最后一条字段后面不加空格
    each_line=each_line+&#39;\n&#39;
    return (each_line)
print(&#39;before modify categories are:\n&#39;)
show_category(txt_list)
for item in txt_list:
    new_txt=[]
    try:
        with open(item, &#39;r&#39;) as r_tdf:
            for each_line in r_tdf:
                labeldata = each_line.strip().split(&#39; &#39;)
                if labeldata[0] in [&#39;Truck&#39;,&#39;Van&#39;,&#39;Tram&#39;]: # 合并汽车类
                    labeldata[0] = labeldata[0].replace(labeldata[0],&#39;Car&#39;)
                if labeldata[0] == &#39;Person_sitting&#39;: # 合并行人类
                    labeldata[0] = labeldata[0].replace(labeldata[0],&#39;Pedestrian&#39;)
                if labeldata[0] == &#39;DontCare&#39;: # 忽略Dontcare类
                    continue
                if labeldata[0] == &#39;Misc&#39;: # 忽略Misc类
                    continue
                new_txt.append(merge(labeldata)) # 重新写入新的txt文件
        with open(item,&#39;w+&#39;) as w_tdf: # w+是打开原文件将内容删除，另写新内容进去
            for temp in new_txt:
                w_tdf.write(temp)
    except IOError as ioerr:
        print(&#39;File error:&#39;+str(ioerr))
print(&#39;\nafter modify categories are:\n&#39;)
show_category(txt_list) 

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;执行命令python modify_annotations_txt.py运行脚本，将原来的8类物体转换为现在的3类。这里以000010.txt为例，展示原来的8类标签格式和现在的3类标签格式。&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 原来的标签
Car 0.80 0 -2.09 1013.39 182.46 1241.00 374.00 1.57 1.65 3.35 4.43 1.65 5.20 -1.42
Car 0.00 0 1.95 354.43 185.52 549.52 294.49 1.43 1.70 3.95 -2.39 1.66 11.80 1.76
Pedestrian 0.00 2 1.41 859.54 159.80 879.68 221.40 1.96 0.72 1.09 8.33 1.55 23.51 1.75
Car 0.00 0 -1.78 819.63 178.12 926.85 251.56 1.51 1.60 3.24 5.85 1.64 16.50 -1.44
Car 0.00 2 -1.69 800.54 178.06 878.75 230.56 1.45 1.74 4.10 6.87 1.62 22.05 -1.39
Car 0.00 0 1.80 558.55 179.04 635.05 230.61 1.54 1.68 3.79 -0.38 1.76 23.64 1.78
Car 0.00 2 1.77 598.30 178.68 652.25 218.17 1.49 1.52 3.35 0.64 1.74 29.07 1.79
Car 0.00 1 -1.67 784.59 178.04 839.98 220.10 1.53 1.65 4.37 7.88 1.75 28.53 -1.40
Car 0.00 1 1.92 663.74 175.36 707.21 204.15 1.64 1.45 3.48 4.50 1.80 42.85 2.02
DontCare -1 -1 -10 737.69 163.56 790.86 197.98 -1 -1 -1 -1000 -1000 -1000 -10
DontCare -1 -1 -10 135.60 185.44 196.06 202.15 -1 -1 -1 -1000 -1000 -1000 -10
DontCare -1 -1 -10 796.02 162.52 862.73 183.40 -1 -1 -1 -1000 -1000 -1000 -10
DontCare -1 -1 -10 879.35 165.65 931.48 182.36 -1 -1 -1 -1000 -1000 -1000 -10

# 现在生成的标签
Car 0.80 0 -2.09 1013.39 182.46 1241.00 374.00 1.57 1.65 3.35 4.43 1.65 5.20 -1.42
Car 0.00 0 1.95 354.43 185.52 549.52 294.49 1.43 1.70 3.95 -2.39 1.66 11.80 1.76
Pedestrian 0.00 2 1.41 859.54 159.80 879.68 221.40 1.96 0.72 1.09 8.33 1.55 23.51 1.75
Car 0.00 0 -1.78 819.63 178.12 926.85 251.56 1.51 1.60 3.24 5.85 1.64 16.50 -1.44
Car 0.00 2 -1.69 800.54 178.06 878.75 230.56 1.45 1.74 4.10 6.87 1.62 22.05 -1.39
Car 0.00 0 1.80 558.55 179.04 635.05 230.61 1.54 1.68 3.79 -0.38 1.76 23.64 1.78
Car 0.00 2 1.77 598.30 178.68 652.25 218.17 1.49 1.52 3.35 0.64 1.74 29.07 1.79
Car 0.00 1 -1.67 784.59 178.04 839.98 220.10 1.53 1.65 4.37 7.88 1.75 28.53 -1.40
Car 0.00 1 1.92 663.74 175.36 707.21 204.15 1.64 1.45 3.48 4.50 1.80 42.85 2.02
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;22-将原来kitti标注的txt格式转换为pascal-voc的xml格式&#34;&gt;2.2 将原来KITTI标注的txt格式转换为PASCAL VOC的xml格式&lt;/h2&gt;
&lt;p&gt;kitti标注格式如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Car 0.00 0 -1.67 642.24 178.50 680.14 208.68 1.38 1.49 3.32 2.41 1.66 34.98 -1.60 
Car 0.00 0 -1.75 685.77 178.12 767.02 235.21 1.50 1.62 3.89 3.27 1.67 21.18 -1.60 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190111222817878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNTgzMDgzNjU4,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们现在只需要该标签的type、bbox等五项，还需要把float类型转换为int类型，最后将生成的xml文件存放于Annotations文件夹中，使用脚本kitti_txt_to_xml.py。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# kitti_txt_to_xml.py
# encoding:utf-8
# 根据一个给定的XML Schema，使用DOM树的形式从空白文件生成一个XML
from xml.dom.minidom import Document
import cv2
import os
def generate_xml(name,split_lines,img_size,class_ind):
    doc = Document() # 创建DOM文档对象
    annotation = doc.createElement(&#39;annotation&#39;)
    doc.appendChild(annotation)
    title = doc.createElement(&#39;folder&#39;)
    title_text = doc.createTextNode(&#39;KITTI&#39;)
    title.appendChild(title_text)
    annotation.appendChild(title)
    img_name=name+&#39;.png&#39;
    title = doc.createElement(&#39;filename&#39;)
    title_text = doc.createTextNode(img_name)
    title.appendChild(title_text)
    annotation.appendChild(title)
    source = doc.createElement(&#39;source&#39;)
    annotation.appendChild(source)
    title = doc.createElement(&#39;database&#39;)
    title_text = doc.createTextNode(&#39;The KITTI Database&#39;)
    title.appendChild(title_text)
    source.appendChild(title)
    title = doc.createElement(&#39;annotation&#39;)
    title_text = doc.createTextNode(&#39;KITTI&#39;)
    title.appendChild(title_text)
    source.appendChild(title)
    size = doc.createElement(&#39;size&#39;)
    annotation.appendChild(size)
    title = doc.createElement(&#39;width&#39;)
    title_text = doc.createTextNode(str(img_size[1]))
    title.appendChild(title_text)
    size.appendChild(title)
    title = doc.createElement(&#39;height&#39;)
    title_text = doc.createTextNode(str(img_size[0]))
    title.appendChild(title_text)
    size.appendChild(title)
    title = doc.createElement(&#39;depth&#39;)
    title_text = doc.createTextNode(str(img_size[2]))
    title.appendChild(title_text)
    size.appendChild(title)
    for split_line in split_lines:
        line=split_line.strip().split()
        if line[0] in class_ind:
            object = doc.createElement(&#39;object&#39;)
            annotation.appendChild(object)
            title = doc.createElement(&#39;name&#39;)
            title_text = doc.createTextNode(line[0])
            title.appendChild(title_text)
            object.appendChild(title)
            bndbox = doc.createElement(&#39;bndbox&#39;)
            object.appendChild(bndbox)
            title = doc.createElement(&#39;xmin&#39;)
            title_text = doc.createTextNode(str(int(float(line[4]))))
            title.appendChild(title_text)
            bndbox.appendChild(title)
            title = doc.createElement(&#39;ymin&#39;)
            title_text = doc.createTextNode(str(int(float(line[5]))))
            title.appendChild(title_text)
            bndbox.appendChild(title)
            title = doc.createElement(&#39;xmax&#39;)
            title_text = doc.createTextNode(str(int(float(line[6]))))
            title.appendChild(title_text)
            bndbox.appendChild(title)
            title = doc.createElement(&#39;ymax&#39;)
            title_text = doc.createTextNode(str(int(float(line[7]))))
            title.appendChild(title_text)
            bndbox.appendChild(title)
    # 将DOM对象doc写入文件
    f = open(&#39;Annotations/&#39;+name+&#39;.xml&#39;,&#39;w&#39;)
    f.write(doc.toprettyxml(indent = &#39;&#39;))
    f.close()
if __name__ == &#39;__main__&#39;:
    class_ind=(&#39;Pedestrian&#39;, &#39;Car&#39;, &#39;Cyclist&#39;)
    cur_dir=os.getcwd()
    labels_dir=os.path.join(cur_dir,&#39;Labels&#39;)
    for parent, dirnames, filenames in os.walk(labels_dir): # 分别得到根目录，子目录和根目录下文件   
        for file_name in filenames:
            full_path=os.path.join(parent, file_name) # 获取文件全路径
            f=open(full_path)
            split_lines = f.readlines()
            name= file_name[:-4] # 后四位是扩展名.txt，只取前面的文件名
            img_name=name+&#39;.png&#39; 
            img_path=os.path.join(&#39;./JPEGImages/&#39;,img_name) # 路径需要自行修改            
            img_size=cv2.imread(img_path).shape
            generate_xml(name,split_lines,img_size,class_ind)
print(&#39;all txts has converted into xmls&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于我们使用KITTI提供的共7481张训练集图片作为我们的训练集，因此，这里第86行代码为JPEGImages文件夹内的所有图片, 生成的xml文件存放于第72行的Annotations文件夹内。
执行命令python kitti_txt_to_xml.py，生成PASCAL VOC格式的xml文件。这里以000010.txt为例，展示原来的txt标签格式和现在xml标签格式。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 步骤2-1生成的txt格式
Car 0.80 0 -2.09 1013.39 182.46 1241.00 374.00 1.57 1.65 3.35 4.43 1.65 5.20 -1.42
Car 0.00 0 1.95 354.43 185.52 549.52 294.49 1.43 1.70 3.95 -2.39 1.66 11.80 1.76
Pedestrian 0.00 2 1.41 859.54 159.80 879.68 221.40 1.96 0.72 1.09 8.33 1.55 23.51 1.75
Car 0.00 0 -1.78 819.63 178.12 926.85 251.56 1.51 1.60 3.24 5.85 1.64 16.50 -1.44
Car 0.00 2 -1.69 800.54 178.06 878.75 230.56 1.45 1.74 4.10 6.87 1.62 22.05 -1.39
Car 0.00 0 1.80 558.55 179.04 635.05 230.61 1.54 1.68 3.79 -0.38 1.76 23.64 1.78
Car 0.00 2 1.77 598.30 178.68 652.25 218.17 1.49 1.52 3.35 0.64 1.74 29.07 1.79
Car 0.00 1 -1.67 784.59 178.04 839.98 220.10 1.53 1.65 4.37 7.88 1.75 28.53 -1.40
Car 0.00 1 1.92 663.74 175.36 707.21 204.15 1.64 1.45 3.48 4.50 1.80 42.85 2.02

# 此时转换的xml格式
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;
&amp;lt;annotation&amp;gt;
    &amp;lt;folder&amp;gt;KITTI&amp;lt;/folder&amp;gt;
    &amp;lt;filename&amp;gt;000010.png&amp;lt;/filename&amp;gt;
    &amp;lt;source&amp;gt;
        &amp;lt;database&amp;gt;The KITTI Database&amp;lt;/database&amp;gt;
        &amp;lt;annotation&amp;gt;KITTI&amp;lt;/annotation&amp;gt;
    &amp;lt;/source&amp;gt;
    &amp;lt;size&amp;gt;
        &amp;lt;width&amp;gt;1242&amp;lt;/width&amp;gt;
        &amp;lt;height&amp;gt;375&amp;lt;/height&amp;gt;
        &amp;lt;depth&amp;gt;3&amp;lt;/depth&amp;gt;
    &amp;lt;/size&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;1013&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;182&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;1241&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;374&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;354&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;185&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;549&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;294&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Pedestrian&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;859&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;159&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;879&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;221&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;819&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;926&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;251&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;800&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;878&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;230&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;558&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;179&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;635&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;230&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;598&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;652&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;218&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;784&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;839&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;220&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;663&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;175&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;707&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;204&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
&amp;lt;/annotation&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3将voc格式的xml标签转换为darknet格式的标签xxxtxt&#34;&gt;3.将VOC格式的xml标签转换为darknet格式的标签xxx.txt&lt;/h2&gt;
&lt;p&gt;我们现在已经有了VOC标签格式的xml文件，现在我们需要生成darknet中YOLO使用的txt标签格式。我们在VOC_KITTI文件夹内创建一个xml_to_yolo_txt.py文件，代码如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# xml_to_yolo_txt.py
# 此代码和VOC_KITTI文件夹同目录
import glob
import xml.etree.ElementTree as ET
# 这里的类名为我们xml里面的类名，顺序现在不需要考虑
class_names = [&#39;Car&#39;, &#39;Cyclist&#39;, &#39;Pedestrian&#39;]
# xml文件路径
path = &#39;./Annotations/&#39; 
# 转换一个xml文件为txt
def single_xml_to_txt(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    # 保存的txt文件路径
    txt_file = xml_file.split(&#39;.&#39;)[0]+&#39;.txt&#39;
    with open(txt_file, &#39;w&#39;) as txt_file:
        for member in root.findall(&#39;object&#39;):
            #filename = root.find(&#39;filename&#39;).text
            picture_width = int(root.find(&#39;size&#39;)[0].text)
            picture_height = int(root.find(&#39;size&#39;)[1].text)
            class_name = member[0].text
            # 类名对应的index
            class_num = class_names.index(class_name)

            box_x_min = int(member[1][0].text) # 左上角横坐标
            box_y_min = int(member[1][1].text) # 左上角纵坐标
            box_x_max = int(member[1][2].text) # 右下角横坐标
            box_y_max = int(member[1][3].text) # 右下角纵坐标
            # 转成相对位置和宽高
            x_center = float(box_x_min + box_x_max) / (2 * picture_width)
            y_center = float(box_y_min + box_y_max) / (2 * picture_height)
            width = float(box_x_max - box_x_min) /  picture_width
            height = float(box_y_max - box_y_min) /  picture_height
            print(class_num, x_center, y_center, width, height)
            txt_file.write(str(class_num) + &#39; &#39; + str(x_center) + &#39; &#39; + str(y_center) + &#39; &#39; + str(width) + &#39; &#39; + str(height) + &#39;\n&#39;)
# 转换文件夹下的所有xml文件为txt
def dir_xml_to_txt(path):
    for xml_file in glob.glob(path + &#39;*.xml&#39;):
        single_xml_to_txt(xml_file)
dir_xml_to_txt(path)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行命令: &lt;code&gt;python xml_to_yolo_txt.py&lt;/code&gt;,生成的txt文件在Annotations文件夹内.这里以000010.txt为例,展示原来的xml标签格式和现在darknet的txt标签格式.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 原来的xml格式
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;
&amp;lt;annotation&amp;gt;
    &amp;lt;folder&amp;gt;KITTI&amp;lt;/folder&amp;gt;
    &amp;lt;filename&amp;gt;000010.png&amp;lt;/filename&amp;gt;
    &amp;lt;source&amp;gt;
        &amp;lt;database&amp;gt;The KITTI Database&amp;lt;/database&amp;gt;
        &amp;lt;annotation&amp;gt;KITTI&amp;lt;/annotation&amp;gt;
    &amp;lt;/source&amp;gt;
    &amp;lt;size&amp;gt;
        &amp;lt;width&amp;gt;1242&amp;lt;/width&amp;gt;
        &amp;lt;height&amp;gt;375&amp;lt;/height&amp;gt;
        &amp;lt;depth&amp;gt;3&amp;lt;/depth&amp;gt;
    &amp;lt;/size&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;1013&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;182&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;1241&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;374&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;354&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;185&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;549&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;294&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Pedestrian&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;859&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;159&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;879&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;221&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;819&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;926&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;251&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;800&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;878&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;230&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;558&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;179&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;635&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;230&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;598&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;652&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;218&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;784&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;178&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;839&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;220&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
    &amp;lt;object&amp;gt;
        &amp;lt;name&amp;gt;Car&amp;lt;/name&amp;gt;
        &amp;lt;bndbox&amp;gt;
            &amp;lt;xmin&amp;gt;663&amp;lt;/xmin&amp;gt;
            &amp;lt;ymin&amp;gt;175&amp;lt;/ymin&amp;gt;
            &amp;lt;xmax&amp;gt;707&amp;lt;/xmax&amp;gt;
            &amp;lt;ymax&amp;gt;204&amp;lt;/ymax&amp;gt;
        &amp;lt;/bndbox&amp;gt;
    &amp;lt;/object&amp;gt;
&amp;lt;/annotation&amp;gt;

# 现在darknet的txt文件格式
0 0.9074074074074074 0.7413333333333333 0.09178743961352658 0.256
0 0.3635265700483092 0.6386666666666667 0.0785024154589372 0.14533333333333334
2 0.6996779388083736 0.5066666666666667 0.008051529790660225 0.08266666666666667
0 0.7024959742351047 0.572 0.0430756843800322 0.09733333333333333
0 0.6755233494363929 0.544 0.03140096618357488 0.06933333333333333
0 0.48027375201288247 0.5453333333333333 0.030998389694041867 0.068
0 0.5032206119162641 0.528 0.021739130434782608 0.05333333333333334
0 0.6533816425120773 0.5306666666666666 0.02214170692431562 0.056
0 0.5515297906602254 0.5053333333333333 0.017713365539452495 0.03866666666666667
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看出，原来的bbox数据现在已经全部归一化，原来的Car类型变成现在的索引0，原来的Pedestrain类型变成现在的索引2。&lt;/p&gt;
&lt;h2 id=&#34;4生成traintxt和valtxt&#34;&gt;4.生成train.txt和val.txt&lt;/h2&gt;
&lt;p&gt;现在我们需要生成train.txt文件，里面存放了每一张训练图片的路径，由于我们没有测试，可以先不生成val.txt。这里我们在darknet安装目录下创建一个kitti_train_val.py文件，代码如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# kitti_train_val.py
# 此代码和data文件夹同目录
import glob
path = &#39;kitti_data/&#39;
def generate_train_and_val(image_path, txt_file):
    with open(txt_file, &#39;w&#39;) as tf:
        for jpg_file in glob.glob(image_path + &#39;*.png&#39;):
            tf.write(jpg_file + &#39;\n&#39;)
generate_train_and_val(path + &#39;train_images/&#39;, path + &#39;train.txt&#39;) # 生成的train.txt文件所在路径
# generate_train_and_val(path + &#39;val_images/&#39;, path + &#39;val.txt&#39;) # 生成的val.txt文件所在路径

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据代码可以看出，我们需要在daeknet安装目录下创建一个kitti_data文件夹，里面需要创建train_images文件夹和val_images文件夹，此外我们还需要创建train_labels和val_labels文件夹，我们把VOC_KITTI/JPEGImages文件夹里面的图片剪切或复制到kitti_data/train_images下，把VOC_KITTI/Annotaations下的txt文件剪切或复制到kitti_data/train_labels下，可以执行命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 剪切图片
mv VOC_KITTI/JPEGImages/* darknet/kitti_data/train_images
# 剪切标签
mv VOC_KITTI/Annotaations/*.txt darknet/kitti_data/train_labels
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着在darknet路径下打开终端，执行命令：python kitti_train_val.py，最终在kitti_data目录下生成train.txt和val.txt。
如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190111222849691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNTgzMDgzNjU4,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里的kitti.data和kitti.names即将创建&lt;/p&gt;
&lt;h2 id=&#34;5准备数据的配置文件&#34;&gt;5.准备数据的配置文件&lt;/h2&gt;
&lt;p&gt;需要准备&lt;code&gt;kitti.data&lt;/code&gt;、&lt;code&gt;kitti.names&lt;/code&gt;和网络模型配置文件&lt;code&gt;yolov3-kitti.cfg&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;51-准备kittinames&#34;&gt;5.1 准备&lt;code&gt;kitti.names&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;kitti.names存放了每一类的类名，这个将在测试一张图片时显示一个物体的标签名。文件内容如下（注意顺序要与xml_to_yolo_txt.py文件里面的顺序一致。）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Car
Pedestrian
Cyclist
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;52-准备kittidata&#34;&gt;5.2 准备kitti.data&lt;/h3&gt;
&lt;p&gt;kitti.data内容如下，其中classes表示类的数目，train和val表示第4步生成的train.txt和val.txt的存放路径，backup表示训练的yolo权重存放的位置。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;classes= 3
train = kitti_data/train.txt
valid = kitti_data/val.txt
names = kitti_data/kitti.names
backup = backup/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;53-准备yolov3-kitticfg&#34;&gt;5.3 准备yolov3-kitti.cfg&lt;/h3&gt;
&lt;p&gt;在darknet/cfg目录下，创建一个文件yolov3-kitti.cfg，里面的内容可以先拷贝yolov3.cfg，在修改以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三处classes=80改为classes=3&lt;/li&gt;
&lt;li&gt;三处filters=255注意只需要修改[yolo]上面的[convolutional]的filters）修改为filters=24（ filters=3*(classes+5) ），如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[convolutional]
size=1
stride=1
pad=1
filters=255 # 此处需要修改为filters=24
activation=linear
[yolo]
mask = 3,4,5
anchors = 10,13, 16,30, 33,23, 30,61, 62,45, 59,119, 116,90, 156,198, 373,326
classes=80
num=9
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;此处问题
当运行时,会出现 cudaError:out of memory 需要修改batch,subdivisions等参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个epoch=total_train_images/batch
而subdivisions表示将一个batch分为subdivisions个组进行分别训练 每组有batch/subdivisions个图片&lt;/p&gt;
&lt;h2 id=&#34;6-下载imagenet预训练的网络参数&#34;&gt;6. 下载ImageNet预训练的网络参数&lt;/h2&gt;
&lt;p&gt;yolov3默认的训练权重为darknet53，我们可以在darknet路径下打开终端，输入命令下载权重：
&lt;code&gt;wget https://pjreddie.com/media/files/darknet53.conv.74&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;训练模型&#34;&gt;训练模型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;./darknet detector train kitti_data/kitti.data cfg/yolov3-kitti.cfg darknet53.conv.74&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在训练中,终端会打印输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.879770, Class: 0.999963, Obj: 0.999019, No Obj: 0.000455, .5R: 1.000000, .75R: 1.000000, count: 2
Region 106 Avg IOU: 0.726660, Class: 0.981278, Obj: 0.848324, No Obj: 0.000362, .5R: 0.933333, .75R: 0.600000, count: 15
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000001, .5R: -nan, .75R: -nan, count: 0
Region 106 Avg IOU: 0.739621, Class: 0.999773, Obj: 0.788386, No Obj: 0.000512, .5R: 0.937500, .75R: 0.625000, count: 16
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 106 Avg IOU: 0.842399, Class: 0.999971, Obj: 0.978920, No Obj: 0.000325, .5R: 1.000000, .75R: 1.000000, count: 11
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000012, .5R: -nan, .75R: -nan, count: 0
Region 106 Avg IOU: 0.705575, Class: 0.949637, Obj: 0.893539, No Obj: 0.000549, .5R: 0.888889, .75R: 0.555556, count: 18
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000220, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.885422, Class: 0.999904, Obj: 0.996486, No Obj: 0.000944, .5R: 1.000000, .75R: 1.000000, count: 5
Region 106 Avg IOU: 0.685692, Class: 0.999810, Obj: 0.818832, No Obj: 0.000441, .5R: 0.866667, .75R: 0.400000, count: 15
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.917769, Class: 0.999986, Obj: 0.999057, No Obj: 0.000483, .5R: 1.000000, .75R: 1.000000, count: 2
Region 106 Avg IOU: 0.734660, Class: 0.999783, Obj: 0.806102, No Obj: 0.000853, .5R: 0.857143, .75R: 0.500000, count: 28
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000290, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.883034, Class: 0.999598, Obj: 0.952420, No Obj: 0.000755, .5R: 1.000000, .75R: 1.000000, count: 5
Region 106 Avg IOU: 0.763281, Class: 0.999828, Obj: 0.776274, No Obj: 0.000371, .5R: 0.857143, .75R: 0.642857, count: 14
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000002, .5R: -nan, .75R: -nan, count: 0
Region 106 Avg IOU: 0.788140, Class: 0.999921, Obj: 0.805065, No Obj: 0.000677, .5R: 1.000000, .75R: 0.761905, count: 21
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.823024, Class: 0.999452, Obj: 0.746079, No Obj: 0.000631, .5R: 1.000000, .75R: 0.600000, count: 5
Region 106 Avg IOU: 0.734842, Class: 0.999643, Obj: 0.771043, No Obj: 0.000651, .5R: 0.950000, .75R: 0.500000, count: 20
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.832970, Class: 0.999085, Obj: 0.915872, No Obj: 0.000134, .5R: 1.000000, .75R: 1.000000, count: 1
Region 106 Avg IOU: 0.647650, Class: 0.999931, Obj: 0.914428, No Obj: 0.000316, .5R: 0.818182, .75R: 0.363636, count: 11
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 106 Avg IOU: 0.647275, Class: 0.998951, Obj: 0.835732, No Obj: 0.000277, .5R: 1.000000, .75R: 0.200000, count: 10
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.859042, Class: 0.999873, Obj: 0.920159, No Obj: 0.001146, .5R: 1.000000, .75R: 1.000000, count: 8
Region 106 Avg IOU: 0.760058, Class: 0.999575, Obj: 0.829456, No Obj: 0.000763, .5R: 0.950000, .75R: 0.650000, count: 20
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.780092, Class: 0.999876, Obj: 0.873641, No Obj: 0.000480, .5R: 1.000000, .75R: 0.500000, count: 2
Region 106 Avg IOU: 0.714661, Class: 0.998230, Obj: 0.930809, No Obj: 0.000893, .5R: 0.862069, .75R: 0.551724, count: 29
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.748140, Class: 0.999394, Obj: 0.698991, No Obj: 0.000304, .5R: 0.666667, .75R: 0.666667, count: 3
Region 106 Avg IOU: 0.661677, Class: 0.999870, Obj: 0.814655, No Obj: 0.000667, .5R: 0.818182, .75R: 0.318182, count: 22
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.839435, Class: 0.994511, Obj: 0.497955, No Obj: 0.000293, .5R: 1.000000, .75R: 1.000000, count: 2
Region 106 Avg IOU: 0.697895, Class: 0.999256, Obj: 0.669627, No Obj: 0.000654, .5R: 0.958333, .75R: 0.333333, count: 24
Region 82 Avg IOU: -nan, Class: -nan, Obj: -nan, No Obj: 0.000000, .5R: -nan, .75R: -nan, count: 0
Region 94 Avg IOU: 0.858090, Class: 0.999985, Obj: 0.999754, No Obj: 0.000153, .5R: 1.000000, .75R: 1.000000, count: 1
Region 106 Avg IOU: 0.664703, Class: 0.989184, Obj: 0.793579, No Obj: 0.000681, .5R: 0.791667, .75R: 0.458333, count: 24
13202: 0.830514, 0.765624 avg, 0.001000 rate, 4.867255 seconds, 844928 images
Loaded: 0.000038 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;8测试&#34;&gt;8.测试&lt;/h2&gt;
&lt;p&gt;我们把batch设为64,经过13200iterations后,可以把KITTI的测试集中找一些图片放在darknet/data/目录下,输入以下命令在一张图进行测试
&lt;code&gt;./darknet detector test kitti_data/kitti.data cfg/yolov3-kitti.cfg backup/yolov3-kitti.backup data/000005.png&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190111222935938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNTgzMDgzNjU4,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看出,预测对象及其种类的精度可以,但定位误差较大 还需要训练一段时间看看.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;模型配置文件----cfgyolov3-kitticfg&#34;&gt;模型配置文件 -- cfg/yolov3-kitti.cfg&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;batch=64　　　　　　   # 一批训练样本的样本数量，每batch个样本更新一次参数
subdivisions=32　　   # 它会让你的每一个batch不是一下子都丢到网络里。而是分成subdivision对应数字的份数，一份一份的跑完后，在一起打包算作完成一次iteration
width=416　　　　     # 只可以设置成32的倍数
height=416　　　　    # 只可以设置成32的倍数

channels=3　　　　　　 # 若为灰度图，则chennels=1，另外还需修改/scr/data.c文件中的load_data_detection函数；若为RGB则 channels=3 ，无需修改/scr/data.c文件

momentum=0.9　　      # 最优化方法的动量参数，这个值影响着梯度下降到最优值得速度 
decay=0.0005　　   　 # 权重衰减正则项，防止过拟合
angle=0　　　　    　　# 通过旋转角度来生成更多训练样本
saturation = 1.5　　  # 通过调整饱和度来生成更多训练样本
exposure = 1.5　　    # 通过调整曝光量来生成更多训练样本
hue=.1　　　　　     　# 通过调整色调来生成更多训练样本


learning_rate=0.001        # 学习率, 刚开始训练时, 以 0.01 ~ 0.001 为宜, 一定轮数过后,逐渐减缓。
burn_in=1000　　　      　　 # 在迭代次数小于burn_in时，其学习率的更新有一种方式，大于burn_in时，才采用policy的更新方式
max_batches = 50200  　　   # 训练步数
policy=steps　　　　　 　　   # 学习率调整的策略
steps=40000,45000     　    # 开始衰减的步数
scales=.1,.1　　　　 　　   　# 在第40000和第45000次迭代时，学习率衰减10倍
...
[convolutional]——YOLO层前一层卷积层
...
filters=24 　　　　　　 　　  # 每一个[yolo]层前的最后一个卷积层中的 filters=num(yolo层个数)*(classes+5)
...

[yolo]
mask = 6,7,8
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326　　#如果想修改默认anchors数值，使用k-means即可；
classes=3  　　　　　　# 修改为自己的类别数
num=9　　　　　　　   　# 每个grid cell预测几个box,和anchors的数量一致。调大num后训练时Obj趋近0的话可以尝试调大object_scale
jitter=.3　　　　　　　# 利用数据抖动产生更多数据, jitter是crop的参数, jitter=.3，就是在0~0.3中进行crop
ignore_thresh = .5   # 决定是否需要计算IOU误差的参数，大于thresh，IOU误差不会夹在cost function中
truth_thresh = 1
random=1　　　　　　　  # 如果为1，每次迭代图片大小随机从320到608，步长为32，如果为0，每次训练大小与输入大小一致

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Cuda安装过程</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/cuda%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/" />
            <id>https://chenbokaix250.github.io/tech/cuda%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</id>
            <updated>2020-08-13T16:04:26&#43;08:00</updated>
            <published>2020-08-13T13:55:33&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">CUDA CUDNN tensorflow 相关安装过程 整个过程需要安装 cuda驱动 cuda软件 cudnn库 tensorflow-gpu 不同平台之间……</summary>
            
                <content type="html">&lt;h1 id=&#34;cuda-cudnn-tensorflow-相关安装过程&#34;&gt;CUDA CUDNN tensorflow 相关安装过程&lt;/h1&gt;
&lt;p&gt;整个过程需要安装 cuda驱动 cuda软件 cudnn库 tensorflow-gpu&lt;/p&gt;
&lt;p&gt;不同平台之间的对应关系不同&lt;/p&gt;
&lt;p&gt;平台支持链接&lt;a href=&#34;https://www.tensorflow.org/install/source#common_installation_problems&#34;&gt;平台支持&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中linux x64的支持如图&lt;/p&gt;
&lt;p&gt;![linux X64](&lt;img src=&#34;https://i.loli.net/2020/08/13/wi39Qz48RXUWmIv.png&#34; alt=&#34;截屏2020-08-13 下午2.00.33.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如图 gcc的版本需要时4.8&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
# 命令

gcc -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;确定需要安装的版本:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tensorflow 2.0&lt;/li&gt;
&lt;li&gt;对应的cuda版本 10.0&lt;/li&gt;
&lt;li&gt;cudnn版本 7.6.5&lt;/li&gt;
&lt;li&gt;gcc版本4.8&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
cuda-repo-ubuntu1604-10-0-local-10.0.130-410.48_1.0-1_amd64.deb
#系统:ubuntu1604
#版本:10.0
#类型:离线安装
#小版本:10.0.130
#硬件对应版本:410.48
#平台:amd64

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;1安装cuda驱动程序&#34;&gt;1.安装cuda驱动程序&lt;/h2&gt;
&lt;p&gt;查看电脑显卡信息
&lt;code&gt;lspci | grep VGA&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入下载驱动界面&lt;a href=&#34;http://www.geforce.cn/drivers&#34;&gt;链接&lt;/a&gt; 选择自己的驱动&lt;/p&gt;
&lt;p&gt;注意:硬件版本需要与软件版本对应&lt;/p&gt;
&lt;p&gt;需要根据软件版本查找响应的硬件版本&lt;a href=&#34;https://www.nvidia.com/Download/index.aspx?lang=en-us&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装之前 先卸载所有的nvidia驱动&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo service lightdm stop # 卸载之前应该先停止 lightdm
sudo /usr/bin/nvidia-uninstall
sudo apt-get --purge remove &amp;quot;nvidia-*&amp;quot;

sudo apt autoremove
sudo apt-get remove --purge nvidia-\*

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;卸载后,重启&lt;/p&gt;
&lt;p&gt;登陆界面同时按下：Ctrl + Alt + F1 ~ F6都可以进入字符界面(tty)，再按 Ctrl + Alt + F7就又回到登陆界面了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;禁用mouveau驱动和相关驱动包&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo gedit /etc/modprobe.d/blacklist.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在文件最后一行加入下面的命令,进行屏蔽&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;blacklist rivafb
blacklist vga16fb
blacklist nouveau
blacklist nvidiafb
blacklist rivatv

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试是否禁用成功&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lsmod | grep nouveau&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;没有输出则表示禁用成功&lt;/p&gt;
&lt;p&gt;然后更新
&lt;code&gt;sudo update-initramfs -u&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;重启&#34;&gt;重启&lt;/h2&gt;
&lt;p&gt;在tty界面操作执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#获取权限
sudo chmod a+x NVIDIA-Linux-x86_64-410.57.run

#执行
./NVIDIA-Linux-x86_64-410.57.run

#安装

sudo ./NVIDIA-Linux-x86_64-375.20.run –no-x-check –no-nouveau-check #–no-opengl-files
#–no-x-check 安装驱动时关闭X服务
#–no-nouveau-check 安装驱动时禁用nouveau
#–no-opengl-files 只安装驱动文件，不安装OpenGL文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装时会出现几个问题:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20170704145634723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题1&#34;&gt;
&lt;img src=&#34;https://img-blog.csdn.net/20170704145649253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题2&#34;&gt;
&lt;img src=&#34;https://img-blog.csdn.net/20170704145730273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题3&#34;&gt;
&lt;img src=&#34;https://img-blog.csdn.net/20170704145756678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题4&#34;&gt;&lt;/p&gt;
&lt;p&gt;register the kernel module souces with DKMS?   --- &lt;strong&gt;NO&lt;/strong&gt;
&lt;img src=&#34;https://img-blog.csdn.net/20170704145756678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题5&#34;&gt;
&lt;img src=&#34;https://img-blog.csdn.net/20170704145930442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题6&#34;&gt;
&lt;img src=&#34;https://img-blog.csdn.net/20170704145944368?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题7&#34;&gt;
当全部完成后 会重启
&lt;img src=&#34;https://img-blog.csdn.net/20170704150018014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ3NpZGFkZWhhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;问题8&#34;&gt;&lt;/p&gt;
&lt;p&gt;之前安装出现这个问题
&lt;code&gt;Error：Unable to load the &#39;nvidia-drm&#39; kernel module .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;说是boot security中需要禁用 但是没找到
添加 mouveau驱动屏蔽后解决了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2安装cuda&#34;&gt;2.安装cuda&lt;/h2&gt;
&lt;p&gt;安装示例进行选择安装&lt;a href=&#34;https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Linux&amp;amp;target_arch=x86_64&amp;amp;target_distro=Ubuntu&amp;amp;target_version=1604&amp;amp;target_type=deblocal&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cuda安装过程帮助文档&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#package-manager-metas&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;cuda-repo-&amp;lt;version&amp;gt;&lt;/code&gt;是对应的版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;`sudo dpkg -i cuda-repo-ubuntu1604-10-0-local-10.0.130-410.48_1.0-1_amd64.deb`
`sudo apt-key add /var/cuda-repo-&amp;lt;version&amp;gt;/7fa2af80.pub`
`sudo apt-get update`
`sudo apt-get install cuda`

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装完成后 需要更新当前用户的配置文件&lt;/p&gt;
&lt;p&gt;安装之后路径&lt;code&gt; /usr/local/&lt;/code&gt;中会出现两个cuda文件夹 一个cuda 一个cuda-10.0 cuda应该是链接到cuda-10.0的
将安装路径添加到bashrc&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo gedit ~/.bashrc
$ export PATH=/usr/local/cuda-10.0/bin:$PATH
$ export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64:$LD_LIBRARY_PATH

# 执行命令使路径生效

source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入 &lt;code&gt;nvcc -V&lt;/code&gt;
可以看到cuda的版本信息&lt;/p&gt;
&lt;p&gt;尝试运行cuda中自带的例子&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /usr/local/cuda-8.0/samples/1_Utilities/deviceQuery
sudo make
./deviceQuery

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到&lt;code&gt;Result=PASS&lt;/code&gt; 成功输出&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3安装cudnn&#34;&gt;3.安装cuDNN&lt;/h2&gt;
&lt;p&gt;cuDNN下载地址&lt;a href=&#34;https://developer.nvidia.com/rdp/cudnn-archive&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择支持cuda-10.0的版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuDNN v7.6.5&lt;/li&gt;
&lt;li&gt;Library for Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载完成后,解压&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar -xzvf cudnn-10.0-linux-x64-v7.6.5.32.tgz
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看cnDNN版本
&lt;code&gt;cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2. &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题 cuda安装完后,出现了&lt;code&gt;deviceQuery fail&lt;/code&gt;的问题
重新卸载安装后 问题消失
似乎是 安装完cuda后没有重启&lt;/p&gt;
&lt;p&gt;最后运行nvidia-smi 如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/08/13/ybhFu5wMls9AP1m.png&#34; alt=&#34;Screenshot from 2020-08-13 14-56-33.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4安装tensorflow&#34;&gt;4.安装tensorflow&lt;/h2&gt;
&lt;p&gt;由于在ubuntu16.04的环境
需要用ros Kinect进行开发 仅支持python2
所以tensorflow需要安装2.7版本&lt;/p&gt;
&lt;p&gt;支持GPU的2.7版本 &lt;a href=&#34;https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-2.1.0-cp27-cp27mu-manylinux2010_x86_64.whl&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载后利用pip进行安装&lt;/p&gt;
&lt;p&gt;安装完成后 &lt;code&gt;import tensorflow&lt;/code&gt;会发生以下问题:&lt;/p&gt;
&lt;p&gt;如果驱动版本和cuda版本不同 会保不兼容的问题 之前安装430驱动与410版本cuda&lt;code&gt;not match&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;In [1]: import tensorflow as tf
2020-01-25 11:20:08.541504: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#39;libnvinfer.so.6&#39;; dlerror: libnvinfer.so.6: cannot open shared object file: No such file or directory
2020-01-25 11:20:08.541639: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#39;libnvinfer_plugin.so.6&#39;; dlerror: libnvinfer_plugin.so.6: cannot open shared object file: No such file or directory
2020-01-25 11:20:08.541689: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:30] Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;后发现这是tensorRT引起的 虽然不影响使用 但是需要屏蔽warning&lt;/p&gt;
&lt;p&gt;后安装1.15.0版本 问题解决&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180512211201361&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;至此-大功告成&#34;&gt;至此 大功告成&lt;/h3&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/cuda/" term="cuda" label="cuda" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python中init详解</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python%E4%B8%ADinit%E8%AF%A6%E8%A7%A3/" />
            <id>https://chenbokaix250.github.io/tech/python%E4%B8%ADinit%E8%AF%A6%E8%A7%A3/</id>
            <updated>2020-08-11T11:19:13&#43;08:00</updated>
            <published>2020-08-11T11:14:58&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Python__init__.py作用详解 __init__.py该文件的作用就是相当……</summary>
            
                <content type="html">&lt;h1 id=&#34;python__init__py作用详解&#34;&gt;Python__init__.py作用详解&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt;该文件的作用就是相当于把自身整个文件夹当做一个包来管理,每当有外部&lt;code&gt;import&lt;/code&gt;的时候就会自动执行里面的函数&lt;/p&gt;
&lt;h2 id=&#34;1标识该目录是一个python的模块包module-package&#34;&gt;1.标识该目录是一个python的模块包(module package)&lt;/h2&gt;
&lt;p&gt;如果是使用python的IDE,如果目录中存在该文件,该目录会被识别为module package&lt;/p&gt;
&lt;h2 id=&#34;2简化模块导入操作&#34;&gt;2.简化模块导入操作&lt;/h2&gt;
&lt;p&gt;假设我们的模块包的目录结构如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
└── mypackage
    ├── subpackage_1
    │   ├── test11.py
    │   └── test12.py
    ├── subpackage_2
    │   ├── test21.py
    │   └── test22.py
    └── subpackage_3
        ├── test31.py
        └── test32.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最直接的导入方式,是将整个文件拷贝到工程目录下,然后直接导入:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from mypackage.subpackage_1 import test11
from mypackage.subpackage_1 import test12
from mypackage.subpackage_2 import test21
from mypackage.subpackage_2 import test22
from mypackage.subpackage_3 import test31
from mypackage.subpackage_3 import test32
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;21-initpy是怎么工作的&#34;&gt;2.1 init.py是怎么工作的&lt;/h2&gt;
&lt;p&gt;实际上,如果目录中包含&lt;code&gt;__init__.py&lt;/code&gt;,当用import导入该目录时.会执行&lt;code&gt;__init__.py&lt;/code&gt;里面的代码.我们在mypackage目录下增加一个&lt;code&gt;__init__.py&lt;/code&gt;文件来做一个实验:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
└── mypackage
    ├── __init__.py
    ├── subpackage_1
    │   ├── test11.py
    │   └── test12.py
    ├── subpackage_2
    │   ├── test21.py
    │   └── test22.py
    └── subpackage_3
        ├── test31.py
        └── test32.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt;加一行&lt;code&gt;print(&amp;quot;You have imported mypackage&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下面直接用交互模式进行import&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import mypackage
You have imported mypackage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt;是自动执行的&lt;/p&gt;
&lt;h2 id=&#34;22-控制模块导入&#34;&gt;2.2 控制模块导入&lt;/h2&gt;
&lt;p&gt;在mypackage/init.py添加以下语句:
&lt;code&gt;from subpackage_1 import test11&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;导入时出现问题:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import mypackage
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/home/taopeng/Workspace/Test/mypackage/__init__.py&amp;quot;, line 2, in &amp;lt;module&amp;gt;
    from subpackage_1 import test11
ImportError: No module named &#39;subpackage_1&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要完整的包名
&lt;code&gt;from mypackage.subpackage_1 import test11&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;综上,我们可以在init.py指定默认需要导入的模块&lt;/p&gt;
&lt;h2 id=&#34;23-偷懒的导入方法&#34;&gt;2.3 偷懒的导入方法&lt;/h2&gt;
&lt;p&gt;导入时可以偷懒,将包中的所有内容导入
&lt;code&gt;from mypackage import *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; 变量关联了一个模块列表,当执行&lt;code&gt;from xx import *&lt;/code&gt;时,就会导入列表中的模块.将&lt;code&gt;__init__.py&lt;/code&gt;修改成:
&lt;code&gt;__all__ = [&#39;subpackage_1&#39;, &#39;subpackage_2&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里没有包含subpackage3,是为了证明&lt;code&gt;__all__&lt;/code&gt;起作用,而不是导入所有子目录.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from mypackage import *
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;subpackage_1&#39;, &#39;subpackage_2&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; dir(subpackage_1)
[&#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__path__&#39;, &#39;__spec__&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;子目录中的模块没有导入!
修改子目录下的&lt;code&gt;__init__.py&lt;/code&gt;文件:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;__all__ = [&#39;test11&#39;, &#39;test12&#39;]
# 默认只导入test11
from mypackage.subpackage_1 import test11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;导入成功&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from mypackage import *
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;subpackage_1&#39;, &#39;subpackage_2&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; dir(subpackage_1)
[&#39;__all__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__path__&#39;, &#39;__spec__&#39;, &#39;test11&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果想要导入子包的所有模块,则需要更精确的指定&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from mypackage.subpackage_1 import *
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;test11&#39;, &#39;test12&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3配置模块的初始化操作&#34;&gt;3.配置模块的初始化操作&lt;/h2&gt;
&lt;p&gt;在了解了&lt;code&gt;__init__.py&lt;/code&gt;的工作原理后，应该能理解该文件就是一个正常的python代码文件。
因此可以将初始化代码放入该文件中。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python中argparse用法</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python%E4%B8%ADargparse%E7%94%A8%E6%B3%95/" />
            <id>https://chenbokaix250.github.io/tech/python%E4%B8%ADargparse%E7%94%A8%E6%B3%95/</id>
            <updated>2020-08-11T11:24:50&#43;08:00</updated>
            <published>2020-08-10T16:47:24&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">python argparse用法总结 1.argparse介绍 是python的一个命令行解析包，……</summary>
            
                <content type="html">&lt;h1 id=&#34;python-argparse用法总结&#34;&gt;python argparse用法总结&lt;/h1&gt;
&lt;h2 id=&#34;1argparse介绍&#34;&gt;1.argparse介绍&lt;/h2&gt;
&lt;p&gt;是python的一个命令行解析包，用于编写可读性非常好的程序&lt;/p&gt;
&lt;h2 id=&#34;2基本用法&#34;&gt;2.基本用法&lt;/h2&gt;
&lt;p&gt;prog.py 是测试argparse的文件 内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /usr/bin/env python3

# encoding:utf-8

import argparse
parser = argparse.ArgumentParser()
parser.parse_args()

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py  --help
usage: prog.py [-h]

optional arguments:
  -h, --help  show this help message and exit
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py  -v
usage: prog.py [-h]
prog.py: error: unrecognized arguments: -v
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py foo
usage: prog.py [-h]
prog.py: error: unrecognized arguments: foo

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;第一个没有任何输出和出错&lt;/li&gt;
&lt;li&gt;第二个测试为打印帮助信息，argparse会自动生成帮助文档&lt;/li&gt;
&lt;li&gt;第三个测试为未定义的-v参数，会出错&lt;/li&gt;
&lt;li&gt;第四个测试为未定义的参数foo，出错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3positional-arguments&#34;&gt;3.positional arguments&lt;/h2&gt;
&lt;p&gt; positional arguments为英文定义,中文名叫定位参数的,用法是不用带&lt;code&gt;-&lt;/code&gt;就可以修改prog.py的内容如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /usr/bin/env python3

# encoding:utf-8

import argparse
parser = argparse.ArgumentParser()
parser.add_argument(&amp;quot;echo&amp;quot;)
args = parser.parse_args()
print(args.echo)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行测试如下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 
usage: prog.py [-h] echo
prog.py: error: the following arguments are required: echo
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py -h
usage: prog.py [-h] echo

positional arguments:
  echo

optional arguments:
  -h, --help  show this help message and exit
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py lalal
lalal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义了一个&lt;code&gt;echo&lt;/code&gt;的参数,默认必选&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个测试为不带参数，由于echo参数为空，所以报错，并给出用法（usage）和错误信息&lt;/li&gt;
&lt;li&gt;第二个测试为打印帮助信息&lt;/li&gt;
&lt;li&gt;第三个测试为正常用法，回显了输入字符串lalal&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4optional-arguments&#34;&gt;4.optional arguments&lt;/h2&gt;
&lt;p&gt;中文名叫 &lt;strong&gt;可选参数&lt;/strong&gt; 有两种方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;-&lt;/code&gt;来指定的短参数&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;--&lt;/code&gt;来指定的长参数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python
# encoding: utf-8


import argparse


parser = argparse.ArgumentParser()
parser.add_argument(&amp;quot;-v&amp;quot;, &amp;quot;--verbosity&amp;quot;, help=&amp;quot;increase output verbosity&amp;quot;)
args = parser.parse_args()
if args.verbosity:
        print &amp;quot;verbosity turned on&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这一行：parser.add_argument(&amp;quot;-v&amp;quot;, &amp;quot;--verbosity&amp;quot;, help=&amp;quot;increase output verbosity&amp;quot;)
定义了可选参数-v或--verbosity，通过解析后，其值保存在args.verbosity变量中
用法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py -v 1
verbosity turned on
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py --verbosity 1
verbosity turned on
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py -h
usage: prog.py [-h] [-v VERBOSITY]

optional arguments:
  -h, --help            show this help message and exit
  -v VERBOSITY, --verbosity VERBOSITY
                        increase output verbosity
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py -v
usage: prog.py [-h] [-v VERBOSITY]
prog.py: error: argument -v/--verbosity: expected one argument
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;测试1中，通过-v来指定参数值&lt;/li&gt;
&lt;li&gt;测试2中，通过--verbosity来指定参数值&lt;/li&gt;
&lt;li&gt;测试3中，通过-h来打印帮助信息&lt;/li&gt;
&lt;li&gt;测试4中，没有给-v指定参数值，所以会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5actionstore_true&#34;&gt;5.action=&#39;store_true&#39;&lt;/h2&gt;
&lt;p&gt;利用&lt;code&gt;action = &amp;quot;store_true&lt;/code&gt; &lt;code&gt;-v&lt;/code&gt; 没有参数时不会报错&lt;/p&gt;
&lt;h2 id=&#34;6类型type&#34;&gt;6.类型type&lt;/h2&gt;
&lt;p&gt;默认的参数类型为str,如果要进行数学计算 需要对参数进行解析后进行类型转换 如果不能转换则需要报错 这样比较麻烦&lt;/p&gt;
&lt;p&gt;argparse提供了对参数类型的解析,如果类型不符合,则直接报错&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python3
# encoding: utf-8


import argparse


parser = argparse.ArgumentParser()
parser.add_argument(&#39;x&#39;, type=int, help=&amp;quot;the base&amp;quot;)
args = parser.parse_args()
answer = args.x ** 2
print(answer)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 2
4
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py two
usage: prog.py [-h] x
prog.py: error: argument x: invalid int value: &#39;two&#39;
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py -h
usage: prog.py [-h] x

positional arguments:
  x           the base

optional arguments:
  -h, --help  show this help message and exit
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;第一个测试为计算2的平方数,类型int 正常&lt;/li&gt;
&lt;li&gt;第二个测试为一个非int数,报错&lt;/li&gt;
&lt;li&gt;第三个为打印帮助信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7可选值choices&#34;&gt;7.可选值choices=[]&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python3
# encoding: utf-8


import argparse


parser = argparse.ArgumentParser()
parser.add_argument(&amp;quot;square&amp;quot;, type=int,
                    help=&amp;quot;display a square of a given number&amp;quot;)
parser.add_argument(&amp;quot;-v&amp;quot;, &amp;quot;--verbosity&amp;quot;, type=int, choices=[0, 1, 2],
                    help=&amp;quot;increase output verbosity&amp;quot;)
args = parser.parse_args()
answer = args.square**2
if args.verbosity == 2:
    print (&amp;quot;the square of {} equals {}&amp;quot;.format(args.square, answer))
elif args.verbosity == 1:
    print (&amp;quot;{}^2 == {}&amp;quot;.format(args.square, answer))
else:
    print(answer)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 -v 0
16
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 -v 1
4^2 == 16
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 -v 2
the square of 4 equals 16
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 -v 3
usage: prog.py [-h] [-v {0,1,2}] square
prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 -h
usage: prog.py [-h] [-v {0,1,2}] square

positional arguments:
  square                display a square of a given number

optional arguments:
  -h, --help            show this help message and exit
  -v {0,1,2}, --verbosity {0,1,2}
                        increase output verbosity
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;测试1， 2， 3 为可选值范围，通过其值，打印不同的格式输出；&lt;/li&gt;
&lt;li&gt;测试4的verbosity值不在可选值范围内，打印错误&lt;/li&gt;
&lt;li&gt;测试5打印帮助信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8自定义帮助信息help&#34;&gt;8.自定义帮助信息help&lt;/h2&gt;
&lt;p&gt;上面很多例子中都为help赋值，如
parser.add_argument(&amp;quot;square&amp;quot;, type=int, help=&amp;quot;display a square of a given number&amp;quot;)
在打印输出时，会有如下内容&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;positional arguments:
  square                display a square of a given number

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;9程序用法帮助&#34;&gt;9.程序用法帮助&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;argparse.ArgumentParser(description=&amp;quot;calculate X to the power of Y&amp;quot;)&lt;/code&gt; 为整个程序定义帮助文档&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py -h
usage: prog.py [-h] [-v | -q] x y

calculate X to the power of Y

positional arguments:
  x              the base
  y              the exponent

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose
  -q, --quiet
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;10互斥参数&#34;&gt;10.互斥参数&lt;/h2&gt;
&lt;p&gt;互斥的参数&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;group = parser.add_mutually_exclusive_group()
group.add_argument(&amp;quot;-v&amp;quot;, &amp;quot;--verbose&amp;quot;, action=&amp;quot;store_true&amp;quot;)
group.add_argument(&amp;quot;-q&amp;quot;, &amp;quot;--quiet&amp;quot;, action=&amp;quot;store_true&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一行定义了一个互斥组，第二、三行在互斥组中添加了-v和-q两个参数，用上个例子中的程序进行如下测试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 2
4^2 == 16
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 2 -v
4 to the power 2 equals 16
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 2 -q
16
bokaideMacBook-Pro:python100 bokaichen$ python3 prog.py 4 2 -q -v
usage: prog.py [-h] [-v | -q] x y
prog.py: error: argument -v/--verbose: not allowed with argument -q/--quiet
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;11参数默认值&#34;&gt;11.参数默认值&lt;/h2&gt;
&lt;p&gt;参数默认值定义&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/env python3
# encoding: utf-8


import argparse


parser = argparse.ArgumentParser(description=&amp;quot;calculate X to the power of Y&amp;quot;)
parser.add_argument(&amp;quot;square&amp;quot;, type=int,
                    help=&amp;quot;display a square of a given number&amp;quot;)
parser.add_argument(&amp;quot;-v&amp;quot;, &amp;quot;--verbosity&amp;quot;, type=int, choices=[0, 1, 2], default=1,
                    help=&amp;quot;increase output verbosity&amp;quot;)
args = parser.parse_args()
answer = args.square**2
if args.verbosity == 2:
    print (&amp;quot;the square of {} equals {}&amp;quot;.format(args.square, answer))
elif args.verbosity == 1:
    print (&amp;quot;{}^2 == {}&amp;quot;.format(args.square, answer))
else:
    print (answer)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bokaideMacBook-Pro:python100 bokaichen$ python prog.py 8
8^2 == 64
bokaideMacBook-Pro:python100 bokaichen$ python prog.py 8 -v 0
64
bokaideMacBook-Pro:python100 bokaichen$ python prog.py 8 -v 1
8^2 == 64
bokaideMacBook-Pro:python100 bokaichen$ python prog.py 8 -v 2
the square of 8 equals 64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到如果不指定&lt;code&gt;-v&lt;/code&gt;的值,&lt;code&gt;args.verbosity&lt;/code&gt;的值默认为1,直接打印进行测试.&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Linux下设置python脚本文件为服务</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/linux%E4%B8%8B%E8%AE%BE%E7%BD%AEpython%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%BA%E6%9C%8D%E5%8A%A1/" />
            <id>https://chenbokaix250.github.io/tech/linux%E4%B8%8B%E8%AE%BE%E7%BD%AEpython%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%BA%E6%9C%8D%E5%8A%A1/</id>
            <updated>2020-07-15T11:33:13&#43;08:00</updated>
            <published>2020-07-15T10:25:11&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Linux下设置Python脚本文件为服务 python脚本开机自动运行 适用于使用sy……</summary>
            
                <content type="html">&lt;h1 id=&#34;linux下设置python脚本文件为服务&#34;&gt;Linux下设置Python脚本文件为服务&lt;/h1&gt;
&lt;p&gt;python脚本开机自动运行&lt;/p&gt;
&lt;p&gt;适用于使用systemd的Linux系统&lt;/p&gt;
&lt;h2 id=&#34;1python脚本&#34;&gt;1.python脚本&lt;/h2&gt;
&lt;p&gt;一个需要自启动的python脚本 我使用/home/cold/autorun.py为例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#autorun.py
print(&amp;quot;autorun ok!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2创建unit配置文件&#34;&gt;2.创建Unit配置文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo vim /lib/systemd/system/autorun.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;写入内容&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]
Description=Test Service
After=multi-user.target
 
[Service]
Type=idle
ExecStart=/usr/bin/python3 /home/cold/autorun.py
 
[Install]
WantedBy=multi-user.target

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面定义了一个Test Service的服务,它在multi-user环境起来之后运行;ExecStart参数指定我们要运行的程序;idle确保脚本在其他东西加载完成之后运行,它的默认值是simple&lt;/p&gt;
&lt;p&gt;注意使用绝对路径&lt;/p&gt;
&lt;p&gt;更改配置文件的权限&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo chmod 644 /lib/systemd/system/autorun.service&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;3使配置文件生效&#34;&gt;3.使配置文件生效&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl daemon-reload
sudo systemctl enable autorun.service
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4重启&#34;&gt;4.重启&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;5查看服务状态&#34;&gt;5.查看服务状态&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl status autorun.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/07/15/zVdnWharL6eM8is.png&#34; alt=&#34;截&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Xavier调试</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/xavier%E8%B0%83%E8%AF%95/" />
            <id>https://chenbokaix250.github.io/tech/xavier%E8%B0%83%E8%AF%95/</id>
            <updated>2020-07-15T11:31:38&#43;08:00</updated>
            <published>2020-07-14T14:32:09&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Xavier调试 1. 换源 备份 sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup 修改source.list 换源ARM源 Xavier……</summary>
            
                <content type="html">&lt;h1 id=&#34;xavier调试&#34;&gt;Xavier调试&lt;/h1&gt;
&lt;h2 id=&#34;1-换源&#34;&gt;1. 换源&lt;/h2&gt;
&lt;p&gt;备份
&lt;code&gt;sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改&lt;code&gt;source.list&lt;/code&gt;
换源ARM源  Xavier清华:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse
deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse
deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main universe restricted
deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main universe restricted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改完后 保存 &lt;code&gt;sudo apt update&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2开机跳过输入用户名密码&#34;&gt;2.开机跳过输入用户名密码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;省略密码验证
需要将&lt;code&gt;/etc/passwd&lt;/code&gt;中的&lt;code&gt;root:x:00:root:/root:/bin/bash&lt;/code&gt;,改为&lt;code&gt;root::0:0:root:/root:/bin/bash&lt;/code&gt; 去掉里面的x,这样的root用户就不用密码.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;省略输入用户名
修改/etc/inittab:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ttySx::respawn:/sbin/getty /dev/ttySx xxxx
成
::respawn:-/bin/sh
即可&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3ssh&#34;&gt;3.ssh&lt;/h2&gt;
&lt;p&gt;利用ifconfig 查找inet值&lt;/p&gt;
&lt;p&gt;然后利用用户名@ip登录&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh cold@172.20.10.2

pw 900923

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;传送文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scp cold@172.20.10.2:/home/cold/user/xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;4vnc设置&#34;&gt;4.vnc设置&lt;/h2&gt;
&lt;p&gt;AGX Xavier端
两个设置地方:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载 &lt;strong&gt;dconf-editor&lt;/strong&gt; 工具开启桌面共享权限
&lt;code&gt;sudo apt-get install dconf-editor&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://hollyqood.files.wordpress.com/2019/04/1556159660723.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;开启 &lt;strong&gt;dconf-editor&lt;/strong&gt; 工具
&lt;code&gt;dconf-editor&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进入 &lt;code&gt;/org/gnome/desktop/remote-access&lt;/code&gt; ,主要是将&lt;code&gt;requre-encryption&lt;/code&gt;关闭&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hollyqood.files.wordpress.com/2019/04/1556159868654.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;开启VNC Server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一共分3步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编辑&lt;code&gt;org.gnome.Vino.gschema.xml&lt;/code&gt; ,补上缺失的enable选项
&lt;code&gt;sudo nano /usr/share/glib-2.0/schemas/org.gnome.Vino.gschema.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在最后的&lt;/schema&gt;之前补上一下代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    &amp;lt;key name=&#39;enabled&#39; type=&#39;b&#39;&amp;gt;
      &amp;lt;summary&amp;gt;Enable remote access to the desktop&amp;lt;/summary&amp;gt;
      &amp;lt;description&amp;gt;
        If true, allows remote access to the desktop via the RFB
        protocol. Users on remote machines may then connect to the
        desktop using a VNC viewer.
      &amp;lt;/description&amp;gt;
      &amp;lt;default&amp;gt;false&amp;lt;/default&amp;gt;
    &amp;lt;/key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;编译schemas for Gnome
如果没有编译log的话 ,说明没有错误
&lt;code&gt;sudo glib-compile-schemas /usr/share/glib-2.0/schemas&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3)开启VNC server
开启一个terminal输入以下指令 :
&lt;code&gt;/usr/lib/vino/vino-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hollyqood.files.wordpress.com/2019/04/1556161215279.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;vnc 连接 172.20.10.2&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/07/14/askGZmR2FVeUc5d.jpg&#34; alt=&#34;WechatIMG1.jpeg&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-控制xavier风扇&#34;&gt;5. 控制Xavier风扇&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安装硬件温度检测工具sensors
&lt;code&gt;sudo apt install lm-sensors&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装成功以后 输入 &lt;code&gt;sensors&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;开启全速
在任意路径下,输入
&lt;code&gt;sudo nvpmodel --query&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;显示工作在m2 模式 输入 &lt;code&gt;jetson_clocks&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6yolov4-应用&#34;&gt;6.yolov4 应用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/AlexeyAB/darknet.git darknet0604&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改Makefile以适合Xavier&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Jetson XAVIER
ARCH 选择72

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改CMakeList.txt&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 不支持的编译选项
在162行附近
＃设置（CMAKE_CXX_FLAGS_RELEASE“ $ {CMAKE_CXX_FLAGS_RELEASE} -ffp-contract = fast -mavx -mavx2 -msse3 -msse4.1 -msse4.2 -msse4a”）
＃设置（CMAKE_C_FLAGS_RELEpASE_A $ SCM_CASE_ASE = fast -mavx -mavx2 -msse3 -msse4.1 -msse4.2 -msse4a“）

# nvcc fatal : Unknown option &#39;fopenmp&#39; using CMAKE

# 1.替换 --compiler-options by -Xcompiler
set(CUDA_HOST_COMPILER_FLAGS &amp;quot;-Xcompiler \&amp;quot; ${ADDITIONAL_CXX_FLAGS} -fPIC -fopenmp -Ofast \&amp;quot;&amp;quot;)
#大约217行左右

# 2.注释掉(约354行)
  #target_link_libraries(dark PUBLIC OpenMP::OpenMP_CXX)
  #target_link_libraries(dark PUBLIC OpenMP::OpenMP_C)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;./build.sh 通过后&lt;/p&gt;
&lt;p&gt;完成yolov4的安装&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ps&#34;&gt;ps&lt;/h2&gt;
&lt;h3 id=&#34;解决ssh自动断线-无响应的问题&#34;&gt;解决ssh自动断线 无响应的问题&lt;/h3&gt;
&lt;p&gt;ssh_config和sshd_config是ssh配置文件&lt;/p&gt;
&lt;p&gt;前者是针对客户端的配置文件
后者是针对服务端的配置文件&lt;/p&gt;
&lt;h3 id=&#34;打开&#34;&gt;打开&lt;/h3&gt;
&lt;p&gt;sudo vim /etc/ssh/sshd_config&lt;/p&gt;
&lt;h3 id=&#34;添加&#34;&gt;添加&lt;/h3&gt;
&lt;p&gt;ClientAliveInterval 30&lt;/p&gt;
&lt;p&gt;ClientAliveCountMax 6&lt;/p&gt;
&lt;p&gt;ClientAliveInterval表示每隔多少秒，服务器端向客户端发送心跳，是的，你没看错。&lt;/p&gt;
&lt;p&gt;ClientAliveInterval表示上述多少次心跳无响应之后，会认为Client已经断开。&lt;/p&gt;
&lt;p&gt;OpenSSH基于安全的理由，如果用户连线到SSH Server后闲置一段时间，SSH Server会在超过特定时间后自动终止SSH连线。本人习惯长时间连接，需要做如下修改：&lt;/p&gt;
&lt;p&gt;1、打开ssh配置文件：# vim /etc/ssh/sshd_config&lt;/p&gt;
&lt;p&gt;加入如下两个参数保存就可以：&lt;/p&gt;
&lt;p&gt;TCPKeepAlive yes&lt;/p&gt;
&lt;p&gt;ClientAliveCountMax 360&lt;/p&gt;
&lt;p&gt;注：前一个参数表示要保持TCP连接，后一个参数表示客户端的SSH连线闲置多长时间后自动终止连线的数值，单位为分钟。&lt;/p&gt;
&lt;p&gt;2、重启sshd生效：&lt;/p&gt;
&lt;p&gt;/etc/init.d/sshd restart&lt;/p&gt;
&lt;p&gt;注：此法适用于所有Linux发行版的OpenSSH。ClientAliveInterval是设定SSH强制超时断开的参数&lt;/p&gt;
&lt;p&gt;ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0，不发送。而ClientAliveInterval 60表示每分钟发送一次，然后客户端响应，这样就保持长连接了。这里比较怪的地方是：不是客户端主动发起保持连接的请求(如FTerm, CTerm等),而是需要服务器先主动。&lt;/p&gt;
&lt;p&gt;另外，至于ClientAliveCountMax，使用默认值3即可。ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值，就自动断开，正常情况下，客户端不会不响应。&lt;/p&gt;
&lt;p&gt;我的sshd配置是设置/etc/ssh/sshd_config：&lt;/p&gt;
&lt;p&gt;TCPKeepAlive yes&lt;/p&gt;
&lt;p&gt;ClientAliveInterval 360　#每6分钟(360秒)向client端发个包&lt;/p&gt;
&lt;p&gt;ClientAliveCountMax 20　#最多发20次，这样可以保持2小时（7200秒）的连接&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/xavier/" term="Xavier" label="Xavier" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Raspberry3记录</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/raspberry3%E8%AE%B0%E5%BD%95/" />
            <id>https://chenbokaix250.github.io/tech/raspberry3%E8%AE%B0%E5%BD%95/</id>
            <updated>2020-07-07T16:36:45&#43;08:00</updated>
            <published>2020-07-07T14:09:49&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">raspberry摄像头调试中的问题处理 安装驱动 使能模块 利用sudo raspi-config 配置camer……</summary>
            
                <content type="html">&lt;h1 id=&#34;raspberry摄像头调试中的问题处理&#34;&gt;raspberry摄像头调试中的问题处理&lt;/h1&gt;
&lt;h2 id=&#34;安装驱动-使能模块&#34;&gt;安装驱动 使能模块&lt;/h2&gt;
&lt;p&gt;利用&lt;code&gt;sudo raspi-config&lt;/code&gt; 配置camera使能&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;sudo vim /etc/modules&lt;/code&gt;中添加 &lt;code&gt;bcm2835-v4l2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意是l2 不是12&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;ls -al /dev/ | grep video&lt;/code&gt; 可以获取到video0&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mmal mmal_vc_component_create failed to create component &#39;vc ril camera&#39; (1:ENOMEM)
mmal mmal_component_create_core could not create component &#39;vc ril camera&#39; (1) mmal Failed to create camera component
mmal main Failed to create camera component
mmal Camera is not detected. Please check carefully the camera module is installed correctly
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现这个问题 是因为摄像头安装错误导致&lt;/p&gt;
&lt;p&gt;安装正确后 利用 &lt;code&gt;raspistill -o image.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以获得输出的图像&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在运行&lt;code&gt;camera_detection.py&lt;/code&gt;时,出现了一系列问题&lt;/p&gt;
&lt;p&gt;首先是
&lt;code&gt;Python: The _imagingft C module is not installed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;想着是因为 &lt;code&gt;_imaging&lt;/code&gt;没有安装 但是安装并没有发现相关类&lt;/p&gt;
&lt;p&gt;然后发现是&lt;code&gt;ImageFont.py&lt;/code&gt;,所以安装PIL库&lt;/p&gt;
&lt;p&gt;后发现 是Pillow的版本不对 Pillow安装版本7.2并不支持raspberry平台&lt;/p&gt;
&lt;p&gt;利用源码编译Pillow4.0.0 后发现是freetype不能&lt;code&gt;support not variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装freetype-py 2.1.0,但是pillow仍然不支持&lt;/p&gt;
&lt;p&gt;安装ConfigParse时,又曝出
&lt;strong&gt;Sub-process /usr/bin/dpkg returned an error code (1)”故障&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;造成这种问题的原因 是因为python-rpi.gpio卸载时 出现了诸多错误&lt;/p&gt;
&lt;p&gt;利用automove&lt;/p&gt;
&lt;p&gt;然后发现了这种解决办法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /var/lib/dpkg 
sudo mv info info.bak #做備份 
sudo mkdir info
sudo apt-get install python-imaging --reinstall #重新安裝cmake包
sudo rm -rf info
sudo mv info.bak info #還原info
然後再sudo apt-get install python-imaging就不會出現上面的錯誤了
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;然后apt-get update时 出现错误
发现是raspberry国防科大的镜像源出了问题 更换清华源后&lt;/p&gt;
&lt;p&gt;dpkg问题解决&lt;/p&gt;
&lt;p&gt;然后&lt;code&gt;sudo apt-get install libfreetype6-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装了freetype库 成功&lt;/p&gt;
&lt;p&gt;然后build pillow4.0.0库时,freetype能&lt;code&gt;supportvariable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python camera_detection.py&lt;/code&gt;,完成!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/07/07/k1X5Hr9J3v2YwjQ.png&#34; alt=&#34;截屏30.png&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/raspberry/" term="raspberry" label="raspberry" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Raspberrypi2记录</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/" />
            <id>https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/</id>
            <updated>2020-07-04T11:52:58&#43;08:00</updated>
            <published>2020-07-02T15:52:58&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">树莓派记录II API安装 树莓派安装OpenCV-Python ssh文件传输 树莓派硬件……</summary>
            
                <content type="html">&lt;h1 id=&#34;树莓派记录ii&#34;&gt;树莓派记录II&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/#1.tensorflow-model_API%E7%9A%84%E5%AE%89%E8%A3%85&#34;&gt;API安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/#%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85OpenCV-Python&#34;&gt;树莓派安装OpenCV-Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/#ssh%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93&#34;&gt;ssh文件传输&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/#%E8%8E%B7%E5%8F%96%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E4%BB%B6%E7%8A%B6%E6%80%81&#34;&gt;树莓派硬件状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/raspberrypi2%E8%AE%B0%E5%BD%95/#%E4%BD%BF%E7%94%A8Raspberrypi%E7%9A%84RPi.GPIO%E8%BF%87%E7%A8%8B&#34;&gt;使用Raspberrypi的RPi.GPIO过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1tensorflow-model_api的安装&#34;&gt;1.tensorflow-model_API的安装&lt;/h2&gt;
&lt;p&gt;旧版 tensorflow-models与树莓派有更好的匹配&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://pan.baidu.com/s/1LxJ9TpGGDyas_sCVanSZgQ&lt;/code&gt;  #老版API下载地址&lt;/p&gt;
&lt;h2 id=&#34;2生成protoc&#34;&gt;2.生成protoc&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cd /home/pi/tf/models-master/research/ &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;protoc object_detection/protos/*.proto --python_out=.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;3添加环境变量&#34;&gt;3.添加环境变量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo nano /etc/profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PYTHONPATH=/home/pi/tf/models-master/research/:/home/pi/tf/models-master/research/slim/&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python 使用protobuf出错：protoc: error while loading shared libraries: libprotoc.so.9: cannot open shared object file:No such...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法：linux 敲击命令：export LD_LIBRARY_PATH=/usr/local/lib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4查看环境变量&#34;&gt;4.查看环境变量&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
sudo reboot  # 重启!

#环境变量
env

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5测试&#34;&gt;5.测试&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /home/pi/tf/models-master/research/          # 可能路径与我不同

python object_detection/builders/model_builder_test.py

Ok--测试成功
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;树莓派安装opencv-python&#34;&gt;树莓派安装OpenCV-Python&lt;/h1&gt;
&lt;h2 id=&#34;1用pip安装cv&#34;&gt;1.用pip安装cv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo pip3 install opencv-python&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;2安装依赖库&#34;&gt;2.安装依赖库&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install libjpeg8-dev 

sudo apt-get install libtiff5-dev 

sudo apt-get install libjasper-dev 

sudo apt-get install libpng12-dev

sudo apt-get install libqt4-test

sudo apt-get install libqtgui4
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3测试&#34;&gt;3.测试&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import cv2

cap = cv2.VideoCapture(0)                                        # 打开摄像头

while True:

    ret, frame = cap.read()                                      # 读摄像头
    cv2.imshow(&amp;quot;video&amp;quot;, frame) 

    if cv2.waitKey(1) &amp;amp; 0xFF == ord(&#39;q&#39;):                        # 按q退出
        break

cap.release()            
cv2.destroyAllWindows()                                          # 基本操作

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用 lsusb命令查看摄像头设备连接情况&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;$ ls /dev/video* &lt;/code&gt;查看摄像头是否被硬件识别&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ssh文件传输&#34;&gt;ssh文件传输&lt;/h1&gt;
&lt;p&gt;linux一般利用scp命令来通过ssh传输文件&lt;/p&gt;
&lt;h2 id=&#34;从服务器上下载文件&#34;&gt;从服务器上下载文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scp username@servername:/path/filename /var/www/local_dir（本地目录）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scp pi@raspberrypi.local:/home/user/xx.py /Download/local_dir/&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;上传本地文件到服务器&#34;&gt;上传本地文件到服务器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scp /path/filename username@servername:/path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scp /Download/local_dir/ pi@raspberrypi.local:/home/user/xx.py&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;获取树莓派硬件状态&#34;&gt;获取树莓派硬件状态&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# method 1

pi@RaspberryPi:~ $ /opt/vc/bin/vcgencmd measure_temp
temp=51.5&#39;C

#method 2
pi@RaspberryPi:~ $ cat /sys/class/thermal/thermal_zone0/temp
50464

# 如果需要传文件夹 利用-r参数
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;下载models所需的库的地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;获取pbtxt的地方
&lt;code&gt;model/research/object_detection/data/mscoco_label_map.pbtxt&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;使用raspberrypi的rpigpio过程&#34;&gt;使用Raspberrypi的RPi.GPIO过程&lt;/h1&gt;
&lt;p&gt;起初 使用
&lt;code&gt;sudo apt-get install python3-rpi.gpio&lt;/code&gt;安装
安装后 import 会出现
&lt;code&gt;RPi._GPIO&lt;/code&gt;的错误问题 修改对应的init文件 使用时 仍然会出现setmode无法使用的问题&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;File &amp;quot;RPi/GPIO/init.py&amp;quot;, line 23, in
from RPi._GPIO import *
ImportError: No module named _GPIO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应该是库文件不对导致的
在此基础上利用&lt;code&gt;pip3 install rpi.gpio&lt;/code&gt;安装 通用会出现此类问题&lt;/p&gt;
&lt;p&gt;pip3安装会默认将RPi.GPIO-0.7.0安装在cp37版本下,而下载cp35版本却因为平台不一致无法安装(平台标注无误)&lt;/p&gt;
&lt;p&gt;而后先卸载了apt安装的python3-rpi.gpio&lt;/p&gt;
&lt;p&gt;然后下载&lt;code&gt;https://pypi.org/project/RPi.GPIO/0.7.0/#files&lt;/code&gt; 源码编译&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar xzvf 解压 
python setup.py build
python setup.py install

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20200419000201112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ2NjMyMzI=,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wiringPi编码 c++ 开发编码&lt;/li&gt;
&lt;li&gt;BCM编码 主控芯片编码&lt;/li&gt;
&lt;li&gt;BOARD编码 物理引脚&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般Python开发 使用BOARD编码&lt;/p&gt;
&lt;h2 id=&#34;使用rpigpio库控制led灯闪烁&#34;&gt;使用RPi.GPIO库控制LED灯闪烁&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BOARD)

GPIO.setup(18,GPIO.HIGH)
while TRUE:
    GPIO.output(18,GPIO.OUT)

GPIO.cleanup() #清理引脚
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;端口无负载能力 只能利用电流表量端口电压 3.3v&lt;/p&gt;
&lt;p&gt;说明GPIO 18 已经输出&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/raspberry/" term="raspberry" label="raspberry" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ORB_SLAM解析</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/orb_slam%E8%A7%A3%E6%9E%90/" />
            <id>https://chenbokaix250.github.io/tech/orb_slam%E8%A7%A3%E6%9E%90/</id>
            <updated>2020-07-02T08:56:47&#43;08:00</updated>
            <published>2020-07-02T08:56:23&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ORB_slam解析 目录结构 ORB slam目录中: src为源代码 include为源码对应……</summary>
            
                <content type="html">&lt;h1 id=&#34;orb_slam解析&#34;&gt;ORB_slam解析&lt;/h1&gt;
&lt;h2 id=&#34;目录结构&#34;&gt;目录结构&lt;/h2&gt;
&lt;p&gt;ORB slam目录中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src为源代码&lt;/li&gt;
&lt;li&gt;include为源码对应的头文件&lt;/li&gt;
&lt;li&gt;Example中提供了单目/多目/深度相机及ROS的例子&lt;/li&gt;
&lt;li&gt;Thirdparty提供了词袋模型和g2O优化库&lt;/li&gt;
&lt;li&gt;Vocabulary提供了词袋bin文件生成调用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ORB slam中的src包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Converter.cpp            涉及到eigen和opencv矩阵库的转换&lt;/li&gt;
&lt;li&gt;Frame.cpp                数据帧的方法&lt;/li&gt;
&lt;li&gt;FrameDrawer.cpp          真画图方法&lt;/li&gt;
&lt;li&gt;Initializer.cpp          初始化方法&lt;/li&gt;
&lt;li&gt;KeyFrame.cpp             关键帧方法&lt;/li&gt;
&lt;li&gt;KeyFrameDataset.cpp      关键帧数据库&lt;/li&gt;
&lt;li&gt;LocalMapping.cpp         局部地图方法&lt;/li&gt;
&lt;li&gt;LoopClosing.cpp          闭环监测方法&lt;/li&gt;
&lt;li&gt;Map.cpp                  Map中MapPoint和Kframe的操作方法&lt;/li&gt;
&lt;li&gt;MapDrawer.cpp            Map画图&lt;/li&gt;
&lt;li&gt;MapPoint.cpp             MapPoint方法&lt;/li&gt;
&lt;li&gt;Optimizer.cpp            优化方法&lt;/li&gt;
&lt;li&gt;ORBextractor.cpp         各类提取器&lt;/li&gt;
&lt;li&gt;ORBmatcher.cpp           特征点匹配方法&lt;/li&gt;
&lt;li&gt;PnPsolver.cpp            PnP计算方法&lt;/li&gt;
&lt;li&gt;Sim3Solver.cpp           SIM3计算方法&lt;/li&gt;
&lt;li&gt;System.cpp               代码主流程&lt;/li&gt;
&lt;li&gt;Tracking.cpp             跟踪主函数的实现&lt;/li&gt;
&lt;li&gt;Viewer.cpp               画图主函数的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;examplemonocularmono_kitticc&#34;&gt;Example/Monocular/mono_kitti.cc&lt;/h2&gt;
&lt;p&gt;main 传递四个参数 可执行文件/词袋模型/KITTI相机配置/图像路径&lt;/p&gt;
&lt;p&gt;LoadImages利用图像路径 图像名称 图像时间戳展开 其中后两个类型均为&lt;vector&gt; 读取后的数组&lt;/p&gt;
&lt;p&gt;LoadImage通过获取time.txt /image_0/ 利用vstrImageFilenames通过循环遍历所有图片&lt;/p&gt;
&lt;p&gt;建立ORB_SLAM系统 传递 Vocabulary/ORBvoc.txt词袋模型 Examples/Monocular/KITTIX.yaml相机配置 相机类型 bUseViewer(true)&lt;/p&gt;
&lt;p&gt;获取图片数量 然后 循环读取图片和时间戳 im tframe 如果读取图片失败 则返回&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SLAM.TrackMonocular(im,tframe);&lt;/code&gt; 传入图和时间戳
更新运行时间 直到image图片全部传入 完成后退出&lt;/p&gt;
&lt;p&gt;关闭SLAM&lt;/p&gt;
&lt;p&gt;统计vTimesTrack 计算中位数时间和平均时间 median time和mean time&lt;/p&gt;
&lt;p&gt;核心在于当:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ORB_SLAM2::System SLAM(argv[1],argv[2],ORB_SLAM2::System::MONOCULAR,true);&lt;/code&gt; 建立 SLAM系统过程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SLAM.TrackMonocular(im,tframe);&lt;/code&gt; 执行TrackMonocular 过程&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;建立过程&#34;&gt;建立过程&lt;/h2&gt;
&lt;p&gt;当建立System时 构造需要的参数中:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mbReset&lt;/li&gt;
&lt;li&gt;mbActivateLocalizationMode&lt;/li&gt;
&lt;li&gt;mbDeactivateLocalizationMode&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reset是用来重新系统
后两个是用户在界面中勾选 未选中则是 false&lt;/p&gt;
&lt;p&gt;输出欢迎界面和传感器类型&lt;/p&gt;
&lt;p&gt;读取词袋模型
其中实例词袋模型mpVocabulary时的类ORBVocabulary即为 /include/ORBVocabulary.h中 typedef为&lt;code&gt;DBoW2::TemplatedVocabulary&amp;lt;DBoW2::FORB::TDescriptor, DBoW2::FORB&amp;gt;&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;读取词袋模型 (应该是词袋模型有.txt和.bin两种类型 利用不同的方法读取 方法的实现在/Vocabulary/bin_vocabulary.cpp中)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化 mpKeyFrameDatabase 词袋实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化 mpMap 用于地图构建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**实例化 帧画图 **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化 地图画图 传入相机配置和地图构建(mpMap strSettingsFile)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化 Tracker对象&lt;/strong&gt;
实例化对象时,构造函数确定相机参数 /畸变矩阵 /帧数/
更关键的是 &lt;strong&gt;ORB参数&lt;/strong&gt;:
特征点数量 2000/ 比例层级 8 / 比例倍数 1.2 / fIniThFAST(特征点阈值 20)/fMinThFAST(最小阈值 8)&lt;/p&gt;
&lt;p&gt;mpORBextractorLeft 实例化特征提取器 (参数就是ORBextractor读取出的参数)&lt;/p&gt;
&lt;p&gt;双目和单目分别用不同的 实例化的对象提取器不同 mpORBextractorRight/mpIniORBextractor 不同之处是 单目相机需要更多的 Features&lt;/p&gt;
&lt;p&gt;如果是 双目相机或者RGBD相机 还需要设置 远近阈值(ThDepth) 和 DepthMapFactor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化 局部地图&lt;/strong&gt;
实例化局部地图时,传入(mpMap和mSensor==MONOCULAR 也就是True) 实例化完成后 bMonocular= True ( be monocular)
开启线程mptLoopClosing 执行Run方法
&lt;strong&gt;Run方法:&lt;/strong&gt;
mbFinished 标志位致为 未完成
进入While(1)循环 跳出条件是 CheckFinish()函数 也就是mbFinishRequested的值为1 跳出
循环中执行:&lt;/p&gt;
&lt;p&gt;mbAcceptKeyFrames决定是否接受新的帧&lt;/p&gt;
&lt;p&gt;等待处理的关键帧列表不为空 CheckNewKeyFrames()&lt;/p&gt;
&lt;p&gt;计算关键帧的Bow映射 关键帧联合地图 ProcessNewKeyFrame()&lt;/p&gt;
&lt;p&gt;剔除相邻的MapPoint MapPointCulling()&lt;/p&gt;
&lt;p&gt;通过数学原理恢复重建一些MapPoint CreateNewMapPoints&lt;/p&gt;
&lt;p&gt;如果 list中还有KeyFrame 融合相邻关键帧中的MapPoints SearchInNeighbors()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--mbAbortBA 是否进行BA优化的标志位 

--队列中为空 并且 闭环检测没有要求停止LocalMapping 利用BA优化器对当前帧进行优化 

--剔除冗余关键帧 :剔除关键帧的90%的MapPoints可以被其他关键帧观测到 --KeyFrameCulling()

--将当前帧加入到闭关检测队列 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果 收到停止指令
--while等待标志位更新 线程休眠3秒后 收到退出请求后 退出
--清空队列和重启请求&lt;/p&gt;
&lt;p&gt;然后 setFinish() 退出 RUN() 方法&lt;/p&gt;
&lt;p&gt;//103行
&lt;strong&gt;实例化 闭环检测&lt;/strong&gt;
传入 mpMap 关键帧数据库 词袋模型 传感器是否为单目 (这决定了后面的优化类型选择)
开启mptLoopClosing线程 执行LoopClosing run方法
Loopclosing中的关键帧是LocalMapping发送过来的，LocalMapping是Tracking中发过来的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检测回环&lt;/strong&gt;
取出列表中的关键帧 然后再删除列表中的该帧 (list.front 获取第一个对象 list.pop_front 删除第一个对象)&lt;/p&gt;
&lt;p&gt;设置当前关键帧不可删除 避免被其他线程修改
如果闭环距离上次闭环不到10帧 直接返回 false&lt;/p&gt;
&lt;p&gt;超过10帧之后 获取该关键帧连接的关键帧 返回的mvpOrderedConnectedKeyFrames说明已经按照权值排列
获取该关键帧的词袋向量&lt;/p&gt;
&lt;p&gt;遍历最小的minScore
利用DetectLoopCandidates找出可能闭环的帧 如果没有可能闭环的帧 就清除变量 返回 false&lt;/p&gt;
&lt;p&gt;在候选帧中检测具有连续性的候选帧
构建连续帧组 spCandidateGroup
判定帧组的连续 bConsistent&lt;/p&gt;
&lt;p&gt;闭环候选帧 mvpEnoughConsistentCandidates 传入 pCandidateKF 得到的&lt;/p&gt;
&lt;p&gt;如果有数据就返回true 为空 则返回 false 置位mpCurrentKF(开锁)&lt;/p&gt;
&lt;p&gt;注意 这个ComputeSim3() 是LoopClosing::ComputeSim3 不是solver3sim的&lt;/p&gt;
&lt;p&gt;创建一个比较器 matcher
创建一个队列的 sim3Solver求解器  resize到回环候选帧的尺寸&lt;/p&gt;
&lt;p&gt;创建一个二维vector存放MapPointMatches&lt;/p&gt;
&lt;p&gt;创建一个丢弃标志列&lt;/p&gt;
&lt;p&gt;遍历mvpEnoughConsistentCandidates 如果是isbad 设置丢弃&lt;/p&gt;
&lt;p&gt;然后进行SearchByBoW 传入当前帧和回环检测帧 MapPoint匹配
通过bow和特征点MapPoint进行快速匹配
将pKF的特征更新到F上去
通过阈值 角度(直方图最大3个index) 和距离投票
返回匹配点的数量&lt;/p&gt;
&lt;p&gt;如果匹配点太少 删除该帧 else&lt;/p&gt;
&lt;p&gt;创建一个求解器 传入:当前关键帧 回环候选帧 MapPointMatches 单目
然后利用Ransac算法 迭代300次&lt;/p&gt;
&lt;p&gt;中间的 continue 结束这次循环&lt;/p&gt;
&lt;p&gt;将得到候选帧增加 nCandidates&lt;/p&gt;
&lt;p&gt;遍历 nCandidates 遍历每个 nInitialCandidates&lt;/p&gt;
&lt;p&gt;剔除vbDiscarded中的序列&lt;/p&gt;
&lt;p&gt;Ransac求解mvX3Dc1和mvX3Dc2之间Sim3，函数返回mvX3Dc2到mvX3Dc1的Sim3变换&lt;/p&gt;
&lt;p&gt;如果sim3存在 获取[sR t;0 1]&lt;/p&gt;
&lt;p&gt;利用 SearchBySim3 更新匹配vpMapPointMatches&lt;/p&gt;
&lt;p&gt;优化mpCurrentKF与pKF对应的MapPoints间的Sim3，得到优化后的量gScm&lt;/p&gt;
&lt;p&gt;如果优化成功 说明 mpMatchedKF就是最终闭环检测出来与当前帧形成闭环的关键帧&lt;/p&gt;
&lt;p&gt;得到从世界坐标系到该候选帧的Sim3变换  &lt;strong&gt;gSmw&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;得到g2o优化后从世界坐标系到当前帧的Sim3变换 &lt;strong&gt;mg2oScw&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将变换矩阵转成opencv的cv::Mat&lt;/p&gt;
&lt;p&gt;这里的break 是退出while循环 bMath已经是true&lt;/p&gt;
&lt;p&gt;如果遍历结束后 没有更新bMath 说明 没有闭环检测的候选帧完成了优化&lt;/p&gt;
&lt;p&gt;获取关键帧的连接帧 mvpOrderedConnectedKeyFrames&lt;/p&gt;
&lt;p&gt;匹配闭环关键帧的连接帧 是否为闭环关键帧&lt;/p&gt;
&lt;p&gt;进行一次SearchByProjection搜索一&lt;/p&gt;
&lt;p&gt;将闭环匹配上关键帧以及相连关键帧的MapPoints投影到当前关键帧进行投影匹配&lt;/p&gt;
&lt;p&gt;判断当前帧与检测出的所有闭环关键帧是否有足够多的MapPoints匹配 TotalMatches&amp;gt;40&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例化 mpViewer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取fps 相机信息 视角点等信息&lt;/p&gt;
&lt;p&gt;如果 bUseViewer 开启mptViewer线程 运行Run方法&lt;/p&gt;
&lt;p&gt;Pangolin是对OpenGL进行封装的轻量级的OpenGL输入/输出和视频显示的库&lt;/p&gt;
&lt;p&gt;pangolin创建windows&lt;/p&gt;
&lt;p&gt;设置gl深度&lt;/p&gt;
&lt;p&gt;设置 OpenGL使用混合颜色和混合选项&lt;/p&gt;
&lt;p&gt;创建按钮和选择框&lt;/p&gt;
&lt;p&gt;新建按钮和选择框，第一个参数为按钮的名字，第二个为默认状态，第三个为是否有选择框&lt;/p&gt;
&lt;p&gt;定义相机投影模型：ProjectionMatrix&lt;/p&gt;
&lt;p&gt;定义观测方位向量：观测点位置&lt;/p&gt;
&lt;p&gt;定义面板大小 CreateDisplay&lt;/p&gt;
&lt;p&gt;主循环中 利用条件 调整 s_cam和d_cam&lt;/p&gt;
&lt;p&gt;利用mpMapDrawer绘制地图&lt;/p&gt;
&lt;p&gt;至此 所有建立过程以及完成&lt;/p&gt;
&lt;p&gt;最后同步了关联边的信息传递&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mpTracker-&amp;gt;SetViewer(mpViewer);
//Set pointers between threads
mpTracker-&amp;gt;SetLocalMapper(mpLocalMapper);
mpTracker-&amp;gt;SetLoopClosing(mpLoopCloser);

mpLocalMapper-&amp;gt;SetTracker(mpTracker);
mpLocalMapper-&amp;gt;SetLoopCloser(mpLoopCloser);

mpLoopCloser-&amp;gt;SetTracker(mpTracker);
mpLoopCloser-&amp;gt;SetLocalMapper(mpLocalMapper);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;执行过程&#34;&gt;执行过程&lt;/h2&gt;
&lt;p&gt;单目摄像头的执行过程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;cv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TrackMonocular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mSensor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MONOCULAR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cerr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ERROR: you called TrackMonocular but input sensor was not set to Monocular.&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Check mode change
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;unique_lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mMutexMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mbActivateLocalizationMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mpLocalMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestStop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;c1&#34;&gt;// Wait until Local Mapping has effectively stopped
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mpLocalMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isStopped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//usleep(1000);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;this_thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep_for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chrono&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;milliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;mpTracker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InformOnlyTracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 定位时，只跟踪
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;mbActivateLocalizationMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 防止重复执行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mbDeactivateLocalizationMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mpTracker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InformOnlyTracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mpLocalMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mbDeactivateLocalizationMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 防止重复执行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Check reset
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;unique_lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mMutexReset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mbReset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mpTracker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;mbReset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpTracker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GrabImageMonocular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;判断传感器是否为单目&lt;/p&gt;
&lt;p&gt;判定是否需要启动局部地图 mbActivateLocalizationMode&lt;/p&gt;
&lt;p&gt;如果检测到用户勾选改变 发送停止指令&lt;/p&gt;
&lt;p&gt;检测直到 mpLocalMapper获取到isStoped状态 线程sleep&lt;/p&gt;
&lt;p&gt;定位时,只跟踪 InformOnlyTracking=TRUE /mbOnlyTracking&lt;/p&gt;
&lt;p&gt;如果检测到关闭定位 释放局部地图&lt;/p&gt;
&lt;p&gt;重启 mbReset&lt;/p&gt;
&lt;p&gt;返回 mpTracker-&amp;gt;GrabImageMonocular(im,timestamp);&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;framec--frameh&#34;&gt;Frame.c &amp;amp; Frame.h&lt;/h2&gt;
&lt;p&gt;重点理解的变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cv::Mat mTcw 相机姿态 世界坐标系到相机坐标系的变换矩阵&lt;/li&gt;
&lt;li&gt;cv::Mat Tcw  相机姿态&lt;/li&gt;
&lt;li&gt;cv::Mat mK 标定矩阵&lt;/li&gt;
&lt;li&gt;cv::Mat mDistCoef 失真矩阵参数&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/slam/" term="SLAM" label="SLAM" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Raspberry记录</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/raspberry%E8%AE%B0%E5%BD%95/" />
            <id>https://chenbokaix250.github.io/tech/raspberry%E8%AE%B0%E5%BD%95/</id>
            <updated>2020-08-11T11:20:27&#43;08:00</updated>
            <published>2020-07-01T14:53:26&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Paspberry安装指针 part1 系统安装 1.格式化 --SDFormatter 2.写镜像 --Disk Image 3.在boot下添加文……</summary>
            
                <content type="html">&lt;h1 id=&#34;paspberry安装指针&#34;&gt;Paspberry安装指针&lt;/h1&gt;
&lt;h2 id=&#34;part1-系统安装&#34;&gt;part1 系统安装&lt;/h2&gt;
&lt;h3 id=&#34;1格式化&#34;&gt;1.格式化&lt;/h3&gt;
&lt;p&gt;--SDFormatter&lt;/p&gt;
&lt;h3 id=&#34;2写镜像&#34;&gt;2.写镜像&lt;/h3&gt;
&lt;p&gt;--Disk Image&lt;/p&gt;
&lt;h3 id=&#34;3在boot下添加文件名为ssh的文件无后缀&#34;&gt;3.在boot下添加文件名为SSH的文件（无后缀）&lt;/h3&gt;
&lt;h3 id=&#34;4网线电源至少5v-1a&#34;&gt;4.网线+电源（至少5V 1A）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;官方建议2A，但1A也可以，若使用1A，请在后面的编译环节使用单线程&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-putty连接-或者使用sshmac连接&#34;&gt;5. Putty连接 或者使用ssh（mac）连接&lt;/h3&gt;
&lt;h3 id=&#34;6改源apt-get&#34;&gt;6.改源（apt-get）&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：
deb http://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os/raspbian/ stretch main non-free contrib rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os/raspbian/ stretch main non-free contrib rpi

# 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：
deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：
树莓派目前的架构分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arm64&lt;/li&gt;
&lt;li&gt;armhf
版本有：&lt;/li&gt;
&lt;li&gt;wheezy&lt;/li&gt;
&lt;li&gt;jessie&lt;/li&gt;
&lt;li&gt;stretch&lt;/li&gt;
&lt;li&gt;buster&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7改软件源pypi&#34;&gt;7.改软件源（pypi）&lt;/h3&gt;
&lt;p&gt;pypi镜像使用 分两种&lt;/p&gt;
&lt;h4 id=&#34;临时使用&#34;&gt;临时使用&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，simple 不能少, 是 https 而不是 http&lt;/p&gt;
&lt;h4 id=&#34;设为默认&#34;&gt;设为默认&lt;/h4&gt;
&lt;p&gt;升级 pip 到最新的版本 (&amp;gt;=10.0.0) 后进行配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install pip -U
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以通过镜像站来升级pip&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;电脑 利用 VNC连接到树莓派&lt;/p&gt;
&lt;p&gt;树莓派中利用&lt;code&gt;su&lt;/code&gt;获取root&lt;/p&gt;
&lt;p&gt;打开文件/etc/init.d/tightvncserver并且编辑，输入下面命令，结果如下图所示：
&lt;code&gt;sudo nano /etc/init.d/tightvncserver&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#!/bin/sh
### BEGIN INIT INFO
# Provides: tightvncserver
# Required-Start: $syslog $remote_fs $network
# Required-Stop: $syslog $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Starts VNC Server on system start.
# Description: Starts tight VNC Server. Script written by James Swineson.
### END INIT INFO
# /etc/init.d/tightvncserver
VNCUSER=&#39;pi&#39;
case &amp;quot;$1&amp;quot; in
        start)
                su $VNCUSER -c &#39;/usr/bin/tightvncserver :1&#39;
                echo &amp;quot;Starting TightVNC Server for $VNCUSER&amp;quot;
        ;;
        stop)
                pkill Xtightvnc
                echo &amp;quot;TightVNC Server stopped&amp;quot;
        ;;
        *)
                echo &amp;quot;Usage: /etc/init.d/tightvncserver {start|stop}&amp;quot;
                exit 1
        ;;
esac
exit 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果没有 需要安装 VNC&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        sudo apt-get install tightvncserver

        tightvncpasswd(设置密码）

        tightvncserver（启动）
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id=&#34;9连接到无线网络可选&#34;&gt;9.连接到无线网络(可选)&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;part2-tensorflow安装&#34;&gt;part2 TensorFlow安装&lt;/h2&gt;
&lt;h3 id=&#34;10换默认python版本改py3&#34;&gt;10.换默认python版本(改py3)&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
sudo rm -rf /usr/bin/python  
sudo ln -s /usr/bin/python3.5 /usr/bin/python 

# 这样python命令就进入python3.5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;11安装tensorflow&#34;&gt;11.安装TensorFlow&lt;/h3&gt;
&lt;p&gt;安装时,会默认在 tsinghua节点下安装 但是 由于有些库比较冷门 导致会跳转到piwheel节点下载 速度会很慢&lt;/p&gt;
&lt;p&gt;可以通过piwheel的连接 下载离线文件 在树莓派 单独安装&lt;/p&gt;
&lt;p&gt;然后一定要关闭terminal&lt;/p&gt;
&lt;p&gt;重新打开 运行 TensorFlow安装&lt;/p&gt;
&lt;h3 id=&#34;12安装atlas&#34;&gt;12、安装atlas&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    sudo apt-get install libatlas-base-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13安装pillow&#34;&gt;13、安装pillow&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    sudo pip3 install pillow
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14安装matplotlib&#34;&gt;14、安装matplotlib&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    sudo pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15测试tensorflow正常通过&#34;&gt;15.测试TensorFlow正常通过&lt;/h3&gt;
&lt;h2 id=&#34;part3-object-detection-api-安装&#34;&gt;Part3: Object Detection API 安装&lt;/h2&gt;
&lt;h3 id=&#34;16protobuf-下载&#34;&gt;16.protobuf 下载&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;https://github.com/protocolbuffers/protobuf/releases&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选择 protobuf-all-3.6.1.tar.gz         &lt;br&gt;
&lt;strong&gt;可能与这里不同，但必须是-all-，一般是第一个&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;17protobuf-安装&#34;&gt;17.protobuf 安装&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd home/pi/Downloads

        tar xvfz protobuf-all-3.6.1.tar.gz                #可能不同

        cd protobuf-3.6.1                                 #可能不同
        
        ./configure             # 感谢@时间发货几十块  指出的问题
        
        sudo make –j 4                 

                # 有风扇就用4个线程，没有就2-3个； 

                # 1A电源的建议使用  “sudo make” ，以免卡死

        sudo make install

        sudo ldconfig # refresh shared library cache.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装时间比较长 大概需要半小时&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/raspberry/" term="raspberry" label="raspberry" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">深入理解图优化</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%9B%BE%E4%BC%98%E5%8C%96/" />
            <id>https://chenbokaix250.github.io/tech/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%9B%BE%E4%BC%98%E5%8C%96/</id>
            <updated>2020-06-20T11:41:38&#43;08:00</updated>
            <published>2020-06-19T16:59:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">深入理解图优化与g2o slam中的主流优化方法——图优化（graph-based op……</summary>
            
                <content type="html">&lt;h1 id=&#34;深入理解图优化与g2o&#34;&gt;深入理解图优化与g2o&lt;/h1&gt;
&lt;p&gt;slam中的主流优化方法——图优化（graph-based optimization）&lt;/p&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;p&gt;图优化本质上是一个优化问题，所以我们先来看优化问题是什么。&lt;/p&gt;
&lt;p&gt;优化问题有三个最重要的因素：目标函数、优化变量、优化约束。一个简单的优化问题可以描述如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecogs.com/eqnedit.php?latex=\min_{x}&amp;space;F(x)&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?\min_{x}&amp;space;F(x)&#34; title=&#34;\min_{x} F(x)&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中𝑥为优化变量，而𝐹(𝑥)为优化函数。此问题称为无约束优化问题，因为我们没有给出任何约束形式。由于slam中优化问题多为无约束优化，所以我们着重介绍无约束的形式。&lt;/p&gt;
&lt;p&gt;　　当𝐹(𝑥)有一些特殊性质时，对应的优化问题也可以用一些特殊的解法。例如，𝐹(𝑥)为一个线性函数时，则为线性优化问题（不过线性优化问题通常在有约束情形下讨论）。反之则为非线性优化。对于无约束的非线性优化，如果我们知道它梯度的解析形式，就能直接求那些梯度为零的点，来解决这个优化：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecogs.com/eqnedit.php?latex=\frac{\mathrm{d}&amp;space;F}{\mathrm{d}&amp;space;x}&amp;space;=&amp;space;0&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?\frac{\mathrm{d}&amp;space;F}{\mathrm{d}&amp;space;x}&amp;space;=&amp;space;0&#34; title=&#34;\frac{\mathrm{d} F}{\mathrm{d} x} = 0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;梯度为零的地方可能是函数的极大值、极小值或者鞍点。由于现在𝐹(𝑥)的形式不确定，我们只好遍历所有的极值点，找到最小的作为最优解。&lt;/p&gt;
&lt;p&gt;　　但是我们为什么不这样用呢？因为很多时候𝐹(𝑥)的形式太复杂，导致我们没法写出导数的解析形式，或者难以求解导数为零的方程。因此，多数时候我们使用迭代方式求解。从一个初值𝑥0出发，不断地导致当前值附近的，能使目标函数下降的方式（反向梯度），然后沿着梯度方向走出一步，从而使得函数值下降一点。这样反复迭代，理论上对于任何函数，都能找到一个极小值点。&lt;/p&gt;
&lt;p&gt;　　迭代的策略主要体现在如何选择下降方向，以及如何选择步长两个方面。主要有 Gauss-Newton （GN）法和 Levenberg-Marquardt （LM）法两种，它们的细节可以在维基上找到，我们不细说。请理解它们主要在迭代策略上有所不同，但是寻找梯度并迭代则是一样的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;图优化&#34;&gt;图优化&lt;/h2&gt;
&lt;p&gt;所谓的图优化，就是把一个常规的优化问题，以图（Graph）的形式来表述。
图是由顶点（Vertex）和边（Edge）组成的结构，而图论则是研究图的理论。我们记一个图为𝐺={𝑉,𝐸}，其中𝑉为顶点集，𝐸为边集。&lt;/p&gt;
&lt;p&gt;顶点没什么可说的，想象成普通的点即可。&lt;/p&gt;
&lt;p&gt;边是什么呢？一条边连接着若干个顶点，表示顶点之间的一种关系。边可以是有向的或是无向的，对应的图称为有向图或无向图。边也可以连接一个顶点（Unary Edge，一元边）、两个顶点（Binary Edge，二元边）或多个顶点（Hyper Edge，多元边）。最常见的边连接两个顶点。当一个图中存在连接两个以上顶点的边时，称这个图为超图（Hyper Graph）。而SLAM问题就可以表示成一个超图（在不引起歧义的情况下，后文直接以图指代超图）。&lt;/p&gt;
&lt;h3 id=&#34;怎么把slam问题表示成图呢&#34;&gt;怎么把SLAM问题表示成图呢？&lt;/h3&gt;
&lt;p&gt;SLAM的核心是根据已有的观测数据，计算机器人的运动轨迹和地图。假设在时刻𝑘，机器人在位置𝑥𝑘处，用传感器进行了一次观测，得到了数据𝑧𝑘。传感器的观测方程为：&lt;/p&gt;
&lt;p&gt;𝑧𝑘=ℎ(𝑥𝑘)&lt;/p&gt;
&lt;p&gt;由于误差的存在，𝑧𝑘不可能精确地等于ℎ(𝑥𝑘)，于是就有了误差：&lt;/p&gt;
&lt;p&gt;𝑒𝑘=𝑧𝑘−ℎ(𝑥𝑘)&lt;/p&gt;
&lt;p&gt;那么，如果我们以𝑥𝑘为优化变量，以min𝑥𝐹𝑘(𝑥𝑘)=‖𝑒𝑘‖为目标函数，就可以求得𝑥𝑘的估计值，进而得到我们想要的东西了。这实际上就是用优化来求解SLAM的思路。&lt;/p&gt;
&lt;p&gt;优化变量𝑥𝑘，观测方程𝑧𝑘=ℎ(𝑥𝑘)&lt;/p&gt;
&lt;p&gt;取决于我们的参数化（parameterazation）。𝑥可以是一个机器人的Pose（6自由度下为 4×4的变换矩阵𝐓 或者 3自由度下的位置与转角[𝑥,𝑦,𝜃]，也可以是一个空间点（三维空间的[𝑥,𝑦,𝑧]或二维空间的[𝑥,𝑦]）。相应的，观测方程也有很多形式，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器人两个Pose之间的变换；&lt;/li&gt;
&lt;li&gt;机器人在某个Pose处用激光测量到了某个空间点，得到了它离自己的距离与角度；&lt;/li&gt;
&lt;li&gt;机器人在某个Pose处用相机观测到了某个空间点，得到了它的像素坐标；
　　
同样，它们的具体形式很多样化，这允许我们在讨论slam问题时，不局限于某种特定的传感器或姿态表达方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在图中，以顶点表示优化变量，以边表示观测方程。由于边可以连接一个或多个顶点，所以我们把它的形式写成更广义的 𝑧𝑘=ℎ(𝑥𝑘1,𝑥𝑘2,…),以表示不限制顶点数量的意思。对于刚才提到的三种观测方程，顶点和边是什么形式呢？&lt;/p&gt;
&lt;p&gt;机器人两个Pose之间的变换；——一条Binary Edge（二元边），顶点为两个pose，边的方程为𝑇1=Δ𝑇⋅𝑇2。
机器人在某个Pose处用激光测量到了某个空间点，得到了它离自己的距离与角度；——Binary Edge，顶点为一个2D Pose：[𝑥,𝑦,𝜃]𝑇和一个Point：[𝜆𝑥,𝜆𝑦]𝑇，观测数据是距离𝑟和角度𝑏，那么观测方程为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecogs.com/eqnedit.php?latex=\begin{bmatrix}&amp;space;r\\&amp;space;b&amp;space;\end{bmatrix}&amp;space;=&amp;space;\begin{bmatrix}&amp;space;\sqrt{\left&amp;space;(&amp;space;\lambda&amp;space;_{x}&amp;space;-x&amp;space;\right&amp;space;)^{2}&amp;space;&amp;plus;&amp;space;\left&amp;space;(&amp;space;\lambda&amp;space;_{y}&amp;space;-y&amp;space;\right&amp;space;)^{2}}\\&amp;space;tan^{-1}\left&amp;space;(&amp;space;\frac{\lambda&amp;space;_{y}&amp;space;-y&amp;space;}{\lambda&amp;space;_{x}&amp;space;-x}&amp;space;\right&amp;space;)&amp;space;-&amp;space;\theta&amp;space;\end{bmatrix}&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?\begin{bmatrix}&amp;space;r\\&amp;space;b&amp;space;\end{bmatrix}&amp;space;=&amp;space;\begin{bmatrix}&amp;space;\sqrt{\left&amp;space;(&amp;space;\lambda&amp;space;_{x}&amp;space;-x&amp;space;\right&amp;space;)^{2}&amp;space;&amp;plus;&amp;space;\left&amp;space;(&amp;space;\lambda&amp;space;_{y}&amp;space;-y&amp;space;\right&amp;space;)^{2}}\\&amp;space;tan^{-1}\left&amp;space;(&amp;space;\frac{\lambda&amp;space;_{y}&amp;space;-y&amp;space;}{\lambda&amp;space;_{x}&amp;space;-x}&amp;space;\right&amp;space;)&amp;space;-&amp;space;\theta&amp;space;\end{bmatrix}&#34; title=&#34;\begin{bmatrix} r\\ b \end{bmatrix} = \begin{bmatrix} \sqrt{\left ( \lambda _{x} -x \right )^{2} + \left ( \lambda _{y} -y \right )^{2}}\\ tan^{-1}\left ( \frac{\lambda _{y} -y }{\lambda _{x} -x} \right ) - \theta \end{bmatrix}&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;机器人在某个Pose处用相机观测到了某个空间点，得到了它的像素坐标；——Binary Edge，顶点为一个3D Pose：𝑇和一个空间点𝐱=[𝑥,𝑦,𝑧]𝑇，观测数据为像素坐标𝑧=[𝑢,𝑣]𝑇。那么观测方程为：
𝑧=𝐶(𝑅𝐱+𝑡)(6)&lt;/p&gt;
&lt;p&gt;𝐶为相机内参，𝑅,𝑡为旋转和平移。&lt;/p&gt;
&lt;p&gt;举这些例子，是为了让读者更好地理解顶点和边是什么东西。由于机器人可能使用各种传感器，故我们不限制顶点和边的参数化之后的样子。比如我（丧心病狂地在小萝卜身上）既加了激光，也用相机，还用了IMU，轮式编码器，超声波等各种传感器来做slam。为了求解整个问题，我的图中就会有各种各样的顶点和边。但是不管如何，都是可以用图来优化的。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/slam/" term="SLAM" label="SLAM" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C&#43;&#43;并发</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;%E5%B9%B6%E5%8F%91/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;%E5%B9%B6%E5%8F%91/</id>
            <updated>2020-06-18T19:18:27&#43;08:00</updated>
            <published>2020-06-18T19:04:34&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C++11 并发指南 与 C++11 多线程相关的头文件 C++11 新标准中引入了四个头文件来支持多线程编程，他们分别……</summary>
            
                <content type="html">&lt;h1 id=&#34;c11-并发指南&#34;&gt;C++11 并发指南&lt;/h1&gt;
&lt;h2 id=&#34;与-c11-多线程相关的头文件&#34;&gt;与 C++11 多线程相关的头文件&lt;/h2&gt;
&lt;p&gt;C++11 新标准中引入了四个头文件来支持多线程编程，他们分别是&lt;atomic&gt; ,&lt;thread&gt;,&lt;mutex&gt;,&amp;lt;condition_variable&amp;gt;和&lt;future&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;atomic&gt;：该头文主要声明了两个类, std::atomic 和 std::atomic_flag，另外还声明了一套 C 风格的原子类型和与 C 兼容的原子操作的函数。&lt;/li&gt;
&lt;li&gt;&lt;thread&gt;：该头文件主要声明了 std::thread 类，另外 std::this_thread 命名空间也在该头文件中。&lt;/li&gt;
&lt;li&gt;&lt;mutex&gt;：该头文件主要声明了与互斥量(mutex)相关的类，包括 std::mutex 系列类，std::lock_guard, std::unique_lock, 以及其他的类型和函数。&lt;/li&gt;
&lt;li&gt;&amp;lt;condition_variable&amp;gt;：该头文件主要声明了与条件变量相关的类，包括 std::condition_variable 和 std::condition_variable_any。&lt;/li&gt;
&lt;li&gt;&lt;future&gt;：该头文件主要声明了 std::promise, std::package_task 两个 Provider 类，以及 std::future 和 std::shared_future 两个 Future 类，另外还有一些与之相关的类型和函数，std::async() 函数就声明在此头文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
void thread_task(){
    std::cout&amp;lt;&amp;lt;&amp;quot;hello thread&amp;quot;&amp;lt;&amp;lt;std::endl;
}

int main(int argc,const char *argv[])
{
    std::thread t(thread_task);
    t.join();

    return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;std::thread 在 &lt;thread&gt; 头文件中声明，因此使用 std::thread 时需要包含 &lt;thread&gt; 头文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;std::thread 构造&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1). 默认构造函数，创建一个空的 thread 执行对象。&lt;/p&gt;
&lt;p&gt;(2). 初始化构造函数，创建一个 thread对象，该 thread对象可被joinable，新产生的线程会调用 fn 函数，该函数的参数由 args 给出。&lt;/p&gt;
&lt;p&gt;(3). 拷贝构造函数(被禁用)，意味着 thread 不可被拷贝构造。&lt;/p&gt;
&lt;p&gt;(4). move 构造函数，move 构造函数，调用成功之后 x 不代表任何 thread 执行对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;move赋值操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1). move 赋值操作，如果当前对象不可 joinable，需要传递一个右值引用(rhs)给 move 赋值操作；如果当前对象可被 joinable，则 terminate() 报错。&lt;/p&gt;
&lt;p&gt;(2). 拷贝赋值操作被禁用，thread 对象不可被拷贝。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

#include &amp;lt;chrono&amp;gt;    // std::chrono::seconds
#include &amp;lt;iostream&amp;gt;  // std::cout
#include &amp;lt;thread&amp;gt;    // std::thread, std::this_thread::sleep_for

void thread_task(int n) {
    std::this_thread::sleep_for(std::chrono::seconds(n));
    std::cout &amp;lt;&amp;lt; &amp;quot;hello thread &amp;quot;
        &amp;lt;&amp;lt; std::this_thread::get_id()
        &amp;lt;&amp;lt; &amp;quot; paused &amp;quot; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot; seconds&amp;quot; &amp;lt;&amp;lt; std::endl;
}

/*
 * ===  FUNCTION  =========================================================
 *         Name:  main
 *  Description:  program entry routine.
 * ========================================================================
 */
int main(int argc, const char *argv[])
{
    std::thread threads[5];
    std::cout &amp;lt;&amp;lt; &amp;quot;Spawning 5 threads...\n&amp;quot;;
    for (int i = 0; i &amp;lt; 5; i++) {
        threads[i] = std::thread(thread_task, i + 1);
    }
    std::cout &amp;lt;&amp;lt; &amp;quot;Done spawning threads! Now wait for them to join\n&amp;quot;;
    for (auto&amp;amp; t: threads) {
        t.join();
    }
    std::cout &amp;lt;&amp;lt; &amp;quot;All threads joined.\n&amp;quot;;

    return EXIT_SUCCESS;
}  /* ----------  end of function main  ---------- */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;其他成员函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gei_id 获取线程ID&lt;/li&gt;
&lt;li&gt;joinable 检查线程是否可被join&lt;/li&gt;
&lt;li&gt;detach Detach线程&lt;/li&gt;
&lt;li&gt;swap Swap线程&lt;/li&gt;
&lt;li&gt;native_handle 返回native_handle&lt;/li&gt;
&lt;li&gt;hardware_concurrency[static] 检测硬件并发特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stdmutex-详解&#34;&gt;std::mutex 详解&lt;/h2&gt;
&lt;p&gt;Mutex又称互斥量,c++11中与Mutex相关的类(包括锁类型)和函数都声明在&lt;mutex&gt;头文件中,所以如果你需要使用 std::mutex，就必须包含 &lt;mutex&gt; 头文件。&lt;/p&gt;
&lt;h3 id=&#34;mutex头文件介绍&#34;&gt;&lt;mutex&gt;头文件介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Mutex系列类(四种)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;std::mutex,最基本的Mutex类&lt;/li&gt;
&lt;li&gt;std::recursive_mutex,递归Mutex类&lt;/li&gt;
&lt;li&gt;std::time_mutex,定义Mutex类&lt;/li&gt;
&lt;li&gt;std::recursive_timed_mutex,定时递归Mutex类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lock类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;std::lock_guaed,方便线程对互斥量上锁&lt;/li&gt;
&lt;li&gt;std::unique_lock,方便线程对互斥量上锁,提供更好的上锁和解锁控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;std::once_flag&lt;/li&gt;
&lt;li&gt;std::adopt_lock_t&lt;/li&gt;
&lt;li&gt;std::defer_lock_t&lt;/li&gt;
&lt;li&gt;std::try_to_lock_t&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;std::try_lock，尝试同时对多个互斥量上锁。&lt;/li&gt;
&lt;li&gt;std::lock，可以同时对多个互斥量上锁。&lt;/li&gt;
&lt;li&gt;std::call_once，如果多个线程需要同时调用某个函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;call_once 可以保证多个线程对该函数只调用一次。&lt;/p&gt;
&lt;h3 id=&#34;stdmutex介绍&#34;&gt;std::mutex介绍&lt;/h3&gt;
&lt;p&gt;std::mutex 是C++11 中最基本的互斥量，std::mutex 对象提供了独占所有权的特性——即不支持递归地对 std::mutex 对象上锁，而 std::recursive_lock 则可以递归地对互斥量对象上锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;std::mutex 的成员函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数 std::mutex不允许拷贝构造，也不允许 move 拷贝，最初产生的 mutex 对象是处于 unlocked 状态的。&lt;/li&gt;
&lt;li&gt;lock()，调用线程将锁住该互斥量。线程调用该函数会发生下面 3 种情况：&lt;/li&gt;
&lt;li&gt;(1). 如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁。&lt;/li&gt;
&lt;li&gt;(2). 如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。&lt;/li&gt;
&lt;li&gt;(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。&lt;/li&gt;
&lt;li&gt;unlock()， 解锁，释放对互斥量的所有权。&lt;/li&gt;
&lt;li&gt;try_lock()，尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞。线程调用该函数也会出现下面 3 种情况，&lt;/li&gt;
&lt;li&gt;(1). 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量。&lt;/li&gt;
&lt;li&gt;(2). 如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉。&lt;/li&gt;
&lt;li&gt;(3). 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;std::recursize_mutex介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;std::recursive_mutex 与 std::mutex 一样，也是一种可以被上锁的对象，但是和 std::mutex 不同的是，std::recursive_mutex 允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，std::recursive_mutex 释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，可理解为 lock() 次数和 unlock() 次数相同，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;std::time_mutex 介绍&lt;/strong&gt;
std::time_mutex 比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until()。&lt;/p&gt;
&lt;p&gt;try_lock_for 函数接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与 std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回 false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。&lt;/p&gt;
&lt;p&gt;try_lock_until 函数则接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;std::unique_lock&lt;/strong&gt;
类 unique_lock 是通用互斥包装器，允许延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用。
unique_lock比lock_guard使用更加灵活，功能更加强大。
使用unique_lock需要付出更多的时间、性能成本。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;c-线程-join和detach&#34;&gt;c++ 线程 join和detach&lt;/h2&gt;
&lt;p&gt;(1）当使用join()函数时，主调线程(main函数里有一个主调线程)阻塞，等待被调线程终止，然后主调线程回收被调线程资源，并继续运行；上面这段话的意思就是，使用join(),线程运行完,main函数才能结束。&lt;/p&gt;
&lt;p&gt;（2）当使用detach()函数时，主调线程继续运行，被调线程驻留后台运行，主调线程无法再取得该被调线程的控制权。当主调线程结束时，由运行时库负责清理与被调线程相关的资源。上面这段话的意思就是，使用detach(),main函数不用等待线程结束才能结束。有时候线程还没运行完，main函数就已经结束了。&lt;/p&gt;
&lt;p&gt;**&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">第二个月跑步</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%9C%88%E8%B7%91%E6%AD%A5/" />
            <id>https://chenbokaix250.github.io/life/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%9C%88%E8%B7%91%E6%AD%A5/</id>
            <updated>2020-06-03T16:25:51&#43;08:00</updated>
            <published>2020-06-03T16:09:07&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">第二个月比较遗憾: 没有完成一次10公里 没有完成150公里 甚至没有完成100公里 偷懒 |……</summary>
            
                <content type="html">&lt;p&gt;第二个月比较遗憾:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有完成一次10公里&lt;/li&gt;
&lt;li&gt;没有完成150公里&lt;/li&gt;
&lt;li&gt;甚至没有完成100公里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;偷懒&lt;/strong&gt; | &lt;strong&gt;天气炎热&lt;/strong&gt; | &lt;strong&gt;媳妇加班&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能是没有达到目标的直接原因&lt;/p&gt;
&lt;p&gt;这个月跑步的截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/06/03/FqdjvfXybRA5N2G.jpg&#34; alt=&#34;IMG_0769.JPG&#34;&gt;&lt;/p&gt;
&lt;p&gt;工作上因为 &lt;strong&gt;疫情 卫生  安全  保密&lt;/strong&gt; 出现了诸多的不顺利 但是依然希望能挺过去&lt;/p&gt;
&lt;h3 id=&#34;这个月唯一的好消息-目前体重-77kg-欣慰&#34;&gt;这个月唯一的好消息 目前体重 77kg (欣慰)&lt;/h3&gt;
&lt;h3 id=&#34;6月的目标订的低一点&#34;&gt;6月的目标订的低一点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;完成100公里&lt;/li&gt;
&lt;li&gt;75kg↓&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;留下一首诗 表达生活的无奈&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/06/03/yebFcmnPI2vtZzA.jpg&#34; alt=&#34;New_England_Holocaust_Memorial_Stone.JPG&#34;&gt;&lt;/p&gt;
&lt;p&gt;起初，纳粹抓共产党人的时候，
我沉默了，因为我不是共产党人。&lt;/p&gt;
&lt;p&gt;当他们犹太人的时候，
我沉默了，因为我不是犹太人。&lt;/p&gt;
&lt;p&gt;当他们抓工会成员的时候，
我沉默了，因为我不是工会成员。&lt;/p&gt;
&lt;p&gt;当他们抓天主教人的时候，
我沉默了，因为我不是天主教人。&lt;/p&gt;
&lt;p&gt;最后当他们来抓我时，
再也没有人站起来为我说话了。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/%E8%B7%91%E6%AD%A5/" term="跑步" label="跑步" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Eigen中的类实现</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/eigen%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%AE%9E%E7%8E%B0/" />
            <id>https://chenbokaix250.github.io/tech/eigen%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%AE%9E%E7%8E%B0/</id>
            <updated>2020-06-03T16:05:05&#43;08:00</updated>
            <published>2020-06-03T15:57:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">eigen 中四元数、欧拉角、旋转矩阵、旋转向量 一、旋转向量 1.0 初始化旋转向量: 旋转角为alph……</summary>
            
                <content type="html">&lt;h1 id=&#34;eigen-中四元数欧拉角旋转矩阵旋转向量&#34;&gt;eigen 中四元数、欧拉角、旋转矩阵、旋转向量&lt;/h1&gt;
&lt;h2 id=&#34;一旋转向量&#34;&gt;一、旋转向量&lt;/h2&gt;
&lt;h3 id=&#34;10-初始化旋转向量&#34;&gt;1.0 初始化旋转向量:&lt;/h3&gt;
&lt;p&gt;旋转角为alpha，旋转轴为(x,y,z)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::AngleAxisd rotation_vector(alpha,Vector3d(x,y,z))&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-旋转向量转旋转矩阵&#34;&gt;1.1 旋转向量转旋转矩阵&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Matrix3d rotation_matrix;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotation_matrix=rotation_vector.matrix();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::Matrix3d rotation_matrix;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotation_matrix=rotation_vector.toRotationMatrix();&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-旋转向量转欧拉角z-y-x即rpy&#34;&gt;1.2 旋转向量转欧拉角(Z-Y-X，即RPY)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Vector3d eulerAngle=rotation_vector.matrix().eulerAngles(2,1,0);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;13-旋转向量转四元数&#34;&gt;1.3 旋转向量转四元数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Quaterniond quaternion(rotation_vector);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::Quaterniond quaternion;Quaterniond quaternion;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::Quaterniond quaternion;quaternion=rotation_vector;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二旋转矩阵&#34;&gt;二、旋转矩阵&lt;/h2&gt;
&lt;h3 id=&#34;20-初始化旋转矩阵&#34;&gt;2.0 初始化旋转矩阵&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Matrix3d rotation_matrix;&lt;/code&gt;
&lt;code&gt;rotation_matrix&amp;lt;&amp;lt;x_00,x_01,x_02,x_10,x_11,x_12,x_20,x_21,x_22;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-旋转矩阵转旋转向量&#34;&gt;2.1 旋转矩阵转旋转向量&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::AngleAxisd rotation_vector(rotation_matrix);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::AngleAxisd rotation_vector;&lt;/code&gt;
&lt;code&gt;rotation_vector=rotation_matrix;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::AngleAxisd rotation_vector;&lt;/code&gt;
&lt;code&gt;rotation_vector.fromRotationMatrix(rotation_matrix);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-旋转矩阵转欧拉角z-y-x即rpy&#34;&gt;2.2 旋转矩阵转欧拉角(Z-Y-X，即RPY)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Vector3d eulerAngle=rotation_matrix.eulerAngles(2,1,0);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-旋转矩阵转四元数&#34;&gt;2.3 旋转矩阵转四元数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Quaterniond quaternion(rotation_matrix);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::Quaterniond quaternion;quaternion=rotation_matrix;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;三欧拉角&#34;&gt;三、欧拉角&lt;/h2&gt;
&lt;h3 id=&#34;30-初始化欧拉角z-y-x即rpy&#34;&gt;3.0 初始化欧拉角(Z-Y-X，即RPY)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Vector3d eulerAngle(yaw,pitch,roll);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;31-欧拉角转旋转向量&#34;&gt;3.1 欧拉角转旋转向量&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Eigen::AngleAxisd rollAngle(AngleAxisd(eulerAngle(2),Vector3d::UnitX()));
Eigen::AngleAxisd pitchAngle(AngleAxisd(eulerAngle(1),Vector3d::UnitY()));
Eigen::AngleAxisd yawAngle(AngleAxisd(eulerAngle(0),Vector3d::UnitZ())); 
Eigen::AngleAxisd rotation_vector;rotation_vector=yawAngle*pitchAngle*rollAngle;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;32-欧拉角转旋转矩阵&#34;&gt;3.2 欧拉角转旋转矩阵&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Eigen::AngleAxisd rollAngle(AngleAxisd(eulerAngle(2),Vector3d::UnitX()));
Eigen::AngleAxisd pitchAngle(AngleAxisd(eulerAngle(1),Vector3d::UnitY()));
Eigen::AngleAxisd yawAngle(AngleAxisd(eulerAngle(0),Vector3d::UnitZ())); 
Eigen::Matrix3d rotation_matrix;rotation_matrix=yawAngle*pitchAngle*rollAngle;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-欧拉角转四元数&#34;&gt;3.3 欧拉角转四元数&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
Eigen::AngleAxisd rollAngle(AngleAxisd(eulerAngle(2),Vector3d::UnitX()));
Eigen::AngleAxisd pitchAngle(AngleAxisd(eulerAngle(1),Vector3d::UnitY()));
Eigen::AngleAxisd yawAngle(AngleAxisd(eulerAngle(0),Vector3d::UnitZ())); 
Eigen::Quaterniond quaternion;quaternion=yawAngle*pitchAngle*rollAngle;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;四四元数&#34;&gt;四、四元数&lt;/h2&gt;
&lt;h3 id=&#34;40-初始化四元数&#34;&gt;4.0 初始化四元数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Quaterniond quaternion(w,x,y,z);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;41-四元数转旋转向量&#34;&gt;4.1 四元数转旋转向量&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::AngleAxisd rotation_vector(quaternion);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::AngleAxisd rotation_vector;rotation_vector=quaternion;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-四元数转旋转矩阵&#34;&gt;4.2 四元数转旋转矩阵&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Matrix3d rotation_matrix;rotation_matrix=quaternion.matrix();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eigen::Matrix3d rotation_matrix;rotation_matrix=quaternion.toRotationMatrix();&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;44-四元数转欧拉角z-y-x即rpy&#34;&gt;4.4 四元数转欧拉角(Z-Y-X，即RPY)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Eigen::Vector3d eulerAngle=quaternion.matrix().eulerAngles(2,1,0);&lt;/code&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c-/" term="c&#43;&#43;" label="c&#43;&#43;" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">重要的算法</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E9%87%8D%E8%A6%81%E7%9A%84%E7%AE%97%E6%B3%95/" />
            <id>https://chenbokaix250.github.io/tech/%E9%87%8D%E8%A6%81%E7%9A%84%E7%AE%97%E6%B3%95/</id>
            <updated>2020-06-03T16:38:28&#43;08:00</updated>
            <published>2020-06-01T18:51:40&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">需要掌握的算法 计算机科学家投票选出最重要的算法(按照英文名称字母顺序排序) 1、A* 搜……</summary>
            
                <content type="html">&lt;h1 id=&#34;需要掌握的算法&#34;&gt;需要掌握的算法&lt;/h1&gt;
&lt;p&gt;计算机科学家投票选出最重要的算法(按照英文名称字母顺序排序)&lt;/p&gt;
&lt;p&gt;1、A* 搜索算法——图形搜索算法，从给定起点到给定终点计算出路径。其中使用了一种启发式的估算，为每个节点估算通过该节点的最佳路径，并以之为各个地点排定次序。算法以得到的次序访问这些节点。因此，A*搜索算法是最佳优先搜索的范例。&lt;/p&gt;
&lt;p&gt;2、集束搜索（又名定向搜索，Beam Search）——最佳优先搜索算法的优化。使用启发式函数评估它检查的每个节点的能力。不过，集束搜索只能在每个深度中发现最前面的m个最符合条件的节点，m是固定数字——集束的宽度。&lt;/p&gt;
&lt;p&gt;3、二分查找（Binary Search）——在线性数组中找特定值的算法，每个步骤去掉一半不符合要求的数据。&lt;/p&gt;
&lt;p&gt;4、分支界定算法（Branch and Bound）——在多种最优化问题中寻找特定最优化解决方案的算法，特别是针对离散、组合的最优化。&lt;/p&gt;
&lt;p&gt;5、Buchberger算法——一种数学算法，可将其视为针对单变量最大公约数求解的欧几里得算法和线性系统中高斯消元法的泛化。&lt;/p&gt;
&lt;p&gt;6、数据压缩——采取特定编码方案，使用更少的字节数（或是其他信息承载单元）对信息编码的过程，又叫来源编码。&lt;/p&gt;
&lt;p&gt;7、Diffie-Hellman密钥交换算法——一种加密协议，允许双方在事先不了解对方的情况下，在不安全的通信信道中，共同建立共享密钥。该密钥以后可与一个对称密码一起，加密后续通讯。&lt;/p&gt;
&lt;p&gt;8、Dijkstra算法——针对没有负值权重边的有向图，计算其中的单一起点最短算法。&lt;/p&gt;
&lt;p&gt;9、离散微分算法（Discrete differentiation）&lt;/p&gt;
&lt;p&gt;10、动态规划算法（Dynamic Programming）——展示互相覆盖的子问题和最优子架构算法&lt;/p&gt;
&lt;p&gt;11、欧几里得算法（Euclidean algorithm）——计算两个整数的最大公约数。最古老的算法之一，出现在公元前300前欧几里得的《几何原本》。&lt;/p&gt;
&lt;p&gt;12、期望-最大算法（Expectation-maximization algorithm，又名EM-Training）——在统计计算中，期望-最大算法在概率模型中寻找可能性最大的参数估算值，其中模型依赖于未发现的潜在变量。EM在两个步骤中交替计算，第一步是计算期望，利用对隐藏变量的现有估计值，计算其最大可能估计值；第二步是最大化，最大化在第一步上求得的最大可能值来计算参数的值。&lt;/p&gt;
&lt;p&gt;13、快速傅里叶变换（Fast Fourier transform，FFT）——计算离散的傅里叶变换（DFT）及其反转。该算法应用范围很广，从数字信号处理到解决偏微分方程，到快速计算大整数乘积。&lt;/p&gt;
&lt;p&gt;14、梯度下降（Gradient descent）——一种数学上的最优化算法。&lt;/p&gt;
&lt;p&gt;15、哈希算法（Hashing）&lt;/p&gt;
&lt;p&gt;16、堆排序（Heaps）&lt;/p&gt;
&lt;p&gt;17、Karatsuba乘法——需要完成上千位整数的乘法的系统中使用，比如计算机代数系统和大数程序库，如果使用长乘法，速度太慢。该算法发现于1962年。&lt;/p&gt;
&lt;p&gt;18、LLL算法（Lenstra-Lenstra-Lovasz lattice reduction）——以格规约（lattice）基数为输入，输出短正交向量基数。LLL算法在以下公共密钥加密方法中有大量使用：背包加密系统（knapsack）、有特定设置的RSA加密等等。&lt;/p&gt;
&lt;p&gt;19、最大流量算法（Maximum flow）——该算法试图从一个流量网络中找到最大的流。它优势被定义为找到这样一个流的值。最大流问题可以看作更复杂的网络流问题的特定情况。最大流与网络中的界面有关，这就是最大流-最小截定理（Max-flow min-cut theorem）。Ford-Fulkerson 能找到一个流网络中的最大流。&lt;/p&gt;
&lt;p&gt;20、合并排序（Merge Sort）&lt;/p&gt;
&lt;p&gt;21、牛顿法（Newton&#39;s method）——求非线性方程（组）零点的一种重要的迭代法。&lt;/p&gt;
&lt;p&gt;22、Q-learning学习算法——这是一种通过学习动作值函数（action-value function）完成的强化学习算法，函数采取在给定状态的给定动作，并计算出期望的效用价值，在此后遵循固定的策略。Q-leanring的优势是，在不需要环境模型的情况下，可以对比可采纳行动的期望效用。&lt;/p&gt;
&lt;p&gt;23、两次筛法（Quadratic Sieve）——现代整数因子分解算法，在实践中，是目前已知第二快的此类算法（仅次于数域筛法Number Field Sieve）。对于110位以下的十位整数，它仍是最快的，而且都认为它比数域筛法更简单。&lt;/p&gt;
&lt;p&gt;24、RANSAC——是“RANdom SAmple Consensus”的缩写。该算法根据一系列观察得到的数据，数据中包含异常值，估算一个数学模型的参数值。其基本假设是：数据包含非异化值，也就是能够通过某些模型参数解释的值，异化值就是那些不符合模型的数据点。&lt;/p&gt;
&lt;p&gt;25、RSA——公钥加密算法。首个适用于以签名作为加密的算法。RSA在电商行业中仍大规模使用，大家也相信它有足够安全长度的公钥。&lt;/p&gt;
&lt;p&gt;26、Schönhage-Strassen算法——在数学中，Schönhage-Strassen算法是用来完成大整数的乘法的快速渐近算法。其算法复杂度为：O(N log(N) log(log(N)))，该算法使用了傅里叶变换。&lt;/p&gt;
&lt;p&gt;27、单纯型算法（Simplex Algorithm）——在数学的优化理论中，单纯型算法是常用的技术，用来找到线性规划问题的数值解。线性规划问题包括在一组实变量上的一系列线性不等式组，以及一个等待最大化（或最小化）的固定线性函数。&lt;/p&gt;
&lt;p&gt;28、奇异值分解（Singular value decomposition，简称SVD）——在线性代数中，SVD是重要的实数或复数矩阵的分解方法，在信号处理和统计中有多种应用，比如计算矩阵的伪逆矩阵（以求解最小二乘法问题）、解决超定线性系统（overdetermined linear systems）、矩阵逼近、数值天气预报等等。&lt;/p&gt;
&lt;p&gt;29、求解线性方程组（Solving a system of linear equations）——线性方程组是数学中最古老的问题，它们有很多应用，比如在数字信号处理、线性规划中的估算和预测、数值分析中的非线性问题逼近等等。求解线性方程组，可以使用高斯—约当消去法（Gauss-Jordan elimination），或是柯列斯基分解（ Cholesky decomposition）。&lt;/p&gt;
&lt;p&gt;30、Strukturtensor算法——应用于模式识别领域，为所有像素找出一种计算方法，看看该像素是否处于同质区域（ homogenous region），看看它是否属于边缘，还是是一个顶点。&lt;/p&gt;
&lt;p&gt;31、合并查找算法（Union-find）——给定一组元素，该算法常常用来把这些元素分为多个分离的、彼此不重合的组。不相交集（disjoint-set）的数据结构可以跟踪这样的切分方法。合并查找算法可以在此种数据结构上完成两个有用的操作：查找：判断某特定元素属于哪个组。合并：联合或合并两个组为一个组。&lt;/p&gt;
&lt;p&gt;32、维特比算法（Viterbi algorithm）——寻找隐藏状态最有可能序列的动态规划算法，这种序列被称为维特比路径，其结果是一系列可以观察到的事件，特别是在隐藏的Markov模型中。&lt;/p&gt;
&lt;p&gt;作者：vitu
链接：https://www.zhihu.com/question/23148377/answer/1257923183
来源：知乎&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/%E7%AE%97%E6%B3%95/" term="算法" label="算法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Opencv安装</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/opencv%E5%AE%89%E8%A3%85/" />
            <id>https://chenbokaix250.github.io/tech/opencv%E5%AE%89%E8%A3%85/</id>
            <updated>2020-05-27T18:31:01&#43;08:00</updated>
            <published>2020-05-27T17:06:13&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">linux下openCV3.1 安装过程 准备 1. 更新系统 sudo apt-get update sudo apt-get upgrade 2. 安装底包 sudo apt-get install build-essential sudo……</summary>
            
                <content type="html">&lt;h1 id=&#34;linux下opencv31-安装过程&#34;&gt;linux下openCV3.1 安装过程&lt;/h1&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;h3 id=&#34;1-更新系统&#34;&gt;1. 更新系统&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-安装底包&#34;&gt;2. 安装底包&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install build-essential
sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-下载opencv31&#34;&gt;3. 下载opencv3.1&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#下载主题(Github)&lt;/span&gt;
git clone https://github.com/opencv/opencv.git
&lt;span class=&#34;c1&#34;&gt;#下载扩展包&lt;/span&gt;
git clone https://github.com/opencv/opencv_contrib.git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;h3 id=&#34;4cmake&#34;&gt;4.Cmake&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ~/opencv
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若安装扩展包,则还需要运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cmake -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中会出现&lt;code&gt;ippicv_2019_lnx_intel64_general_20180723.tgz&lt;/code&gt;无法下载导致的错误&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Itseez/opencv_3rdparty/81a676001ca8075ada498583e4166079e5744668/ippicv/ippicv_linux_20151201.tgz&#34;&gt;ippicv下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后将文件放在&lt;code&gt;../opencv-3.2.0/3rdparty/ippicv/downloads/linux-xx/&lt;/code&gt;文件夹下 重新Cmake&lt;/p&gt;
&lt;h3 id=&#34;5build&#34;&gt;5.Build&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;make -j7 # runs 7 jobs in parallel&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;6isntall&#34;&gt;6.isntall&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;C++编译时需添加如下命令，以链接openCV：
&lt;code&gt;pkg-config --cflags --libs opencv&lt;/code&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/opencv/" term="OpenCV" label="OpenCV" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">100 songs of 2008-2017</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/100-songs-of-2008-2017/" />
            <id>https://chenbokaix250.github.io/life/100-songs-of-2008-2017/</id>
            <updated>2020-05-26T16:38:52&#43;08:00</updated>
            <published>2020-05-26T16:26:57&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">十年来全球最热门歌曲 世界榜2008-2017 总榜TOP100 100.Stressed Out —— Twenty One Pilots 99.One More Night ——……</summary>
            
                <content type="html">&lt;h1 id=&#34;十年来全球最热门歌曲-世界榜2008-2017-总榜top100&#34;&gt;十年来全球最热门歌曲 世界榜2008-2017 总榜TOP100&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;100.Stressed Out —— Twenty One Pilots&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;99.One More Night —— Maroon5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;98.Rather Be —— Clean Bandit feat.Jess Glynne&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;97.Whistle —— Flo Rida&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;96.I Knew You Were Touble —— Taylor Swift&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;95.I Took A Pill In Zbiza —— Mike Posner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;94.Stay —— Rihanna feat. Mikky Ekko&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;93.Empire State Of Mind —— Jay-Z feat. Alicia Keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;92.Can&#39;t Feel My Face —— The Weekend&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;91.Mercy —— Duffy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;90.fucy ***** —— David Guetta feat. Akon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;89.The Monster —— Eminem feat. Rihanna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;88.This Is What You Came For ——Calvin Harris feat. Rihanna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;87.Fuck You! —— Gee Lo Green&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;86.7 Years —— Lukas Graham&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;85.Starboy —— The Weekend feat. Daft Punk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;84.Let Me Love You —— DJ Snake feat. Justin Bieber&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;83.Ho Hey —— Lumineers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;82.Blank Space —— Talor Swift&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;81.Bore This Way —— Lady GaGa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;80.Fire Flies —— Owl City&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;79.Sugar —— Maroon5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;78.Airplanes —— B.O.B. feat. Hayley Williams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;77.Set Fire To The Rain —— Adele&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;76.Something Just Like This —— The Chainsmokets &amp;amp; Coldplay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;75.Can&#39;t Hold Us —— Macklemore &amp;amp; Ryan Lewis feat. Ray Dalton&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;74.What Do You Mean? —— Justin Bieber&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;73.love Me Like You Do —— Ellie Goulding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;72.Boom Boom Pow —— Black Eyed Peas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;71.Hey,Soul Sister —— Train&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;70.Radioactive —— Imagine Dragons&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;69.Low —— Flo Rida feat. T-Pain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;68.Scream &amp;amp; Shout —— Will.I.Am. feat. Britney Spears&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;67.So What —— P!nk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;66.Dark Horse —— Katy Perry feat. Juicy.J&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;65.Disturbia —— Rihanna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64.Lean on —— Major Lazer feat. MO &amp;amp; DJ snake&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;63.***y And I Konw It —— LMFAO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;62.On The Floor —— Jennifer Lopaz feat. Pitbull&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;61.Timber —— Pitbull feat. Kesha&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;60.Grenade —— Bruno Mars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;59.Olny Girl (in the world) — Rihanna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;58.Dynamite ——Taio Gruz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;57.Payphone ——  Maroon 5 feat. Wiz Khalifa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;56.4 Minutes —— Madonna feat. Justin Timberlake&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;55.Fire Work —— Katy Perry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;54.Let Her Go —— Passenger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;53.Royals —— Lorde&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;52.We Are Young —— Fun. feat. Janelle Monae&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;51.Just Dance —— Lady GaGa feat. Colby O&#39;Donis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;50.Just Give Me A Reason —— P!nk feat. Nate Ruess&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;49.Hot n&#39;Cold —— Katy Perry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;48.Cherrleader(Felix Jaehe Remix) —— Omi&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;47.Diamonds —— Rihanna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;46.Gangnam Style —— Psy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;45.See You Again —— Wiz Khalifa feat. Charlie Puth&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;44.One Dance —— Drabe feat.Wizkid &amp;amp; Kyla&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;43.Stay With Me —— Sam Smith&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;42.Take Me To Church —— Hozier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;41.Sorry —— Justin Bieber&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;40.I&#39;m Yours —— Jason Mraz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;39.I Kissed A Girl —— Katy Perry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;38.Give Me Everything —— Pirbull feat. Ne-Yo Afrojack &amp;amp; Nayer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;37.California Gurls —— Katy Perry feat. Snovp Dogg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;36.Cheap Thrills —— Sia&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;35.Love Yourself —— Justin Bieber&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;34.Locked Out Of Heaven —— Bruno Mars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;33.Just The Way You Move —— Bruno Mars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32.Shake It Off —— Taylor Swift&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;31.Counting Stars —— One Republic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;30.Bad Romance —— Lady GaGa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;29.All About The Bass —— Meghan Trainor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;28.Love The Way You Lie —— Eminem feat. Rihanna&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;27.We Found Love —— Rihanna feat. Calvin Harris&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;26.Thrift Shop —— Macklemore &amp;amp; Ryan Lewis feat. Wanz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;25.Roar —— Katy Perry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;24.All Of Me —— John Legend&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23.Tik Tok —— Kesha&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;22.Closer —— The Chainsmokers feat. Halsey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;21.Viva La Vida —— Coldplay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20.Someone Like You —— Adele&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.Thinking Out Loud —— Ed Sheeran&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;18.Poker Face —— Lady GaGa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;17.Can&#39;t Stop The Feeling! —— Justin Timberlake&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16.Get Lucky —— Daft Punk feat. Pharrell Williams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;15.Bleeding Love —— Leona Lewis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;14.Moves Like Jagger —— Maroon 5 feat. Christina Aguilera&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;13.Apologize —— Timbaland feat. One Republic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12.Party Pock Anthem —— LMFAO feat.Lauren Bennett &amp;amp; Goon Rock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11.Hello —— Adele&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10.Wake Me Up —— Avicii&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;9.Somebody That Used To Know —— Go Tye feat. Kimbra&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8.Call Me Maybe —— Carly Rae Jepsen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7.Rolling Im The Deep —— Adele&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6.Blurred Lines —— Robin Thicke feat.T.I.&amp;amp; Pharrell Williams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.Despacito —— Luis Fonsi &amp;amp; Daddy Yanbee feat.Justin Bieber&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.I Gotta Feeling —— Black Eyed Peas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.Uptown Funk! —— Mark Ronson feat.Bruno Mars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.Happy —— Pharrell Williams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1.Shape Of You —— Ed Sheeran&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十年经历了很多&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/music/" term="music" label="music" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ROS小结_II</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/ros%E5%B0%8F%E7%BB%93_ii/" />
            <id>https://chenbokaix250.github.io/tech/ros%E5%B0%8F%E7%BB%93_ii/</id>
            <updated>2020-08-11T11:20:14&#43;08:00</updated>
            <published>2020-05-08T17:12:22&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Client Library与roscpp roscpp ROS的C++库，是目前最广泛应用的ROS客户端库，……</summary>
            
                <content type="html">&lt;h1 id=&#34;client-library与roscpp&#34;&gt;Client Library与roscpp&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;roscpp  ROS的C++库，是目前最广泛应用的ROS客户端库，执行效率高&lt;/li&gt;
&lt;li&gt;rospy ROS的Python库，开发效率高，通常用在对运行时间没有太大要求的场合，例如配置、初始化等操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从开发客户端库的角度看，一个客户端库，至少需要能够包括master注册、名称管理、消息收发等功能。这样才能给开发者提供对ROS通信架构进行配置的方法。
整个ROS包括的packages如下，你可以看到roscpp、rospy处于什么位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/pics/ros_pkgs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;roscpp&#34;&gt;roscpp&lt;/h2&gt;
&lt;p&gt;roscpp位于/opt/ros/kinetic之下，用C++实现了ROS通信。在ROS中，C++的代码是通过catkin这个编译系统（扩展的CMake）来进行编译构建的。把roscpp就当作为一个C++的库，我们创建一个CMake工程，在其中include了roscpp等ROS的libraries，这样就可以在工程中使用ROS提供的函数了。&lt;/p&gt;
&lt;p&gt;调用ROS的C++接口，首先就需要&lt;code&gt;#include &amp;lt;ros/ros.h&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;roscpp的主要部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ros::init() : 解析传入的ROS参数，创建node第一步需要用到的函数&lt;/li&gt;
&lt;li&gt;ros::NodeHandle : 和topic、service、param等交互的公共接口&lt;/li&gt;
&lt;li&gt;ros::master : 包含从master查询信息的函数&lt;/li&gt;
&lt;li&gt;ros::this_node：包含查询这个进程(node)的函数&lt;/li&gt;
&lt;li&gt;ros::service：包含查询服务的函数&lt;/li&gt;
&lt;li&gt;ros::param：包含查询参数服务器的函数，而不需要用到NodeHandle&lt;/li&gt;
&lt;li&gt;ros::names：包含处理ROS图资源名称的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上功能可以分为以下几类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialization and Shutdown 初始与关闭&lt;/li&gt;
&lt;li&gt;Topics 话题&lt;/li&gt;
&lt;li&gt;Services 服务&lt;/li&gt;
&lt;li&gt;Parameter Server 参数服务器&lt;/li&gt;
&lt;li&gt;Timers 定时器&lt;/li&gt;
&lt;li&gt;NodeHandles 节点句柄&lt;/li&gt;
&lt;li&gt;Callbacks and Spinning 回调和自旋（或者翻译叫轮询？）&lt;/li&gt;
&lt;li&gt;Logging 日志&lt;/li&gt;
&lt;li&gt;Names and Node Information 名称管理&lt;/li&gt;
&lt;li&gt;Time 时钟&lt;/li&gt;
&lt;li&gt;Exception 异常&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;节点初始-关闭及nodehandle&#34;&gt;节点初始 关闭及NodeHandle&lt;/h2&gt;
&lt;p&gt;当执行一个ROS程序，就被加载到了内存中，就成为了一个进程，在ROS里叫做节点。每一个ROS的节点尽管功能不同，但都有必不可少的一些步骤，比如初始化、销毁，需要通行的场景通常都还需要节点的句柄。&lt;/p&gt;
&lt;h2 id=&#34;初始化节点&#34;&gt;初始化节点&lt;/h2&gt;
&lt;p&gt;对于一个C++写的ROS程序，之所以它区别于普通C++程序，是因为代码中做了两层工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用了ros::init()函数，从而初始化节点的名称和其他信息，一般我们ROS程序一开始都会以这种方式开始。&lt;/li&gt;
&lt;li&gt;创建ros::NodeHandle对象，也就是节点的句柄，它可以用来创建Publisher、Subscriber以及做其他事情。
句柄(Handle)这个概念可以理解为一个“把手”，你握住了门把手，就可以很容易把整扇门拉开，而不必关心门是什么样子。NodeHandle就是对节点资源的描述，有了它你就可以操作这个节点了，比如为程序提供服务、监听某个topic上的消息、访问和修改param等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;关闭节点&#34;&gt;关闭节点&lt;/h2&gt;
&lt;p&gt;要关闭一个节点可以直接在终端上按Ctrl+C，系统会自动触发SIGINT句柄来关闭这个进程。 也可以通过ros::shutdown()来手动关闭节点.&lt;/p&gt;
&lt;p&gt;节点初始化、关闭的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt;&lt;span class=&#34;cpf&#34;&gt;&amp;lt;ros/ros.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;your_node_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NodeHandle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//....节点功能
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//....
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//用于触发topic、service的响应队列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一个ROS程序的执行步骤，通常要启动节点，获取句柄，而关闭的工作系统自动完成.&lt;/p&gt;
&lt;h2 id=&#34;nodehandle常用成员函数&#34;&gt;NodeHandle常用成员函数&lt;/h2&gt;
&lt;p&gt;NodeHandle是Node的句柄，用来对当前节点进行各种操作。在ROS中，NodeHandle是一个定义好的类，通过include&amp;lt;ros/ros.h&amp;gt;，我们可以创建这个类，以及使用它的成员函数。&lt;/p&gt;
&lt;p&gt;NodeHandle常用成员函数包括：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//创建话题的publisher 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Publisher&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;advertise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;//第一个参数为发布话题的名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//第二个是消息队列的最大长度，如果发布的消息超过这个长度而没有被接收，那么就的消息就会出队。通常设为一个较小的数即可。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//第三个参数是是否锁存。某些话题并不是会以某个频率发布，比如/map这个topic，只有在初次订阅或者地图更新这两种情况下，/map才会发布消息。这里就用到了锁存。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//创建话题的subscriber
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Subscriber&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//第一个参数是订阅话题的名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//第二个参数是订阅队列的长度，如果受到的消息都没来得及处理，那么新消息入队，就消息就会出队
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//第三个参数是回调函数指针，指向回调函数来处理接收到的消息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//创建服务的server，提供服务
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServiceServer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;advertiseService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;srv_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mreq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mres&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;//第一个参数是service名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//第二个参数是服务函数的指针，指向服务函数。指向的函数应该有两个参数，分别接受请求和响应。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//创建服务的client
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServiceClient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serviceClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;persistent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;//第一个函数式service名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//第二个参数用于设置服务的连接是否持续，如果为true，client将会保持与远程主机的连接，这样后续的请求会快一些。通常我们设为flase
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//查询某个参数的值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getParam&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getParam&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//从参数服务器上获取key对应的值，已重载了多个类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//给参数赋值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setParam&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setParam&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setParam&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//给key对应的val赋值，重载了多个类型的val
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;NodeHandle对象在ROS C++程序里非常重要，各种类型的通信都需要用NodeHandle来创建完成。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;回调函数与spin方法&#34;&gt;回调函数与spin()方法&lt;/h2&gt;
&lt;p&gt;回调函数在编程中是一种重要的方法，在维基百科上的解释是：
&lt;strong&gt;In computer programming, a callback is any executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at a given time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回调函数作为参数被传入到了另一个函数中（在本例中传递的是函数指针），在未来某个时刻（当有新的message到达），就会立即执行。Subscriber接收到消息，实际上是先把消息放到一个队列中去，如图所示。队列的长度在Subscriber构建的时候设置好了。当有spin函数执行，就会去处理消息队列中队首的消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/pics/cb_queue.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;spin具体处理的方法又可分为阻塞/非阻塞,单线程/多线程，在ROS函数接口层面我们有4种spin的方式：&lt;/p&gt;
&lt;p&gt;|  spin方法   | 阻塞  | 线程 |
|  ----  | ----  |
|ros::spin() |阻塞  |单线程|
|ros::spinOnce() |非阻塞 |单线程|
|ros::MultiThreadedSpin() |  阻塞  |多线程|
|ros::AsyncMultiThreadedSpin()  | 非阻塞 |多线程|&lt;/p&gt;
&lt;p&gt;常用的spin()、spinOnce()是单个线程逐个处理回调队列里的数据。有些场合需要用到多线程分别处理，则可以用到MultiThreadedSpin()、AsyncMultiThreadedSpin()。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;roscpp里有两种时间的表示方法，一种是时刻（ros::Time），一种是时长（ros::Duration）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int32 sec
int32 nsec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Time/Duration都由秒和纳秒组成。 要使用Time和Duration，需要&lt;code&gt;#include &amp;lt;ros/time.h&amp;gt;&lt;/code&gt;和&lt;code&gt;#include &amp;lt;ros/duration.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//获取当前时间
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at_some_time1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//5.2s
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at_some_time2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//同上，重载了float类型和两个uint类型的构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one_hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//1h
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secs1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at_some_time1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toSec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//将Time转为double型时间
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secs2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one_hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toSec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//将Duration转为double型时间
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Time和Duration表示的概念并不相同，Time指的是某个时刻，而Duration指的是某个时段，尽管他们的数据结构都相同，但是用在不同的场景下。 ROS重载了Time、Duration类型之间的加减运算，比如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//t1是5.5s前的时刻，Time加减Duration返回都是Time
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//t2是当前时刻往后推3.3s的时刻
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//从t1到t2的时长，两个Time相减返回Duration类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//两个Duration相减，还是Duration
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;没有Time+Time的做法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;等待场景sleep&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//用Duration对象的sleep方法休眠
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//10HZ
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;     
    &lt;span class=&#34;c1&#34;&gt;//定义好sleep的频率，Rate对象会自动让整个循环以10hz休眠，即使有任务执行占用了时间
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;Rate的功能是指定一个频率，让某些动作按照这个频率来循环执行。与之类似的是ROS中的定时器Timer，它是通过设定回调函数和触发时间来实现某些动作的反复执行，创建方法和topic中的subscriber很像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;callback1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimerEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ROS_INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Callback 1 triggered&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;callback2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimerEvent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ROS_INFO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Callback 2 triggered&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;talker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NodeHandle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Timer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timer1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createTimer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//timer1每0.1s触发一次callback1函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Timer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timer2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createTimer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//timer2每1.0s触发一次callback2函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//千万别忘了spin，只有spin了才能真正去触发回调函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;exception&#34;&gt;Exception&lt;/h2&gt;
&lt;p&gt;roscpp中有两种异常类型，当有以下两种错误时，就会抛出异常：&lt;/p&gt;
&lt;p&gt;ros::InvalidNodeNameException
当无效的基础名称传给ros::init(),通常是名称中有/,就会触发&lt;/p&gt;
&lt;p&gt;ros::InvalidNameExcaption
当无效名称传给了roscpp&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros/" term="ros" label="ros" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ROS小结-I</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/ros%E5%B0%8F%E7%BB%93/" />
            <id>https://chenbokaix250.github.io/tech/ros%E5%B0%8F%E7%BB%93/</id>
            <updated>2020-08-11T11:19:59&#43;08:00</updated>
            <published>2020-05-08T15:40:58&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ROS小结 因为ROS之前有段时间没有用 有些生疏 再加上之前掌握的不好 利用教程重新巩固一……</summary>
            
                <content type="html">&lt;h1 id=&#34;ros小结&#34;&gt;ROS小结&lt;/h1&gt;
&lt;p&gt;因为ROS之前有段时间没有用 有些生疏 再加上之前掌握的不好 利用教程重新巩固一下 加深印象&lt;/p&gt;
&lt;h1 id=&#34;package软件包&#34;&gt;Package软件包&lt;/h1&gt;
&lt;p&gt;ROS中的package的定义更加具体，它不仅是Linux上的软件包，更是catkin编译的基本单元，我们调用catkin_make编译的对象就是一个个ROS的package，也就是说任何ROS程序只有组织成package才能编译。所以package也是ROS源代码存放的地方，任何ROS的代码无论是C++还是Python都要放到package中，这样才能正常的编译和运行。
一个package可以编译出来多个目标文件（ROS可执行程序、动态静态库、头文件等等）。&lt;/p&gt;
&lt;h2 id=&#34;package结构&#34;&gt;package结构&lt;/h2&gt;
&lt;p&gt;一个package下常见的文件、路径有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  ├── CMakeLists.txt    &lt;span class=&#34;c1&#34;&gt;#package的编译规则(必须)&lt;/span&gt;
  ├── package.xml       &lt;span class=&#34;c1&#34;&gt;#package的描述信息(必须)&lt;/span&gt;
  ├── src/              &lt;span class=&#34;c1&#34;&gt;#源代码文件&lt;/span&gt;
  ├── include/          &lt;span class=&#34;c1&#34;&gt;#C++头文件&lt;/span&gt;
  ├── scripts/          &lt;span class=&#34;c1&#34;&gt;#可执行脚本&lt;/span&gt;
  ├── msg/              &lt;span class=&#34;c1&#34;&gt;#自定义消息&lt;/span&gt;
  ├── srv/              &lt;span class=&#34;c1&#34;&gt;#自定义服务&lt;/span&gt;
  ├── models/           &lt;span class=&#34;c1&#34;&gt;#3D模型文件&lt;/span&gt;
  ├── urdf/             &lt;span class=&#34;c1&#34;&gt;#urdf文件&lt;/span&gt;
  ├── launch/           &lt;span class=&#34;c1&#34;&gt;#launch文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中定义package的是CMakeLists.txt和package.xml，这两个文件是package中必不可少的。catkin编译系统在编译前，首先就要解析这两个文件。这两个文件就定义了一个package。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMakeLists.txt:定义package的包名、依赖、源文件、目标文件等编译规则，是package不可少的成分&lt;/li&gt;
&lt;li&gt;package.xml: 描述package的包名、版本号、作者、依赖等信息，是package不可少的成分&lt;/li&gt;
&lt;li&gt;src/: 存放ROS的源代码，包括C++的源码和(.cpp)以及Python的module(.py)&lt;/li&gt;
&lt;li&gt;include/: 存放C++源码对应的头文件&lt;/li&gt;
&lt;li&gt;scripts/: 存放可执行脚本，例如shell脚本(.sh)、Python脚本(.py)&lt;/li&gt;
&lt;li&gt;msg/: 存放自定义格式的消息(.msg)&lt;/li&gt;
&lt;li&gt;srv/: 存放自定义格式的服务(.srv)&lt;/li&gt;
&lt;li&gt;models/: 存放机器人或仿真场景的3D模型(.sda, .stl, .dae等)&lt;/li&gt;
&lt;li&gt;urdf/: 存放机器人的模型描述(.urdf或.xacro)&lt;/li&gt;
&lt;li&gt;launch/: 存放launch文件(.launch或.xml)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常ROS文件组织都是按照以上的形式，这是约定俗成的命名习惯，建议遵守。以上路径中，只有CMakeLists.txt和package.xml是必须的，其余路径根据软件包是否需要来决定。&lt;/p&gt;
&lt;h2 id=&#34;package的创建&#34;&gt;package的创建&lt;/h2&gt;
&lt;p&gt;创建一个package需要在catkin_ws/src下,用到catkin_create_pkg命令，用法是：
&lt;code&gt;catkin_create_pkg package depends&lt;/code&gt;
其中package是包名，depends是依赖的包名，可以依赖多个软件包。
例如，新建一个package叫做test_pkg,依赖roscpp、rospy、std_msgs(常用依赖)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ catkin_create_pkg test_pkg roscpp rospy std_msgs
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样就会在当前路径下新建test_pkg软件包，包括：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  ├── CMakeLists.txt
  ├── include
  │   └── test_pkg
  ├── package.xml
  └── src
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;catkin_create_pkg帮你完成了软件包的初始化，填充好了CMakeLists.txt和package.xml，并且将依赖项填进了这两个文件中。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;cmakeliststxt&#34;&gt;CMakeLists.txt&lt;/h1&gt;
&lt;h2 id=&#34;cmakeliststxt的作用&#34;&gt;CMakeLists.txt的作用&lt;/h2&gt;
&lt;p&gt;CMakeLists.txt原本是Cmake编译系统的规则文件，而Catkin编译系统基本沿用了CMake的编译风格，只是针对ROS工程添加了一些宏定义。所以在写法上，catkin的CMakeLists.txt与CMake的基本一致。&lt;/p&gt;
&lt;p&gt;这个文件直接规定了这个package要依赖哪些package，要编译生成哪些目标，如何编译等等流程。所以CMakeLists.txt非常重要，它指定了由源码到目标文件的规则，catkin编译系统在工作时首先会找到每个package下的CMakeLists.txt，然后按照规则来编译构建。&lt;/p&gt;
&lt;h2 id=&#34;cmakeliststxt写法&#34;&gt;CMakeLists.txt写法&lt;/h2&gt;
&lt;p&gt;CMakeLists.txt的基本语法都还是按照CMake，而Catkin在其中加入了少量的宏，总体的结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cmake_minimum_required&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#CMake的版本号 &lt;/span&gt;
project&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;#项目名称 &lt;/span&gt;
find_package&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;#找到编译需要的其他CMake/Catkin package&lt;/span&gt;
catkin_python_setup&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;#catkin新加宏，打开catkin的Python Module的支持&lt;/span&gt;
add_message_files&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;#catkin新加宏，添加自定义Message/Service/Action文件&lt;/span&gt;
add_service_files&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
add_action_files&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
generate_message&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;#catkin新加宏，生成不同语言版本的msg/srv/action接口&lt;/span&gt;
catkin_package&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;#catkin新加宏，生成当前package的cmake配置，供依赖本包的其他软件包调用&lt;/span&gt;
add_library&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;#生成库&lt;/span&gt;
add_executable&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;#生成可执行二进制文件&lt;/span&gt;
add_dependencies&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;#定义目标文件依赖于其他目标文件，确保其他目标已被构建&lt;/span&gt;
target_link_libraries&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#链接&lt;/span&gt;
catkin_add_gtest&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;#catkin新加宏，生成测试&lt;/span&gt;
install&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;#安装至本机&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;packagexml&#34;&gt;package.xml&lt;/h1&gt;
&lt;p&gt;package.xml也是一个catkin的package必备文件，它是这个软件包的描述文件，在较早的ROS版本(rosbuild编译系统)中，这个文件叫做manifest.xml，用于描述pacakge的基本信息。如果你在网上看到一些ROS项目里包含着manifest.xml，那么它多半是hydro版本之前的项目了。&lt;/p&gt;
&lt;h2 id=&#34;packagexml作用&#34;&gt;package.xml作用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pacakge.xml&lt;/code&gt;包含了package的名称、版本号、内容描述、维护人员、软件许可、编译构建工具、编译依赖、运行依赖等信息。
实际上&lt;code&gt;rospack find&lt;/code&gt;、&lt;code&gt;rosdep&lt;/code&gt;等命令之所以能快速定位和分析出package的依赖项信息，就是直接读取了每一个pacakge中的package.xml文件。它为用户提供了快速了解一个pacakge的渠道。&lt;/p&gt;
&lt;h2 id=&#34;packagexml写法&#34;&gt;package.xml写法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pacakge.xml&lt;/code&gt;遵循xml标签文本的写法，由于版本更迭原因，现在有两种格式并存（format1与format2），不过区别不大。老版本（format1）的&lt;code&gt;pacakge.xml&lt;/code&gt;通常包含以下标签:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;lt;pacakge&amp;gt;           根标记文件  
&amp;lt;name&amp;gt;              包名  
&amp;lt;version&amp;gt;           版本号  
&amp;lt;description&amp;gt;       内容描述  
&amp;lt;maintainer&amp;gt;        维护者 
&amp;lt;license&amp;gt;           软件许可证  
&amp;lt;buildtool_depend&amp;gt;  编译构建工具，通常为catkin  
&amp;lt;build_depend&amp;gt;      编译依赖项，与Catkin中的  
&amp;lt;run_depend&amp;gt;        运行依赖项
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;说明：其中1-6为必备标签，1是根标签，嵌套了其余的所有标签，2-6为包的各种属性，7-9为编译相关信息。
在新版本（format2）中，包含的标签为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;lt;pacakge&amp;gt;               根标记文件  
&amp;lt;name&amp;gt;                  包名  
&amp;lt;version&amp;gt;               版本号  
&amp;lt;description&amp;gt;           内容描述  
&amp;lt;maintainer&amp;gt;            维护者 
&amp;lt;license&amp;gt;               软件许可证  
&amp;lt;buildtool_depend&amp;gt;      编译构建工具，通常为catkin    
&amp;lt;depend&amp;gt;                指定依赖项为编译、导出、运行需要的依赖，最常用
&amp;lt;build_depend&amp;gt;          编译依赖项  
&amp;lt;build_export_depend&amp;gt;   导出依赖项
&amp;lt;exec_depend&amp;gt;           运行依赖项
&amp;lt;test_depend&amp;gt;           测试用例依赖项  
&amp;lt;doc_depend&amp;gt;            文档依赖项
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由此看见新版本的pacakge.xml格式上增加了 、、、 ,相当于将之前的build和run依赖项描述进行了细分。
目前Indigo、Kinetic、Lunar等版本的ROS都同时支持两种版本的package.xml，所以无论选哪种格式都可以。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;run_depend 和 exec_depend 的区别经常导致编译不通过.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--
整个ROS包括的package如下:
&lt;img src=&#34;https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/pics/ros_pkgs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/ros/" term="ros" label="ros" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Git常用命令参考手册</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/" />
            <id>https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</id>
            <updated>2020-08-11T11:25:45&#43;08:00</updated>
            <published>2020-05-03T11:13:07&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Git常用命令参考手册 目录 配置 初始化本地仓库 文件状态 日志 克隆 查看分支 切换分支 创建分支……</summary>
            
                <content type="html">&lt;h1 id=&#34;git常用命令参考手册&#34;&gt;Git常用命令参考手册&lt;/h1&gt;
&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E9%85%8D%E7%BD%AE&#34;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93&#34;&gt;初始化本地仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81&#34;&gt;文件状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%97%A5%E5%BF%97&#34;&gt;日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%85%8B%E9%9A%86&#34;&gt;克隆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF&#34;&gt;查看分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF&#34;&gt;切换分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF&#34;&gt;创建分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF&#34;&gt;删除分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E9%87%8D%E5%91%BD%E5%90%8D%E5%88%86%E6%94%AF&#34;&gt;重命名分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6&#34;&gt;代码合并&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%9A%82%E5%AD%98&#34;&gt;暂存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%88%A0%E9%99%A4&#34;&gt;删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%8F%90%E4%BA%A4&#34;&gt;提交&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%8E%A8%E9%80%81&#34;&gt;推送&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%8F%90%E4%BA%A4&#34;&gt;提交&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%8B%89%E5%8F%96%E6%9C%80%E6%96%B0%E5%86%85%E5%AE%B9&#34;&gt;拉取最新内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8&#34;&gt;查看文件的改动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%9B%9E%E6%BB%9A%E7%89%88%E6%9C%AC&#34;&gt;回滚版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%92%A4%E9%94%80&#34;&gt;撤销&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E6%A0%87%E7%AD%BE&#34;&gt;标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#GitFlow&#34;&gt;Git Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%AD%90%E6%A8%A1%E5%9D%97&#34;&gt;子模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chenbokaix250.github.io/tech/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#%E5%85%B6%E4%BB%96&#34;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span class=&#34;c1&#34;&gt;# 查看配置列表&lt;/span&gt;
git config -l
&lt;span class=&#34;c1&#34;&gt;# 查看已设置的用户名&lt;/span&gt;
git config --global --get user.name
&lt;span class=&#34;c1&#34;&gt;# 设置用户名&lt;/span&gt;
git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;xiejiahe&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 查看已设置的邮箱&lt;/span&gt;
git config --global --get user.email
&lt;span class=&#34;c1&#34;&gt;# 设置邮箱&lt;/span&gt;
git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;example@example.com&amp;#34;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;初始化本地仓库&#34;&gt;初始化本地仓库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 会在当前目录生成.git&lt;/span&gt;
git init
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;文件状态&#34;&gt;文件状态&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;日志&#34;&gt;日志&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看完整历史提交记录&lt;/span&gt;
git log
&lt;span class=&#34;c1&#34;&gt;# 查看前N次提交记录 commit message&lt;/span&gt;
git log -2
&lt;span class=&#34;c1&#34;&gt;# 查看前N次提交记录，包括diff&lt;/span&gt;
git log -p -2
&lt;span class=&#34;c1&#34;&gt;# 搜索关键词&lt;/span&gt;
git log -S 你好
&lt;span class=&#34;c1&#34;&gt;# 列出提交者贡献数量&lt;/span&gt;
git shortlog -sn
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;克隆&#34;&gt;克隆&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# https 协议&lt;/span&gt;
git clone https://github.com/xjh22222228/git-manual.git
&lt;span class=&#34;c1&#34;&gt;# SSH协议&lt;/span&gt;
git clone xjh22222228@github.com/xjh22222228/git-manual.git
&lt;span class=&#34;c1&#34;&gt;# 克隆某个分支， -b 后面分支名字&lt;/span&gt;
git clone -b v2.8.0 https://github.com/xjh22222228/git-manual.git
&lt;span class=&#34;c1&#34;&gt;# 递归克隆，如果项目包含子模块就非常有用&lt;/span&gt;
git clone --recursive xjh22222228@github.com/xjh22222228/git-manual.git
&lt;span class=&#34;c1&#34;&gt;# 克隆深度为1, 不会把历史的记录也克隆，这样可以节省克隆时间&lt;/span&gt;
git clone --depth&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; https://github.com/xjh22222228/git-manual.git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;查看分支&#34;&gt;查看分支&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看所有分支&lt;/span&gt;
git branch --all
&lt;span class=&#34;c1&#34;&gt;# 查看本地分支&lt;/span&gt;
git branch
&lt;span class=&#34;c1&#34;&gt;# 查看远端分支&lt;/span&gt;
git branch -r
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;切换分支&#34;&gt;切换分支&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2种方法，切换到master分支&lt;/span&gt;
git checkout master
git switch master
&lt;span class=&#34;c1&#34;&gt;# 切换上一个分支&lt;/span&gt;
git checkout -
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;创建分支&#34;&gt;创建分支&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建develop分支&lt;/span&gt;
git branch develop
&lt;span class=&#34;c1&#34;&gt;# 创建develop分支并切换&lt;/span&gt;
git checkout -b develop
&lt;span class=&#34;c1&#34;&gt;# 切换远端分支&lt;/span&gt;
git checkout -t origin/dev
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除分支&#34;&gt;删除分支&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 删除本地分支&lt;/span&gt;
git branch -d &amp;lt;branchName&amp;gt;
&lt;span class=&#34;c1&#34;&gt;# 删除远程分支&lt;/span&gt;
git branch -d -r origin/&amp;lt;branchName&amp;gt;
git push origin :&amp;lt;branchName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;重命名分支&#34;&gt;重命名分支&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重命名当前分支&lt;/span&gt;
git branch -m &amp;lt;branchName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;代码合并&#34;&gt;代码合并&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 两步法, 将 feature/v1.0.0 分支代码合并到 develop&lt;/span&gt;
git checkout develop
git merge feature/v1.0.0
&lt;span class=&#34;c1&#34;&gt;# 或者一步法&lt;/span&gt;
git merge feature/v1.0.0 develop
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;暂存&#34;&gt;暂存&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 暂存所有&lt;/span&gt;
git add -A
&lt;span class=&#34;c1&#34;&gt;# 暂存某个文件&lt;/span&gt;
git add ./README.md
&lt;span class=&#34;c1&#34;&gt;# 添加当前目录所有改动文件&lt;/span&gt;
git add .
&lt;span class=&#34;c1&#34;&gt;# 暂存一系列文件&lt;/span&gt;
git add 1.txt 2.txt ...
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除&#34;&gt;删除&lt;/h2&gt;
&lt;p&gt;git add 的反向操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 删除1.txt 文件&lt;/span&gt;
git rm 1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;提交&#34;&gt;提交&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -m 提交的信息&lt;/span&gt;
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;changes log&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 提交显示diff变化&lt;/span&gt;
git commit -v
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;推送&#34;&gt;推送&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 推送内容到主分支&lt;/span&gt;
git push -u origin master
&lt;span class=&#34;c1&#34;&gt;# 本地分支推送到远程， 本地分支:远程分支&lt;/span&gt;
git push origin &amp;lt;branchName&amp;gt;:&amp;lt;branchName&amp;gt;
&lt;span class=&#34;c1&#34;&gt;# 简写，默认推送当前分支&lt;/span&gt;
git push
&lt;span class=&#34;c1&#34;&gt;# 强制推送, -f 是 --force 缩写&lt;/span&gt;
git push -f
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;拉取最新内容&#34;&gt;拉取最新内容&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 推荐使用这个，因为不会做自动合并&lt;/span&gt;
git fetch origin master
&lt;span class=&#34;c1&#34;&gt;# 相当于git fetch 然后 git merge&lt;/span&gt;
git pull
&lt;span class=&#34;c1&#34;&gt;# 后面的意思是： 远程分支名:本地分支名&lt;/span&gt;
git pull origin master:master
&lt;span class=&#34;c1&#34;&gt;# 如果是要与本地当前分支合并，则冒号后面的&amp;lt;本地分支名&amp;gt;可以不写&lt;/span&gt;
git pull origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;查看文件的改动&#34;&gt;查看文件的改动&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看所有文件改动&lt;/span&gt;
git diff
&lt;span class=&#34;c1&#34;&gt;# 查看具体文件的改动&lt;/span&gt;
git diff README.md
&lt;span class=&#34;c1&#34;&gt;# 查看某个版本的改动, 后面那一窜是commitId， git log后就能看到&lt;/span&gt;
git diff d68a1ef2407283516e8e4cb675b434505e39dc54
&lt;span class=&#34;c1&#34;&gt;# 查看某个文件的历史修改记录&lt;/span&gt;
git log README.md
git show d68a1ef2407283516e8e4cb675b434505e39dc54 README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;回滚版本&#34;&gt;回滚版本&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 回滚上一个版本&lt;/span&gt;
git reset --hard HEAD^
&lt;span class=&#34;c1&#34;&gt;# 回滚上两个版本&lt;/span&gt;
git reset --hard HEAD^^
&lt;span class=&#34;c1&#34;&gt;# 回退到指定版本，git log 就能看到commit id了&lt;/span&gt;
git reset --hard &lt;span class=&#34;s1&#34;&gt;&amp;#39;commit id&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 回滚版本是不保存在 git log，如果想查看使用&lt;/span&gt;
git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;撤销&#34;&gt;撤销&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 撤销当前目录下所有文件的改动&lt;/span&gt;
git checkout -- .
&lt;span class=&#34;c1&#34;&gt;# 撤销指定文件修改&lt;/span&gt;
git checkout -- README.md
&lt;span class=&#34;c1&#34;&gt;# 暂存区回到工作区, 指定 ./README.md 文件从暂存区回到工作区&lt;/span&gt;
git reset HEAD ./README.md
&lt;span class=&#34;c1&#34;&gt;# 撤销commit, 回到工作区, 一般commit id 是前一个&lt;/span&gt;
git reset &amp;lt;commit_id&amp;gt;
&lt;span class=&#34;c1&#34;&gt;# 撤销commit, 并且把修改同时撤销&lt;/span&gt;
git reset --hard &amp;lt;commit_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;标签&#34;&gt;标签&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 列出本地所有标签&lt;/span&gt;
git tag
&lt;span class=&#34;c1&#34;&gt;# 列出远程所有标签&lt;/span&gt;
git ls-remote --tags origin
&lt;span class=&#34;c1&#34;&gt;# 按照特定模式查找标签, `*` 模板搜索&lt;/span&gt;
git tag -l &lt;span class=&#34;s2&#34;&gt;&amp;#34;v1.0.0*&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 创建带有附注标签&lt;/span&gt;
git tag -a v1.1.0 -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;标签描述&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 创建轻量标签, 不需要带任何参数&lt;/span&gt;
git tag v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 后期打标签, 假设之前忘记打标签了，可以通过git log查看commit id&lt;/span&gt;
git log
git tag -a v1.1.0 &amp;lt;commit_id&amp;gt;
&lt;span class=&#34;c1&#34;&gt;# 推送到远程，默认只是本地创建&lt;/span&gt;
git push origin v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 一次性推送所有标签到远程&lt;/span&gt;
git push origin --tags
&lt;span class=&#34;c1&#34;&gt;# 删除标签, 你需要再次运行 git push origin v1.1.0 才能删除远程标签&lt;/span&gt;
git tag -d v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 删除远程标签&lt;/span&gt;
git push origin --delete v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 检查标签&lt;/span&gt;
git checkout v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 查看本地某个标签详细信息&lt;/span&gt;
git show v1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;git-flow&#34;&gt;Git Flow&lt;/h2&gt;
&lt;p&gt;Git Flow 不是内置命令，需要单独安装&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初始化&lt;/strong&gt; 每个仓库都必须初始化一次&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 通常直接回车以完成默认设置&lt;/span&gt;
git flow init
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开启新的功能&lt;/span&gt;
git flow feature start v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 推送到远程, 在团队协作中这一步少不了&lt;/span&gt;
git flow feature publish v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 完成功能, 会将当前分支合并到 develop 然后删除分支，回到 develop&lt;/span&gt;
git flow feature finish v1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;打补丁&lt;/strong&gt;
hotfix是针对 &lt;code&gt;master&lt;/code&gt; 进行打补丁的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开启新的 hotfix&lt;/span&gt;
git flow hotfix start v1.1.0_hotifx
&lt;span class=&#34;c1&#34;&gt;# 推送到远程&lt;/span&gt;
git flow hotfix publish v1.1.0_hotifx
&lt;span class=&#34;c1&#34;&gt;# 完成新的hotfix, 将当前分支合并到 master 和 develop，然后删除分支，回到 develop&lt;/span&gt;
git flow hotfix finish v1.1.0_hotifx
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;发布&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开启新的 release&lt;/span&gt;
git flow release start v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 推送到远程&lt;/span&gt;
git flow release publish v1.1.0
&lt;span class=&#34;c1&#34;&gt;# 完成, 将当前分支合并到 master 和 develop，删除当前分支然后回到 develop&lt;/span&gt;
git flow release finish v1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;git-flow-schema&#34;&gt;Git flow schema&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;media/git-flow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;子模块&#34;&gt;子模块&lt;/h2&gt;
&lt;p&gt;具体使用还可以看这里 &lt;a href=&#34;https://www.xiejiahe.com/blog/detail/5dbceefc0bb52b1c88c30853&#34;&gt;git submodule子模块使用教程&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加子模块&lt;/span&gt;
git submodule add https://github.com/xjh22222228/git-manual.git
&lt;span class=&#34;c1&#34;&gt;# 更新，有2种方法&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 一步到位&lt;/span&gt;
git submodule update --remote
&lt;span class=&#34;c1&#34;&gt;# 或者进入到子模块项目再拉取&lt;/span&gt;
git pull
&lt;span class=&#34;c1&#34;&gt;# 修复子模块分支指向 detached head&lt;/span&gt;
git submodule foreach -q --recursive &lt;span class=&#34;s1&#34;&gt;&amp;#39;git checkout $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo master)&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 删除子模块 common 为子模块名称，一般删除需要三部&lt;/span&gt;
git submodule deinit &amp;lt;common&amp;gt;
&lt;span class=&#34;c1&#34;&gt;#清除子模块缓存&lt;/span&gt;
git rm --cached common
&lt;span class=&#34;c1&#34;&gt;# 提交代码并推送&lt;/span&gt;
git commit -am &lt;span class=&#34;s2&#34;&gt;&amp;#34;Remove a submodule&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看远程仓库地址&lt;/span&gt;
git remote -v
&lt;span class=&#34;c1&#34;&gt;# 记住提交账号密码&lt;/span&gt;
git config --global credential.helper store
&lt;span class=&#34;c1&#34;&gt;# 清除git已保存的用户名和密码&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# windows&lt;/span&gt;
git credential-manager uninstall
&lt;span class=&#34;c1&#34;&gt;# mac linux&lt;/span&gt;
git config --global credential.helper store
&lt;span class=&#34;c1&#34;&gt;# 清除本地git缓存&lt;/span&gt;
git rm -r --cached .
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/git/" term="git" label="git" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Bash小结</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/bash%E5%B0%8F%E7%BB%93/" />
            <id>https://chenbokaix250.github.io/tech/bash%E5%B0%8F%E7%BB%93/</id>
            <updated>2020-04-29T19:08:25&#43;08:00</updated>
            <published>2020-04-29T19:08:07&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Bash的基本语法 1.echo命令 echo命令的作用是在屏幕输出一行文本 1 2 $ echo hello hello……</summary>
            
                <content type="html">&lt;h1 id=&#34;bash的基本语法&#34;&gt;Bash的基本语法&lt;/h1&gt;
&lt;h2 id=&#34;1echo命令&#34;&gt;1.echo命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt;命令的作用是在屏幕输出一行文本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; hello
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果想要输出的是多行文本,即包括换行符,需要把多行文本放在引号里&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;HTML&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;lt;HEAD&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          &amp;lt;TITLE&amp;gt;Page Title&amp;lt;/TITLE&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;lt;/HEAD&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;lt;BODY&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          Page body.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;lt;/BODY&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;lt;/HTML&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;-n-参数&#34;&gt;-n 参数&lt;/h3&gt;
&lt;p&gt;默认情况,&lt;code&gt;echo&lt;/code&gt;输出的文本末尾会有一个回车符.&lt;code&gt;-n&lt;/code&gt;参数可以取消末尾的回车符,使得下一个提示符紧跟在输出内容的后面.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; a&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; b
a
b
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n a&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; b
ab
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;-e参数&#34;&gt;-e参数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;-e&lt;/code&gt;参数会解释引号内的特殊字符&lt;/p&gt;
&lt;p&gt;如不使用&lt;code&gt;-e&lt;/code&gt;参数,即默认情况下,引号会让特殊字符变成普通字符.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello\nWorld&amp;#34;&lt;/span&gt;
Hello&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;World

&lt;span class=&#34;c1&#34;&gt;# 双引号的情况&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello\nWorld&amp;#34;&lt;/span&gt;
Hello
World

&lt;span class=&#34;c1&#34;&gt;# 单引号的情况&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello\nWorld&amp;#39;&lt;/span&gt;
Hello
World
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;2命令格式&#34;&gt;2.命令格式&lt;/h2&gt;
&lt;p&gt;命令行环境中,主要使用Shell命令,格式为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;arg1 ... &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;argN&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# ls -l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;command是具体命令或可执行文件,arg为传递给命令的参数 是可选的.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 短形式&lt;/span&gt;
$ ls -r

&lt;span class=&#34;c1&#34;&gt;# 长形式&lt;/span&gt;
$ ls --reverse
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Bash 单个命令一般都是一行，用户按下回车键，就开始执行。有些命令比较长，写成多行会有利于阅读和编辑，这时可以在每一行的结尾加上反斜杠，Bash 就会将下一行跟当前行放在一起解释。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; foo bar

&lt;span class=&#34;c1&#34;&gt;# 等同于&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; foo &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;bar
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3空格&#34;&gt;3.空格&lt;/h2&gt;
&lt;p&gt;Bash使用空格(或Tab)区分不同的参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; foo bar
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果参数之间有多个空格,Bash会自动忽略多余的空格&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# echo this is a      test&lt;/span&gt;
this is a &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;4分号&#34;&gt;4.分号&lt;/h2&gt;
&lt;p&gt;分号是命令结束符,使得一行可以放置多个命令,上一个命令执行结束后,再执行第二个命令.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# clear; ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5命令的组合符和&#34;&gt;5.命令的组合符&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Command1 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; Command2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果Command1运行成功,则继续运行Command2命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Command1 &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; Command2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Command1运行失败,则继续运行Command2&lt;/p&gt;
&lt;h2 id=&#34;6type命令&#34;&gt;6.type命令&lt;/h2&gt;
&lt;p&gt;用来查询一个命令式内部命令还是外部命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; is a shell &lt;span class=&#34;nb&#34;&gt;builtin&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; ls
ls is hashed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/bin/ls&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt;命令的&lt;code&gt;-t&lt;/code&gt;参数，可以返回一个命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。&lt;/p&gt;
&lt;h2 id=&#34;7快捷键&#34;&gt;7.快捷键&lt;/h2&gt;
&lt;p&gt;常用的快捷键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ctrl + L:清除屏幕井将当前行移到页面顶部&lt;/li&gt;
&lt;li&gt;Ctrl + C:中止当前正在执行的命令&lt;/li&gt;
&lt;li&gt;Shift + PageUp:向上滚动&lt;/li&gt;
&lt;li&gt;Shift + PageDown:向下滚动&lt;/li&gt;
&lt;li&gt;Ctrl + U:从光标位置删除到首行&lt;/li&gt;
&lt;li&gt;Ctrl + K:从光标位置删除到尾行&lt;/li&gt;
&lt;li&gt;Ctrl + D:关闭Shell会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↑&lt;/code&gt;，&lt;code&gt;↓&lt;/code&gt;：浏览已执行命令的历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;bash的模式扩展&#34;&gt;Bash的模式扩展&lt;/h1&gt;
&lt;p&gt;Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元（token）。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。&lt;/p&gt;
&lt;p&gt;这种特殊字符的扩展，称为模式扩展（globbing）。其中有些用到通配符，又称为通配符扩展（wildcard expansion）。Bash 一共提供八种扩展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;波浪线扩展&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 字符扩展&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 字符扩展&lt;/li&gt;
&lt;li&gt;方括号扩展&lt;/li&gt;
&lt;li&gt;大括号扩展&lt;/li&gt;
&lt;li&gt;变量扩展&lt;/li&gt;
&lt;li&gt;子命令扩展&lt;/li&gt;
&lt;li&gt;算术扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2波浪线扩展&#34;&gt;2.波浪线扩展&lt;/h3&gt;
&lt;p&gt;波浪线 ~ 会自动扩展成当前用户的主目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ~
/home/User
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;~/dir&lt;/code&gt;表示扩展成主目录的某个子目录,&lt;code&gt;dir&lt;/code&gt;是主目录里面的一个子目录名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/foo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3字符扩展&#34;&gt;3.&lt;code&gt;?&lt;/code&gt;字符扩展&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt;字符代表文件路径里面的任意单个字符，不包括空字符。比如，&lt;code&gt;Data???&lt;/code&gt;匹配所有&lt;code&gt;Data&lt;/code&gt;后面跟着三个字符的文件名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 存在文件 a.txt 和 b.txt&lt;/span&gt;
$ ls ?.txt
a.txt b.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;?&lt;/code&gt;表示单个字符,多个字符需要多个?连用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 存在文件 a.txt、b.txt 和 ab.txt&lt;/span&gt;
$ ls ??.txt
ab.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;4字符扩展&#34;&gt;4.&lt;code&gt;*&lt;/code&gt;字符扩展&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;字符代表文件路径里面的任意数量的字符,包括零个字符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 存在文件 a.txt、b.txt 和 ab.txt&lt;/span&gt;
$ ls *.txt
a.txt b.txt ab.txt

&lt;span class=&#34;c1&#34;&gt;# 输出所有文件&lt;/span&gt;
$ ls *

&lt;span class=&#34;c1&#34;&gt;# 存在文件 a.txt、b.txt 和 ab.txt&lt;/span&gt;
$ ls a*.txt
a.txt ab.txt

$ ls *b*
b.txt ab.txt

&lt;span class=&#34;c1&#34;&gt;# 注意，*不会匹配隐藏文件（以.开头的文件）。&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 显示所有隐藏文件&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; .*

&lt;span class=&#34;c1&#34;&gt;# 与方括号扩展结合使用，&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 只显示正常的隐藏文件，不显示 . 和 .. 这两个特殊文件&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; .&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;!.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5方括号扩展&#34;&gt;5.方括号扩展&lt;/h2&gt;
&lt;p&gt;方括号扩展的形式是&lt;code&gt;[...]&lt;/code&gt;，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。括号之中的任意一个字符。比如，&lt;code&gt;[aeiou]&lt;/code&gt;可以匹配五个元音字母中的任意一个。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 存在文件 a.txt 和 b.txt&lt;/span&gt;
$ ls &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ab&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt
a.txt b.txt

&lt;span class=&#34;c1&#34;&gt;# 只存在文件 a.txt&lt;/span&gt;
$ ls &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ab&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt
a.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;方括号扩展还有两种变体：&lt;code&gt;[^...]&lt;/code&gt;和&lt;code&gt;[!...]&lt;/code&gt;。它们表示匹配不在方括号里面的字符，这两种写法是等价的。比如，&lt;code&gt;[^abc]&lt;/code&gt;或&lt;code&gt;[!abc]&lt;/code&gt;表示匹配除了&lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;c&lt;/code&gt;以外的字符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 存在 aaa、bbb、aba 三个文件&lt;/span&gt;
$ ls ?&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;!a&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;?
aba bbb
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;6start-end扩展&#34;&gt;6.[start-end]扩展&lt;/h2&gt;
&lt;p&gt;方括号扩展一个简写形式[start-end],表示匹配一个连续的范围。比如，&lt;code&gt;[a-c]&lt;/code&gt;等同于&lt;code&gt;[abc]&lt;/code&gt;，&lt;code&gt;[0-9]&lt;/code&gt;匹配&lt;code&gt;[0123456789]&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 存在文件 a.txt、b.txt 和 c.txt&lt;/span&gt;
$ ls &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;a-c&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt
a.txt
b.txt
c.txt

&lt;span class=&#34;c1&#34;&gt;# 存在文件 report1.txt、report2.txt 和 report3.txt&lt;/span&gt;
$ ls report&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0-9&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt
report1.txt
report2.txt
report3.txt
...
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下面是一些常见简写的例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt;：所有小写字母。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt;：所有小写字母与大写字母。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;：所有小写字母、大写字母与数字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[abc]*&lt;/code&gt;：所有以&lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;、&lt;code&gt;c&lt;/code&gt;字符之一开头的文件名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;program.[co]&lt;/code&gt;：文件&lt;code&gt;program.c&lt;/code&gt;与文件&lt;code&gt;program.o&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BACKUP.[0-9][0-9][0-9]&lt;/code&gt;：所有以&lt;code&gt;BACKUP.&lt;/code&gt;开头，后面是三个数字的文件名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种简写形式有一个否定形式&lt;code&gt;[!start-end]&lt;/code&gt;，表示匹配不属于这个范围的字符。比如，&lt;code&gt;[!a-zA-Z]&lt;/code&gt;表示匹配非英文字母的字符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; report&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;!1–3&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt
report4.txt report5.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;7大括号扩展&#34;&gt;7.大括号扩展&lt;/h2&gt;
&lt;p&gt;大括号扩展&lt;code&gt;{...}&lt;/code&gt;表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。比如，&lt;code&gt;{1,2,3}&lt;/code&gt;扩展成&lt;code&gt;1 2 3&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1,2,3&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; d&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a,e,i,u,o&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;g
dag deg dig dug dog

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Front-&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;A,B,C&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;-Back
Front-A-Back Front-B-Back Front-C-Back
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意，大括号扩展不是文件名扩展。它会扩展成所有给定的值，而不管是否有对应的文件存在。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a,b,c&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.txt
ls: 无法访问&lt;span class=&#34;s1&#34;&gt;&amp;#39;a.txt&amp;#39;&lt;/span&gt;: 没有那个文件或目录
ls: 无法访问&lt;span class=&#34;s1&#34;&gt;&amp;#39;b.txt&amp;#39;&lt;/span&gt;: 没有那个文件或目录
ls: 无法访问&lt;span class=&#34;s1&#34;&gt;&amp;#39;c.txt&amp;#39;&lt;/span&gt;: 没有那个文件或目录
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面例子中，即使不存在对应的文件，&lt;code&gt;{a,b,c}&lt;/code&gt;依然扩展成三个文件名，导致&lt;code&gt;ls&lt;/code&gt;命令报了三个错误。&lt;/p&gt;
&lt;p&gt;另一个需要注意的地方是，大括号内部的逗号前后不能有空格。否则，大括号扩展会失效。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; , 2&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; , 2&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面例子中，逗号前后有空格，Bash 就会认为这不是大括号扩展，而是三个独立的参数。&lt;/p&gt;
&lt;p&gt;逗号前面可以没有值，表示扩展的第一项为空。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cp a.log&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;,.bak&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 等同于&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# cp a.log a.log.bak&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;大括号可以嵌套。&lt;/p&gt;
&lt;p&gt;大括号也可以与其他模式联用，并且总是先于其他模式进行扩展。&lt;/p&gt;
&lt;p&gt;上面例子中，会先进行大括号扩展，然后进行&lt;code&gt;*&lt;/code&gt;扩展。&lt;/p&gt;
&lt;p&gt;大括号可以用于多字符的模式，方括号不行（只能匹配单字符）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;j&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;p,pe&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;g,png&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
jpg jpeg png

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; a&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;A&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1,2&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,B&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;3,4&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;b
aA1b aA2b aB3b aB4b

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;cat,d*&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
cat dawg dg dig dog doug dug

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;cat,dog&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
cat dog
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由于大括号扩展&lt;code&gt;{...}&lt;/code&gt;不是文件名扩展，所以它总是会扩展的。这与方括号扩展&lt;code&gt;[...]&lt;/code&gt;完全不同，如果匹配的文件不存在，方括号就不会扩展。这一点要注意区分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 不存在 a.txt 和 b.txt&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ab&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ab&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.txt

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a,b&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.txt
a.txt b.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;8startend扩展&#34;&gt;8.{start..end}扩展&lt;/h2&gt;
&lt;p&gt;大括号扩展有一个简写形式&lt;code&gt;{start..end}&lt;/code&gt;，表示扩展成一个连续序列。比如，&lt;code&gt;{a..z}&lt;/code&gt;可以扩展成26个小写英文字母。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a..c&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
a b c

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; d&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a..d&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;g
dag dbg dcg ddg

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1..4&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Number_&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1..5&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
Number_1 Number_2 Number_3 Number_4 Number_5

&lt;span class=&#34;c1&#34;&gt;#支持逆序&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;c..a&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
c b a

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;5..1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 注意，如果遇到无法理解的简写，大括号模式就会原样输出，不会扩展。&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a1..3c&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a1..3c&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 这种简写形式可以嵌套使用,形成复杂的扩展&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; .&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;mp&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;3..4&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,m4&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a,b,p,v&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
.mp3 .mp4 .m4a .m4b .m4p .m4v

&lt;span class=&#34;c1&#34;&gt;# 大括号扩展的常见用途为新建一系列目录。&lt;/span&gt;
$ mkdir &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;2007..2009&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;01..12&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

上面命令会新建36个子目录，每个子目录的名字都是”年份-月份“。
这个写法的另一个常见用途，是直接用于for循环。

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1..4&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果整数前面有前导0,扩展输出的每一项都有前导0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;01..5&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;03&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;04&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;05&lt;/span&gt;

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;001..5&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;001&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;002&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;003&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;004&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;005&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这种简写形式还可以使用第二个双点号（&lt;code&gt;start..end..step&lt;/code&gt;），用来指定扩展的步长。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;0..8..2&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面代码将&lt;code&gt;0&lt;/code&gt;扩展到&lt;code&gt;8&lt;/code&gt;，每次递增的长度为&lt;code&gt;2&lt;/code&gt;，所以一共输出5个数字。&lt;/p&gt;
&lt;p&gt;多个简写形式连用,会有循环处理的效果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;a..c&lt;span class=&#34;o&#34;&gt;}{&lt;/span&gt;1..3&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
a1 a2 a3 b1 b2 b3 c1 c2 c3
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;9-变量扩展&#34;&gt;9 变量扩展&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$SHELL&lt;/span&gt;
/bin/bash

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SHELL&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
/bin/bash

&lt;span class=&#34;c1&#34;&gt;# ${!string*}或${!string@}返回所有匹配给定字符串string的变量名。&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!S*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
SECONDS SHELL SHELLOPTS SHLVL SSH_AGENT_PID SSH_AUTH_SOCK
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面例子中，&lt;code&gt;${!S*}&lt;/code&gt;扩展成所有以&lt;code&gt;S&lt;/code&gt;开头的变量名。&lt;/p&gt;
&lt;h2 id=&#34;10-子命令扩展&#34;&gt;10 子命令扩展&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$(...)&lt;/code&gt;可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
Tue Jan &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; 00:01:13 CST &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;11算数扩展&#34;&gt;11.算数扩展&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$((...))&lt;/code&gt;可以扩展成整数运算的结果，详见《Bash 的算术运算》一章。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;12字符串&#34;&gt;12.字符串&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[[:class:]]&lt;/code&gt;表示一个字符类，扩展成某一类特定字符之中的一个。常用的字符类如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[:alnum:]]&lt;/code&gt;：匹配任意英文字母与数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:alpha:]]&lt;/code&gt;：匹配任意英文字母&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:blank:]]&lt;/code&gt;：空格和 Tab 键。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:cntrl:]]&lt;/code&gt;：ASCII 码 0-31 的不可打印字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:digit:]]&lt;/code&gt;：匹配任意数字 0-9。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:graph:]]&lt;/code&gt;：A-Z、a-z、0-9 和标点符号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:lower:]]&lt;/code&gt;：匹配任意小写字母 a-z。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:print:]]&lt;/code&gt;：ASCII 码 32-127 的可打印字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:punct:]]&lt;/code&gt;：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:space:]]&lt;/code&gt;：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:upper:]]&lt;/code&gt;：匹配任意大写字母 A-Z。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[:xdigit:]]&lt;/code&gt;：16进制字符（A-F、a-f、0-9）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13使用注意点&#34;&gt;13.使用注意点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通配符是先解释,再执行&lt;/li&gt;
&lt;li&gt;文件名扩展在不匹配时,会原样输出&lt;/li&gt;
&lt;li&gt;只适用于单层路径&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;引号和转义&#34;&gt;引号和转义&lt;/h1&gt;
&lt;h3 id=&#34;1转义&#34;&gt;1.转义&lt;/h3&gt;
&lt;p&gt;某些字符在Bash里面有特殊含义($  &amp;amp;  *)&lt;/p&gt;
&lt;p&gt;输出&lt;code&gt;$date&lt;/code&gt;不会有任何结果，因为&lt;code&gt;$&lt;/code&gt;是一个特殊字符。&lt;/p&gt;
&lt;p&gt;如果想要原样输出这些特殊字符，就必须在它们前面加上反斜杠，使其变成普通字符。这就叫做“转义”（escape）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;date
&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;反斜杠本身也是特殊字符,如果想要原样输出反斜杠,就需要对它自身转义.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\a&lt;/code&gt;：响铃&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt;：退格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;：换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\r&lt;/code&gt;：回车&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;：制表符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要在命令行使用这些不可打印的字符，可以把它们放在引号里面，然后使用&lt;code&gt;echo&lt;/code&gt;命令的&lt;code&gt;-e&lt;/code&gt;参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; a&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;b
atb

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;a\tb&amp;#34;&lt;/span&gt;
a        b
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由于反斜杠可以对换行符转义，使得 Bash 认为换行符是一个普通字符，从而可以将一行命令写成多行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mv &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;/path/to/foo &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;/path/to/bar

&lt;span class=&#34;c1&#34;&gt;# 等同于&lt;/span&gt;
$ mv /path/to/foo /path/to/bar
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果一条命令过长，就可以在行尾使用反斜杠，将其改写成多行。这是常见的多行命令的写法。&lt;/p&gt;
&lt;h2 id=&#34;2单引号&#34;&gt;2.单引号&lt;/h2&gt;
&lt;p&gt;Bash允许字符串放在单引号或双引号之中,加以引用.&lt;/p&gt;
&lt;p&gt;单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（&lt;code&gt;*&lt;/code&gt;）、美元符号（&lt;code&gt;$&lt;/code&gt;）、反斜杠（&lt;code&gt;\&lt;/code&gt;）等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
*

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$USER&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$USER&lt;/span&gt;

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$((2+2))&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;$(echo foo)&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; foo&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3双引号&#34;&gt;3.双引号&lt;/h2&gt;
&lt;p&gt;双引号比单引号宽松，可以保留大部分特殊字符的本来含义，但是三个字符除外：美元符号（&lt;code&gt;$&lt;/code&gt;）、反引号（```）和反斜杠（&lt;code&gt;\&lt;/code&gt;）。也就是说，这三个字符在双引号之中，会被 Bash 自动扩展。&lt;/p&gt;
&lt;p&gt;双引号会保存原始命令的输出格式.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 单行输出&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cal&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
一月 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 日 一 二 三 四 五 六 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; ... &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 原始格式输出&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cal&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
      一月 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;
日 一 二 三 四 五 六
          &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
 &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;29&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果&lt;code&gt;$(cal)&lt;/code&gt;不放在双引号之中，&lt;code&gt;echo&lt;/code&gt;就会将所有结果以单行输出，丢弃了所有原始的格式。&lt;/p&gt;
&lt;h2 id=&#34;4here文档&#34;&gt;4.Here文档&lt;/h2&gt;
&lt;p&gt;Here文档是一种输入多行字符串的方法,格式如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; token
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;text
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;它的格式分成开始标记（&lt;code&gt;&amp;lt;&amp;lt; token&lt;/code&gt;）和结束标记（&lt;code&gt;token&lt;/code&gt;）。开始标记是两个小于号 + Here 文档的名称，名称可以随意取，后面必须是一个换行符；结束标记是单独一行顶格写的 Here 文档名称，如果不是顶格，结束标记不起作用。两者之间就是多行字符串的内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
$ cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; &amp;#39;_example_&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$foo
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$foo&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;$foo&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;_example_&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;$foo&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Here 文档的开始标记（&lt;code&gt;_example_&lt;/code&gt;）放在单引号之中，导致变量替换失效了。&lt;/p&gt;
&lt;h2 id=&#34;5here字符串&#34;&gt;5.Here字符串&lt;/h2&gt;
&lt;p&gt;Here 文档还有一个变体，叫做 Here 字符串（Here string），使用三个小于号（&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;）表示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; string
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;它的作用是将字符串通过标准输入，传递给命令。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;bash变量&#34;&gt;Bash变量&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Bash变量分成环境变量和自定义变量两类&lt;/p&gt;
&lt;p&gt;环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt;命令或&lt;code&gt;printenv&lt;/code&gt;命令，可以显示所有环境变量。&lt;/p&gt;
&lt;p&gt;下面是一些常见的环境变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BASHPID&lt;/code&gt;：Bash 进程的进程 ID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BASHOPTS&lt;/code&gt;：当前 Shell 的参数，可以用&lt;code&gt;shopt&lt;/code&gt;命令修改。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISPLAY&lt;/code&gt;：图形环境的显示器名字，通常是&lt;code&gt;:0&lt;/code&gt;，表示 X Server 的第一个显示器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EDITOR&lt;/code&gt;：默认的文本编辑器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HOME&lt;/code&gt;：用户的主目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HOST&lt;/code&gt;：当前主机的名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IFS&lt;/code&gt;：词与词之间的分隔符，默认为空格。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LANG&lt;/code&gt;：字符集以及语言编码，比如&lt;code&gt;zh_CN.UTF-8&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt;：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS1&lt;/code&gt;：Shell 提示符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PS2&lt;/code&gt;： 输入多行命令时，次要的 Shell 提示符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PWD&lt;/code&gt;：当前工作目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RANDOM&lt;/code&gt;：返回一个0到32767之间的随机数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHELL&lt;/code&gt;：Shell 的名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHELLOPTS&lt;/code&gt;：启动当前 Shell 的&lt;code&gt;set&lt;/code&gt;命令的参数，参见《set 命令》一章。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TERM&lt;/code&gt;：终端类型名，即终端仿真器所用的协议。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UID&lt;/code&gt;：当前用户的 ID 编号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USER&lt;/code&gt;：当前用户的用户名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多环境变量很少发生变化，而且是只读的，可以视为常量。由于它们的变量名全部都是大写，所以传统上，如果用户要自己定义一个常量，也会使用全部大写的变量名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，Bash 变量名区分大小写，&lt;code&gt;HOME&lt;/code&gt;和&lt;code&gt;home&lt;/code&gt;是两个不同的变量。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建变量&#34;&gt;创建变量&lt;/h2&gt;
&lt;p&gt;用户创建变量的时候，变量名必须遵守下面的规则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字母、数字和下划线字符组成。&lt;/li&gt;
&lt;li&gt;第一个字符必须是一个字母或一个下划线，不能是数字。&lt;/li&gt;
&lt;li&gt;不允许出现空格和标点符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量声明的语法如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;variable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;value
&lt;span class=&#34;c1&#34;&gt;#如果变量的值包含空格,则必须将值放在引号中&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;myvar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Bash没有数据类型的概念,所有的变量值都是字符串&lt;/p&gt;
&lt;p&gt;自定义变量的例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;z                     &lt;span class=&#34;c1&#34;&gt;# 变量 a 赋值为字符串 z&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a string&amp;#34;&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;# 变量值包含空格，就必须放在引号里面&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;a string and &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# 变量值可以引用其他变量的值&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\t\ta string\n&amp;#34;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# 变量值可以使用转义字符&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ls -l foo.txt&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# 变量值可以是命令的执行结果&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;# 变量值可以是数学运算的结果&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3读取变量&#34;&gt;3.读取变量&lt;/h2&gt;
&lt;p&gt;读取变量的时候,直接在变量名前加上$就可以了&lt;/p&gt;
&lt;p&gt;如果变量不存在,Bash不会报错,而会输出空字符.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果变量的值本身也是变量,可以使用&lt;code&gt;${!varname}&lt;/code&gt;的语法,读取最终的值.&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bash]&#34; data-lang=&#34;bash]&#34;&gt;$ myvar=USER
$ echo ${!myvar}
ruanyf
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4删除变量&#34;&gt;4.删除变量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unset&lt;/code&gt;命令用来删除一个变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除一个变量，也可以将这个变量设成空字符串。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;5输出变量export命令&#34;&gt;5.输出变量,export命令&lt;/h2&gt;
&lt;p&gt;export命令用来向子shell输出变量.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;foo
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;6特殊变量&#34;&gt;6.特殊变量&lt;/h2&gt;
&lt;p&gt;Bash提供了一些特殊变量,这些变量的值由Shell提供,用户不能进行赋值.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$?&lt;/code&gt;:上一个命令的退出码,用来判断上一个命令是否执行成功. 0 为成功,非0,则失败&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt;:为当前Shell的进程ID&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个图书编了可以用来命名临时文件.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LOGFILE=/tmp/output_log.$$&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$_&lt;/code&gt;:上个命令的最后一个参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$!&lt;/code&gt;为最近一个后台执行的异步命令的进程ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$0&lt;/code&gt;:为当前Shell的名称(在命令行直接执行时)或脚本名(在脚本中执行时)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$-&lt;/code&gt;:为当前Shell的启动参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$@&lt;/code&gt;和&lt;code&gt;$#&lt;/code&gt;表示脚本的参数数量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7变量的默认值&#34;&gt;7.变量的默认值&lt;/h2&gt;
&lt;p&gt;Bash提供四个特殊语法,跟变量的默认值有关,目的是保证变量不为空.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#如果变量varname存在且不为空,则返回它的值,否则返回word.&lt;/span&gt;
&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#如果变量vaname存在且不为空,则返回它的值,否则将它设为word&lt;/span&gt;
&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:=word&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#如果变量名存在且不为空,则返回woord,否则返回空.&lt;/span&gt;
&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:+word&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#如果变量varname存在且不为空,则返回它的值,否则打印出varname:message,并终端脚本的执行&lt;/span&gt;
&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:?message&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;8declare命令&#34;&gt;8.declare命令&lt;/h2&gt;
&lt;p&gt;declare命令可以声明一些特殊类型的变量,为变量设置一些限制,比如声明只读类型的变量和整数类型的变量&lt;/p&gt;
&lt;p&gt;语法如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare OPTION VARIABLE=value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;declare&lt;/code&gt;命令的主要参数（OPTION）如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;：声明数组变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;：输出所有函数定义。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-F&lt;/code&gt;：输出所有函数名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;：声明整数变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;：声明变量为小写字母。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：查看变量信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;：声明只读变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;：声明变量为大写字母。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt;：该变量输出为环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;declare命令如果用在函数中,声明的变量只在函数内部有效,等同于local命令&lt;/p&gt;
&lt;p&gt;不带任何参数时,declare命令输出当前环境的所有变量,包括函数在内,等同于不带有任何参数的set命令&lt;/p&gt;
&lt;h2 id=&#34;9readonlymingling&#34;&gt;9.readonlymingling&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;readonly&lt;/code&gt;命令等同于&lt;code&gt;declare -r&lt;/code&gt;，用来声明只读变量，不能改变变量值，也不能&lt;code&gt;unset&lt;/code&gt;变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
$ &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
bash: foo：只读变量
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;更改只读变量&lt;code&gt;foo&lt;/code&gt;会报错，命令执行失败。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readonly&lt;/code&gt;命令有三个参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;：声明的变量为函数名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：打印出所有的只读变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;：声明的变量为数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10let命令&#34;&gt;10.let命令&lt;/h2&gt;
&lt;p&gt;let命令声明变量时,可以直接执行算数表达式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1+2
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;字符串操作&#34;&gt;字符串操作&lt;/h1&gt;
&lt;h2 id=&#34;1-字符串的长度&#34;&gt;1. 字符串的长度&lt;/h2&gt;
&lt;p&gt;获取字符串长度的语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;si&#34;&gt;${#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;大括号&lt;code&gt;{}&lt;/code&gt;是必需的，否则 Bash 会将&lt;code&gt;$#&lt;/code&gt;理解成脚本的参数个数，将变量名理解成文本。&lt;/p&gt;
&lt;h2 id=&#34;2子字符串&#34;&gt;2.子字符串&lt;/h2&gt;
&lt;p&gt;字符串提取子串的语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面语法的含义是返回变量&lt;code&gt;$varname&lt;/code&gt;的子字符串，从位置&lt;code&gt;offset&lt;/code&gt;开始（从&lt;code&gt;0&lt;/code&gt;开始计算），长度为&lt;code&gt;length&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;frogfootman
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
foot
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3搜索和替换&#34;&gt;3.搜索和替换&lt;/h2&gt;
&lt;p&gt;Bash 提供字符串搜索和替换的多种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）字符串头部的模式匹配。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;myPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/home/cam/book/long.file.name

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;myPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;#/*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
cam/book/long.file.name

$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;myPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##/*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
long.file.name
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;（2）字符串尾部的模式匹配。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）任意位置的模式匹配。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;4改变大小写&#34;&gt;4.改变大小写&lt;/h2&gt;
&lt;p&gt;下面的语法可以改变变量的大小写。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 转为大写&lt;/span&gt;
&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;^^&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 转为小写&lt;/span&gt;
&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;varname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,,&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;bash算术运算&#34;&gt;Bash算术运算&lt;/h1&gt;
&lt;h2 id=&#34;1算术表达式&#34;&gt;1.算术表达式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;((...))&lt;/code&gt;语法可以进行整数的算术运算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; + 5&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;((...))&lt;/code&gt;语法支持的算术运算符如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;：加法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;：减法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;：乘法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;：除法（整除）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;：余数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;：指数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt;：自增运算（前缀或后缀）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&lt;/code&gt;：自减运算（前缀或后缀）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;xff&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;255&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2#11111111&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;255&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3位运算&#34;&gt;3.位运算&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$((...))&lt;/code&gt;支持以下的二进制位运算符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;：位左移运算，把一个数字的所有位向左移动指定的位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;：位右移运算，把一个数字的所有位向右移动指定的位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;：位的“与”运算，对两个数字的所有位执行一个&lt;code&gt;AND&lt;/code&gt;操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;：位的“或”运算，对两个数字的所有位执行一个&lt;code&gt;OR&lt;/code&gt;操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;：位的“否”运算，对一个数字的所有位取反。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;：逻辑“否”运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;：位的异或运算（exclusive or），对两个数字的所有位执行一个异或操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4逻辑运算&#34;&gt;4.逻辑运算&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$((...))&lt;/code&gt;支持以下的逻辑运算符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;：小于&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;：大于&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;：小于或相等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;：大于或相等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;：相等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;：不相等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;：逻辑与&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;：逻辑或&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expr1?expr2:expr3&lt;/code&gt;：三元条件运算符。若表达式&lt;code&gt;expr1&lt;/code&gt;的计算结果为非零值（算术真），则执行表达式&lt;code&gt;expr2&lt;/code&gt;，否则执行表达式&lt;code&gt;expr3&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果逻辑表达式为真，返回&lt;code&gt;1&lt;/code&gt;，否则返回&lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &amp;gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &amp;gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;三元运算符执行一个单独的逻辑测试。它用起来类似于&lt;code&gt;if/then/else&lt;/code&gt;语句。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;a&amp;lt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ? &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;a&amp;gt;1 ? &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;5赋值运算&#34;&gt;5.赋值运算&lt;/h2&gt;
&lt;p&gt;算术表达式&lt;code&gt;$((...))&lt;/code&gt;可以执行赋值运算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;6求值运算&#34;&gt;6.求值运算&lt;/h2&gt;
&lt;p&gt;逗号&lt;code&gt;,&lt;/code&gt;在&lt;code&gt;$((...))&lt;/code&gt;内部是求值运算符，执行前后两个表达式，并返回后一个表达式的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;7expr命令&#34;&gt;7.expr命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;expr&lt;/code&gt;命令支持算术运算，可以不使用&lt;code&gt;((...))&lt;/code&gt;语法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ expr &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; + &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;目录堆栈&#34;&gt;目录堆栈&lt;/h1&gt;
&lt;h2 id=&#34;1cd-&#34;&gt;1.cd-&lt;/h2&gt;
&lt;p&gt;Bash 可以记忆用户进入过的目录。默认情况下，只记忆前一次所在的目录，&lt;code&gt;cd -&lt;/code&gt;命令可以返回前一次的目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 当前目录是 /path/to/foo&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; bar

&lt;span class=&#34;c1&#34;&gt;# 重新回到 /path/to/foo&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用户原来所在的目录是&lt;code&gt;/path/to/foo&lt;/code&gt;，进入子目录&lt;code&gt;bar&lt;/code&gt;以后，使用&lt;code&gt;cd -&lt;/code&gt;可以回到原来的目录。&lt;/p&gt;
&lt;h2 id=&#34;2pushdpopd&#34;&gt;2.pushd,popd&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pushd&lt;/code&gt;命令时，会将当前目录先放入堆栈，然后将所要进入的目录也放入堆栈，位置在前一个记录的上方。以后每次使用&lt;code&gt;pushd&lt;/code&gt;命令，都会将所要进入的目录，放在堆栈的顶部。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;popd&lt;/code&gt;命令不带有参数时，会移除堆栈的顶部记录，并进入新的堆栈顶部目录（即原来的第二条目录）。&lt;/p&gt;
&lt;h2 id=&#34;3-dirs&#34;&gt;3. dirs&lt;/h2&gt;
&lt;p&gt;操作目录堆栈的内容&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;bash脚本入门&#34;&gt;Bash脚本入门&lt;/h1&gt;
&lt;p&gt;脚本（script）就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。&lt;/p&gt;
&lt;h2 id=&#34;1shebang行&#34;&gt;1.Shebang行&lt;/h2&gt;
&lt;p&gt;脚本的第一行通常是指定解释器,也就是通过什么解释器执行.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!&lt;/code&gt;后面就是脚本解释器的位置，Bash 脚本的解释器一般是&lt;code&gt;/bin/sh&lt;/code&gt;或&lt;code&gt;/bin/bash&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 或者&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果 Bash 解释器不放在目录&lt;code&gt;/bin&lt;/code&gt;，脚本就无法执行了。为了保险，可以写成下面这样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/usr/bin/env bash&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;2执行权限和路径&#34;&gt;2.执行权限和路径&lt;/h2&gt;
&lt;p&gt;前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 给所有用户执行权限&lt;/span&gt;
$ chmod +x script.sh

&lt;span class=&#34;c1&#34;&gt;# 给所有用户读权限和执行权限&lt;/span&gt;
$ chmod +rx script.sh
&lt;span class=&#34;c1&#34;&gt;# 或者&lt;/span&gt;
$ chmod &lt;span class=&#34;m&#34;&gt;755&lt;/span&gt; script.sh

&lt;span class=&#34;c1&#34;&gt;# 只给脚本拥有者读权限和执行权限&lt;/span&gt;
$ chmod u+rx script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;脚本的权限通常设为&lt;code&gt;755&lt;/code&gt;（拥有者有所有权限，其他人有读和执行权限）或者&lt;code&gt;700&lt;/code&gt;（只有拥有者可以执行）。&lt;/p&gt;
&lt;p&gt;除了执行权限，脚本调用时，一般需要指定脚本的路径（比如&lt;code&gt;path/script.sh&lt;/code&gt;）。如果将脚本放在环境变量&lt;code&gt;$PATH&lt;/code&gt;指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。&lt;/p&gt;
&lt;p&gt;建议在主目录新建一个&lt;code&gt;~/bin&lt;/code&gt;子目录，专门存放可执行脚本，然后把&lt;code&gt;~/bin&lt;/code&gt;加入&lt;code&gt;$PATH&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PATH=$PATH:~/bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;命令改变环境变量&lt;code&gt;$PATH&lt;/code&gt;，将&lt;code&gt;~/bin&lt;/code&gt;添加到&lt;code&gt;$PATH&lt;/code&gt;的末尾。可以将这一行加到&lt;code&gt;~/.bashrc&lt;/code&gt;文件里面，然后重新加载一次&lt;code&gt;.bashrc&lt;/code&gt;，这个配置就可以生效了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ source ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以后不管在什么目录，直接输入脚本文件名，脚本就会执行。&lt;/p&gt;
&lt;h2 id=&#34;3env命令&#34;&gt;3.env命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt;命令总是指向&lt;code&gt;/usr/bin/env&lt;/code&gt;文件，或者说，这个二进制文件总是在目录&lt;code&gt;/usr/bin&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/usr/bin/env NAME&lt;/code&gt;这个语法的意思是，让 Shell 查找&lt;code&gt;$PATH&lt;/code&gt;环境变量里面第一个匹配的&lt;code&gt;NAME&lt;/code&gt;。如果你不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt;命令的参数如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;--ignore-environment&lt;/code&gt;：不带环境变量启动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;, &lt;code&gt;--unset=NAME&lt;/code&gt;：从环境变量中删除一个变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--help&lt;/code&gt;：显示帮助。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--version&lt;/code&gt;：输出版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4注释&#34;&gt;4.注释&lt;/h2&gt;
&lt;p&gt;Bash 脚本中，&lt;code&gt;#&lt;/code&gt;表示注释，可以放在行首，也可以放在行尾。&lt;/p&gt;
&lt;h2 id=&#34;5脚本参数&#34;&gt;5.脚本参数&lt;/h2&gt;
&lt;p&gt;调用脚本的时候，脚本文件名后面可以带有参数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ script.sh word1 word2 word3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;脚本文件内部，可以使用特殊变量，引用这些参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt;：脚本文件名，即&lt;code&gt;script.sh&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt;~&lt;code&gt;$9&lt;/code&gt;：对应脚本的第一个参数到第九个参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$#&lt;/code&gt;：参数的总数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;/code&gt;：全部的参数，参数之间使用空格分隔。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$*&lt;/code&gt;：全部的参数，参数之间使用变量&lt;code&gt;$IFS&lt;/code&gt;值的第一个字符分隔，默认为空格，但是可以自定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果多个参数放在双引号里面，视为一个参数。&lt;/p&gt;
&lt;h2 id=&#34;6shift命令&#34;&gt;6.shift命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt;命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数（&lt;code&gt;$1&lt;/code&gt;），使得后面的参数向前一位，即&lt;code&gt;$2&lt;/code&gt;变成&lt;code&gt;$1&lt;/code&gt;、&lt;code&gt;$3&lt;/code&gt;变成&lt;code&gt;$2&lt;/code&gt;、&lt;code&gt;$4&lt;/code&gt;变成&lt;code&gt;$3&lt;/code&gt;，以此类推。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt;循环结合&lt;code&gt;shift&lt;/code&gt;命令，也可以读取每一个参数。]&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;一共输入了 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 个参数&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;剩下 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 个参数&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;参数：&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;shift&lt;/code&gt;命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;7getopts命令&#34;&gt;7.getopts命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;getopts&lt;/code&gt;命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与&lt;code&gt;while&lt;/code&gt;循环一起使用，取出脚本所有的带有前置连词线（&lt;code&gt;-&lt;/code&gt;）的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getopts optstring name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它带有两个参数。第一个参数&lt;code&gt;optstring&lt;/code&gt;是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数&lt;code&gt;-l&lt;/code&gt;、&lt;code&gt;-h&lt;/code&gt;、&lt;code&gt;-a&lt;/code&gt;，其中只有&lt;code&gt;-a&lt;/code&gt;可以带有参数值，而&lt;code&gt;-l&lt;/code&gt;和&lt;code&gt;-h&lt;/code&gt;是开关参数，那么&lt;code&gt;getopts&lt;/code&gt;的第一个参数写成&lt;code&gt;lha:&lt;/code&gt;，顺序不重要。注意，&lt;code&gt;a&lt;/code&gt;后面有一个冒号，表示该参数带有参数值，&lt;code&gt;getopts&lt;/code&gt;规定带有参数值的配置项参数，后面必须带有一个冒号（&lt;code&gt;:&lt;/code&gt;）。&lt;code&gt;getopts&lt;/code&gt;的第二个参数&lt;code&gt;name&lt;/code&gt;是一个变量名，用来保存当前取到的配置项参数，即&lt;code&gt;l&lt;/code&gt;、&lt;code&gt;h&lt;/code&gt;或&lt;code&gt;a&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getopts&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;lha:&amp;#39;&lt;/span&gt; OPTION&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OPTION&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in
    l&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;linuxconfig&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;

    h&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;h stands for h&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;

    a&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;avalue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;The value provided is &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OPTARG&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
    ?&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;script usage: &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; [-l] [-h] [-a somevalue]&amp;#34;&lt;/span&gt; &amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$OPTIND&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;while&lt;/code&gt;循环不断执行&lt;code&gt;getopts &#39;lha:&#39; OPTION&lt;/code&gt;命令，每次执行就会读取一个连词线参数（以及对应的参数值），然后进入循环体。变量&lt;code&gt;OPTION&lt;/code&gt;保存的是，当前处理的那一个连词线参数（即&lt;code&gt;l&lt;/code&gt;、&lt;code&gt;h&lt;/code&gt;或&lt;code&gt;a&lt;/code&gt;）。如果用户输入了没有指定的参数（比如&lt;code&gt;-x&lt;/code&gt;），那么&lt;code&gt;OPTION&lt;/code&gt;等于&lt;code&gt;?&lt;/code&gt;。循环体内使用&lt;code&gt;case&lt;/code&gt;判断，处理这四种不同的情况。&lt;/p&gt;
&lt;h2 id=&#34;8配置项参数终止符&#34;&gt;8.配置项参数终止符&lt;/h2&gt;
&lt;p&gt;变量当作命令的参数时，有时希望指定变量只能作为实体参数，不能当作配置项参数，这时可以使用配置项参数终止符&lt;code&gt;--&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;myPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;~/docs&amp;#34;&lt;/span&gt;
$ ls -- &lt;span class=&#34;nv&#34;&gt;$myPath&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;9exit命令&#34;&gt;9.exit命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;exit&lt;/code&gt;命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 退出值为0（成功）&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 退出值为1（失败）&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;退出时，脚本会返回一个退出值。脚本的退出值，&lt;code&gt;0&lt;/code&gt;表示正常，&lt;code&gt;1&lt;/code&gt;表示发生错误，&lt;code&gt;2&lt;/code&gt;表示用法不对，&lt;code&gt;126&lt;/code&gt;表示不是可执行脚本，&lt;code&gt;127&lt;/code&gt;表示命令没有发现。如果脚本被信号&lt;code&gt;N&lt;/code&gt;终止，则退出值为&lt;code&gt;128 + N&lt;/code&gt;。简单来说，只要退出值非0，就认为执行出错。&lt;/p&gt;
&lt;h2 id=&#34;10命令执行结果&#34;&gt;10.命令执行结果&lt;/h2&gt;
&lt;p&gt;命令执行结束后，会有一个返回值。&lt;code&gt;0&lt;/code&gt;表示执行成功，非&lt;code&gt;0&lt;/code&gt;（通常是&lt;code&gt;1&lt;/code&gt;）表示执行失败。环境变量&lt;code&gt;$?&lt;/code&gt;可以读取前一个命令的返回值。&lt;/p&gt;
&lt;p&gt;利用这一点，可以在脚本中对命令执行结果进行判断。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$some_directory&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  rm *
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;无法切换目录！&amp;#34;&lt;/span&gt; 1&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;11source命令&#34;&gt;11.source命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt;命令用于执行一个脚本，通常用于重新加载一个配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ source .bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt;命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，&lt;code&gt;source&lt;/code&gt;命令执行脚本时，不需要&lt;code&gt;export&lt;/code&gt;变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt;有一个简写形式，可以使用一个点（&lt;code&gt;.&lt;/code&gt;）来表示。&lt;/p&gt;
&lt;h2 id=&#34;12别名alias命令&#34;&gt;12.别名,alias命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;alias&lt;/code&gt;命令用来为一个命令指定别名，这样更便于记忆。下面是&lt;code&gt;alias&lt;/code&gt;的格式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias NAME=DEFINITION&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;date +&amp;#34;%A, %B %-d, %Y&amp;#34;&amp;#39;&lt;/span&gt;
$ today
星期一, 一月 6, &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;alias&lt;/code&gt;定义的别名也可以接受参数，参数会直接传入原始命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;echo It says: &amp;#39;&lt;/span&gt;
$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; hello world
It says: hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;unalias&lt;/code&gt;命令可以解除别名。&lt;/p&gt;
&lt;p&gt;直接调用&lt;code&gt;alias&lt;/code&gt;命令，可以显示所有别名。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;read命令&#34;&gt;read命令&lt;/h1&gt;
&lt;p&gt;脚本需要在执行过程中，由用户提供一部分数据，这时可以使用read命令。它将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束。&lt;/p&gt;
&lt;p&gt;read命令的格式如下。
&lt;code&gt;read [-options] [variable...]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;输入一些文本 &amp;gt; &amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; text
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;你的输入：&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$text&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;###&lt;/span&gt;
$ bash demo.sh
输入一些文本 &amp;gt; 你好，世界
你的输入：你好，世界
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;条件判断&#34;&gt;条件判断&lt;/h1&gt;
&lt;h2 id=&#34;if结构&#34;&gt;if结构&lt;/h2&gt;
&lt;p&gt;语法如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; commands&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  commands
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; commands&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  commands...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  commands&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;test命令&#34;&gt;test命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 写法一&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; expression

&lt;span class=&#34;c1&#34;&gt;# 写法二&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; expression &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 写法三&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; expression &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的expression是一个表达式。这个表达式为真，test命令执行成功（返回值为0）；表达式为伪，test命令执行失败（返回值为1）。注意，第二种和第三种写法，[和]与内部的表达式之间必须有空格。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;剩余部分_改期继续_&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/bash/" term="Bash" label="Bash" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]TFRecords文件的生成和读取方法</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tftfrecords%E6%96%87%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/" />
            <id>https://chenbokaix250.github.io/tech/tftfrecords%E6%96%87%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90%E5%92%8C%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/</id>
            <updated>2020-04-29T18:50:13&#43;08:00</updated>
            <published>2020-04-29T14:50:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">TFRecords文件的生成和读取方法 TFRecords是一种tensorflow的……</summary>
            
                <content type="html">&lt;h1 id=&#34;tfrecords文件的生成和读取方法&#34;&gt;TFRecords文件的生成和读取方法&lt;/h1&gt;
&lt;p&gt;TFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer（PB）协议（百度百科给的定义：protocol buffer(以下简称PB)是google 的一种数据交换的格式，它独立于语言，独立于平台），其后缀一般为tfrecord。TFRecords文件方便复制和移动，能够很好的利用内存，无需单独标记文件，适用于大量数据的顺序读取，是tensorflow“从文件里读取数据”的一种官方推荐方法.&lt;/p&gt;
&lt;h2 id=&#34;tfrecords文件的生成&#34;&gt;TFRecords文件的生成&lt;/h2&gt;
&lt;p&gt;其源代码主要位于文件tensorflow/python/lib/io/tf_record.py
官方例程tensorflow/examples/how_tos/reading_data/convert_to_records.py&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步,生成TFRecord Writer&lt;/strong&gt;
&lt;code&gt;writer = tf.python_io.TFRecordWriter(path, options=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;path：TFRecord文件的存放路径；&lt;/p&gt;
&lt;p&gt;option：TFRecordOptions对象，定义TFRecord文件保存的压缩格式；&lt;/p&gt;
&lt;p&gt;有三种文件压缩格式可选，分别为TFRecordCompressionType.ZLIB、TFRecordCompressionType.GZIP以及TFRecordCompressionType.NONE，默认为最后一种，即不做任何压缩，定义方法如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;option = tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.ZLIB)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步，tf.train.Feature生成协议信息&lt;/strong&gt;
一个协议信息特征（这里翻译可能不准确）是将原始数据编码成特定的格式，一般是features中又包含feature，内层feature是一个字典值，它是将某个类型列表编码成特定的feature格式，而该字典键用于读取TFRecords文件时索引得到不同的数据，某个类型列表可能包含零个或多个值，列表类型一般有BytesList, FloatList, Int64List，通常用如下方法来生成某个列表类型再送给内层的tf.train.Feature编码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# value转化为字符串（二进制）列表&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FloatList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# value转化为浮点型列表&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# value转化为整型列表&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中,value是你要保存的数据&lt;/p&gt;
&lt;p&gt;内层feature编码方式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;feature_internal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;weights&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FloatList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;image_raw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image_raw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;外层features再将内层字典编码：
&lt;code&gt;features_extern = tf.train.Features(feature_internal)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看起来，tf.train.Feature这个接口可以编码封装列表类型和字典类型，但注意用的接口是不一样的，内层用的是tf.train.Feature而外层用的是tf.train.Features，一个是对单一数据编码成单元feature，而另一个是将包含多个单元feature的字典数据再编码为集成的features。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步,使用tf.train.Example将features编码数据封装成特定的PB协议格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example = tf.train.Example(features_extern)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步,将example数据系列化为字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;example_str = example.SerializeToString()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步,将系列化为字符串的Example数据写入协议缓冲器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;writer.write(example_str)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;TFRecordWriter拥有类似python文件操作的接口，如writer.flush()立即将内存数据刷新到磁盘文件里，writer.close()关闭TFRecordWriter，在写完数据到协议缓冲区后通常需要调用writer.close()主动关闭TFRecords文件操作接口。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tfrecords文件的读取&#34;&gt;TFRecords文件的读取&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TFRecords文件的读取主要是使用tf.TFRecordReader和tf.python_io.tf_record_iterator其源代码位于tensorflow/python/ops/io_ops.py和tensorflow/python/lib/io/tf_record.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步，使用tf.train.string_input_producer生成文件队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filename_queues = tf.train.string_input_producer([tfrecord_path_none,tfrecord_path_zlib,tfrecord_path_gzip])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步,生成TFRecord Reader&lt;/strong&gt;
&lt;code&gt;reader = tf.TFRecordReader(name=None, options=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步,读取TFRecord文件&lt;/strong&gt;
&lt;code&gt;_,serialized_example = reader.read(filename)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;filename是tf.train.string_input_producer得到的文件队列名，读取得到的是一个系列化的example。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步,使用tf.parse_single_example解析得到的系列化example&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;features = tf.parse_single_example( 
serialized_example,
features={
&amp;quot;float_val&amp;quot;:tf.FixedLenFeature([], tf.float),
&amp;quot;width&amp;quot;:tf.FixedLenFeature([], tf.int64),
&amp;quot;height&amp;quot;:tf.FixedLenFeature([], tf.int64),
&amp;quot;image_raw&amp;quot;:tf.FixedLenFeature([], tf.string)
}
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要按照存储时的格式还原features，必须写明features内的字典的键索引得到特定的数据！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步,处理得到的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;features是一个字典，要使用特定数据，需要用字典的key来索引得到相应的数据，如要得到的width的值，则可以以features[&#39;width&#39;]得到，对于得到的数据还需要做一些处理的，比如features[&#39;image_raw&#39;]需要decode才能显示整个图片。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在tensorflow2.0中实现了以上操作 贴一下代码,还有一些问题没有解决
后续遇到再补充&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tfrecord_imagepy&#34;&gt;tfrecord_image.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow.compat.v1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disable_v2_behavior&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pic.jpg&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;image_jpeg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode_image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;channels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;decode_jpeg_picture&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expand_animations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;image_jpeg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image_jpeg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4032&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;img_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_jpeg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;path_none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img_compress_none.tfrecord&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;path_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img_compress_zlib.tfrecord&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;path_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img_compress_gzip.tfrecord&amp;#34;&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;options_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordCompressionType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ZLIB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;options_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordCompressionType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GZIP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 定义不同压缩选项的TFRecordWriter&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path_none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path_zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options_zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python_io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path_gzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;options_gzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 编码数据，将数据生成特定类型列表后再编码为feature格式，再生成字典形式&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;feature_internal_none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;float_val&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FloatList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;9.99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;image_raw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;feature_internal_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;float_val&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FloatList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;8.88&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;image_raw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;feature_internal_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;float_val&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FloatList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6.66&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;image_raw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 编码内层字典形式数据&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;features_extern_none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature_internal_none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;features_extern_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature_internal_zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;features_extern_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature_internal_gzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 将外层features生成特定格式的example&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;example_none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features_extern_none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;example_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features_extern_zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;example_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features_extern_gzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# example系列化字符串&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;example_str_none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example_none&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SerializeToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;example_str_zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example_zlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SerializeToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;example_str_gzip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;example_gzip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SerializeToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 将系列化字符串写入协议缓冲区&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_none&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example_str_none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_zlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example_str_zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_gzip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example_str_gzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 关闭TFRecords文件操作接口&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_none&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_zlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer_gzip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;finish to write data to tfrecord file!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;tfread_imgpy&#34;&gt;tfread_img.py&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# coding: utf-8&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# In[5]:&lt;/span&gt;


&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# In[10]:&lt;/span&gt;


&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;IPython&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# In[11]:&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;raw_image_dataset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordDataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;img_compress_none.tfrecord&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# In[12]:&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;image_feature_description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;float_val&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FixedLenFeature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FixedLenFeature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FixedLenFeature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;image_raw&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FixedLenFeature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# In[13]:&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_parse_image_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example_proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Parse the input tf.Example proto using the dictionary above.&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_single_example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example_proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_feature_description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;parsed_image_dataset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;raw_image_dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_parse_image_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;parsed_image_dataset&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# In[14]:&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_features&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parsed_image_dataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;image_raw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;image_raw&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image_raw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;tensorflow1.x与tensorflow2.x兼容的两种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;import tensorflow.compat.v1 as tf &lt;/code&gt;   &lt;code&gt;  tf.disable_v2_behavior()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.compat.v1.Session()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">导数常见性质</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E5%AF%BC%E6%95%B0%E5%B8%B8%E8%A7%81%E6%80%A7%E8%B4%A8/" />
            <id>https://chenbokaix250.github.io/tech/%E5%AF%BC%E6%95%B0%E5%B8%B8%E8%A7%81%E6%80%A7%E8%B4%A8/</id>
            <updated>2020-04-25T12:15:48&#43;08:00</updated>
            <published>2020-04-25T11:25:34&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">导数常见性质 基本函数的导数 常数函数c导数为0,如y=2函数导数 $ {y}$&#39;= 0 线性函数 y = a *……</summary>
            
                <content type="html">&lt;h1 id=&#34;导数常见性质&#34;&gt;导数常见性质&lt;/h1&gt;

&lt;h2 id=&#34;基本函数的导数&#34;&gt;基本函数的导数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;常数函数c导数为0,如y=2函数导数 $ {y}$&#39;= 0&lt;/li&gt;
&lt;li&gt;线性函数 &lt;code&gt;y = a * x +c&lt;/code&gt;导数为a,如函数&lt;code&gt;y = 2 * x + 1&lt;/code&gt;导数 $ {y}$&#39; = 2&lt;/li&gt;
&lt;li&gt;幂函数 $x^{a}$导数为a * $x&lt;sup&gt;{a-1}$,如y=$x&lt;/sup&gt;{2}$函数$ {y}$&#39;=2 * x&lt;/li&gt;
&lt;li&gt;指数函数$a&lt;sup&gt;{x}$导数为$a&lt;/sup&gt;{x}$ * lna,如y = $e&lt;sup&gt;{x}$函数${y}&#39;=e&lt;/sup&gt;{x}*lne=e^{x}$&lt;/li&gt;
&lt;li&gt;对数函数${log_{a}}^{x}$导数$\frac{1}{xlna}$,如y=lnx函数${y}&#39; = \frac{1}{xlne}=\frac{1}{x}$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://i.loli.net/2020/04/25/1P3jEBlzkAp6cbU.png&#34; alt=&#34;截屏2020-04-25下午12.11.45.png&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&#34;常用导数性质&#34;&gt;常用导数性质&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;函数加减 ${(f+g)}&#39; = {f}&#39;+{g}&#39;$&lt;/li&gt;
&lt;li&gt;函数相乘 ${(fg)}&#39; = {f}&#39;&lt;em&gt;g + f&lt;/em&gt;{g}&#39;$&lt;/li&gt;
&lt;li&gt;函数相除 ${\left ( \frac{f}{g} \right )}&#39; = \frac{{f}&#39;g-f{g}&#39;}{g^{2}},g\neq 0$&lt;/li&gt;
&lt;li&gt;复合函数的导数考虑复合函数f(g(x)),另u = g(x),其导数 $\frac{df(g(x))}{dx} = \frac{df(u)}{du}\frac{dg(x)}{dx} = {f}&#39;(u)*{g}&#39;(x)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://i.loli.net/2020/04/25/KuktvSCEaQPJhIi.png&#34; alt=&#34;截屏2020-04-25下午12.11.54.png&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;在markdown中插入数学公式的方法&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn&#34;&gt;LATex公式编辑器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;利用生成代码 前后加$可以得到markdown中公式&lt;/p&gt;

&lt;p&gt;但是由于hugo本身渲染插件的问题 导致在网页上显示有问题 Typora上的显示是没问题的&lt;/p&gt;

&lt;p&gt;有空研究一下 应该是主题本身的问题导致的&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/math/" term="math" label="math" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">第一个100公里</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/%E7%AC%AC%E4%B8%80%E4%B8%AA100%E5%85%AC%E9%87%8C/" />
            <id>https://chenbokaix250.github.io/life/%E7%AC%AC%E4%B8%80%E4%B8%AA100%E5%85%AC%E9%87%8C/</id>
            <updated>2020-06-03T16:37:11&#43;08:00</updated>
            <published>2020-04-24T16:23:02&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">人生第一个100公路 3月份腰部韧带拉伤 恢复后决定减体重 四月份目标超过100公里,已经……</summary>
            
                <content type="html">&lt;h1 id=&#34;人生第一个100公路&#34;&gt;人生第一个100公路&lt;/h1&gt;
&lt;p&gt;3月份腰部韧带拉伤&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/04/24/BAle6PiFX8S1V9f.jpg&#34; alt=&#34;IMG_0437.JPG&#34;&gt;&lt;/p&gt;
&lt;p&gt;恢复后决定减体重&lt;/p&gt;
&lt;p&gt;四月份目标超过100公里,已经完成挑战&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/04/24/I1Ok9NBnrARq4pi.jpg&#34; alt=&#34;IMG_0438.JPG&#34;&gt;&lt;/p&gt;
&lt;p&gt;四月份再完成一次10公里,5月超过150公里 加油&lt;/p&gt;
&lt;p&gt;目前体重&lt;strong&gt;82kg&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;计划第一阶段减体重75kg&#34;&gt;计划第一阶段减体重75kg&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/04/24/HhFfa2PB1joUYtJ.jpg&#34; alt=&#34;IMG_0435.JPG&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;等500公里换跑鞋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前目标 &lt;strong&gt;亚瑟士 GT-2000&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4月跑步结果:
&lt;img src=&#34;https://i.loli.net/2020/06/03/GYNV5Fod6zLRjlp.jpg&#34; alt=&#34;IMG_0776.JPG&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/%E8%B7%91%E6%AD%A5/" term="跑步" label="跑步" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]训练模型的3种方法</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tf%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/" />
            <id>https://chenbokaix250.github.io/tech/tf%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
            <updated>2020-04-21T11:27:40&#43;08:00</updated>
            <published>2020-04-21T10:42:06&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">训练模型的3种方法 模型的训练主要有 内置fit方法 内置tran_on_batch方法 自……</summary>
            
                <content type="html">&lt;h1 id=&#34;训练模型的3种方法&#34;&gt;训练模型的3种方法&lt;/h1&gt;
&lt;p&gt;模型的训练主要有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置fit方法&lt;/li&gt;
&lt;li&gt;内置tran_on_batch方法&lt;/li&gt;
&lt;li&gt;自定义训练循环&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注:fit_generator方法在tf.keras中不推荐使用，其功能已经被fit包含。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow.keras&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; 

&lt;span class=&#34;c1&#34;&gt;#打印时间分割线&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printbar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;today_ts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today_ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3600&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;minite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today_ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today_ts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timeformat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;timestring&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeformat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeformat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;timeformat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;separator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;==========&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BATCH_SIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reuters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;x_train&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preprocessing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pad_sequences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxlen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;x_test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;preprocessing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pad_sequences&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxlen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x_train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;CAT_NUM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y_train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; \
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BATCH_SIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOTUNE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   
&lt;span class=&#34;n&#34;&gt;ds_test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; \
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BATCH_SIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
          &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOTUNE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;一内置fit方法&#34;&gt;一.内置fit方法&lt;/h2&gt;
&lt;p&gt;该方法功能非常强大, 支持对numpy array, tf.data.Dataset以及 Python generator数据进行训练。&lt;/p&gt;
&lt;p&gt;并且可以通过设置回调函数实现对训练过程的复杂控制逻辑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CAT_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;softmax&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compile_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Nadam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;losses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalCrossentropy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalAccuracy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseTopKCategoricalAccuracy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compile_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-tf.keras.backend.clear_session()&#34; data-lang=&#34;tf.keras.backend.clear_session()&#34;&gt;def create_model():
    
    model = models.Sequential()
    model.add(layers.Embedding(MAX_WORDS,7,input_length=MAX_LEN))
    model.add(layers.Conv1D(filters = 64,kernel_size = 5,activation = &amp;quot;relu&amp;quot;))
    model.add(layers.MaxPool1D(2))
    model.add(layers.Conv1D(filters = 32,kernel_size = 3,activation = &amp;quot;relu&amp;quot;))
    model.add(layers.MaxPool1D(2))
    model.add(layers.Flatten())
    model.add(layers.Dense(CAT_NUM,activation = &amp;quot;softmax&amp;quot;))
    return(model)

def compile_model(model):
    model.compile(optimizer=optimizers.Nadam(),
                loss=losses.SparseCategoricalCrossentropy(),
                metrics=[metrics.SparseCategoricalAccuracy(),metrics.SparseTopKCategoricalAccuracy(5)]) 
    return(model)
 
model = create_model()
model.summary()
model = compile_model(model)
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sequential&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Shape&lt;/span&gt;              &lt;span class=&#34;n&#34;&gt;Param&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#   &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;embedding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;216874&lt;/span&gt;    
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;conv1d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;296&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;2304&lt;/span&gt;      
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;max_pooling1d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPooling1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;148&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;conv1d_1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;146&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;6176&lt;/span&gt;      
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;max_pooling1d_1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPooling1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;flatten&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2336&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                &lt;span class=&#34;mi&#34;&gt;107502&lt;/span&gt;    
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Total&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;332&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;856&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;332&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;856&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Non&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;history = model.fit(ds_train,validation_data = ds_test,epochs = 10)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二内置train_on_batch方法&#34;&gt;二.内置train_on_batch方法&lt;/h2&gt;
&lt;p&gt;该内置方法相比较fit方法更加灵活，可以不通过回调函数而直接在批次层次上更加精细地控制训练的过程。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CAT_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;softmax&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compile_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Nadam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;losses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalCrossentropy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalAccuracy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseTopKCategoricalAccuracy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compile_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sequential&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Shape&lt;/span&gt;              &lt;span class=&#34;n&#34;&gt;Param&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#   &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;embedding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;216874&lt;/span&gt;    
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;conv1d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;296&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;2304&lt;/span&gt;      
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;max_pooling1d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPooling1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;148&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;conv1d_1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;146&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;6176&lt;/span&gt;      
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;max_pooling1d_1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPooling1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;flatten&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2336&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                &lt;span class=&#34;mi&#34;&gt;107502&lt;/span&gt;    
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Total&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;332&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;856&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;332&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;856&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Non&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;train_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epoches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epoches&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        
        &lt;span class=&#34;c1&#34;&gt;# 在后期降低学习率&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Lowering optimizer Learning Rate...&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;train_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_on_batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;valid_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_on_batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printbar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;epoch = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;train:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;valid:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid_result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;train_model(model,ds_train,ds_test,10)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三自定义训练循环&#34;&gt;三.自定义训练循环&lt;/h2&gt;
&lt;p&gt;自定义训练循环无需编译模型，直接利用优化器根据损失函数反向传播迭代参数，拥有最高的灵活性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CAT_NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;softmax&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optimizers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Nadam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;loss_func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;losses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalCrossentropy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;train_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;train_loss&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;train_metric&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalAccuracy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;train_accuracy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;valid_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;valid_loss&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;valid_metric&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SparseCategoricalAccuracy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;valid_accuracy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;train_step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GradientTape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;predictions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;training&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loss_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predictions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;gradients&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gradient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable_variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;apply_gradients&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gradients&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable_variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;train_loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;train_metric&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predictions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    

&lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;valid_step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;predictions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;batch_loss&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loss_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predictions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;valid_loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch_loss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;valid_metric&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predictions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;train_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epochs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epochs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;train_step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;valid_step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Epoch=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;,Loss:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;,Accuracy:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;,Valid Loss:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;,Valid Accuracy:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;printbar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epoch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_metric&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid_loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid_metric&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())))&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            
        &lt;span class=&#34;n&#34;&gt;train_loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_states&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;valid_loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_states&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;train_metric&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_states&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;valid_metric&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_states&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;train_model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]构建模型的3种方法</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tf%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B%E7%9A%843%E4%B8%AD%E6%96%B9%E6%B3%95/" />
            <id>https://chenbokaix250.github.io/tech/tf%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B%E7%9A%843%E4%B8%AD%E6%96%B9%E6%B3%95/</id>
            <updated>2020-04-21T10:40:55&#43;08:00</updated>
            <published>2020-04-21T09:58:31&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">构建模型的3种方法 可以使用以下3种方法构建模型: Sequential按层顺序构建模型……</summary>
            
                <content type="html">&lt;h1 id=&#34;构建模型的3种方法&#34;&gt;构建模型的3种方法&lt;/h1&gt;
&lt;p&gt;可以使用以下3种方法构建模型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequential按层顺序构建模型&lt;/li&gt;
&lt;li&gt;使用函数式API构建任意结构模型&lt;/li&gt;
&lt;li&gt;继承Model基类构建自定义模型&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对于顺序结构的模型,有限使用Sequential方法构建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果模型有多输入或者多输出，或者模型需要共享权重，或者模型具有残差连接等非顺序结构，推荐使用函数式API进行创建。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果无特定必要，尽可能避免使用Model子类化的方式构建模型，这种方式提供了极大的灵活性，但也有更大的概率出错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面以IMDB电影评论的分类问题为例,演示3种创建模型的方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tqdm&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tqdm&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow.keras&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;train_token_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/imdb/train_token.csv&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;test_token_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/imdb/test_token.csv&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# We will only consider the top 10,000 words in the dataset&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# We will cut reviews after 200 words&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BATCH_SIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; 

&lt;span class=&#34;c1&#34;&gt;# 构建管道&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;parse_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds_train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TextLineDataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filenames&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train_token_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; \
   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_parallel_calls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOTUNE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BATCH_SIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOTUNE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds_test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TextLineDataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filenames&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_token_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; \
   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_parallel_calls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOTUNE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BATCH_SIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
   &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AUTOTUNE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;一sequential按层顺序创建模型&#34;&gt;一.Sequential按层顺序创建模型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Nadam&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import datetime
baselogger = callbacks.BaseLogger(stateful_metrics=[&amp;quot;AUC&amp;quot;])
logdir = &amp;quot;./data/keras_model/&amp;quot; + datetime.datetime.now().strftime(&amp;quot;%Y%m%d-%H%M%S&amp;quot;)
tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)
history = model.fit(ds_train,validation_data = ds_test,
        epochs = 6,callbacks=[baselogger,tensorboard_callback])
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%matplotlib inline
%config InlineBackend.figure_format = &#39;svg&#39;

import matplotlib.pyplot as plt

def plot_metric(history, metric):
    train_metrics = history.history[metric]
    val_metrics = history.history[&#39;val_&#39;+metric]
    epochs = range(1, len(train_metrics) + 1)
    plt.plot(epochs, train_metrics, &#39;bo--&#39;)
    plt.plot(epochs, val_metrics, &#39;ro-&#39;)
    plt.title(&#39;Training and validation &#39;+ metric)
    plt.xlabel(&amp;quot;Epochs&amp;quot;)
    plt.ylabel(metric)
    plt.legend([&amp;quot;train_&amp;quot;+metric, &#39;val_&#39;+metric])
    plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;plot_metric(history,&amp;quot;AUC&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二函数式api创建任意结构模型&#34;&gt;二.函数式API创建任意结构模型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_LEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeparableConv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeparableConv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GlobalMaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeparableConv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeparableConv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GlobalMaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeparableConv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SeparableConv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GlobalMaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Concatenate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Nadam&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import datetime
logdir = &amp;quot;./data/keras_model/&amp;quot; + datetime.datetime.now().strftime(&amp;quot;%Y%m%d-%H%M%S&amp;quot;)
tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)
history = model.fit(ds_train,validation_data = ds_test,epochs = 6,callbacks=[tensorboard_callback])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;plot_metric(history,&amp;quot;AUC&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;三model子类化创建自定义模型&#34;&gt;三.Model子类化创建自定义模型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 先自定义一个残差模块，为自定义Layer&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                   &lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;same&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                   &lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;same&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                                   &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;same&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxpool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool1D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 相当于设置self.built = True&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxpool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;#如果要让自定义的Layer通过Functional API 组合成模型时可以序列化，需要自定义get_config方法。&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
        &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;kernel_size&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 测试ResBlock&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;resblock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;resblock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;resblock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_output_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;TensorShape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 自定义模型，实际上也可以使用Sequential或者FunctionalAPI&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ImdbModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ImdbModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;embedding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_WORDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sigmoid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ImdbModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImdbModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Nadam&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;AUC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;imdb_model&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Shape&lt;/span&gt;              &lt;span class=&#34;n&#34;&gt;Param&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#   &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;embedding&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Embedding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;multiple&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;70000&lt;/span&gt;     
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;res_block&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;multiple&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;19143&lt;/span&gt;     
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;res_block_1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ResBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;multiple&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;13703&lt;/span&gt;     
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;multiple&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;351&lt;/span&gt;       
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Total&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;103&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;197&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;103&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;197&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Non&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]数据管道Dataset</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tf%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93dataset/" />
            <id>https://chenbokaix250.github.io/tech/tf%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93dataset/</id>
            <updated>2020-04-20T18:43:32&#43;08:00</updated>
            <published>2020-04-20T15:36:52&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">数据管道Dataset 如果需要训练的数据大小不大，例如不到1G，那么可以直接全部读入……</summary>
            
                <content type="html">&lt;h1 id=&#34;数据管道dataset&#34;&gt;数据管道Dataset&lt;/h1&gt;
&lt;p&gt;如果需要训练的数据大小不大，例如不到1G，那么可以直接全部读入内存中进行训练，这样一般效率最高。&lt;/p&gt;
&lt;p&gt;但如果需要训练的数据很大，例如超过10G，无法一次载入内存，那么通常需要在训练的过程中分批逐渐读入。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;tf.data API&lt;/code&gt;可以构建数据输入管道，轻松处理大量的数据，不同的数据格式，以及不同的数据转换。&lt;/p&gt;
&lt;h2 id=&#34;构建数据管道&#34;&gt;构建数据管道&lt;/h2&gt;
&lt;p&gt;可以从 Numpy array, Pandas DataFrame, Python generator, csv文件, 文本文件, 文件路径, tfrecords文件等方式构建数据管道。&lt;/p&gt;
&lt;p&gt;其中通过Numpy array, Pandas DataFrame, 文件路径构建数据管道是最常用的方法。&lt;/p&gt;
&lt;p&gt;通过tfrecords文件方式构建数据管道较为复杂，需要对样本构建tf.Example后压缩成字符串写到tfrecords文件，读取后再解析成tf.Example。&lt;/p&gt;
&lt;p&gt;但tfrecords文件的优点是压缩后文件较小，便于网络传播，加载速度较快。&lt;/p&gt;
&lt;h3 id=&#34;从numpy-array构建数据管道&#34;&gt;从numpy array构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sklearn&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([5.1 3.5 1.4 0.2], shape=(4,), dtype=float64) tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([4.9 3.  1.4 0.2], shape=(4,), dtype=float64) tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([4.7 3.2 1.3 0.2], shape=(4,), dtype=float64) tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([4.6 3.1 1.5 0.2], shape=(4,), dtype=float64) tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([5.  3.6 1.4 0.2], shape=(4,), dtype=float64) tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;从pdandas-dataframe构建数据管道&#34;&gt;从Pdandas DataFrame构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从 Pandas DataFrame构建数据管道&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sklearn&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datasets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dfiris&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DataFrame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dfiris&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iris&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#{&amp;#39;sepal length (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=5.1&amp;gt;, &amp;#39;sepal width (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=3.5&amp;gt;, &amp;#39;petal length (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=1.4&amp;gt;, &amp;#39;petal width (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=0.2&amp;gt;} tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#{&amp;#39;sepal length (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=4.9&amp;gt;, &amp;#39;sepal width (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=3.0&amp;gt;, &amp;#39;petal length (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=1.4&amp;gt;, &amp;#39;petal width (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=0.2&amp;gt;} tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#{&amp;#39;sepal length (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=4.7&amp;gt;, &amp;#39;sepal width (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=3.2&amp;gt;, &amp;#39;petal length (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=1.3&amp;gt;, &amp;#39;petal width (cm)&amp;#39;: &amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=0.2&amp;gt;} tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;从python-generator构建数据管道&#34;&gt;从Python generator构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从Python generator构建数据管道&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pyplot&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plt&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow.keras.preprocessing.image&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImageDataGenerator&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 定义一个从文件中读取图片的generator&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;image_generator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImageDataGenerator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rescale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flow_from_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                    &lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/cifar2/test/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;target_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;class_mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;binary&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;classdict&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_indices&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classdict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image_generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output_types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;从csv文件构建数据管道&#34;&gt;从csv文件构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从csv文件构建数据管道&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_csv_dataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;file_pattern&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/titanic/train.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/titanic/test.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;batch_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
      &lt;span class=&#34;n&#34;&gt;label_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Survived&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;na_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;num_epochs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;ignore_errors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;从文本文件构建数据管道&#34;&gt;从文本文件构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从文本文件构建数据管道&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TextLineDataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;filenames&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/titanic/train.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/titanic/test.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#略去第一行header&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;从文件路径构建数据管道&#34;&gt;从文件路径构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;ds6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/cifar2/train/*/*.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;从threcords文件构建数据管道&#34;&gt;从threcords文件构建数据管道&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# inpath：原始数据路径 outpath:TFRecord文件输出路径&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_tfrecords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;outpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; 
    &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TFRecordWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;outpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dirs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dirs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;class_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inpath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;img_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img_name&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;#img = tf.image.decode_image(img)&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;#img = tf.image.encode_jpeg(img) #统一成jpeg格式压缩&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;example&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int64_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Int64List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])),&lt;/span&gt;
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;img_raw&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Feature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BytesList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]))&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SerializeToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    
&lt;span class=&#34;n&#34;&gt;create_tfrecords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/cifar2/test/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/cifar2_test.tfrecords/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;应用数据转换&#34;&gt;应用数据转换&lt;/h1&gt;
&lt;p&gt;Dataset数据结构应用非常灵活，因为它本质上是一个Sequece序列，其每个元素可以是各种类型，例如可以是张量，列表，字典，也可以是Dataset。&lt;/p&gt;
&lt;p&gt;Dataset包含了非常丰富的数据转换功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;map: 将转换函数映射到数据集每一个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flat_map: 将转换函数映射到数据集的每一个元素，并将嵌套的Dataset压平。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interleave: 效果类似flat_map,但可以将不同来源的数据夹在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;filter: 过滤掉某些元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zip: 将两个长度相同的Dataset横向铰合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;concatenate: 将两个Dataset纵向连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reduce: 执行归并操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;batch : 构建批次，每次放一个批次。比原始数据增加一个维度。 其逆操作为unbatch。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;padded_batch: 构建批次，类似batch, 但可以填充到相同的形状。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;window :构建滑动窗口，返回Dataset of Dataset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shuffle: 数据顺序洗牌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repeat: 重复数据若干次，不带参数时，重复无数次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shard: 采样，从某个位置开始隔固定距离采样一个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;take: 采样，从开始位置取前几个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#map:将转换函数映射到数据集每一个元素&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello China&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello Beijing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([b&amp;#39;hello&amp;#39; b&amp;#39;world&amp;#39;], shape=(2,), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([b&amp;#39;hello&amp;#39; b&amp;#39;China&amp;#39;], shape=(2,), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([b&amp;#39;hello&amp;#39; b&amp;#39;Beijing&amp;#39;], shape=(2,), dtype=string)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#flat_map:将转换函数映射到数据集的每一个元素，并将嵌套的Dataset压平。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello China&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello Beijing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_flatmap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flat_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_flatmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;hello&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;world&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;hello&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;China&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;hello&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;Beijing&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# interleave: 效果类似flat_map,但可以将不同来源的数据夹在一起。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello China&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello Beijing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_interleave&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interleave&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_interleave&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;hello&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;hello&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;hello&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;world&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;China&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(b&amp;#39;Beijing&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#filter:过滤掉某些元素。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello China&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello Beijing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#找出含有字母a或B的元素&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex_full_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.*[a|B].*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# tf.Tensor(b&amp;#39;hello China&amp;#39;, shape=(), dtype=string)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tf.Tensor(b&amp;#39;hello Beijing&amp;#39;, shape=(), dtype=string)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#zip:将两个长度相同的Dataset横向铰合。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_zip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 0 3 6&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1 4 7&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 2 5 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#condatenate:将两个Dataset纵向连接。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_concat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concatenate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(0, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(1, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(2, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(3, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(4, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(5, shape=(), dtype=int64)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#reduce:执行归并操作。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_tensor_slices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#&amp;lt;tf.Tensor: shape=(), dtype=float32, numpy=15.0&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#batch:构建批次，每次放一个批次。比原始数据增加一个维度。 其逆操作为unbatch。 &lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_batch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([0 1 2 3], shape=(4,), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([4 5 6 7], shape=(4,), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor([ 8  9 10 11], shape=(4,), dtype=int64)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#padded_batch:构建批次，类似batch, 但可以填充到相同的形状。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds_padded_batch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padded_batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;padded_shapes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,])&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_padded_batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#[[1 2 0 0]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [3 4 5 0]], shape=(2, 4), dtype=int32)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#[[6 7 0 0]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [8 0 0 0]], shape=(2, 4), dtype=int32)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#window:构建滑动窗口，返回Dataset of Dataset.&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#window返回的是Dataset of Dataset,可以用flat_map压平&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flat_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drop_remainder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([0 1 2], shape=(3,), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([1 2 3], shape=(3,), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([2 3 4], shape=(3,), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tf.Tensor([3 4 5], shape=(3,), dtype=int64)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#shuffle:数据顺序洗牌。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_shuffle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#repeat:重复数据若干次，不带参数时，重复无数次。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_repeat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#shard:采样，从某个位置开始隔固定距离采样一个元素。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_shard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds_shard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(1, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(4, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(7, shape=(), dtype=int64)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#tf.Tensor(10, shape=(), dtype=int64)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#take:采样，从开始位置取前几个元素。&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ds_take&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ds_take&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_numpy_iterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#[0, 1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;提升管道性能&#34;&gt;提升管道性能&lt;/h2&gt;
&lt;p&gt;训练深度学习模型常常会非常耗时。&lt;/p&gt;
&lt;p&gt;模型训练的耗时主要来自于两个部分，一部分来自数据准备，另一部分来自参数迭代。&lt;/p&gt;
&lt;p&gt;参数迭代过程的耗时通常依赖于GPU来提升。&lt;/p&gt;
&lt;p&gt;而数据准备过程的耗时则可以通过构建高效的数据管道进行提升。&lt;/p&gt;
&lt;p&gt;以下是一些构建高效数据管道的建议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1，使用 prefetch 方法让数据准备和参数迭代两个过程相互并行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2，使用 interleave 方法可以让数据读取过程多进程执行,并将不同来源数据夹在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3，使用 map 时设置num_parallel_calls 让数据转换过程多进程执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4，使用 cache 方法让数据在第一个epoch后缓存到内存中，仅限于数据集不大情形。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5，使用 map转换时，先batch, 然后采用向量化的转换方法对每个batch进行转换。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]Autograph机制</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tfautograph%E6%9C%BA%E5%88%B6/" />
            <id>https://chenbokaix250.github.io/tech/tfautograph%E6%9C%BA%E5%88%B6/</id>
            <updated>2020-04-20T14:46:11&#43;08:00</updated>
            <published>2020-04-20T11:26:44&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Autograph机制小结 有三种计算图的构建方式：静态计算图，动态计算图，以及Aut……</summary>
            
                <content type="html">&lt;h1 id=&#34;autograph机制小结&#34;&gt;Autograph机制小结&lt;/h1&gt;
&lt;p&gt;有三种计算图的构建方式：静态计算图，动态计算图，以及Autograph。&lt;/p&gt;
&lt;p&gt;TensorFlow 2.0主要使用的是动态计算图和Autograph。&lt;/p&gt;
&lt;p&gt;动态计算图易于调试，编码效率较高，但执行效率偏低。&lt;/p&gt;
&lt;p&gt;静态计算图执行效率很高，但较难调试。&lt;/p&gt;
&lt;p&gt;而Autograph机制可以将动态图转换成静态计算图，兼收执行效率和编码效率之利。&lt;/p&gt;
&lt;p&gt;当然Autograph机制能够转换的代码并不是没有任何约束的，有一些编码规范需要遵循，否则可能会转换失败或者不符合预期。&lt;/p&gt;
&lt;p&gt;我们将着重介绍Autograph的编码规范和Autograph转换成静态图的原理。&lt;/p&gt;
&lt;p&gt;并介绍使用tf.Module来更好地构建Autograph。&lt;/p&gt;
&lt;p&gt;本篇我们介绍使用Autograph的编码规范。&lt;/p&gt;
&lt;h2 id=&#34;autograph编码规范总结&#34;&gt;Autograph编码规范总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;被&lt;code&gt;@tf.function&lt;/code&gt;修饰的函数应尽可能使用TensorFlow中的函数而不是Python中的其他函数。例如使用tf.print而不是print，使用tf.range而不是range，使用tf.constant(True)而不是True.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免在&lt;code&gt;@tf.function&lt;/code&gt;修饰的函数内部定义tf.Variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;被&lt;code&gt;@tf.function&lt;/code&gt;修饰的函数不可修改该函数外部的Python列表或字典等数据结构变量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;autograph的机制原理&#34;&gt;Autograph的机制原理&lt;/h2&gt;
&lt;p&gt;当我们使用&lt;code&gt;@tf.function&lt;/code&gt;装饰一个函数的时候，后面到底发生了什么呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 

&lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;autograph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;myadd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tracing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;myadd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# tracing&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一次调用这个被&lt;code&gt;@tf.function&lt;/code&gt;装饰的函数时，后面到底发生了什么&lt;/p&gt;
&lt;p&gt;第一件事情是创建计算图。&lt;/p&gt;
&lt;p&gt;即创建一个静态计算图，跟踪执行一遍函数体中的Python代码，确定各个变量的Tensor类型，并根据执行顺序将算子添加到计算图中。 在这个过程中，如果开启了autograph=True(默认开启),会将Python控制流转换成TensorFlow图内控制流。 主要是将if语句转换成 tf.cond算子表达，将while和for循环语句转换成tf.while_loop算子表达，并在必要的时候添加 tf.control_dependencies指定执行顺序依赖关系。&lt;/p&gt;
&lt;p&gt;相当于在 tensorflow1.0执行了类似下面的语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;while_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop_vars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;control_dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tracing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第二件事情是执行计算图。&lt;/p&gt;
&lt;p&gt;相当于在 tensorflow1.0中执行了下面的语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;feed_dict&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当我们再次用相同的输入参数类型调用这个被&lt;code&gt;@tf.function&lt;/code&gt;装饰的函数时,发生了什么:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;myadd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;morning&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由于输入参数的类型已经发生变化，已经创建的计算图不能够再次使用。&lt;/p&gt;
&lt;p&gt;需要重新做2件事情：创建新的计算图、执行计算图。&lt;/p&gt;
&lt;p&gt;所以我们又会先看到的是第一个步骤的结果：即Python调用标准输出流打印&amp;quot;tracing&amp;quot;语句。&lt;/p&gt;
&lt;p&gt;然后再看到第二个步骤的结果：TensorFlow调用标准输出流打印1,2,3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，如果调用被&lt;code&gt;@tf.function&lt;/code&gt;装饰的函数时输入的参数不是Tensor类型，则每次都会重新创建计算图。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;myadd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;myadd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;morning&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# tracking&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 2&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# tracking&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;autograph和tfmodule&#34;&gt;Autograph和tf.Module&lt;/h2&gt;
&lt;p&gt;ensorFlow提供了一个基类tf.Module，通过继承它构建子类，我们不仅可以非常方便地管理变量，还可以非常方便地管理它引用的其它Module，最重要的是，我们能够利用tf.saved_model保存模型并实现跨平台部署使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tf.keras.models.Model,tf.keras.layers.Layer &lt;/code&gt;都是继承自tf.Module的，提供了方便的变量管理和所引用的子模块管理的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用tf.Module提供的封装，再结合TensoFlow丰富的低阶API，实际上我们能够基于TensorFlow开发任意机器学习模型(而非仅仅是神经网络模型)，并实现跨平台部署使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;应用tfmodule封装autograph&#34;&gt;应用&lt;code&gt;tf.MOdule&lt;/code&gt;封装Autograph&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#在tf.function中用input_signature限定输入张量的签名类型：shape和dtype&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TensorSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;    
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assign_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;add_print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#add_print(tf.constant(3)) #输入不符合张量签名的参数将报错&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;利用&lt;code&gt;tf.Module&lt;/code&gt;的子类化将其封装一下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DemoModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name_scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#相当于with tf.name_scope(&amp;#34;demo_module&amp;#34;)&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

     
    &lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TensorSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;  
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name_scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assign_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;#执行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DemoModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# 6&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#查看模块中的全部变量和全部可训练变量&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable_variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#(&amp;lt;tf.Variable &amp;#39;demo_module/Variable:0&amp;#39; shape=() dtype=float32, numpy=6.0&amp;gt;,)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#(&amp;lt;tf.Variable &amp;#39;demo_module/Variable:0&amp;#39; shape=() dtype=float32, numpy=6.0&amp;gt;,)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#查看模块中的全部子模块&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;submodules&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#使用tf.saved_model 保存模型，并指定需要跨平台部署的方法&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saved_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/demo/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signatures&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;serving_default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#加载模型&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;demo2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saved_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/demo/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;demo2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#11&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看模型文件相关信息，红框标出来的输出信息在模型部署和跨平台使用时有可能会用到&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saved_model_cli&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;all&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/lyhue1991/eat_tensorflow2_in_30_days/raw/master/data/%E6%9F%A5%E7%9C%8B%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在tensorboard中查看计算图，模块会被添加模块名demo_module,方便层次化呈现计算图结构。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 创建日志&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stamp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strftime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;%Y%m&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-%H%M%S&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;logdir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./data/demomodule/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stamp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_file_writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#开启autograph跟踪&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trace_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;profiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;c1&#34;&gt;#执行autograph&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DemoModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#将计算图信息写入日志&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trace_export&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demomodule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;profiler_outdir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#启动 tensorboard在jupyter中的魔法命令&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reload_ext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tensorboard&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorboard&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;notebook&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;notebook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;notebook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--logdir ./data/demomodule/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/lyhue1991/eat_tensorflow2_in_30_days/raw/master/data/demomodule%E7%9A%84%E8%AE%A1%E7%AE%97%E5%9B%BE%E7%BB%93%E6%9E%84.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了利用tf.Module的子类化实现封装，我们也可以通过给tf.Module添加属性的方法进行封装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TensorSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;  
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assign_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 1.0&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# (&amp;lt;tf.Variable &amp;#39;Variable:0&amp;#39; shape=() dtype=float32, numpy=0.0&amp;gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#使用tf.saved_model 保存模型&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saved_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/mymodule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;signatures&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;serving_default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mymodule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#加载模型&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mymodule2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saved_model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./data/mymodule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mymodule2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#INFO:tensorflow:Assets written to: ./data/mymodule/assets&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;tfmodule和tfkerasmodeltfkeraslayerslayer&#34;&gt;tf.Module和tf.keras.Model，tf.keras.layers.Layer&lt;/h2&gt;
&lt;p&gt;tf.keras中的模型和层都是继承tf.Module实现的，也具有变量管理和子模块管理功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow.keras&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;losses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metrics&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;issubclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# True&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# True&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# True&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clear_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_shape&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sequential&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Layer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Shape&lt;/span&gt;              &lt;span class=&#34;n&#34;&gt;Param&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#   &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dense&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;mi&#34;&gt;44&lt;/span&gt;        
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dense_1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;        
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dense_2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;         
&lt;span class=&#34;o&#34;&gt;=================================================================&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Total&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;57&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;57&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Non&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_________________________________________________________________&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense/kernel:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.06741005&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.45534766&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.5190817&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01806331&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.14258742&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.49711505&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.26030976&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.18607801&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.62806034&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.5327399&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.42206633&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.29201728&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.16602087&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.18901917&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.55159235&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01091868&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.04533798&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.326845&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.582667&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.19431782&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6494713&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.16174704&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.4062966&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.48760796&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.58400524&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6280886&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.11265379&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6438277&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.26642334&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.49275804&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.20793378&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.43889117&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.4092741&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.09871006&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.2073121&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.26047975&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.43910992&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.00199282&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.07711256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.27966842&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense/bias:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_1/kernel:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5022683&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0507431&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.61540484&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.9369011&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.14412141&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.54607415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2027781&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.4651153&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_1/bias:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_2/kernel:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.244825&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.2101456&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_2/bias:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#冻结第0层的变量,使其不可训练&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trainable_variables&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_1/kernel:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5022683&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0507431&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.61540484&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.9369011&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.14412141&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.54607415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2027781&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.4651153&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_1/bias:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_2/kernel:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.244825&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.2101456&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dense_2/bias:0&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

 &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;submodules&lt;/span&gt;

 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_layer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputLayer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144d8c080&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144daada0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144d8c5c0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144d7aa20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

 &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144daada0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144d8c5c0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dense&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x144d7aa20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name_scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sequential&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sequential&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]张量的数学运算</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tf%E5%BC%A0%E9%87%8F%E7%9A%84%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/" />
            <id>https://chenbokaix250.github.io/tech/tf%E5%BC%A0%E9%87%8F%E7%9A%84%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/</id>
            <updated>2020-04-20T11:00:49&#43;08:00</updated>
            <published>2020-04-20T08:34:19&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">张量的数学运算 张量结构操作诸如：张量创建，索引切片，维度变换，合并分割。 张量数学运算……</summary>
            
                <content type="html">&lt;h1 id=&#34;张量的数学运算&#34;&gt;张量的数学运算&lt;/h1&gt;
&lt;p&gt;张量结构操作诸如：张量创建，索引切片，维度变换，合并分割。
张量数学运算主要有：标量运算，向量运算，矩阵运算。另外我们会介绍张量运算的广播机制。&lt;/p&gt;
&lt;h2 id=&#34;一标量运算&#34;&gt;一.标量运算&lt;/h2&gt;
&lt;p&gt;张量的数学运算符可以分为标量运算符、向量运算符、以及矩阵运算符。&lt;/p&gt;
&lt;p&gt;加减乘除乘方，以及三角函数，指数，对数等常见函数，逻辑比较运算符等都是标量运算符。&lt;/p&gt;
&lt;p&gt;标量运算符的特点是对张量实施逐元素运算。&lt;/p&gt;
&lt;p&gt;有些标量运算符对常用的数学运算符进行了重载。并且支持类似numpy的广播特性。&lt;/p&gt;
&lt;p&gt;许多标量运算符都在 tf.math模块下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;8.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#运算符重载&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;8.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;10.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;5.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;21.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;32.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.33333334&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.42857143&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;9.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;16.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.4142135&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;nan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#mod的运算符重载，等价于m = tf.math.mod(a,3)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#地板除法&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#tf.equal(a,5)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.4142135&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;nan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;8.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;12.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;21.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minimum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;二向量运算&#34;&gt;二.向量运算&lt;/h2&gt;
&lt;p&gt;向量运算符只在一个特定轴上运算，将一个向量映射到一个标量或者另外一个向量。 许多向量运算符都以reduce开头。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#向量reduce&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_prod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;#45&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#5&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#9&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#362880&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#张量指定维度进行reduce&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdims&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdims&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#[[6]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [15]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [24]]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#[[12 15 18]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#bool类型的reduce&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduce_any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#利用tf.foldr实现tf.reduce_sum&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foldr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#cum扫描累积&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cumsum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cumprod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;28&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5040&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40320&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;362880&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#arg最大最小值索引&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argmin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#tf.math.top_k可以用于对张量排序&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top_k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#利用tf.math.top_k可以在TensorFlow中实现KNN算法&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;三矩阵运算&#34;&gt;三.矩阵运算&lt;/h2&gt;
&lt;p&gt;矩阵必须是二维的。类似tf.constant([1,2,3])这样的不是矩阵。&lt;/p&gt;
&lt;p&gt;矩阵运算包括：矩阵乘法，矩阵转置，矩阵逆，矩阵求迹，矩阵范数，矩阵行列式，矩阵求特征值，矩阵分解等运算。&lt;/p&gt;
&lt;p&gt;除了一些常用的运算外，大部分和矩阵有关的运算都在tf.linalg子包中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#矩阵乘法&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@b&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#等价于tf.matmul(a,b)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#矩阵转置&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transpose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#矩阵逆，必须为tf.float32或tf.double类型&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0000002&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;1.0000001&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5000001&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.50000006&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#矩阵求trace&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#矩阵求范数&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;norm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.477226&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#矩阵行列式&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;det&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#矩阵特征值&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eigvalsh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.8541021&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;5.854102&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#矩阵qr分解&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.316227794&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.948683321&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.948683321&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.316227734&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.1622777&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.4271884&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.632455349&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.00000012&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.99999976&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;#矩阵svd分解&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;svd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matmul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matmul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#利用svd分解可以在TensorFlow中实现主成分分析降维&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.9999996&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.9999996&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.9999998&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;四广播机制&#34;&gt;四.广播机制&lt;/h2&gt;
&lt;p&gt;TensorFlow的广播规则和numpy是一样的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果张量的维度不同，将维度较小的张量进行扩展，直到两个张量的维度都一样。&lt;/li&gt;
&lt;li&gt;如果两个张量在某个维度上的长度是相同的，或者其中一个张量在该维度上的长度为1，那么我们就说这两个张量在该维度上是相容的。&lt;/li&gt;
&lt;li&gt;如果两个张量在所有维度上都是相容的，它们就能使用广播。&lt;/li&gt;
&lt;li&gt;广播之后，每个维度的长度将取两个张量在该维度长度的较大值。&lt;/li&gt;
&lt;li&gt;在任何一个维度上，如果一个张量的长度为1，另一个张量长度大于1，那么在该维度上，就好像是对第一个张量进行了复制。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#等价于 b + tf.broadcast_to(a,b.shape)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;broadcast_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#计算广播后计算结果的形状，静态形状，TensorShape类型参数&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;broadcast_static_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;TensorShape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#计算广播后计算结果的形状，动态形状，Tensor类型参数&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;broadcast_dynamic_shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#广播效果&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#等价于 tf.broadcast_to(c,[3,3]) + tf.broadcast_to(d,[3,3])&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;









&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">[Tf]张量的结构操作</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tf%E5%BC%A0%E9%87%8F%E7%9A%84%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C/" />
            <id>https://chenbokaix250.github.io/tech/tf%E5%BC%A0%E9%87%8F%E7%9A%84%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C/</id>
            <updated>2020-04-18T17:07:51&#43;08:00</updated>
            <published>2020-04-18T15:00:02&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">张量的结构操作 张量的操作主要包括张量的结构操作和张量的数学运算. 张量结构操作诸如:张……</summary>
            
                <content type="html">&lt;h1 id=&#34;张量的结构操作&#34;&gt;张量的结构操作&lt;/h1&gt;
&lt;p&gt;张量的操作主要包括张量的结构操作和张量的数学运算.&lt;/p&gt;
&lt;p&gt;张量结构操作诸如:张量创建/索引切片/维度变换/合并分割&lt;/p&gt;
&lt;p&gt;张量数学运算主要有:标量运算/向量运算/矩阵运算/广播机制&lt;/p&gt;
&lt;h2 id=&#34;一创建张量&#34;&gt;一.创建张量&lt;/h2&gt;
&lt;p&gt;张量创建的许多方法和numpy中创建array的方法很像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tensorflow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tf&lt;/span&gt; 
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt; 

&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#[1,2,3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b = tf.range(1,10,delta = 2)
tf.print(b)

# [1,3,5,7,9]

c = tf.linspace(0.0,2*3.14,100)
tf.print(c)

#[0 0.0634343475 0.126868695 ... 6.15313148 6.21656609 6.28]

d = tf.zeros([3,3])
tf.print(d)

#[[0 0 0]
# [0 0 0]
# [0 0 0]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
a =  tf.ones([3,3])
b = tfzeros_like(a,dtype=tf.float32)
tf.print(a)
tf.print(b)


#[[1 1 1]
# [1 1 1]
# [1 1 1]]
#[[0 0 0]
# [0 0 0]
# [0 0 0]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b = tf.fill([3,2],5)
tf.print(b)

#[[5 5]
# [5 5]
# [5 5]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#均匀分布随机
tf.random.set_seed(1.0)
a = tf.random.uniform([5],minval=0,maxval=10)
tf.print(a)

# [1.65130854 9.01481247 6.30974197 4.34546089 2.9193902]

#正态分布随机
b = tf.random.normal([3,3],mean=0.0,stddev=1.0)
tf.print(b)

# [[0.403087884 -1.0880208 -0.0630953535]
# [1.33655667 0.711760104 -0.489286453]
# [-0.764221311 -1.03724861 -1.25193381]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#正态分布随机，剔除2倍方差以外数据重新生成
c = tf.random.truncated_normal((5,5), mean=0.0, stddev=1.0, dtype=tf.float32)
tf.print(c)


#[[-0.457012236 -0.406867266 0.728577733 -0.892977774 -0.369404584]
# [0.323488563 1.19383323 0.888299048 1.25985599 -1.95951891]
# [-0.202244401 0.294496894 -0.468728036 1.29494202 1.48142183]
# [0.0810953453 1.63843894 0.556645 0.977199793 -1.17777884]
# [1.67368948 0.0647980496 -0.705142677 -0.281972528 0.126546144]]

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 特殊矩阵
I = tf.eye(3,3) #单位矩阵
tf.print(I)
tf.print(&amp;quot; &amp;quot;)
t = tf.linalg.diag([1,2,3]) #对角阵
tf.print(t)

#[[1 0 0]
# [0 1 0]
# [0 0 1]]
 
#[[1 0 0]
# [0 2 0]
# [0 0 3]]
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;二索引切片&#34;&gt;二.索引切片&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;张量的索引切片方式和numpy几乎一样,切片时支持缺省参数和省略号&lt;/li&gt;
&lt;li&gt;对于tf.Variable,可以通过索引和切片对部分元素进行修改。&lt;/li&gt;
&lt;li&gt;对于提取张量的连续子区域，也可以使用tf.slice.&lt;/li&gt;
&lt;li&gt;此外，对于不规则的切片提取,可以使用tf.gather,tf.gather_nd,tf.boolean_mask。&lt;/li&gt;
&lt;li&gt;tf.boolean_mask功能最为强大，它可以实现tf.gather,tf.gather_nd的功能，并且tf.boolean_mask还可以实现布尔索引。&lt;/li&gt;
&lt;li&gt;如果要通过修改张量的某些元素得到新的张量，可以使用tf.where，tf.scatter_nd。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#[[4 7 4 2 9]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [9 1 2 4 7]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [7 2 7 4 0]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [9 6 9 7 2]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [3 7 0 0 3]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 第0行
tf.print(t[0])

# [4 7 4 2 9]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#倒数第一行
tf.print(t[-1])

# [3 7 0 0 3]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#第1行第3列
tf.print(t[1,3])
tf.print(t[1][3])
# 4
# 4
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#第1行至第3行
tf.print(t[1:4,:])
tf.print(tf.slice(t,[1,0],[3,5])) #tf.slice(input,begin_vector,size_vector)

#[[9 1 2 4 7]
# [7 2 7 4 0]
# [9 6 9 7 2]]
#[[9 1 2 4 7]
# [7 2 7 4 0]
# [9 6 9 7 2]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#第1行至最后一行，第0列到最后一列每隔两列取一列
tf.print(t[1:4,:4:2])

#[[9 2]
# [7 7]
# [9 9]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#对变量来说，还可以使用索引和切片修改部分元素
x = tf.Variable([[1,2],[3,4]],dtype = tf.float32)
x[1,:].assign(tf.constant([0.0,0.0]))
tf.print(x)

#[[1 2]
# [0 0]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = tf.random.uniform([3,3,3],minval=0,maxval=10,dtype=tf.int32)
tf.print(a)

#[[[7 3 9]
#  [9 0 7]
#  [9 6 7]]

# [[1 3 3]
#  [0 8 1]
#  [3 1 0]]

# [[4 0 6]
#  [6 2 2]
#  [7 9 5]]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#省略号可以表示多个冒号
tf.print(a[...,1])


#[[3 0 6]
# [3 8 1]
# [0 2 9]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上切片方式相对规则，对于不规则的切片提取,可以使用tf.gather,tf.gather_nd,tf.boolean_mask&lt;/p&gt;
&lt;p&gt;考虑班级成绩册的例子，有4个班级，每个班级10个学生，每个学生7门科目成绩。可以用一个4×10×7的张量来表示。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scores = tf.random.uniform((4,10,7),minval=0,maxval=100,dtype=tf.int32)
tf.print(scores)

[[[52 82 66 ... 17 86 14]
  [8 36 94 ... 13 78 41]
  [77 53 51 ... 22 91 56]
  ...
  [11 19 26 ... 89 86 68]
  [60 72 0 ... 11 26 15]
  [24 99 38 ... 97 44 74]]

 [[79 73 73 ... 35 3 81]
  [83 36 31 ... 75 38 85]
  [54 26 67 ... 60 68 98]
  ...
  [20 5 18 ... 32 45 3]
  [72 52 81 ... 88 41 20]
  [0 21 89 ... 53 10 90]]

 [[52 80 22 ... 29 25 60]
  [78 71 54 ... 43 98 81]
  [21 66 53 ... 97 75 77]
  ...
  [6 74 3 ... 53 65 43]
  [98 36 72 ... 33 36 81]
  [61 78 70 ... 7 59 21]]

 [[56 57 45 ... 23 15 3]
  [35 8 82 ... 11 59 97]
  [44 6 99 ... 81 60 27]
  ...
  [76 26 35 ... 51 8 17]
  [33 52 53 ... 78 37 31]
  [71 27 44 ... 0 52 16]]]

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#抽取每个班级第0个学生，第5个学生，第9个学生的全部成绩
p = tf.gather(scores,[0,5,9],axis=1)
tf.print(p)

[[[52 82 66 ... 17 86 14]
  [24 80 70 ... 72 63 96]
  [24 99 38 ... 97 44 74]]

 [[79 73 73 ... 35 3 81]
  [46 10 94 ... 23 18 92]
  [0 21 89 ... 53 10 90]]

 [[52 80 22 ... 29 25 60]
  [19 12 23 ... 87 86 25]
  [61 78 70 ... 7 59 21]]

 [[56 57 45 ... 23 15 3]
  [6 41 79 ... 97 43 13]
  [71 27 44 ... 0 52 16]]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#抽取每个班级第0个学生，第5个学生，第9个学生的第1门课程，第3门课程，第6门课程成绩
q = tf.gather(tf.gather(scores,[0,5,9],axis=1),[1,3,6],axis=2)
tf.print(q)

[[[82 55 14]
  [80 46 96]
  [99 58 74]]

 [[73 48 81]
  [10 38 92]
  [21 86 90]]

 [[80 57 60]
  [12 34 25]
  [78 71 21]]

 [[57 75 3]
  [41 47 13]
  [27 96 16]]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 抽取第0个班级第0个学生，第2个班级的第4个学生，第3个班级的第6个学生的全部成绩
#indices的长度为采样样本的个数，每个元素为采样位置的坐标
s = tf.gather_nd(scores,indices = [(0,0),(2,4),(3,6)])
s

&amp;lt;tf.Tensor: shape=(3, 7), dtype=int32, numpy=
array([[52, 82, 66, 55, 17, 86, 14],
       [99, 94, 46, 70,  1, 63, 41],
       [46, 83, 70, 80, 90, 85, 17]], dtype=int32)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上tf.gather和tf.gather_nd的功能也可以用tf.boolean_mask来实现。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#抽取每个班级第0个学生，第5个学生，第9个学生的全部成绩
p = tf.boolean_mask(scores,[True,False,False,False,False,
                            True,False,False,False,True],axis=1)
tf.print(p)

[[[52 82 66 ... 17 86 14]
  [24 80 70 ... 72 63 96]
  [24 99 38 ... 97 44 74]]

 [[79 73 73 ... 35 3 81]
  [46 10 94 ... 23 18 92]
  [0 21 89 ... 53 10 90]]

 [[52 80 22 ... 29 25 60]
  [19 12 23 ... 87 86 25]
  [61 78 70 ... 7 59 21]]

 [[56 57 45 ... 23 15 3]
  [6 41 79 ... 97 43 13]
  [71 27 44 ... 0 52 16]]]

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#抽取第0个班级第0个学生，第2个班级的第4个学生，第3个班级的第6个学生的全部成绩
s = tf.boolean_mask(scores,
    [[True,False,False,False,False,False,False,False,False,False],
     [False,False,False,False,False,False,False,False,False,False],
     [False,False,False,False,True,False,False,False,False,False],
     [False,False,False,False,False,False,True,False,False,False]])
tf.print(s)

[[52 82 66 ... 17 86 14]
 [99 94 46 ... 1 63 41]
 [46 83 70 ... 90 85 17]]

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#利用tf.boolean_mask可以实现布尔索引

#找到矩阵中小于0的元素
c = tf.constant([[-1,1,-1],[2,2,-2],[3,-3,3]],dtype=tf.float32)
tf.print(c,&amp;quot;\n&amp;quot;)

tf.print(tf.boolean_mask(c,c&amp;lt;0),&amp;quot;\n&amp;quot;) 
tf.print(c[c&amp;lt;0]) #布尔索引，为boolean_mask的语法糖形式

[[-1 1 -1]
 [2 2 -2]
 [3 -3 3]] 

[-1 -1 -2 -3] 

[-1 -1 -2 -3]

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上这些方法仅能提取张量的部分元素值，但不能更改张量的部分元素值得到新的张量。&lt;/p&gt;
&lt;p&gt;如果要通过修改张量的部分元素值得到新的张量，可以使用tf.where和tf.scatter_nd。&lt;/p&gt;
&lt;p&gt;tf.where可以理解为if的张量版本，此外它还可以用于找到满足条件的所有元素的位置坐标。&lt;/p&gt;
&lt;p&gt;tf.scatter_nd的作用和tf.gather_nd有些相反，tf.gather_nd用于收集张量的给定位置的元素，&lt;/p&gt;
&lt;p&gt;而tf.scatter_nd可以将某些值插入到一个给定shape的全0的张量的指定位置处。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#找到张量中小于0的元素,将其换成np.nan得到新的张量
#tf.where和np.where作用类似，可以理解为if的张量版本

c = tf.constant([[-1,1,-1],[2,2,-2],[3,-3,3]],dtype=tf.float32)
d = tf.where(c&amp;lt;0,tf.fill(c.shape,np.nan),c) 
d

&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[nan,  1., nan],
       [ 2.,  2., nan],
       [ 3., nan,  3.]], dtype=float32)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#如果where只有一个参数，将返回所有满足条件的位置坐标
indices = tf.where(c&amp;lt;0)
indices

&amp;lt;tf.Tensor: shape=(4, 2), dtype=int64, numpy=
array([[0, 0],
       [0, 2],
       [1, 2],
       [2, 1]])&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#将张量的第[0,0]和[2,1]两个位置元素替换为0得到新的张量
d = c - tf.scatter_nd([[0,0],[2,1]],[c[0,0],c[2,1]],c.shape)
d

&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[ 0.,  1., -1.],
       [ 2.,  2., -2.],
       [ 3.,  0.,  3.]], dtype=float32)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#scatter_nd的作用和gather_nd有些相反
#可以将某些值插入到一个给定shape的全0的张量的指定位置处。
indices = tf.where(c&amp;lt;0)
tf.scatter_nd(indices,tf.gather_nd(c,indices),c.shape)

&amp;lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
array([[-1.,  0., -1.],
       [ 0.,  0., -2.],
       [ 0., -3.,  0.]], dtype=float32)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;三维变换&#34;&gt;三维变换&lt;/h2&gt;
&lt;p&gt;维度变换相关函数主要有 tf.reshape, tf.squeeze, tf.expand_dims, tf.transpose.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tf.reshape 可以改变张量的形状。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tf.squeeze 可以减少维度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tf.expand_dims 可以增加维度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tf.transpose 可以交换维度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;tf.reshape可以改变张量的形状，但是其本质上不会改变张量元素的存储顺序，所以，该操作实际上非常迅速，并且是可逆的。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = tf.random.uniform(shape=[1,3,3,2],
                      minval=0,maxval=255,dtype=tf.int32)
tf.print(a.shape)
tf.print(a)

TensorShape([1, 3, 3, 2])
[[[[135 178]
   [26 116]
   [29 224]]

  [[179 219]
   [153 209]
   [111 215]]

  [[39 7]
   [138 129]
   [59 205]]]]

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 改成 （3,6）形状的张量
b = tf.reshape(a,[3,6])
tf.print(b.shape)
tf.print(b)

TensorShape([3, 6])
[[135 178 26 116 29 224]
 [179 219 153 209 111 215]
 [39 7 138 129 59 205]]

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 改回成 [1,3,3,2] 形状的张量
c = tf.reshape(b,[1,3,3,2])
tf.print(c)

[[[[135 178]
   [26 116]
   [29 224]]

  [[179 219]
   [153 209]
   [111 215]]

  [[39 7]
   [138 129]
   [59 205]]]]

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果张量在某个维度上只有一个元素，利用tf.squeeze可以消除这个维度。&lt;/p&gt;
&lt;p&gt;和tf.reshape相似，它本质上不会改变张量元素的存储顺序。&lt;/p&gt;
&lt;p&gt;张量的各个元素在内存中是线性存储的，其一般规律是，同一层级中的相邻元素的物理地址也相邻。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;s = tf.squeeze(a)
tf.print(s.shape)
tf.print(s)

TensorShape([3, 3, 2])
[[[135 178]
  [26 116]
  [29 224]]

 [[179 219]
  [153 209]
  [111 215]]

 [[39 7]
  [138 129]
  [59 205]]]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
d = tf.expand_dims(s,axis=0) #在第0维插入长度为1的一个维度
d

&amp;lt;tf.Tensor: shape=(1, 3, 3, 2), dtype=int32, numpy=
array([[[[135, 178],
         [ 26, 116],
         [ 29, 224]],

        [[179, 219],
         [153, 209],
         [111, 215]],

        [[ 39,   7],
         [138, 129],
         [ 59, 205]]]], dtype=int32)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tf.transpose可以交换张量的维度，与tf.reshape不同，它会改变张量元素的存储顺序。&lt;/p&gt;
&lt;p&gt;tf.transpose常用于图片存储格式的变换上。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Batch,Height,Width,Channel
a = tf.random.uniform(shape=[100,600,600,4],minval=0,maxval=255,dtype=tf.int32)
tf.print(a.shape)

# 转换成 Channel,Height,Width,Batch
s= tf.transpose(a,perm=[3,1,2,0])
tf.print(s.shape)


TensorShape([100, 600, 600, 4])
TensorShape([4, 600, 600, 100])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;四合并分割&#34;&gt;四.合并分割&lt;/h2&gt;
&lt;p&gt;和numpy类似,可以用tf.concat和tf.stack方法对多个张量进行合并,可以用tf.split方法把一个张量分割成多个张量。&lt;/p&gt;
&lt;p&gt;tf.concat和tf.stack有略微的区别，tf.concat是连接，不会增加维度，而tf.stack是堆叠，会增加维度。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = tf.constant([[1.0,2.0],[3.0,4.0]])
b = tf.constant([[5.0,6.0],[7.0,8.0]])
c = tf.constant([[9.0,10.0],[11.0,12.0]])

tf.concat([a,b,c],axis = 0)

&amp;lt;tf.Tensor: shape=(6, 2), dtype=float32, numpy=
array([[ 1.,  2.],
       [ 3.,  4.],
       [ 5.,  6.],
       [ 7.,  8.],
       [ 9., 10.],
       [11., 12.]], dtype=float32)&amp;gt;

tf.concat([a,b,c],axis = 1)

&amp;lt;tf.Tensor: shape=(2, 6), dtype=float32, numpy=
array([[ 1.,  2.,  5.,  6.,  9., 10.],
       [ 3.,  4.,  7.,  8., 11., 12.]], dtype=float32)&amp;gt;


tf.stack([a,b,c])
&amp;lt;tf.Tensor: shape=(3, 2, 2), dtype=float32, numpy=
array([[[ 1.,  2.],
        [ 3.,  4.]],

       [[ 5.,  6.],
        [ 7.,  8.]],

       [[ 9., 10.],
        [11., 12.]]], dtype=float32)&amp;gt;

tf.stack([a,b,c],axis=1)
&amp;lt;tf.Tensor: shape=(2, 3, 2), dtype=float32, numpy=
array([[[ 1.,  2.],
        [ 5.,  6.],
        [ 9., 10.]],

       [[ 3.,  4.],
        [ 7.,  8.],
        [11., 12.]]], dtype=float32)&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = tf.constant([[1.0,2.0],[3.0,4.0]])
b = tf.constant([[5.0,6.0],[7.0,8.0]])
c = tf.constant([[9.0,10.0],[11.0,12.0]])

c = tf.concat([a,b,c],axis = 0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tf.split是tf.concat的逆运算，可以指定分割份数平均分割，也可以通过指定每份的记录数量进行分割。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#tf.split(value,num_or_size_splits,axis)
tf.split(c,3,axis = 0)  #指定分割份数，平均分割

[&amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
 array([[1., 2.],
        [3., 4.]], dtype=float32)&amp;gt;,
 &amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
 array([[5., 6.],
        [7., 8.]], dtype=float32)&amp;gt;,
 &amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
 array([[ 9., 10.],
        [11., 12.]], dtype=float32)&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tf.split(c,[2,2,2],axis = 0) #指定每份的记录数量

[&amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
 array([[1., 2.],
        [3., 4.]], dtype=float32)&amp;gt;,
 &amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
 array([[5., 6.],
        [7., 8.]], dtype=float32)&amp;gt;,
 &amp;lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=
 array([[ 9., 10.],
        [11., 12.]], dtype=float32)&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python装饰器</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/python%E8%A3%85%E9%A5%B0%E5%99%A8/" />
            <id>https://chenbokaix250.github.io/tech/python%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
            <updated>2020-04-18T15:50:56&#43;08:00</updated>
            <published>2020-04-18T11:02:20&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Python @函数装饰器及用法 假设用 funA() 函数装饰器去装饰 funB() 函数，如下所示： 1 2 3 4 5 6 7 8 9 #funA 作……</summary>
            
                <content type="html">&lt;h2 id=&#34;python-函数装饰器及用法&#34;&gt;Python @函数装饰器及用法&lt;/h2&gt;
&lt;p&gt;假设用 funA() 函数装饰器去装饰 funB() 函数，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#funA 作为装饰器函数&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 执行传入的fn参数&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funA&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;实际上,上面程序完全等价于下面的程序:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 执行传入的fn参数&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过比对以上 2 段程序不难发现，使用函数装饰器 A() 去装饰另一个函数 B()，其底层执行了如下 2 步操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 B 作为参数传给 A() 函数；&lt;/li&gt;
&lt;li&gt;将 A() 函数执行完成的返回值反馈回  B。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个实例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#funA 作为装饰器函数&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C语言中文网&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 执行传入的fn参数&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://c.biancheng.net&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;装饰器函数的返回值&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funA&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;学习 Python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;程序执行流程为:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C语言中文网
学习 Python
http://c.biancheng.net
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此基础上,如果在程序末尾添加如下语句:
&lt;code&gt;print(funB)&lt;/code&gt;
其输出结果为:
&lt;code&gt;装饰器函数的返回值&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;显然，被“＠函数”修饰的函数不再是原来的函数，而是被替换成一个新的东西（取决于装饰器的返回值），即如果装饰器函数的返回值为普通变量，那么被修饰的函数名就变成了变量名；同样，如果装饰器返回的是一个函数的名称，怎么被修饰的函数名依然表示一个函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际上，所谓函数装饰器，就是通过装饰器函数，在不修改原函数的前提下，来对函数的功能进行合理的扩充。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;带参数的函数装饰器&#34;&gt;带参数的函数装饰器&lt;/h2&gt;
&lt;p&gt;在分析 funA() 函数装饰器和 funB() 函数的关系时，细心的读者可能会发现一个问题，即当 funB() 函数无参数时,可以直接将funB作为funA()的参数传入。但是，如果被修饰的函数本身带有参数，那应该如何传值呢？&lt;/p&gt;
&lt;p&gt;比较简单的解决方法就是在函数装饰器中嵌套一个函数，该函数带有的参数个数和被装饰器修饰的函数相同。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 定义一个嵌套函数&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Python教程:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;say&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funA&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;funB():&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://c.biancheng.net/python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;程序执行结果为:
&lt;code&gt;Python教程: http://c.biancheng.net/python&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它和如下程序是等价的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 定义一个嵌套函数&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Python教程:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;say&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;funB():&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://c.biancheng.net/python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果运行此程序会发现，它的输出结果和上面程序相同。&lt;/p&gt;
&lt;p&gt;显然，通过 funB() 函数被装饰器 funA() 修饰，funB 就被赋值为 say。这意味着，虽然我们在程序显式调用的是 funB() 函数，但其实执行的是装饰器嵌套的 say() 函数。&lt;/p&gt;
&lt;p&gt;但还有一个问题需要解决，即如果当前程序中，有多个（≥ 2）函数被同一个装饰器函数修饰，这些函数带有的参数个数并不相等，怎么办呢？&lt;/p&gt;
&lt;p&gt;最简单的解决方式是用 *args 和 **kwargs 作为装饰器内部嵌套函数的参数，*args 和 **kwargs 表示接受任意数量和类型的参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 定义一个嵌套函数&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;say&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funA&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C语言中文网：&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funA&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;other_funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://c.biancheng.net&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;other_funB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Python教程：&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://c.biancheng.net/python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C语言中文网： http://c.biancheng.net
Python教程： http://c.biancheng.net/python
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;函数休市前可以嵌套&#34;&gt;函数休市前可以嵌套&lt;/h2&gt;
&lt;p&gt;Python 也支持多个装饰器，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@funA&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funB&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@funC&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面程序的执行顺序是里到外，所以它等效于下面这行代码：
&lt;code&gt;fun = funA( funB ( funC (fun) ) )&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;staticmethod和classmethod的作用与区别&#34;&gt;@staticmethod和@classmethod的作用与区别&lt;/h2&gt;
&lt;p&gt;一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。&lt;/p&gt;
&lt;p&gt;而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。&lt;/p&gt;
&lt;p&gt;这有利于组织代码，把某些应该属于某个类的函数给放到那个类里去，同时有利于命名空间的整洁。&lt;/p&gt;
&lt;p&gt;既然@staticmethod和@classmethod都可以直接类名.方法名()来调用，那他们的区别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。&lt;/li&gt;
&lt;li&gt;@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。&lt;/p&gt;
&lt;p&gt;而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。&lt;/p&gt;
&lt;p&gt;代码例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;static_foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;static_foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;class_foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ckass_foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;static_foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class_foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;statci_foo
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
class_fo
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
foo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/python/" term="Python" label="Python" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C语言结构体整理</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B4%E7%90%86/" />
            <id>https://chenbokaix250.github.io/tech/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B4%E7%90%86/</id>
            <updated>2020-04-15T10:46:16&#43;08:00</updated>
            <published>2020-04-15T16:57:25&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C语言结构体小结 **关于结构体 ** 把一些相关的变量组合起来,以一个整体形式对对象进行描……</summary>
            
                <content type="html">&lt;h1 id=&#34;c语言结构体小结&#34;&gt;C语言结构体小结&lt;/h1&gt;
&lt;p&gt;**关于结构体  **&lt;/p&gt;
&lt;p&gt;把一些相关的变量组合起来,以一个整体形式对对象进行描述.&lt;/p&gt;
&lt;p&gt;**一些相关知识 **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有结构体变量才分配地址，而结构体的定义是不分配空间的&lt;/li&gt;
&lt;li&gt;结构体中各成员的定义和之前的变量定义一样，但在定义时也不分配空间&lt;/li&gt;
&lt;li&gt;结构体变量的声明需要在主函数之上或者主函数中声明，如果在主函数之下则会报错&lt;/li&gt;
&lt;li&gt;c语言中的结构体不能直接进行强制转换，只有结构体指针才能进行强制转换&lt;/li&gt;
&lt;li&gt;相同类型的成员是可以定义在同一类型下的&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//int型学号和年龄
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//char类型姓名和性别
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;关于结构体变量的定义和引用&#34;&gt;关于结构体变量的定义和引用&lt;/h2&gt;
&lt;p&gt;在编译时,结构体的定义不分配存储空间,对结构体变量才按其数据结构分配相应的存储空间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//一个字符串表示的titile 题目
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//一个字符串表示的author作者
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//价格表示 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//这里只是声明 结构体的定义 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//结构体变量的定义 分配空间
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;book1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//引用结构体变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;定义结构体变量以后，系统就会为其分配内存单元，比如book1和book2在内存中占44个字节（20+20+4）具体的长度你可以在你的编译器中使用sizeof关键字分别求出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181028185530850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_27,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;用sizeof关键字求结构体长度时，返回的最大基本类型所占字节的整数倍 比方说我们上面求得的为44 为 float(4个字节)的整数倍，但是我们把title修改为title[22];这时正常长度为46 ，但是你会发现实际求得的为48，(4的整数倍)&lt;/p&gt;
&lt;p&gt;这涉及到结构体的存储:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结构体整体空间是占用空间最大的成员（的类型）所占字节数的整数倍。&lt;/li&gt;
&lt;li&gt;结构体的每个成员相对结构体首地址的偏移量(offset)都是最大基本类型成员字节大小的整数倍，如果不是编译器会自动补齐.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;偏移量----偏移量指的是结构体变量中成员的地址和结构体变量首地址的差。即偏移字节数，结构体大小等于最后一个成员的偏移量加上他的大小，第一个成员的偏移量为0，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里char a 偏移量为1 之后为int b 因为偏移量1不为int(4)的整数倍，所以会自动补齐，而在 double c 时，偏移量为8 是double(8)的整数倍，所以不用自动补齐 最后求得结构体得大小为 16&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190511100507608.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结构体变量的初始化&#34;&gt;结构体变量的初始化&lt;/h2&gt;
&lt;p&gt;结构体的初始化有很多注意的地方:&lt;/p&gt;
&lt;p&gt;在对结构体变量初始化时，要对结构体成员一一赋值，不能跳过前面成员变量，而直接给后面成员赋初值，但是可以只赋值前面几个，对与后面未赋值的变量，如果是数值型，则会自动赋值为0,对于字符型，会自动赋初值为NULL，即‘\0’&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181028183842390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_27,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义时直接赋值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;zhaozixuan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//或者
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;zhaozixuan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意字符为&lt;code&gt;&#39; &#39;&lt;/code&gt;,而字符串为&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义结构体之后逐个赋值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;王伟&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12305&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//也可用strcpy函数进行赋值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;王伟&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;定义之后任意赋值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
 &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//可以对任意变量赋值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样写的好处时不用按照顺序来进行初始化，而且可以对你想要赋值的变量直接进行赋值，而不想赋值的变量可以不用赋值&lt;/p&gt;
&lt;p&gt;需要注意的是 &lt;strong&gt;如果在定义结构体变量的时候没有初始化，那么后面就不能全部一起初始化了；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用typedef说明结构体类型:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181030211814877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里的BOOK就相当于struct book的一个别名一样，用它来定义结构体变量非常简便&lt;/p&gt;
&lt;h2 id=&#34;结构体变量的引用输出和输入&#34;&gt;结构体变量的引用(输出和输入)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;是运算符，在所有运算符优先级中最高&lt;/li&gt;
&lt;li&gt;如果结构体的成员本身是一个结构体，则需要继续用.运算符，直到最低一级的成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//这样子是错误的，因为birthday也是一个结构体变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;birthday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//正确
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以引用接头体变量成员的地址,也可以引用结构体变量的地址和&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结构体数组及其初始化&#34;&gt;结构体数组及其初始化&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;具有相同类型的结构体变量组成数组就是结构体数组&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;zhaozixuan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;houxiaohong&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12306&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;qxiaoxin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12546&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wangwei&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14679&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;yulongjiao&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;17857&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//表示stu1的第三个结构变量中姓名的第五个字符
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//若初始化时已经是结构体数组全部元素[]中的数可以不写如stu1[]=
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意结构体数组要在定义时就直接初始化,如果先定义再赋初值是错误的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;zhaozixuan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;houxiaohong&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12306&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;qxiaoxin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12546&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//错误
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;正确的方法有3种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义数组时直接定义
&lt;code&gt;char str[20]=&amp;quot;I love you&amp;quot; ;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用strcpy或者memset函数进行复制&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;I love you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;再用到&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memset函数时&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;出现了问题&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;memset
&lt;code&gt;void *memset(void *s,int c,size_t n)&lt;/code&gt;
作用：将已开辟内存空间s的首n个字节的值设为值c。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果是字符类型数组的话,memset可以随便使用,对于其他类型的数组,一般只用来清零或者填-1.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int str[10];
memset(str,1,sizeof(str));
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;用指针&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I love you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这两句话的本质是，在内存中开辟一段内存空间，把&amp;quot;I love you&amp;quot;放进这段内存空间，然后把这段内存空间的地址交给str，由于str是变量，所以给它赋值是合法的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;结构体与指针&#34;&gt;结构体与指针&lt;/h2&gt;
&lt;p&gt;指针指向的是变量所占内存的首地址，在结构体中，指针指向的是结构体变量的起始地址，当然也可指向结构体变量的元素&lt;/p&gt;
&lt;h3 id=&#34;指向结构体变量的指针&#34;&gt;指向结构体变量的指针&lt;/h3&gt;
&lt;p&gt;定义形式一般为:
struct 结构体名* 指针名;
&lt;code&gt;struct Student *p&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//若为结构体数组则
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//因为stu1为结构体数组而p=stu1直接是指向stu1的首地址，就不用再加&amp;amp;符
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用结构体指针变量访问结构体变量成员有以下两种方式：
(*p).cName //这里的括号不能少，在5.1中有提到
p-&amp;gt;cName&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//可以进行正常的运算
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;三种方式是等价的&lt;/p&gt;
&lt;h3 id=&#34;指向结构体数组的指针&#34;&gt;指向结构体数组的指针&lt;/h3&gt;
&lt;p&gt;想要用指针访问结构体数组的第n个数据时可以用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//是指向了结构体数组下一个元素的地址
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;结构体成员是指针类型变量&#34;&gt;结构体成员是指针类型变量&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//这样防止名字长短不一造成空间的浪费
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在使用时可以很好地防止内存被浪费，但是注意在引用时一定要给指针变量分配地址，如果你不分配地址，结果可能是对的，但是Name会被分配到任意的一的地址，结构体不为字符串分配任何内存存储空间具有不确定性，这样就存在潜在的危险，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//内存初始化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果我们定义了结构体指针变量，他没有指向一个结构体，那么这个结构体指针也是要分配内存初始化的，他所对应的指针类型结构体成员也要相应初始化分配内存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));.&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*结构体指针初始化*/&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*结构体指针的成员指针同样需要初始化*/&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;结构体作为函数参数&#34;&gt;结构体作为函数参数&lt;/h3&gt;
&lt;p&gt;使用结构体变量作为函数参数的时候，采取的是值传递的方式，将结构体所占内存单元的内容全部传递给形参，并且形参必须也要是同类型的结构体变量，在使用时，会自动创建一个结构体变量作为原变量的副本，并且也需要占内存，并且在调用期间如果修改（形参）结构体中成员的值，修改值是无效的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181030215436452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而如果用指针作为实参，传递给函数的形参，这时候传递的是结构体的地址，形参所指向的地址就是结构体变量的地址，这时候进行修改的话是可以修改的，这正是指针的精华所在&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/201810302203470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;几种互换两个结构体的方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;student2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Zhao&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;54321&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;student3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stu2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//互换地址
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;对于同类型结构体直接互换值就行&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;student3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;student3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;student1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;student2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;student3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//这里也可以写成应strcmp函数互换
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;函数进行互换&lt;/span&gt;


&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;比较笨的方法：&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;for循环互换&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后提一下memset清空结构体&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
 &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;一般情况下，清空&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str的方法&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;
　　&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;err&#34;&gt;但是我们用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memset就非常方便&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;
　　&lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
　　&lt;span class=&#34;err&#34;&gt;如果是数组：&lt;/span&gt;
　　&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
　　&lt;span class=&#34;err&#34;&gt;就是&lt;/span&gt;
　　&lt;span class=&#34;nf&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c%E8%AF%AD%E8%A8%80/" term="C语言" label="C语言" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">函数指针与指针函数 C语言</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0-c%E8%AF%AD%E8%A8%80/" />
            <id>https://chenbokaix250.github.io/tech/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0-c%E8%AF%AD%E8%A8%80/</id>
            <updated>2020-04-14T16:46:05&#43;08:00</updated>
            <published>2020-04-14T16:31:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">指针函数与函数指针(C语言) 1.指针函数 int *f(int a,int b); //返回值为int *,指针类型的返回……</summary>
            
                <content type="html">&lt;h1 id=&#34;指针函数与函数指针c语言&#34;&gt;指针函数与函数指针(C语言)&lt;/h1&gt;
&lt;h2 id=&#34;1指针函数&#34;&gt;1.指针函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;int *f(int a,int b); //返回值为int *,指针类型的返回值&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面的函数声明又可以写成如下形式:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int* f(int a,int b);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;让指针标志&lt;code&gt;*&lt;/code&gt;与int紧贴在一起,而与函数名f间隔开,这样看起来比较明了,f是函数名,返回值类型是一个int类型的指针.&lt;/p&gt;
&lt;p&gt;指针函数就是返回一个地址给调用者.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 001.c
#include &amp;lt;stdio.h&amp;gt;
int *f(int a, int b); // 声明指针函数  

int main()  
{  
    printf(&amp;quot;------------------------------ Start\n&amp;quot;);  

    int *p1 = NULL;  
    printf(&amp;quot;The memeory address of p1 = 0x%x \n&amp;quot;, p1);  

    p1 = f(1, 2);  

    printf(&amp;quot;The memeory address of p1 = 0x%x \n&amp;quot;, p1);  
    printf(&amp;quot;*p1 = %d \n&amp;quot;, *p1);  

    printf(&amp;quot;------------------------------ End\n&amp;quot;);  
    getchar();  
    return 0;  
}  

int *f(int a, int b) 
{  
    int *p = (int *)malloc(sizeof(int));  
    printf(&amp;quot;The memeory address of p = 0x%x \n&amp;quot;, p);  
    memset(p, 0, sizeof(int));  
    *p = a + b;  
    printf(&amp;quot;*p = %d \n&amp;quot;, *p);  

    return p;  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/1156877-b9bdfb05c42efb3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/591/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;指针函数f返回的类型是一个指针类型,并且指针函数f的返回值p和赋值给的指针p1的地址是相同的.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2函数指针&#34;&gt;2.函数指针&lt;/h2&gt;
&lt;p&gt;函数指针说的就是一个指针,但是这个执照很指向的是函数,不是普通的基本数据类型或者类对象.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int (*f)(int a,int b);//声明函数指针
//该函数指针f是一个指向返回值为整型,有两个参数并且两个参数的类型都是整型的函数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数指针与指针函数的最大区别是:
&lt;strong&gt;函数指针的函数名是一个指针,即函数名前面有一个指针类型的标志符号&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt;
函数指针的返回值也可以是指针.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 002.c
// 求2个整数的较大值和较小值
#include &amp;lt;stdio.h&amp;gt;
int max(int a, int b) {  
    return a &amp;gt; b ? a : b;  
}  

int min(int a, int b) {  
    return a &amp;lt; b ? a : b;  
}  

int (*f)(int, int); // 声明函数指针，该指针指向返回值类型为int，有两个参数类型都是int的函数  

int main()  
{  
    printf(&amp;quot;------------------------------ Start\n&amp;quot;);  

    f = max;    // 函数指针f指向求较大值的函数max  
    int c = (*f)(1, 2);  
    printf(&amp;quot;The max value is %d \n&amp;quot;, c);  

    f = min;    // 函数指针f指向求最小值的函数min  
    c = (*f)(1, 2);  
    printf(&amp;quot;The min value is %d \n&amp;quot;, c);  

    printf(&amp;quot;------------------------------ End\n&amp;quot;);  
    getchar();  
    return 0;  
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/1156877-9896d43e6e47724a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/608/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/c%E8%AF%AD%E8%A8%80/" term="C语言" label="C语言" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Tensorflow之Estimator</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/tf_estimator/" />
            <id>https://chenbokaix250.github.io/tech/tf_estimator/</id>
            <updated>2020-08-11T11:19:36&#43;08:00</updated>
            <published>2020-04-11T09:08:56&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">TensorFlow之estimator详解 Estimator初识 框架结构 在介绍Es……</summary>
            
                <content type="html">&lt;h1 id=&#34;tensorflow之estimator详解&#34;&gt;TensorFlow之estimator详解&lt;/h1&gt;
&lt;h2 id=&#34;estimator初识&#34;&gt;Estimator初识&lt;/h2&gt;
&lt;h3 id=&#34;框架结构&#34;&gt;框架结构&lt;/h3&gt;
&lt;p&gt;在介绍Estimator之前需要对它在TensorFlow这个大框架的定位有个大致的认识，如下图示：
&lt;img src=&#34;https://pic3.zhimg.com/v2-fcc70547f247f5e3e70b1a5f09bb0612_r.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到Estimator是属于High level的API，而Mid-level API分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layers：用来构建网络结构&lt;/li&gt;
&lt;li&gt;Datasets: 用来构建数据读取pipeline&lt;/li&gt;
&lt;li&gt;Metrics：用来评估网络性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到如果使用Estimator，我们只需要关注这三个部分即可，而不用再关心一些太细节的东西，另外也不用再使用烦人的Session了。&lt;/p&gt;
&lt;h2 id=&#34;estimator使用步骤&#34;&gt;Estimator使用步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建一个或多个输入函数，即input_fn&lt;/li&gt;
&lt;li&gt;定义模型的特征列,即feature_columns&lt;/li&gt;
&lt;li&gt;实例化 Estimator，指定特征列和各种超参数。&lt;/li&gt;
&lt;li&gt;在 Estimator 对象上调用一个或多个方法，传递适当的输入函数作为数据的来源。（train, evaluate, predict）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/v2-bd6b0d403c84584126c3009307dbcd44_r.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过伪代码的形式介绍如何使用Estimator：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个或多个输入函数，即input_fn：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def train_input_fn(features, labels, batch_size):
    &amp;quot;&amp;quot;&amp;quot;An input function for training&amp;quot;&amp;quot;&amp;quot;
    # Convert the inputs to a Dataset.
    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))

    # Shuffle, repeat, and batch the examples.
    return dataset.shuffle(1000).repeat().batch(batch_size)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;features需要是字典 (另外此处的feature与我们常说的提取特征的feature还不太一样，也可以指原图数据(raw image),或者其他未作处理的数据)。下面定义的my_feature_column会传给Estimator用于解析features。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义模型的特征列,即feature_columns&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Feature columns describe how to use the input.
my_feature_columns = []
for key in train_x.keys():          
   my_feature_columns.append(tf.feature_column.numeric_column(key=key))
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;实例化estimator,指定特征列和各种超参数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Build a DNN with 2 hidden layers and 10 nodes in each hidden layer.
classifier = tf.estimator.DNNClassifier(
    feature_columns=my_feature_columns,
    # Two hidden layers of 10 nodes each.
    hidden_units=[10, 10],
    # The model must choose between 3 classes.
    n_classes=3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意在实例化Estimator的时候不用把数据传进来，你只需要把feature_columns传进来即可，告诉Estimator需要解析哪些特征值，而数据集需要在训练和评估模型的时候才传。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Estimator 对象上调用一个或多个方法，传递适当的输入函数作为数据的来源&lt;/li&gt;
&lt;li&gt;train(训练)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#Train the Model.
 classifier.train(     input_fn=lambda:iris_data.train_input_fn(train_x, train_y, args.batch_size),     steps=args.train_steps) 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;evaluate(评估)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Evaluate the model.
 eval_result = classifier.evaluate(     input_fn=lambda:iris_data.eval_input_fn(test_x, test_y, args.batch_size))
 print(&#39;\nTest set accuracy: {accuracy:0.3f}\n&#39;.format(**eval_result)) 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;predict(预测)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#Generate predictions from the model
 expected = [&#39;Setosa&#39;, &#39;Versicolor&#39;, &#39;Virginica&#39;] 
predict_x = {     
&#39;SepalLength&#39;: [5.1, 5.9, 6.9],     
&#39;SepalWidth&#39;: [3.3, 3.0, 3.1],    
&#39;PetalLength&#39;: [1.7, 4.2, 5.4],     
&#39;PetalWidth&#39;: [0.5, 1.5, 2.1], 
}
 predictions = classifier.predict( input_fn=lambda:iris_data.eval_input_fn(predict_x,batch_size=args.batch_size)) 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;深入理解estimator&#34;&gt;深入理解Estimator&lt;/h2&gt;
&lt;p&gt;上面的示例中简单地介绍了Estimator，网络使用的是预创建好的DNNClassifier,其他预创建网络结构有如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/v2-c016e1bc5c64eef1df8832beb25a3a24_r.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;从源码理解estimator&#34;&gt;从源码理解Estimator&lt;/h2&gt;
&lt;p&gt;Estimator的&lt;a href=&#34;https://github.com/tensorflow/estimator/blob/master/tensorflow_estimator/python/estimator/estimator.py&#34;&gt;源代码&lt;/a&gt;如下（为方便说明，已经掐头去尾）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Estimator(object):
  def __init__(self, model_fn, model_dir=None, config=None, params=None, warm_start_from=None):
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到需要传入的参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;model_dir: 指定checkpoints和其他日志存放的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model_fn: 这个是需要我们自定义的网络模型函数，后面详细介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;config: 用于控制内部和checkpoints等，如果model_fn函数也定义config这个变量，则会将config传给model_fn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;params: 该参数的值会传递给model_fn。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;warm_start_from: 指定checkpoint路径，会导入该checkpoint开始训练&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构建model_fn&#34;&gt;构建model_fn&lt;/h2&gt;
&lt;p&gt;模型函数一般定义如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def my_model_fn(
   features,    # This is batch_features from input_fn,`Tensor` or dict of `Tensor` (depends on data passed to `fit`).
   labels,     # This is batch_labels from input_fn
   mode,      # An instance of tf.estimator.ModeKeys
   params,      # Additional configuration
   config=None
   ):
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;前两个参数是从输入函数中返回的特征和标签批次；也就是说，features 和 labels 是模型将使用的数据。&lt;/li&gt;
&lt;li&gt;params 是一个字典，它可以传入许多参数用来构建网络或者定义训练方式等。例如通过设置params[&#39;n_classes&#39;]来定义最终输出节点的个数等。&lt;/li&gt;
&lt;li&gt;config 通常用来控制checkpoint或者分布式什么，这里不深入研究。&lt;/li&gt;
&lt;li&gt;mode 参数表示调用程序是请求训练、评估还是预测，分别通过&lt;code&gt;tf.estimator.ModeKeys.TRAIN / EVAL / PREDICT &lt;/code&gt;来定义。另外通过观察DNNClassifier的源代码可以看到，mode这个参数并不用手动传入，因为Estimator会自动调整。例如当你调用estimator.train(...)的时候，mode则会被赋值tf.estimator.ModeKeys.TRAIN。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;model_fn需要对于不同的模式提供不同的处理方式，并且都需要返回一个&lt;code&gt;tf.estimator.EstimatorSpec&lt;/code&gt;的实例。&lt;/p&gt;
&lt;p&gt;大白话版本就是：模型有训练，验证和测试三种阶段，而且对于不同模式，对数据有不同的处理方式。例如在训练阶段，我们需要将数据喂给模型，模型基于输入数据给出预测值，然后我们在通过预测值和真实值计算出loss，最后用loss更新网络参数，而在评估阶段，我们则不需要反向传播更新网络参数，换句话说，mdoel_fn需要对三种模式设置三套代码。&lt;/p&gt;
&lt;p&gt;Estimator规定model_fn需要返&lt;code&gt;tf.estimator.EstimatorSpec&lt;/code&gt;，这样它才好更具一般化的进行处理。&lt;/p&gt;
&lt;h2 id=&#34;runconfig&#34;&gt;RunConfig&lt;/h2&gt;
&lt;p&gt;此处的config需要传入&lt;code&gt;tf.estimator.RunConfig&lt;/code&gt;,其源代码如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class RunConfig(object):
  &amp;quot;&amp;quot;&amp;quot;This class specifies the configurations for an `Estimator` run.&amp;quot;&amp;quot;&amp;quot;

  def __init__(self,
               model_dir=None,
               tf_random_seed=None,
               save_summary_steps=100,
               save_checkpoints_steps=_USE_DEFAULT,
               save_checkpoints_secs=_USE_DEFAULT,
               session_config=None,
               keep_checkpoint_max=5,
               keep_checkpoint_every_n_hours=10000,
               log_step_count_steps=100,
               train_distribute=None,
               device_fn=None,
               protocol=None,
               eval_distribute=None,
               experimental_distribute=None,
               experimental_max_worker_delay_secs=None,
               session_creation_timeout_secs=7200):
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;model_dir: 指定存储模型参数，graph等的路径&lt;/li&gt;
&lt;li&gt;save_summary_steps: 每隔多少step就存一次Summaries，不知道summary是啥&lt;/li&gt;
&lt;li&gt;save_checkpoints_steps:每隔多少个step就存一次checkpoint&lt;/li&gt;
&lt;li&gt;save_checkpoints_secs: 每隔多少秒就存一次checkpoint，不可以和save_checkpoints_steps同时指定。如果二者都不指定，则使用默认值，即每600秒存一次。如果二者都设置为None，则不存checkpoints。&lt;/li&gt;
&lt;li&gt;keep_checkpoint_max：指定最多保留多少个checkpoints，也就是说当超出指定数量后会将旧的checkpoint删除。当设置为None或0时，则保留所有checkpoints。&lt;/li&gt;
&lt;li&gt;keep_checkpoint_every_n_hours：&lt;/li&gt;
&lt;li&gt;log_step_count_steps:该参数的作用是,(相对于总的step数而言)指定每隔多少step就记录一次训练过程中loss的值，同时也会记录global steps/s，通过这个也可以得到模型训练的速度快慢。（天啦，终于找到这个参数了。。。。之前用TPU测模型速度，每次都得等好久才输出一次global steps/s的数据。。。蓝瘦香菇）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面这些参数与分布式有关，以后有时间再慢慢了解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;train_distribute&lt;/li&gt;
&lt;li&gt;device_fn&lt;/li&gt;
&lt;li&gt;protocol&lt;/li&gt;
&lt;li&gt;eval_distribute&lt;/li&gt;
&lt;li&gt;experimental_distribute&lt;/li&gt;
&lt;li&gt;experimental_max_worker_delay_secs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是tfestimatorestimatorspec&#34;&gt;什么是tf.estimator.EstimatorSpec&lt;/h2&gt;
&lt;h3 id=&#34;传入参数&#34;&gt;传入参数&lt;/h3&gt;
&lt;p&gt;它是一个class(类)，是定义在model_fn中的，并且model_fn返回的也是它的一个实例，这个实例是用来初始化Estimator类的。其源代码如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class EstimatorSpec():
  def __new__(cls,
              mode,
              predictions=None,
              loss=None,
              train_op=None,
              eval_metric_ops=None,
              export_outputs=None,
              training_chief_hooks=None,
              training_hooks=None,
              scaffold=None,
              evaluation_hooks=None,
              prediction_hooks=None):
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重要函数参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mode：一个ModeKeys,指定是training(训练)、evaluation(计算)还是prediction(预测).&lt;/li&gt;
&lt;li&gt;predictions：Predictions Tensor or dict of Tensor.&lt;/li&gt;
&lt;li&gt;loss：Training loss Tensor. Must be either scalar, or with shape [1].&lt;/li&gt;
&lt;li&gt;train_op：适用于训练的步骤.&lt;/li&gt;
&lt;li&gt;eval_metric_ops: Dict of metric results keyed by name. The values of the dict can be one of the following:&lt;/li&gt;
&lt;li&gt;(1) instance of Metric class.&lt;/li&gt;
&lt;li&gt;(2) Results of calling a metric function, namely a (metric_tensor, update_op) tuple. metric_tensor should be evaluated without any impact on state (typically is a pure computation results based on variables.). For example, it should not trigger the update_op or requires any input fetching.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不同模式需要传入不同参数&#34;&gt;不同模式需要传入不同参数&lt;/h3&gt;
&lt;p&gt;根据mode的值的不同,需要不同的参数,即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于mode == ModeKeys.TRAIN：必填字段是loss和train_op.&lt;/li&gt;
&lt;li&gt;对于mode == ModeKeys.EVAL：必填字段是loss.&lt;/li&gt;
&lt;li&gt;对于mode == ModeKeys.PREDICT：必填字段是predictions.
上面的参数说明看起来还是一头雾水，下面给出例子帮助理解：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最简单的情况-predict&#34;&gt;最简单的情况: predict&lt;/h3&gt;
&lt;p&gt;只需要传入mode和predictions&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Compute predictions.
predicted_classes = tf.argmax(logits, 1)
if mode == tf.estimator.ModeKeys.PREDICT:
    predictions = {
        &#39;class_ids&#39;: predicted_classes[:, tf.newaxis],
        &#39;probabilities&#39;: tf.nn.softmax(logits),
        &#39;logits&#39;: logits,
    }
    return tf.estimator.EstimatorSpec(mode, predictions=predictions)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;评估模式--eval&#34;&gt;评估模式 : eval&lt;/h3&gt;
&lt;p&gt;需要传入mode,loss,eval_metric_ops&lt;/p&gt;
&lt;p&gt;如果调用 Estimator 的 evaluate 方法，则 model_fn 会收到 mode = ModeKeys.EVAL。在这种情况下，模型函数必须返回一个包含模型损失和一个或多个指标（可选）的 tf.estimator.EstimatorSpec。&lt;/p&gt;
&lt;p&gt;loss示例如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Compute loss.
loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TensorFlow提供了一个指标模块tf.metrics来计算常用的指标，这里以accuracy为例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Compute evaluation metrics.
accuracy = tf.metrics.accuracy(labels=labels,
                               predictions=predicted_classes,
                               name=&#39;acc_op&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回方式如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;metrics = {&#39;accuracy&#39;: accuracy}

if mode == tf.estimator.ModeKeys.EVAL:
    return tf.estimator.EstimatorSpec(
        mode, loss=loss, eval_metric_ops=metrics)

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;训练模式train&#34;&gt;训练模式:train&lt;/h3&gt;
&lt;p&gt;需要传入mode,loss,train_op&lt;/p&gt;
&lt;p&gt;loss同eval模式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Compute loss.
loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;train_op示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;optimizer = tf.train.AdagradOptimizer(learning_rate=0.1)
train_op = optimizer.minimize(loss,global_step=tf.train.get_global_step())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回值&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;通用模式&#34;&gt;通用模式&lt;/h3&gt;
&lt;p&gt;model_fn可以填充独立于模式的所有参数.在这种情况下,Estimator将忽略某些参数.在eval和infer模式中,train_op将被忽略.例子如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def my_model_fn(mode, features, labels):
  predictions = ...
  loss = ...
  train_op = ...
  return tf.estimator.EstimatorSpec(
      mode=mode,
      predictions=predictions,
      loss=loss,
      train_op=train_op)
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/tensorflow/" term="tensorflow" label="tensorflow" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo搭建博客记录</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/" />
            <id>https://chenbokaix250.github.io/life/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</id>
            <updated>2020-04-09T16:42:21&#43;08:00</updated>
            <published>2020-04-09T16:36:23&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Hugo搭建私人博客 安装Hugo，安装比较简单，因为我的Mac电脑，使用Homebr……</summary>
            
                <content type="html">&lt;h1 id=&#34;hugo搭建私人博客&#34;&gt;Hugo搭建私人博客&lt;/h1&gt;
&lt;p&gt;安装Hugo，安装比较简单，因为我的Mac电脑，使用Homebrew安装Hugo:
&lt;code&gt;brew install hugo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装好以后创建名为blog的站点
&lt;code&gt;hugo new site Blog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一个主题&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd blob;//本地博客根目录
git init;
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke;

# 编辑你的 config.toml 配置文件使用该主题
echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加一篇文章
&lt;code&gt;hugo new posts/my-first-post.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看运行效果
&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;博客站点目录说明&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;myblog
 ├─config.toml ## 配置文件
 ├─archetypes ## 默认生成新页面的模板
 ├─public ## 生成的文章静态文件 
 ├─content ## 生成的文章
 ├─static ## 静态文件目录
 └─themes ## 下载的模板目录

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/introduce/" term="introduce" label="introduce" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">C&#43;&#43;_const小结</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/c&#43;&#43;_const%E5%B0%8F%E7%BB%93/" />
            <id>https://chenbokaix250.github.io/tech/c&#43;&#43;_const%E5%B0%8F%E7%BB%93/</id>
            <updated>2020-04-09T16:17:04&#43;08:00</updated>
            <published>2020-04-09T15:45:00&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">C++ const 关键字小结 const 是 constant 的缩写，本意是不变的，不易改变的意思。在 C++ 中是用来修饰内置类型变……</summary>
            
                <content type="html">&lt;h1 id=&#34;c-const-关键字小结&#34;&gt;C++ const 关键字小结&lt;/h1&gt;
&lt;p&gt;const 是 constant 的缩写，本意是不变的，不易改变的意思。在 C++ 中是用来修饰内置类型变量，自定义对象，成员函数，返回值，函数参数。&lt;/p&gt;
&lt;p&gt;C++ const 允许指定一个语义约束，编译器会强制实施这个约束，允许程序员告诉编译器某值是保持不变的。如果在编程中确实有某个值保持不变，就应该明确使用const，这样可以获得编译器的帮助。&lt;/p&gt;
&lt;h2 id=&#34;const-修饰普通类型的变量&#34;&gt;const 修饰普通类型的变量&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const int a  = 7;
int b  = a;//正确
a = 8; //错误
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;a被定义为一个常量,并且可以将 a 赋值给 b，但是不能给 a 再次赋值。对一个常量赋值是违法的事情，因为 a 被编译器认为是一个常量，其值不允许修改。
下面这个例子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
 
using namespace std;
 
int main(void)
{
    const int  a = 7;
    int  *p = (int*)&amp;amp;a;
    *p = 8;
    cout&amp;lt;&amp;lt;a;
    system(&amp;quot;pause&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于 const 变量 a，我们取变量的地址并转换赋值给 指向 int 的指针，然后利用 *p = 8; 重新对变量 a 地址内的值赋值，然后输出查看 a 的值。&lt;/p&gt;
&lt;p&gt;从下面的调试窗口看到 a 的值被改变为 8，但是输出的结果仍然是 7。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.runoob.com/wp-content/uploads/2018/11/082318120675590.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.runoob.com/wp-content/uploads/2018/11/082317589748856.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从结果中我们可以看到，编译器然后认为 a 的值为一开始定义的 7，所以对 const a 的操作就会产生上面的情况。所以千万不要轻易对 const 变量设法赋值，这会产生意想不到的行为。&lt;/p&gt;
&lt;p&gt;如果不想让编译器察觉到上面到对 const 的操作，我们可以在 const 前面加上 volatile 关键字.&lt;/p&gt;
&lt;h2 id=&#34;const-修饰指针变量&#34;&gt;const 修饰指针变量&lt;/h2&gt;
&lt;p&gt;const修饰指针变量有以下三种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;const修饰指针指向的内容,则内容为不可变量&lt;/li&gt;
&lt;li&gt;const修饰指针,则指针为不可变量&lt;/li&gt;
&lt;li&gt;const修饰指针和指针指向的内容,则指针和指针指向的内容都为不可变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于1:&lt;code&gt;const int *p = 8;&lt;/code&gt;
&lt;strong&gt;则指针指向的内容8不可改变,简称左定值.因为const位于&lt;code&gt;*&lt;/code&gt;号的左边.&lt;/strong&gt;
对于2:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int a = 8;
int* const p = &amp;amp;a;
*p = 9;//正确
int b = 7;
p = &amp;amp;b;//错误
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;对于const指针p其指向的内存地址不能够被改变,单其内容可以改变.简称右定向.位于const位于&lt;code&gt;*&lt;/code&gt;号的右边.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于3,则是1和2的合并:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int a = 8;
const int * const p = &amp;amp;a;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;const p的指向的内容和指向的内存地址都已经固定,不可改变.
&lt;strong&gt;左定值,右定向,const修饰不变量&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;const参数传递和函数返回值&#34;&gt;const参数传递和函数返回值&lt;/h2&gt;
&lt;p&gt;对于const修饰函数参数可以分三种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;值传递的const 修饰传递，一般这种情况不需要 const 修饰，因为函数会自动产生临时变量复制实参值&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
 
using namespace std;
void Cpf(const int a)
{
    cout&amp;lt;&amp;lt;a;
    // ++a;  是错误的，a 不能被改变
}
int main(void)
 
{
    Cpf(8);
    system(&amp;quot;pause&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;当const参数为指针时,可以防止指针被意外篡改&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
 
using namespace std;
 
void Cpf(int *const a)
{
    cout&amp;lt;&amp;lt;*a&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
    *a = 9;
}
 
int main(void)
{
    int a = 8;
    Cpf(&amp;amp;a);
    cout&amp;lt;&amp;lt;a; // a 为 9
    system(&amp;quot;pause&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;自定义类型的参数传递，需要临时对象复制参数，对于临时对象的构造，需要调用构造函数，比较浪费时间，因此我们采取 const 外加引用传递的方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并且对于一般的 int、double 等内置类型，我们不采用引用的传递方式。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
 
using namespace std;
 
class Test
{
public:
    Test(){}
    Test(int _m):_cm(_m){}
    int get_cm()const
    {
       return _cm;
    }
 
private:
    int _cm;
};
 

void Cmf(const Test&amp;amp; _tt)
{
    cout&amp;lt;&amp;lt;_tt.get_cm();
}
 
int main(void)
{
    Test t(8);
    Cmf(t);
    system(&amp;quot;pause&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果输出 8。&lt;/p&gt;
&lt;h3 id=&#34;对于-const-修饰函数的返回值分三种情况&#34;&gt;对于 const 修饰函数的返回值,分三种情况&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;const 修饰内置类型的返回值，修饰与不修饰返回值作用一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
 
using namespace std;
 
const int Cmf()
{
    return 1;
}
 
int Cpf()
{
    return 0;
}
 
int main(void)
{
    int _m = Cmf();
    int _n = Cpf();
 
    cout&amp;lt;&amp;lt;_m&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;_n;
    system(&amp;quot;pause&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;const 修饰自定义类型的作为返回值，此时返回的值不能作为左值使用，既不能被赋值，也不能被修改。&lt;/li&gt;
&lt;li&gt;const 修饰返回的指针或者引用，是否返回一个指向 const 的指针，取决于我们想让用户干什么。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;const修饰类成员函数&#34;&gt;const修饰类成员函数&lt;/h2&gt;
&lt;p&gt;const 修饰类成员函数，其目的是防止成员函数修改被调用对象的值，如果我们不想修改一个调用对象的值，所有的成员函数都应当声明为 const 成员函数。
注意：const 关键字不能与 static 关键字同时使用，因为 static 关键字修饰静态成员函数，静态成员函数不含有 this 指针，即不能实例化，const 成员函数必须具体到某一实例。&lt;/p&gt;
&lt;p&gt;下面的 get_cm()const; 函数用到了 const 成员函数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
 
using namespace std;
 
class Test
{
public:
    Test(){}
    Test(int _m):_cm(_m){}
    int get_cm()const
    {
       return _cm;
    }
 
private:
    int _cm;
};
 

void Cmf(const Test&amp;amp; _tt)
{
    cout&amp;lt;&amp;lt;_tt.get_cm();
}
 
int main(void)
{
    Test t(8);
    Cmf(t);
    system(&amp;quot;pause&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果 get_cm() 去掉 const 修饰，则 Cmf 传递的 const _tt 即使没有改变对象的值，编译器也认为函数会改变对象的值，所以我们尽量按照要求将所有的不需要改变对象内容的函数都作为 const 成员函数。&lt;/p&gt;
&lt;p&gt;如果有个成员函数想修改对象中的某一个成员怎么办？这时我们可以使用 mutable 关键字修饰这个成员，mutable 的意思也是易变的，容易改变的意思，被 mutable 关键字修饰的成员可以处于不断变化中，如下面的例子。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;
class Test
{
public:
    Test(int _m,int _t):_cm(_m),_ct(_t){}
    void Kf()const
    {
        ++_cm; // 错误
        ++_ct; // 正确
    }
private:
    int _cm;
    mutable int _ct;
};
 
int main(void)
{
    Test t(8,7);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我们在 Kf()const 中通过 ++_ct; 修改 _ct 的值，但是通过 ++_cm 修改 _cm 则会报错。因为 ++_cm 没有用 mutable 修饰。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/coding/" term="coding" label="coding" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Mxnet_learn</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/mxnet_learn/" />
            <id>https://chenbokaix250.github.io/tech/mxnet_learn/</id>
            <updated>2020-04-09T16:17:17&#43;08:00</updated>
            <published>2020-04-09T09:25:20&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Mxnet 笔记 MXnet中利用NDArray作为存储和变换数据的主要工具 NDArray提供了……</summary>
            
                <content type="html">&lt;h1 id=&#34;mxnet-笔记&#34;&gt;Mxnet 笔记&lt;/h1&gt;
&lt;p&gt;MXnet中利用NDArray作为存储和变换数据的主要工具&lt;/p&gt;
&lt;p&gt;NDArray提供了GPU计算和自动求梯度等功能,更适合深度学习中使用.&lt;/p&gt;
&lt;p&gt;NDAarray支持大量的运算符&lt;/p&gt;
&lt;p&gt;两个形状相同的NDArray按元素运算时,可能会触发广播机制(先适当复制元素使这两个NDArray形状相同后再按元素运算)&lt;/p&gt;
&lt;p&gt;在NDArray中,索引从0开始逐一递增&lt;/p&gt;
&lt;p&gt;可以利用Python中自带的id函数,查看对应的内存地址是否相同&lt;/p&gt;
&lt;p&gt;可以通过array函数和asnumpy函数令数据在NDArray和Numpy格式之间互相变换&lt;/p&gt;
&lt;p&gt;MXNet提供了autograd模块来自动求梯度&lt;/p&gt;
&lt;p&gt;调用record函数后,MXNet会记录并计算梯度
默认情况下,autograd还会将运行模式从预测模式转为训练模式.可以通过调用is_training函数来查看&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;关于在mxnet上查阅函数和类&#34;&gt;关于在MXNet上查阅函数和类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;想知道一个模块里面提供了哪些可以调用的函数和类的时候,可以使用dir函数&lt;/li&gt;
&lt;li&gt;想了解某个函数或者类的具体用法时,可以使用help函数(利用q退出或者ctrl+z)&lt;/li&gt;
&lt;li&gt;在jupyter记事本里,可以使用?来讲文档显示在另外一个窗口(nd.random?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用Gluon可以更简洁的实现模型&lt;/p&gt;
&lt;p&gt;在Gluon中,data模块提供有关数据处理的工具,nn模块定义了大量神经网络的层,loss模块定义了各种损失&lt;/p&gt;
&lt;p&gt;XMNet的initializer模块提供了模型参数初始化的各种方法&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;正向传播&lt;/p&gt;
&lt;p&gt;指对神经网络沿着输入层到输出层的顺序,依次计算并存储模型的中间变量&lt;/p&gt;
&lt;p&gt;反向传播&lt;/p&gt;
&lt;p&gt;计算神经网络参数提督的方法&lt;/p&gt;
&lt;p&gt;依据微积分中的链式法则,沿着从输出层到输入层的顺序,依次计算并存储目标函数有关神经网络各层的中间变量以及参数的梯度.&lt;/p&gt;
&lt;p&gt;深度学习模型中,正向传播和反向传播相互依赖&lt;/p&gt;
&lt;p&gt;深度模型有关数值稳定性的典型问题是衰减(vanishing)和爆炸(explosion)&lt;/p&gt;
&lt;p&gt;MXNet的默认随机初始化使用net.initialize(init.Normal(sigma=0.01))使模型net的权重参数采用正态分布的随机初始化方式.&lt;/p&gt;
&lt;p&gt;如果不指定初始化方法.如net.initialize(),MXNet将使用默认的随机初始化方法:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权重参数每个元素随机采样于-0.07到0.07之间的均匀分布,偏差参数全部清零&lt;/strong&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/coding/" term="coding" label="coding" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Qt_learn</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/qt_learn/" />
            <id>https://chenbokaix250.github.io/tech/qt_learn/</id>
            <updated>2020-04-09T16:17:23&#43;08:00</updated>
            <published>2020-04-09T09:07:02&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Qt 之路 Qt 涉及的术语和名词 Project Project 的中文翻译是“项目”或者“工程”，这里的项目是指为实现某……</summary>
            
                <content type="html">&lt;h1 id=&#34;qt-之路&#34;&gt;Qt 之路&lt;/h1&gt;
&lt;h2 id=&#34;qt-涉及的术语和名词&#34;&gt;Qt 涉及的术语和名词&lt;/h2&gt;
&lt;h3 id=&#34;project&#34;&gt;Project&lt;/h3&gt;
&lt;p&gt;Project 的中文翻译是“项目”或者“工程”，这里的项目是指为实现某个相对独立功能的程序代码合,这些代码不单单是放在一块，而是有相互之间的关联性，并且有专门负责管理该项目的项目文件，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qt 使用 .pro 文件管理项目；&lt;/li&gt;
&lt;li&gt;VC++ 则使用 .vcproj 作为项目文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成开发环境通常都是依据项目文件（.pro/.vcproj）管理和构建项目。&lt;/p&gt;
&lt;h3 id=&#34;makefile&#34;&gt;Makefile&lt;/h3&gt;
&lt;p&gt;即生成脚本，虽然可以直接调用编译器如 g++ 编译程序，但是如果项目里的代码文件变多了，哪些代码文件更新了需要重新编译，哪些代码没有改不需要重新编译等等，靠程序员自己记忆去处理是比较麻烦的事，还有哪些代码需要预处理或是链接哪些库文件， 这些都是繁杂的过程。为了规范程序的编译生成过程，产生了规范化的生成脚本，就是 Makefile，生成器 make 可以依据规范的 Makefile 自动生成目标程序或库文件。&lt;/p&gt;
&lt;p&gt;定义好 Makefile ，让程序员只需要去关注如何编写代码，而生成程序过程中的脏活累活都交给 make 程序。&lt;/p&gt;
&lt;p&gt;现在 Makefile 通常都有工具自动生成，如 qmake 工具， 这样就大量减轻了程序员的负担。&lt;/p&gt;
&lt;h3 id=&#34;debug-和-release&#34;&gt;Debug 和 Release&lt;/h3&gt;
&lt;p&gt;Debug 即调试，Release即发行。代码编写之后，生成的目标程序或库文件通常不会绝对正确，或多或少有些毛病（bug），因此需要进行纠错调试（Debug）。调试过程中需要源代码和二进制目标程序之间一一对应的关系， 这样才能定位到错误代码，所以 Debug 版本的程序是臃肿而不进行优化的。&lt;/p&gt;
&lt;p&gt;与之相对的是 Release 发行版，在纠正了发觉到的错误后，需要发布程序用于实际用途，实际应用时强调运行效率高，减少冗余代码，因此会对二进制程序进行大量优化，提升性能。这样发布的二进制目标程序就是 Release 版。&lt;/p&gt;
&lt;p&gt;Debug 版本和 Release 版本使用的库文件不一样：
Debug 版本程序通常链接的也是 Debug 版本的库文件，比如 libQt5Guid.a/Qt5Guid.dll，库文件的简短名（不含扩展名）都是以 d 结尾的，Debug 库通常都比较大 。
Release 版本程序链接的通常就是 Release 版本的库文件，Release 版本库文件名字比 Debug 版本库文件少一个字母 d ，如 libQt5Gui.a/Qt5Gui.dll，而且 Release 版本库一般都比 Debug 版本小很多，运行效率也高很多。&lt;/p&gt;
&lt;h3 id=&#34;c11-标准&#34;&gt;C++11 标准&lt;/h3&gt;
&lt;p&gt;时代在变化，C++ 标准也在前进。C++ 正式公布标准有 C++98、C++03、C++11。最新的 C++11 标准是2011年8月12日公布的，在公布之前该标准原名为 C++0x 。这是一次较大的修订和扩充，建议读者专门学一下。&lt;/p&gt;
&lt;p&gt;Qt 从 4.8 版本就开始用 C++11 新特性了。编译器里面开始支持 C++11 的版本是 MSVC 2010、GCC 4.5、Clang 3.1，这之后版本的编译器都在逐步完善对 C++11 的支持，现在新版本编译器对新标准的支持都比较全面了。&lt;/p&gt;
&lt;p&gt;Qt 官方在编译 Qt5 库的时候都是开启 C++11 特性的，如果我们要在自己项目代码启用新标准，需要在 .pro 文件里面添加一行：
&lt;code&gt;CONFIG += c++11&lt;/code&gt;
如果是 Qt4 版本则是添加：
&lt;code&gt;gcc:CXXFLAGS += -std=c++0x&lt;/code&gt;
MSVC 编译器默认开启 C++11 特性，GCC（g++命令）则需要自己添加选项 -std=c++0x ，上面 CXXFLAGS 就是为 GCC 编译器（g++命令）添加 -std=c++0x 选项。&lt;/p&gt;
&lt;h3 id=&#34;dynamic-link和static-link&#34;&gt;Dynamic Link和Static Link&lt;/h3&gt;
&lt;p&gt;Dynamic Link 即动态链接，Static Link 即静态链接。&lt;/p&gt;
&lt;h4 id=&#34;动态链接库&#34;&gt;动态链接库&lt;/h4&gt;
&lt;p&gt;目标程序通常都不是独立个体，生成程序时都需要链接其他的库，要用到其他库的代码。对于多个程序同时运行而言，内存中就可能有同一个库的多个副本，占用了太多内存而干的活差不多。&lt;/p&gt;
&lt;p&gt;为了优化内存运用效率，引入了动态链接库（Dynamic Link Library），或叫共享库（Shared Object）。使用动态链接库时，内存中只需要一份该库文件，其他程序要使用该库文件时，只要链接过来就行了。由于动态库文件外置，链接到动态库的目标程序相对比较小，因为剥离了大量库代码，而只需要一些链接指针。&lt;/p&gt;
&lt;p&gt;使用动态库，也意味着程序需要链接到如 &lt;code&gt;*.dll &lt;/code&gt;或&lt;code&gt;*.so&lt;/code&gt;文件，得提前装好动态库文件，然后目标程序才能正常运行。&lt;/p&gt;
&lt;h4 id=&#34;静态链接库&#34;&gt;静态链接库&lt;/h4&gt;
&lt;p&gt;静态库就是将链接库的代码和自己编写的代码都编译链接到一块，链接到静态库的程序通常比较大，但好处是运行时依赖的库文件很少，因为目标程序自己内部集成了很多库代码。&lt;/p&gt;
&lt;h4 id=&#34;库文件后缀&#34;&gt;库文件后缀&lt;/h4&gt;
&lt;p&gt;Linux/Unix 系统里静态库扩展名一般是 .a，动态库扩展名一般是 .so 。Windows 系统里 VC 编译器用的静态库扩展名一般是 .lib，动态库扩展名一般是 .dll 。&lt;/p&gt;
&lt;h2 id=&#34;qt程序first&#34;&gt;QT程序First&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://c.biancheng.net/uploads/allimg/181228/2-1Q22QH622Q7.gif&#34; alt=&#34;&#34;&gt;
QTCreate可以创建多种项目,各类应用程序如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qt Widgets Application，支持桌面平台的有图形用户界面（Graphic User Interface，GUI） 界面的应用程序。GUI 的设计完全基于 C++ 语言，采用 Qt 提供的一套 C++ 类库。&lt;/li&gt;
&lt;li&gt;Qt Console Application，控制台应用程序，无 GUI 界面，一般用于学习 C/C++ 语言，只需要简单的输入输出操作时可创建此类项目。&lt;/li&gt;
&lt;li&gt;Qt Quick Application，创建可部署的 Qt Quick 2 应用程序。Qt Quick 是 Qt 支持的一套 GUI 开发架构，其界面设计采用 QML 语言，程序架构采用 C++ 语言。利用 Qt Quick 可以设计非常炫的用户界面，一般用于移动设备或嵌入式设备上无边框的应用程序的设计。&lt;/li&gt;
&lt;li&gt;Qt Quick Controls 2 Application，创建基于 Qt Quick Controls 2 组件的可部署的 Qt Quick 2 应用程序。Qt Quick Controls 2 组件只有 Qt 5.7 及以后版本才有。&lt;/li&gt;
&lt;li&gt;Qt Canvas 3D Application，创建 Qt Canvas 3D QML 项目，也是基于 QML 语言的界面设计，支持 3D 画布。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;项目的文件组成和管理&#34;&gt;项目的文件组成和管理&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://c.biancheng.net/uploads/allimg/181228/2-1Q22Q51Hcc.gif&#34; alt=&#34;&#34;&gt;
项目名称节点下,分组管理着项目的各种源文件,几个文件及分组分别为以下几项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demo.pro 是项目管理文件，包括一些对项目的设置项。&lt;/li&gt;
&lt;li&gt;Headers 分组，该节点下是项目内的所有头文件（.h）中所示项目有一个头文件mainwindow.h，是主窗口类的头文件。&lt;/li&gt;
&lt;li&gt;Sources 分组：该节点下是项目内的所有 C++源文件（.cpp），图 5 中所示项目有两个 C++ 源文件，mainwindow.cpp 是主窗口类的实现文件，与 mainwindow.h 文件对应。main.cpp 是主函数文件，也是应用程序的入口。&lt;/li&gt;
&lt;li&gt;Forms 分组：该节点下是项目内的所有界面文件（.ui）。图 5 中所示项目有一个界面文件mainwindow.ui，是主窗口的界面文件。界面文件是文本文件，使用 XML 语言描述界面的组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;QApplication&amp;gt;

#include &amp;lt;QWidget&amp;gt;


int main(int argc, char *argv[])

{
    QApplication a(argc, argv);

    QWidget w;

    w.show();

    return a.exec();

}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Qt头文件没有.h后缀&lt;/li&gt;
&lt;li&gt;Qt一个类对应一个头文件,类名就是头文件名&lt;/li&gt;
&lt;li&gt;QApplication应用过程序类:
管理图形用户界面应用程序的控制流和主要设置。
是Qt的整个后台管理的命脉它包含主事件循环，在其中来自窗口系统和其它资源的所有事件处理和调度。它也处理应用程序的初始化和结束，并且提供对话管理。
对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。&lt;/li&gt;
&lt;li&gt;a.exec()
程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信号和槽机制listener&#34;&gt;信号和槽机制(listener)&lt;/h2&gt;
&lt;p&gt;信号槽是 Qt 框架引以为豪的机制之一。所谓信号槽，实际就是观察者模式。当某个事件发生之后，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。这种发出是没有目的的，类似广播。如果有对象对这个信号感兴趣，它就会使用连接（connect）函数，意思是，将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号。也就是说，当信号发出时，被连接的槽函数会自动被回调。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。（这里提一句，Qt 的信号槽使用了额外的处理来实现，并不是 GoF 经典的观察者模式的实现方式。）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QPushButton&amp;gt;

int main(int argc, char *argv[])

{
    QApplication app(argc, argv);
    QPushButton button(&amp;quot;Quit&amp;quot;);
    QObject::connect(&amp;amp;button, &amp;amp;QPushButton::clicked,&amp;amp;app, &amp;amp;QApplication::quit);

    button.show();

    return app.exec();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;connect()函数最常用的一般形式：connect(sender, signal, receiver, slot);&lt;/strong&gt;
参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sender 发出信号的对象&lt;/li&gt;
&lt;li&gt;signal 发送对象发出的信号&lt;/li&gt;
&lt;li&gt;receiver 接收信号的对象&lt;/li&gt;
&lt;li&gt;slot 接收对象在接收到信号之后所需要调用的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号槽要求信号和槽的参数一致，所谓一致，是参数类型一致。如果不一致，允许的情况是，&lt;strong&gt;槽函数的参数可以比信号的少&lt;/strong&gt;，即便如此，槽函数存在的那些参数的顺序也必须和信号的前面几个一致起来。这是因为，你可以在槽函数中选择忽略信号传来的数据（也就是槽函数的参数比信号的少），但是不能说信号根本没有这个数据，你就要在槽函数中使用（就是槽函数的参数比信号的多，这是不允许的）。&lt;/p&gt;
&lt;h2 id=&#34;自定义信号槽&#34;&gt;自定义信号槽&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;======= newspaper.h ========
class Newspaper : public QObject

{

    Q_OBJECT

public:

    Newspaper(const QString &amp;amp; name) :

        m_name(name)

    {
    }

    void send()
    {
        emit newPaper(m_name);
    }

signals:

    void newPaper(const QString &amp;amp;name);
private:
    QString m_name;
};

========reader.h ==============
#include &amp;lt;QObject&amp;gt;
#include &amp;lt;QDebug&amp;gt;

class Reader : public QObject
{
    Q_OBJECT
    
public:
    Reader() {}
    void receiveNewspaper(const QString &amp;amp; name)
    {
        qDebug() &amp;lt;&amp;lt; &amp;quot;Receives Newspaper: &amp;quot; &amp;lt;&amp;lt; name;
    }
};

============main.cpp=================
#include &amp;lt;QCoreApplication&amp;gt;

#include &amp;quot;newspaper.h&amp;quot;

#include &amp;quot;reader.h&amp;quot;

int main(int argc, char *argv[])

{

    QCoreApplication app(argc, argv);

    Newspaper newspaper(&amp;quot;Newspaper A&amp;quot;);

    Reader reader;

    QObject::connect(&amp;amp;newspaper, &amp;amp;Newspaper::newPaper, &amp;amp;reader,    &amp;amp;Reader::receiveNewspaper);

    newspaper.send();

    return app.exec();

}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先看Newspaper这个类。这个类继承了QObject类。**只有继承了QObject类的类，才具有信号槽的能力。**所以，为了使用信号槽，必须继承QObject。凡是QObject类（不管是直接子类还是间接子类），都应该在第一行代码写上Q_OBJECT。不管是不是使用信号槽，都应该添加这个宏。这个宏的展开将为我们的类提供信号槽机制、国际化机制以及 Qt 提供的不基于 C++ RTTI 的反射能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Newspaper类的 public 和 private 代码块都比较简单，只不过它新加了一个 signals。signals 块所列出的，就是该类的信号。信号就是一个个的函数名，返回值是 void（因为无法获得信号的返回值，所以也就无需返回任何值），参数是该类需要让外界知道的数据。信号作为函数名，不需要在 cpp 函数中添加任何实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Newspaper类的send()函数比较简单，只有一个语句emit newPaper(m_name);。emit 是 Qt 对 C++ 的扩展，是一个关键字（其实也是一个宏）。emit 的含义是发出，也就是发出newPaper()信号。感兴趣的接收者会关注这个信号，可能还需要知道是哪份报纸发出的信号？所以，我们将实际的报纸名字m_name当做参数传给这个信号。当接收者连接这个信号时，就可以通过槽函数获得实际值。这样就完成了数据从发出者到接收者的一个转移。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reader类更简单。因为这个类需要接受信号，所以我们将其继承了QObject，并且添加了Q_OBJECT宏。后面则是默认构造函数和一个普通的成员函数。**Qt 5 中，任何成员函数、static 函数、全局函数和 Lambda 表达式都可以作为槽函数。**与信号函数不同，槽函数必须自己完成实现代码。槽函数就是普通的成员函数，因此作为成员函数，也会受到 public、private 等访问控制符的影响。（如果信号是 private 的，这个信号就不能在类的外面连接，也就没有任何意义。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自定义信号槽需要注意的事项&#34;&gt;自定义信号槽需要注意的事项:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发送者和接收中和都需要是的子类&lt;/li&gt;
&lt;li&gt;使用signals标记信号函数,信号是一个函数声明,返回void,不需要事先函数代码&lt;/li&gt;
&lt;li&gt;槽函数是普通的成员函数,作为成员函数,会受到public private protected的影响&lt;/li&gt;
&lt;li&gt;使用emit在恰当的位置发送信号&lt;/li&gt;
&lt;li&gt;使用QObject::connect()函数连接信号和槽&lt;/li&gt;
&lt;li&gt;任何成员函数/static函数/全局函数/Lambda表达式都可以作为槽函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信号槽的更多用法&#34;&gt;信号槽的更多用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个信号可以和多个槽相连&lt;/li&gt;
&lt;li&gt;多个信号连接一个个槽&lt;/li&gt;
&lt;li&gt;一个信号可以连接多个信号&lt;/li&gt;
&lt;li&gt;使用Lambda表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QObject::connect(&amp;amp;newspaper, static_cast&amp;lt;void (Newspaper:: *)

(const QString &amp;amp;)&amp;gt;(&amp;amp;Newspaper::newPaper),=](const QString &amp;amp;name) 

{ /* Your code here. */ });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在连接信号和槽的时候，槽函数可以使用Lambda表达式的方式进行处理。&lt;/p&gt;
&lt;h3 id=&#34;lambda表达式&#34;&gt;Lambda表达式&lt;/h3&gt;
&lt;p&gt;c++11 中国的Lambda表达式用于定义并创建匿名的函数对象,以简化编程工作.
Lambda表达式的基本构成:
&lt;img src=&#34;https://github.com/JokerJohn/QT/raw/master/QT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.assets/clip_image020.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1函数对象参数&#34;&gt;1.函数对象参数&lt;/h4&gt;
&lt;p&gt;[]标识一个Lambda的开始 这部分必须存在 不能省略
函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义Lambda为止时Lambda所在作用范围内可见的局部变量（包括Lambda所在类的this）。函数对象参数有以下形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空,没有使用任何函数对象参数&lt;/li&gt;
&lt;li&gt;=,函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。&lt;/li&gt;
&lt;li&gt;&amp;amp;,函数体内可以使用Lambda所在作用范围内搜友可见的局部变量,并且是引用传递方式&lt;/li&gt;
&lt;li&gt;this,函数体内可以使用Lambda所在类中的成员变量&lt;/li&gt;
&lt;li&gt;a,将A按值进行传递,按值进行传递时,函数体内不能修改传递进来的a的拷贝,因为默认情况下函数是const的,要修改传递进来的a的拷贝,可以添加mutable修饰符&lt;/li&gt;
&lt;li&gt;&amp;amp;a,将a按值进行传递,b按引用进行传递&lt;/li&gt;
&lt;li&gt;a,&amp;amp;b,将a按值进行传递,b按引用进行传递&lt;/li&gt;
&lt;li&gt;=,&amp;amp;a,&amp;amp;b,除了a和b按引用进行传递外,其他参数都按值进行传递&lt;/li&gt;
&lt;li&gt;&amp;amp;,a,b 除a和b按值进行传递外,其他参数都按引用进行传递&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int m=0,n=0;
[=](int a) nutable {m=++n + a;}(4);
[&amp;amp;] (int a) { m = ++n + a; }(4);
[=,&amp;amp;m] (int a) mutable { m = ++n + a; }(4);
[&amp;amp;,m] (int a) mutable { m = ++n + a; }(4);
[m,n] (int a) mutable { m = ++n + a; }(4);
[&amp;amp;m,&amp;amp;n] (int a) { m = ++n + a; }(4);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2操作符重载函数参数&#34;&gt;2.操作符重载函数参数&lt;/h4&gt;
&lt;p&gt;标识重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用（如：(&amp;amp;a,&amp;amp;b)）两种方式进行传递。&lt;/p&gt;
&lt;h4 id=&#34;3可修改标识符&#34;&gt;3.可修改标识符&lt;/h4&gt;
&lt;p&gt;mutable声明，这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。&lt;/p&gt;
&lt;h4 id=&#34;4错误抛出标识符&#34;&gt;4.错误抛出标识符&lt;/h4&gt;
&lt;p&gt;exception声明，这部分也可以省略。exception声明用于指定函数抛出的异常，如抛出整数类型的异常，可以使用throw(int)&lt;/p&gt;
&lt;h4 id=&#34;5函数返回值&#34;&gt;5.函数返回值&lt;/h4&gt;
&lt;p&gt;返回值类型，标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略。&lt;/p&gt;
&lt;h4 id=&#34;6是函数体&#34;&gt;6.是函数体&lt;/h4&gt;
&lt;p&gt;​ {}，标识函数的实现，这部分不能省略，但函数体可以为空。&lt;/p&gt;
&lt;h2 id=&#34;qt窗口系统&#34;&gt;Qt窗口系统&lt;/h2&gt;
&lt;h3 id=&#34;qt窗口坐标体系&#34;&gt;Qt窗口坐标体系&lt;/h3&gt;
&lt;h4 id=&#34;坐标体系-以左上角为原点-x向右增加-y向下增加&#34;&gt;坐标体系 以左上角为原点 X向右增加 Y向下增加&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/JokerJohn/QT/raw/master/QT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.assets/clip_image022.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于嵌套窗口,其坐标是相对于父窗口来说的.&lt;/p&gt;
&lt;h3 id=&#34;qwidget&#34;&gt;QWidget&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;所有窗口及窗口控件都是从QWidget直接或间接派生出来的.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;对象模型&#34;&gt;对象模型&lt;/h3&gt;
&lt;p&gt;在Qt中创建对象的时候回提供一个Parent对象指针,parent指针的作用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;QObject是以对象树的形式组织起来的&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当你创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是 parent，也就是父对象指针。这相当于，在创建QObject对象时，可以提供一个其父对象，我们创建的这个QObject对象会自动添加到其父对象的children()列表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​**当父对象析构的时候，这个列表中的所有对象也会被析构。（注意，这里的父对象并不是继承意义上的父类！）**这种机制在 GUI 程序设计中相当有用。例如，一个按钮有一个QShortcut（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键理应被删除。这是合理的。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;QWidget是能够在屏幕上显示的一切组件的父类。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;QWidget继承自QObject，因此也继承了这种对象树关系。一个孩子自动地成为父组件的一个子组件。因此，它会显示在父组件的坐标系统中，被父组件的边界剪裁。例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，**我们也可以自己删除子对象，它们会自动从其父对象列表中删除。**比如，当我们删除了一个工具栏时，其所在的主窗口会自动将该工具栏从其子对象列表中删除，并且自动调整屏幕显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Qt引入对象数的概念,在一定程度上解决了内存问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当一个QObject对象在堆上创建的时候，Qt 会同时为其创建一个对象树。不过，对象树中对象的顺序是没有定义的。这意味着，销毁这些对象的顺序也是未定义的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2 任何对象树中的 QObject对象 delete 的时候，如果这个对象有 parent，则自动将其从 parent 的children()列表中删除；如果有孩子，则自动 delete 每一个孩子。Qt 保证没有QObject会被 delete 两次，这是由析构顺序决定的。&lt;/p&gt;
&lt;p&gt;如果QObject在栈上创建,Qt保持同样的行为.&lt;/p&gt;
&lt;h3 id=&#34;qmainwindow&#34;&gt;QMainWindow&lt;/h3&gt;
&lt;p&gt;一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)、一个状态栏(status bar)及一个中心部件(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等。
&lt;img src=&#34;https://github.com/JokerJohn/QT/blob/master/QT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.assets/clip_image024.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;菜单栏&#34;&gt;菜单栏&lt;/h4&gt;
&lt;p&gt;一个主窗口最多只有一个菜单栏。位于主窗口顶部、主窗口标题栏下面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建菜单栏，通过QMainWindow类的menubar（）函数获取主窗口菜单栏指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;QMenuBar * menuBar() const&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建菜单，调用QMenu的成员函数addMenu来添加菜单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;`QAction* addMenu(QMenu * menu)``&lt;/p&gt;
&lt;p&gt;`QMenu* addMenu(const QString &amp;amp; title)``&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QMenu* addMenu(const QIcon &amp;amp; icon, const QString &amp;amp; title)&lt;/code&gt;
`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建菜单项，调用QMenu的成员函数addAction来添加菜单项&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-QAction*&#34; data-lang=&#34;QAction*&#34;&gt;
QAction* addAction(const QString &amp;amp; text)

QAction* addAction(const QIcon &amp;amp; icon, const QString &amp;amp; text)

QAction* addAction(const QString &amp;amp; text, const QObject * receiver,

const char * member, const QKeySequence &amp;amp; shortcut = 0)

QAction* addAction(const QIcon &amp;amp; icon, const QString &amp;amp; text, 

const QObject * receiver, const char * member, 

const QKeySequence &amp;amp; shortcut = 0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​
Qt 并没有专门的菜单项类，只是使用一个QAction类，抽象出公共的动作。当我们把QAction对象添加到菜单，就显示成一个菜单项，添加到工具栏，就显示成一个工具按钮。用户可以通过点击菜单项、点击工具栏按钮、点击快捷键来激活这个动作。&lt;/p&gt;
&lt;h4 id=&#34;工具栏&#34;&gt;工具栏&lt;/h4&gt;
&lt;p&gt;主窗口的工具栏上可以有多个工具条，通常采用一个菜单对应一个工具条的的方式，也可根据需要进行工具条的划分。&lt;/p&gt;
&lt;p&gt;直接调用QMainWindow类的addToolBar（）函数获取主窗口的工具条对象，每增加一个工具条都需要调用一次该函数。&lt;/p&gt;
&lt;p&gt;插入属于工具条的动作，即在工具条上添加操作。通过QToolBar类的addAction函数添加。&lt;/p&gt;
&lt;p&gt;工具条是一个可移动的窗口，它的停靠区域由QToolBar的allowAreas决定，包括：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Qt::LeftToolBarArea 停靠在左侧

Qt::RightToolBarArea 停靠在右侧

Qt::TopToolBarArea 停靠在顶部

Qt::BottomToolBarArea 停靠在底部

Qt::AllToolBarAreas 以上四个位置都可停靠

使用setAllowedAreas（）函数指定停靠区域：

setAllowedAreas（Qt::LeftToolBarArea | Qt::RightToolBarArea）

使用setMoveable（）函数设定工具栏的可移动性：

setMoveable（false）//工具条不可移动, 只能停靠在初始化的位置上
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;状态栏&#34;&gt;状态栏&lt;/h4&gt;
&lt;p&gt;派生自QWidget类，使用方法与QWidget类似，QStatusBar类常用成员函数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//添加小部件
void addWidget(QWidget * widget, int stretch = 0)
    
//插入小部件
int insertWidget(int index, QWidget * widget, int stretch = 0)

//删除小部件
void removeWidget(QWidget * widget)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;对话框qdialog&#34;&gt;对话框QDialog&lt;/h3&gt;
&lt;h4 id=&#34;基本概念&#34;&gt;基本概念&lt;/h4&gt;
&lt;p&gt;对话框是GUI程序中不可缺少的组成部分,很多不能或者不适合放入主窗口的功能组件都必须放在对话框中设置。对话框通常会是一个顶层窗口，出现在程序最上层，用于实现短期任务或者简洁的用户交互。&lt;/p&gt;
&lt;p&gt;Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个类继承QDialog。QDialog（及其子类，以及所有Qt::Dialog类型的类）的对于其 parent 指针都有额外的解释：如果 parent 为 NULL，则该对话框会作为一个顶层窗口，否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心）。顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。 对话框分为模态对话框和非模态对话框。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模态对话框，就是会阻塞同一应用程序中其它窗口的输入。模态对话框很常见，比如“打开文件”功能。你可以尝试一下记事本的打开文件，当打开文件对话框出现时，我们是不能对除此对话框之外的窗口部分进行操作的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与此相反的是非模态对话框，例如查找对话框，我们可以在显示着查找对话框的同时，继续对记事本的内容进行编辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;标准对话框&#34;&gt;标准对话框&lt;/h4&gt;
&lt;p&gt;​&lt;br&gt;
所谓标准对话框，是 Qt 内置的一系列对话框，用于简化开发。事实上，有很多对话框都是通用的，比如打开文件、设置颜色、打印设置等。这些对话框在所有程序中几乎相同，因此没有必要在每一个程序中都自己实现这么一个对话框。&lt;/p&gt;
&lt;p&gt;Qt 的内置对话框大致分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QColorDialog： 选择颜色；&lt;/li&gt;
&lt;li&gt;QFileDialog： 选择文件或者目录；&lt;/li&gt;
&lt;li&gt;QFontDialog： 选择字体；&lt;/li&gt;
&lt;li&gt;QInputDialog： 允许用户输入一个值，并将其值返回；&lt;/li&gt;
&lt;li&gt;QMessageBox： 模态对话框，用于显示信息、询问问题等；&lt;/li&gt;
&lt;li&gt;QPageSetupDialog： 为打印机提供纸张相关的选项；&lt;/li&gt;
&lt;li&gt;QPrintDialog： 打印机配置；&lt;/li&gt;
&lt;li&gt;QPrintPreviewDialog：打印预览；&lt;/li&gt;
&lt;li&gt;QProgressDialog： 显示操作过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自定义消息框&#34;&gt;自定义消息框&lt;/h4&gt;
&lt;p&gt;Qt 支持模态对话框和非模态对话框。
模态与非模态的实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用QDialog::exec()实现应用程序级别的模态对话框&lt;/li&gt;
&lt;li&gt;使用QDialog::open()实现窗口级别的模态对话框&lt;/li&gt;
&lt;li&gt;使用QDialog::show()实现非模态对话框。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模态对话框&#34;&gt;模态对话框&lt;/h4&gt;
&lt;p&gt;Qt有两种级别的模态对话框:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序级别的模态
当该种模态的对话框出现时,用户必须先对对话框进行交互,直到关闭对话框后,才能访问其他窗口&lt;/li&gt;
&lt;li&gt;窗口级别的模态
该模态仅仅阻塞与对话框关联的窗口,但依然允许用户与程序中其他窗口交互.窗口级别的模态尤其适用于多窗口模式.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;非模态对话框&#34;&gt;非模态对话框&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void MainWindow::open()
{
    QDialog *dialog = new QDialog;
    dialog-&amp;gt;setAttribute(Qt::WA_DeleteOnClose);
    dialog-&amp;gt;setWindowTitle(tr(&amp;quot;Hello, dialog!&amp;quot;));
    dialog-&amp;gt;show();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用&lt;code&gt;setAttribute()&lt;/code&gt;函数设置对话框关闭时,自动销毁对话框.&lt;/p&gt;
&lt;h3 id=&#34;消息对话框&#34;&gt;消息对话框&lt;/h3&gt;
&lt;p&gt;QMessageBox用于系那是消息提示,一般会使用其提供的几个static函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;显示关于对话框。
&lt;code&gt;void about(QWidget * parent, const QString &amp;amp; title, const QString &amp;amp; text)&lt;/code&gt;
标题title,内容是text,父窗口是parent.对话框只有一个OK按钮.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示关于Qt对话框,该对话框用于显示有关QT的信息
&lt;code&gt;void aboutQt(QWidget * parent, const QString &amp;amp; title = QString())：&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示严重错误对话框
&lt;code&gt;StandardButton critical(QWidget * parent, const QString &amp;amp; title, const QString &amp;amp; text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton)&lt;/code&gt;
这个对话框将显示一个红色的错误符号。我们可以通过 buttons 参数指明其显示的按钮。默认情况下只有一个 Ok 按钮，我们可以使用StandardButtons类型指定多种按钮。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与QMessageBox::critical()类似，不同之处在于这个对话框提供一个普通信息图标。
&lt;code&gt;StandardButton information(QWidget * parent, const QString &amp;amp; title, const QString &amp;amp; text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与QMessageBox::critical()类似，不同之处在于这个对话框提供一个问号图标，并且其显示的按钮是“是”和“否”。
&lt;code&gt;StandardButton question(QWidget * parent,const QString &amp;amp; title, const QString &amp;amp; text, StandardButtons buttons = StandardButtons( Yes | No ), StandardButton defaultButton = NoButton) &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与QMessageBox::critical()类似，不同之处在于这个对话框提供一个黄色叹号图标。
&lt;code&gt;StandardButton warning(QWidget * parent, const QString &amp;amp; title, const QString &amp;amp; text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用QMessageBox:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
if (QMessageBox::Yes == QMessageBox::question(this,tr(&amp;quot;Question&amp;quot;), tr(&amp;quot;Are you OK?&amp;quot;),
QMessageBox::Yes | QMessageBox::No,QMessageBox::Yes)) 
{
    QMessageBox::information(this, tr(&amp;quot;Hmmm...&amp;quot;), tr(&amp;quot;I&#39;m glad to hear that!&amp;quot;));
} 
else 
{
    QMessageBox::information(this, tr(&amp;quot;Hmmm...&amp;quot;), tr(&amp;quot;I&#39;m sorry!&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用QMessageBox::question()来询问一个问题。&lt;/p&gt;
&lt;p&gt;这个对话框的父窗口是this。QMessageBox是QDialog的子类，这意味着它的初始显示位置将会是在 parent 窗口的中央。&lt;/p&gt;
&lt;p&gt;第二个参数是对话框的标题。&lt;/p&gt;
&lt;p&gt;第三个参数是我们想要显示的内容。这里就是我们需要询问的文字。下面，我们使用或运算符（|）指定对话框应该出现的按钮。这里我们希望是一个 Yes 和一个 No。&lt;/p&gt;
&lt;p&gt;最后一个参数指定默认选择的按钮。&lt;/p&gt;
&lt;p&gt;这个函数有一个返回值，用于确定用户点击的是哪一个按钮。按照我们的写法，应该很容易的看出，这是一个模态对话框，因此我们可以直接获取其返回值。&lt;/p&gt;
&lt;p&gt;​ QMessageBox类的 static 函数优点是方便使用，缺点也很明显：非常不灵活。我们只能使用简单的几种形式。为了能够定制QMessageBox细节，我们必须使用QMessageBox的属性设置 API。如果我们希望制作一个询问是否保存的对话框，我们可以使用如下的代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QMessageBox msgBox;
msgBox.setText(tr(&amp;quot;The document has been modified.&amp;quot;));
msgBox.setInformativeText(tr(&amp;quot;Do you want to save your changes?&amp;quot;));
msgBox.setDetailedText(tr(&amp;quot;Differences here...&amp;quot;));
msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard| QMessageBox::Cancel);
msgBox.setDefaultButton(QMessageBox::Save);

int ret = msgBox.exec();

switch (ret) 
{
    case QMessageBox::Save:
        qDebug() &amp;lt;&amp;lt; &amp;quot;Save document!&amp;quot;;
        break;
        
    case QMessageBox::Discard:
        qDebug() &amp;lt;&amp;lt; &amp;quot;Discard changes!&amp;quot;;
        break;

    case QMessageBox::Cancel:
        qDebug() &amp;lt;&amp;lt; &amp;quot;Close document!&amp;quot;;
        break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;msgBox 是一个建立在栈上的QMessageBox实例。我们设置其主要文本信息为“The document has been modified.”，informativeText 则是会在对话框中显示的简单说明文字。下面我们使用了一个detailedText，也就是详细信息，当我们点击了详细信息按钮时，对话框可以自动显示更多信息。我们自己定义的对话框的按钮有三个：保存、丢弃和取消。然后我们使用了exec()是其成为一个模态对话框，根据其返回值进行相应的操作。&lt;/p&gt;
&lt;h4 id=&#34;标准文件对话框&#34;&gt;标准文件对话框&lt;/h4&gt;
&lt;p&gt;QFileDialog，也就是文件对话框。
在openFile()函数中，我们使用QFileDialog::getOpenFileName()来获取需要打开的文件的路径。这个函数原型如下：
&lt;code&gt;QString getOpenFileName(QWidget * parent = 0, const QString &amp;amp; caption = QString(), const QString &amp;amp; dir = QString(), const QString &amp;amp; filter = QString(), QString * selectedFilter = 0,Options options = 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过注意，它的所有参数都是可选的，因此在一定程度上说，这个函数也是简单的。这六个参数分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;parent：父窗口。Qt 的标准对话框提供静态函数，用于返回一个模态对话框；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;caption：对话框标题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dir：对话框打开时的默认目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;filter 过滤器 打开特定类型的文件时使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用控件&#34;&gt;常用控件&lt;/h2&gt;
&lt;h2 id=&#34;qlabel控件使用&#34;&gt;QLabel控件使用&lt;/h2&gt;
&lt;p&gt;QLabel是我们最常用的控件之一,用来显示文本,图片和动画等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示文字(普通文本/html)&lt;/strong&gt;
通过QLabel类的setText函数设置显示的内容:
&lt;code&gt;void setText(const QString &amp;amp;)&lt;/code&gt;
可以显示普通文本字符串&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QLabel *label = new QLabel(this);
label -&amp;gt;setText(&amp;quot;Hello, World&amp;quot;);
label -&amp;gt;setText(&amp;quot;&amp;lt;h1&amp;gt;&amp;lt;a href=\&amp;quot;https://www.baidu.com\&amp;quot;&amp;gt;百度一下&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&amp;quot;);
label -&amp;gt;setOpenExternalLinks(true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中setOpenExternalLinks()函数是用来设置用户点击链接之后是否自动打开链接，如果参数指定为true则会自动打开，如果设置为false，想要打开链接只能通过捕捉linkActivated()信号，在自定义的槽函数中使用**QDesktopServices::openUrl()**打开链接，该函数参数默认值为false&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QLabel *label = new QLabel(this);
label -&amp;gt;setText(&amp;quot;Hello, World&amp;quot;);
label -&amp;gt;setText(&amp;quot;&amp;lt;h1&amp;gt;&amp;lt;a href=\&amp;quot;https://www.baidu.com\&amp;quot;&amp;gt;百度一下&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&amp;quot;);

// label-&amp;gt;setOpenExternalLinks(true);
connect(label, &amp;amp;QLabel::linkActivated, this, &amp;amp;MyWidget::slotOpenUrl);

//槽函数    
void MyWidget::slotOpenUrl(const QString &amp;amp;link)
{
    QDesktopServices::openUrl(QUrl(link));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;显示图片&lt;/strong&gt;
可以使用QLabel的成员函数setPixel设置图片
&lt;code&gt; void setPixmap(const QPixmap &amp;amp;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先定义了QMovied对象,然后加载图片,最后将图片设置到QLabel中去:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QPixmap pixmap;
pixmap.load(&amp;quot;:/boat.jpg&amp;quot;);
QLabel *label = new QLabel;
label.setPixmap(pixmap);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;显示动画&lt;/strong&gt;
通过使用QLabel的成员函数setMovie加载动画,可以播放gif格式的文件
定义QMovied对象,并初始化,播放加载的动画,将动画设置到QLabel中:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QMovie *movie = new QMovie(&amp;quot;Nario.gif&amp;quot;):
movie-&amp;gt;start();
QLabel *label = new QLabel;
label-&amp;gt;setMovie(movie);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;qlineedit&#34;&gt;QLineEdit&lt;/h3&gt;
&lt;p&gt;Qt提供的单行文本编辑框
&lt;strong&gt;设置/获取内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取编辑框内容使用text(),函数声明如下:
&lt;code&gt;QString text() const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置编辑框内容
&lt;code&gt;void setText(const QString &amp;amp;&lt;/code&gt;
&lt;strong&gt;设置显示模式&lt;/strong&gt;
使用QLineEdit类的setEchoMode()函数设置文本的显示模式,函数声明:
&lt;code&gt;void setEchoMode(EchoMode mode)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EchoMode是一个枚举类型,一共定义了四种显示模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QLineEdit::Normal 模式显示方式，按照输入的内容显示。&lt;/li&gt;
&lt;li&gt;QLineEdit::NoEcho 不显示任何内容，此模式下无法看到用户的输入。&lt;/li&gt;
&lt;li&gt;QLineEdit::Password 密码模式，输入的字符会根据平台转换为特殊字符。&lt;/li&gt;
&lt;li&gt;QLineEdit::PasswordEchoOnEdit 编辑时显示字符否则显示字符作为密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，我们再使用QLineEdit显示文本的时候，希望在左侧留出一段空白的区域，那么就可以使用QLineEdit给我们提供的setTextMargins函数：&lt;/p&gt;
&lt;p&gt;void setTextMargins(int left, int top, int right, int bottom)&lt;/p&gt;
&lt;p&gt;用此函数可以指定显示的文本与输入框上下左右边界的间隔的像素数。&lt;/p&gt;
&lt;h4 id=&#34;设置输入提示&#34;&gt;设置输入提示&lt;/h4&gt;
&lt;p&gt;如果我们想实现一个与百度的搜索框类似的功能：输入一个或几个字符，下边会列出几个跟输入的字符相匹配的字符串，QLineEdit要实现这样的功能可以使用该类的成员函数setComleter()函数来实现:
&lt;code&gt;void setCompleter(QCompketer * c)&lt;/code&gt;
创建QCompleter对象,并初始化&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QStringList tipList;
tipList&amp;lt;&amp;lt; “Hello” &amp;lt;&amp;lt; “how are you” &amp;lt;&amp;lt; “Haha” &amp;lt;&amp;lt; “oh, hello”;

// 不区分大小写
completer-&amp;gt;setCaseSensitivity(Qt::CaseInsensitive);
QCompleter *completer = new QCompleter(tipList, this);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;QCompeleter类的setCaseSensitvity()函数介意设置是否区分大小写,它的参数是一个枚举类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qt::CaseInsensitive 不区分大小写&lt;/li&gt;
&lt;li&gt;Qt::CaseSensitive 区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不设置该属性,默认匹配字符串时时区分大小写的
还可以设置字符串其中某一部分匹配，此功能可通过QCompleter类的setFilterMode函数来实现,函数声明如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void setFilterMode(Qt::MatchFlags filterMode)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其参数为Qt定义的宏,有多重类型,具体可参考Qt帮助稳定，要实现我们上边提到的功能，参数可以使用 Qt::MatchContains：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;completer-&amp;gt;setFilterMode(Qt::MatchContains);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;属性设置完成后,将QCompleter对象设置到QLineEdit中:
&lt;code&gt;QLineEdit *edit = new QLineEdit(this);&lt;/code&gt;
&lt;code&gt;edit-&amp;gt;setCompleter(completer);&lt;/code&gt;
&lt;img src=&#34;https://github.com/JokerJohn/QT/raw/master/QT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.assets/clip_image035.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;布局管理器&#34;&gt;布局管理器&lt;/h3&gt;
&lt;p&gt;Qt 提供了两种组件定位机制：绝对定位和布局定位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝对定位就是一种最原始的定位方法：给出这个组件的坐标和长宽值。&lt;/strong&gt;
这样，Qt 就知道该把组件放在哪里以及如何设置组件的大小。但是这样做带来的一个问题是，如果用户改变了窗口大小，比如点击最大化按钮或者使用鼠标拖动窗口边缘，采用绝对定位的组件是不会有任何响应的。这也很自然，因为你并没有告诉 Qt，在窗口变化时，组件是否要更新自己以及如何更新。或者，还有更简单的方法：禁止用户改变窗口大小。但这总不是长远之计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;布局定位：你只要把组件放入某一种布局，布局由专门的布局管理器进行管理。当需要调整大小或者位置的时候，Qt 使用对应的布局管理器进行调整。&lt;/strong&gt;
布局定位完美的解决了使用绝对定位的缺陷。&lt;/p&gt;
&lt;p&gt;Qt 提供的布局中以下三种是我们最常用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QHBoxLayout：按照水平方向从左到右布局；&lt;/li&gt;
&lt;li&gt;QVBoxLayout：按照竖直方向从上到下布局；&lt;/li&gt;
&lt;li&gt;QGridLayout：在一个网格中进行布局，类似于 HTML 的 table；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;水平垂直网格布局&#34;&gt;水平/垂直/网格布局&lt;/h3&gt;
&lt;p&gt;水平布局的使用方法:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
   
    QWidget window;
    window.setWindowTitle(&amp;quot;Enter your age&amp;quot;);
 
    QSpinBox *spinBox = new QSpinBox(&amp;amp;window);
    QSlider *slider = new QSlider(Qt::Horizontal, &amp;amp;window);

    spinBox-&amp;gt;setRange(0, 130);
    slider-&amp;gt;setRange(0, 130);

    QObject::connect(slider, &amp;amp;QSlider::valueChanged, spinBox, &amp;amp;QSpinBox::setValue);

    void (QSpinBox:: *spinBoxSignal)(int) = &amp;amp;QSpinBox::valueChanged;

    QObject::connect(spinBox, spinBoxSignal, slider, &amp;amp;QSlider::setValue);

    spinBox-&amp;gt;setValue(35);

    //给控件设置布局
    QHBoxLayout *layout = new QHBoxLayout;
    layout-&amp;gt;addWidget(spinBox);
    layout-&amp;gt;addWidget(slider);

    window.setLayout(layout);
    window.show();
    return app.exec();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码中window.setLayout(layout); 是将布局设置到窗口window中，在窗口中设置布局还有另一种写法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//给控件设置布局
QHBoxLayout *layout = new QHBoxLayout（window）;

layout-&amp;gt;addWidget(spinBox);
layout-&amp;gt;addWidget(slider);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;在创建布局对象的时候给新对象指定父窗口，就等于给传入的窗口设置了布局。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外布局与布局之间是可以嵌套使用的，使用addLayout（）方法。QVBoxLayout的使用方法与QHBoxLayout完全相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于上述代码中信号和槽链接的解释:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当数字输入框显示的内容发生改变的时候，会发出一股信息，滑块会接收这一信号，并作出改变。如果二者的信号槽连接写成下边这样：&lt;/p&gt;
&lt;p&gt;QObject::connect(spinBox, &amp;amp;QSpinBox::valueChanged, slider, &amp;amp;QSlider::setValue);&lt;/p&gt;
&lt;p&gt;编译器却会报错&lt;/p&gt;
&lt;p&gt;no matching function for call to &#39;QObject::connect(QSpinBox*&amp;amp;, &lt;unresolved overloaded function type&gt;, QSlider*&amp;amp;, void (QAbstractSlider::*)(int))&#39;&lt;/p&gt;
&lt;p&gt;​ 这是怎么回事呢？从出错信息可以看出，编译器认为QSpinBox::valueChanged是一个 overloaded 的函数。我们看一下QSpinBox的文档发现，QSpinBox的确有两个信号：&lt;/p&gt;
&lt;p&gt;void valueChanged(int)
void valueChanged(const QString &amp;amp;)
​ 当我们使用&amp;amp;QSpinBox::valueChanged取函数指针时，编译器不知道应该取哪一个函数（记住前面我们介绍过的，signal 也是一个普通的函数。）的地址，因此报错。解决的方法很简单，编译器不是不能确定哪一个函数吗？那么我们就显式指定一个函数。方法就是，我们创建一个函数指针，这个函数指针参数指定为 int：&lt;/p&gt;
&lt;p&gt;void (QSpinBox:: *spinBoxSignal)(int) = &amp;amp;QSpinBox::valueChanged;&lt;/p&gt;
&lt;p&gt;然后我们将这个函数指针作为 signal，与 QSlider 的函数连接：&lt;/p&gt;
&lt;p&gt;QObject::connect(spinBox, spinBoxSignal, slider, &amp;amp;QSlider::setValue);&lt;/p&gt;
&lt;p&gt;这样便避免了编译错误。&lt;/p&gt;
&lt;h4 id=&#34;自定义控件&#34;&gt;自定义控件&lt;/h4&gt;
&lt;p&gt;从QWidget派生出一个类SamllWidget,实现自定义窗口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// smallwidget.h
class SmallWidget : public QWidget
{
    Q_OBJECT

    public:
        explicit SmallWidget(QWidget *parent = 0);

    signals:

    public slots:

    private:
        QSpinBox* spin;
        QSlider* slider;
};

// smallwidget.cpp
SmallWidget::SmallWidget(QWidget *parent) : QWidget(parent)
{

    spin = new QSpinBox(this);
    slider = new QSlider(Qt::Horizontal, this);

    // 创建布局对象
    QHBoxLayout* layout = new QHBoxLayout;
    
    // 将控件添加到布局中
    layout-&amp;gt;addWidget(spin);
    layout-&amp;gt;addWidget(slider);

    // 将布局设置到窗口中
    setLayout(layout);
    
    // 添加消息响应
    connect(spin, static_cast&amp;lt;void (QSpinBox::*)(int)&amp;gt;(&amp;amp;QSpinBox::valueChanged),slider, &amp;amp;QSlider::setValue);

    connect(slider, &amp;amp;QSlider::valueChanged, spin, &amp;amp;QSpinBox::setValue);
}

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;qt消息机制和事件&#34;&gt;Qt消息机制和事件&lt;/h2&gt;
&lt;h4 id=&#34;事件&#34;&gt;事件&lt;/h4&gt;
&lt;p&gt;事件（event）是由系统或者 Qt 本身在不同的时刻发出的。当用户按下鼠标、敲下键盘，或者是窗口需要重新绘制的时候，都会发出一个相应的事件。一些事件在对用户操作做出响应时发出，如键盘事件等；另一些事件则是由系统自动发出，如计时器事件。&lt;/p&gt;
&lt;p&gt;在前面我们也曾经简单提到，Qt 程序需要在main()函数创建一个QApplication对象，然后调用它的exec()函数。这个函数就是开始 Qt 的事件循环。在执行exec()函数之后，程序将进入事件循环来监听应用程序的事件。当事件发生时，Qt 将创建一个事件对象。Qt 中所有事件类都继承于QEvent。在事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是按照事件对象的类型分派给特定的事件处理函数（event handler）.&lt;/p&gt;
&lt;p&gt;在所有组件的父类QWidget中，定义了很多事件处理的回调函数，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keyPressEvent()&lt;/li&gt;
&lt;li&gt;keyReleaseEvent()&lt;/li&gt;
&lt;li&gt;mouseDoubleClickEvent()&lt;/li&gt;
&lt;li&gt;mouseMoveEvent()&lt;/li&gt;
&lt;li&gt;mousePressEvent()&lt;/li&gt;
&lt;li&gt;mouseReleaseEvent() 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数都是&lt;code&gt;protected virtual&lt;/code&gt;的,也就是说,可以在子类中重新实现这些函数.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class EventLabel : public QLabel
{
    protected:
        void mouseMoveEvent(QMouseEvent *event);
        void mousePressEvent(QMouseEvent *event);
        void mouseReleaseEvent(QMouseEvent *event);
};

void EventLabel::mouseMoveEvent(QMouseEvent *event)
{
    this-&amp;gt;setText(QString(&amp;quot;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;Move: (%1, %2)&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;quot;).arg(QString::number(event-&amp;gt;x()), QString::number(event-&amp;gt;y())));

}

void EventLabel::mousePressEvent(QMouseEvent *event)
{
    this-&amp;gt;setText(QString(&amp;quot;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;Press:(%1, %2)&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;quot;).arg(QString::number(event-&amp;gt;x()),
QString::number(event-&amp;gt;y())));
}

void EventLabel::mouseReleaseEvent(QMouseEvent *event)
{
    QString msg;
    msg.sprintf(&amp;quot;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;Release: (%d, %d)&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;quot;, event-&amp;gt;x(), event-&amp;gt;y());

    this-&amp;gt;setText(msg);
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    EventLabel *label = new EventLabel;

    label-&amp;gt;setWindowTitle(&amp;quot;MouseEvent Demo&amp;quot;);
    label-&amp;gt;resize(300, 200);
    label-&amp;gt;show();

    return a.exec();
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;EventLabel继承了QLabel，覆盖了mousePressEvent()、mouseMoveEvent()和MouseReleaseEvent()三个函数。我们并没有添加什么功能，只是在鼠标按下（press）、鼠标移动（move）和鼠标释放（release）的时候，把当前鼠标的坐标值显示在这个Label上面。由于QLabel是支持 HTML 代码的，因此我们直接使用了 HTML 代码来格式化文字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QString的arg()函数可以自动替换掉QString中出现的占位符。其占位符以 % 开始，后面是占位符的位置，例如 %1，%2 这种。QString(&amp;quot;[%1, %2]&amp;quot;).arg(x).arg(y);语句将会使用x替换 %1，y替换 %2，因此，生成的QString为[x, y]。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在mouseReleaseEvent()函数中，我们使用了另外一种QString的构造方法。我们使用类似 C 风格的格式化函数sprintf()来构造QString。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;event&#34;&gt;event&lt;/h3&gt;
&lt;p&gt;事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是将这些事件对象按照它们不同的类型，分发给不同的事件处理器（event handler）。
&lt;strong&gt;event()函数主要用于事件的分发。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
bool CustomWidget::event(QEvent *e)
{
    if (e-&amp;gt;type() == QEvent::KeyPress) {

        QKeyEvent *keyEvent = static_cast&amp;lt;QKeyEvent *&amp;gt;(e);
        if (keyEvent-&amp;gt;key() == Qt::Key_Tab) {

            qDebug() &amp;lt;&amp;lt; &amp;quot;You press tab.&amp;quot;;
            return true;
        }
    }
    return QWidget::event(e);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomWidget是一个普通的QWidget子类.我们重写了它的event()函数，这个函数有一个QEvent对象作为参数，也就是需要转发的事件对象。函数返回值是 bool 类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果传入的事件已被识别并且处理，则需要返回 true，否则返回 false。如果返回值是 true，那么 Qt 会认为这个事件已经处理完毕，不会再将这个事件发送给其它对象，而是会继续处理事件队列中的下一事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在event()函数中，调用事件对象的accept()和ignore()函数是没有作用的，不会影响到事件的传播。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bool CustomTextEdit::event(QEvent *e)
{
   if (e-&amp;gt;type() == QEvent::KeyPress) 
    {
       QKeyEvent *keyEvent = static_cast&amp;lt;QKeyEvent *&amp;gt;(e);

       if (keyEvent-&amp;gt;key() == Qt::Key_Tab) 
       {
           qDebug() &amp;lt;&amp;lt; &amp;quot;You press tab.&amp;quot;;
           return true;
       }
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CustomTextEdit是QTextEdit的一个子类。我们重写了其event()函数，却没有调用父类的同名函数。这样，我们的组件就只能处理 Tab 键，再也无法输入任何文本，也不能响应其它事件，比如鼠标点击之后也不会有光标出现。这是因为我们只处理的KeyPress类型的事件，并且如果不是KeyPress事件，则直接返回 false，鼠标事件根本不会被转发，也就没有了鼠标事件。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//!!! Qt5
bool QObject::event(QEvent *e)
{
   switch (e-&amp;gt;type()) {


           timerEvent((QTimerEvent*)e);
           break;
       case QEvent::ChildAdded:














           {
               customEvent(e);
               break;
           }


   }


}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (event-&amp;gt;type()) {

    case QEvent::MouseMove:

        mouseMoveEvent((QMouseEvent*)event);
        break;
    // ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;event()函数中实际是通过事件处理器来响应一个具体的事件。这相当于event()函数将具体事件的处理“委托”给具体的事件处理器。而这些事件处理器是 protected virtual 的，因此，我们重写了某一个事件处理器，即可让 Qt 调用我们自己实现的版本。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事件过滤器&#34;&gt;事件过滤器&lt;/h3&gt;
&lt;p&gt;对象需要查看、甚至要拦截发送到另外对象的时间.
Qt创建了QEvent事件对象后,会调用QObject的event()函数处理事件的分发.可以在event()函数中实现拦截的操作,由于event()函数是protected的,需要继承已有类.但是组件过多,会使操作极为繁琐.
Qt提供了另外一种机制来达到这一目的:&lt;strong&gt;事件过滤器&lt;/strong&gt;
QObject有一个eventFilter()函数,用于建立事件过滤器.
&lt;code&gt;virtual bool QObject ::eventFilter QObject * watched,QEvent * event);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果这个事件是我们感兴趣的类型，就进行我们自己的处理；如果不是，就继续转发。这个函数返回一个 bool 类型，如果想将参数 event 过滤出来，就返回 true，否则返回 false.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MainWindow : public QMainWindow
{
     public:
         MainWindow();

     protected:
         bool eventFilter(QObject *obj, QEvent *event);

     private:
         QTextEdit *textEdit;

 };

 

 MainWindow::MainWindow()
 {
     textEdit = new QTextEdit;
     setCentralWidget(textEdit);
     textEdit-&amp;gt;installEventFilter(this);
 }

 
 bool MainWindow::eventFilter(QObject *obj, QEvent *event)
 {

     if (obj == textEdit) {

         if (event-&amp;gt;type() == QEvent::KeyPress) {

             QKeyEvent *keyEvent = static_cast&amp;lt;QKeyEvent *&amp;gt;(event);

             qDebug() &amp;lt;&amp;lt; &amp;quot;Ate key press&amp;quot; &amp;lt;&amp;lt; keyEvent-&amp;gt;key();

             return true;

         } else {

             return false;

         }

     } else {

         // pass the event on to the parent class
         return QMainWindow::eventFilter(obj, event);
     }
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;MainWindow是我们定义的一个类。我们重写了它的eventFilter()函数。为了过滤特定组件上的事件，首先需要判断这个对象是不是我们感兴趣的组件，然后判断这个事件的类型。在上面的代码中，我们不想让textEdit组件处理键盘按下的事件。所以，首先我们找到这个组件，如果这个事件是键盘事件，则直接返回 true，也就是过滤掉了这个事件，其他事件还是要继续处理，所以返回 false。对于其它的组件，我们并不保证是不是还有过滤器，于是最保险的办法是调用父类的函数。&lt;/li&gt;
&lt;li&gt;eventFilter()函数相当于创建了过滤器，然后我们需要安装这个过滤器。安装过滤器需要调用QObject::installEventFilter()函数。函数的原型如下：void QObject::installEventFilter ( QObject * filterObj )这个函数接受一个QObject *类型的参数。eventFilter()函数是QObject的一个成员函数，因此，任意QObject都可以作为事件过滤器（问题在于，如果你没有重写eventFilter()函数，这个事件过滤器是没有任何作用的，因为默认什么都不会过滤）。已经存在的过滤器则可以通过QObject::removeEventFilter()函数移除。
&lt;strong&gt;事件过滤器和被安装过滤器的组件必须在同一线程，否则，过滤器将不起作用。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;Qt中有很多事件:鼠标事件 键盘事件 大小改变事件 位置移动事件等 实际上 选择有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有事件对应一个事件处理函数，在这个事件处理函数中用一个很大的分支语句进行选择，其代表作就是 win32 API 的WndProc()函数：
&lt;code&gt;LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个函数中，我们需要使用switch语句，选择message参数的类型进行处理，典型代码是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch(message)
{
    case WM_PAINT:
        // ..
        break;

    case WM_DESTROY:
        // ...
        break;
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;每一种事件对应一个事件处理函数.Qt就是这种机制:
mouseEvent()
keyPressEvent()
...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;event函数会有两个问题;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链接库的继承&lt;/li&gt;
&lt;li&gt;event不能阻止屏蔽事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qt事件的调用最终都会追溯到&lt;code&gt;QCoreApplication::notify()&lt;/code&gt;函数 最大的控制权是重写&lt;code&gt;QCoreApplication::notify()&lt;/code&gt;,函数的声明是:
&lt;code&gt;virtual bool QCoreApplication::notify ( QObject * receiver, QEvent * event );&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Qt事件处理里的5个层次:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写paintEvent()、mousePressEvent()等事件处理函数。这是最普通、最简单的形式，同时功能也最简单。&lt;/li&gt;
&lt;li&gt;重写event()函数。event()函数是所有对象的事件入口，QObject和QWidget中的实现，默认是把事件传递给特定的事件处理函数。&lt;/li&gt;
&lt;li&gt;在特定对象上面安装事件过滤器。该过滤器仅过滤该对象接收到的事件。&lt;/li&gt;
&lt;li&gt;在QCoreApplication::instance()上面安装事件过滤器。该过滤器将过滤所有对象的所有事件，因此和notify()函数一样强大，但是它更灵活，因为可以安装多个过滤器。全局的事件过滤器可以看到 disabled 组件上面发出的鼠标事件。全局过滤器有一个问题：只能用在主线程。&lt;/li&gt;
&lt;li&gt;重写QCoreApplication::notify()函数。这是最强大的，和全局事件过滤器一样提供完全控制，并且不受线程的限制。但是全局范围内只能有一个被使用（因为QCoreApplication是单例的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;7-文件系统&#34;&gt;7 文件系统&lt;/h1&gt;
&lt;p&gt;Qt 通过QIODevice提供了对 I/O 设备的抽象，这些设备具有读写字节块的能力。下面是 I/O 设备的类图（Qt5）：
&lt;img src=&#34;https://github.com/JokerJohn/QT/blob/master/QT%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.assets/clip_image060.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QIODevice：所有 I/O 设备类的父类，提供了字节块读写的通用操作以及基本接口；&lt;/li&gt;
&lt;li&gt;QFileDevice：Qt5新增加的类，提供了有关文件操作的通用实现。&lt;/li&gt;
&lt;li&gt;QFlie：访问本地文件或者嵌入资源；&lt;/li&gt;
&lt;li&gt;QTemporaryFile：创建和访问本地文件系统的临时文件；&lt;/li&gt;
&lt;li&gt;QBuffer：读写QbyteArray, 内存文件；&lt;/li&gt;
&lt;li&gt;QProcess：运行外部程序，处理进程间通讯；&lt;/li&gt;
&lt;li&gt;QAbstractSocket：所有套接字类的父类；&lt;/li&gt;
&lt;li&gt;QTcpSocket：TCP协议网络数据传输；&lt;/li&gt;
&lt;li&gt;QUdpSocket：传输 UDP 报文；&lt;/li&gt;
&lt;li&gt;QSslSocket：使用 SSL/TLS 传输数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件系统分类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序访问设备&lt;/li&gt;
&lt;li&gt;随即访问设备&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本文件操作&#34;&gt;基本文件操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;QFile提供了从文件中读取和写入数据的能力&lt;/strong&gt;
通常将文件路径作为参数传递给QFile的构造函数.
&lt;strong&gt;我们可以使用QDataStream或QTextStream类来读写文件，也可以使用QIODevice类提供的read()、readLine()、readAll()以及write()这样的函数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有关文件本身的信息，比如文件名、文件所在目录的名字等，则是通过QFileInfo获取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用QFile的操作:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QFile file(&amp;quot;in.txt&amp;quot;);

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {

        qDebug() &amp;lt;&amp;lt; &amp;quot;Open file failed.&amp;quot;;
        return -1;

    } else {

        while (!file.atEnd()) {

            qDebug() &amp;lt;&amp;lt; file.readLine();
        }
    }

    QFileInfo info(file);
    qDebug() &amp;lt;&amp;lt; info.isDir();
    qDebug() &amp;lt;&amp;lt; info.isExecutable();
    qDebug() &amp;lt;&amp;lt; info.baseName();
    qDebug() &amp;lt;&amp;lt; info.completeBaseName();
    qDebug() &amp;lt;&amp;lt; info.suffix();
    qDebug() &amp;lt;&amp;lt; info.completeSuffix();

    return app.exec();
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;isDir()检查该文件是否是目录；&lt;/li&gt;
&lt;li&gt;isExecutable() 检查该文件是否是可执行文件等。&lt;/li&gt;
&lt;li&gt;baseName() 可以直接获得文件名；&lt;/li&gt;
&lt;li&gt;completeBaseName() 获取完整的文件名&lt;/li&gt;
&lt;li&gt;suffix() 则直接获取文件后缀名。&lt;/li&gt;
&lt;li&gt;completeSuffix() 获取完整的文件后缀&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二进制文件读写&#34;&gt;二进制文件读写&lt;/h3&gt;
&lt;p&gt;QDataStream提供了基于QIODevice的二进制数据的序列化。
这种流完全不依赖于底层操作系统、CPU 或者字节顺序（大端或小端）。&lt;/p&gt;
&lt;p&gt;。为性能起见，数据只有在文件关闭时才会真正写入。因此，我们必须在最后添加一行代码：
&lt;code&gt;file.close(); // 如果不想关闭文件，可以使用&lt;/code&gt;
&lt;code&gt;file.flush();&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;QFile file(&amp;quot;file.dat&amp;quot;);

file.open(QIODevice::ReadWrite);

QDataStream stream(&amp;amp;file);

QString str = &amp;quot;the answer is 42&amp;quot;;

stream &amp;lt;&amp;lt; str;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;文本文件读写&#34;&gt;文本文件读写&lt;/h3&gt;
&lt;p&gt;利用QTextStream类读写文本文件&lt;/p&gt;
&lt;p&gt;QIODevice::NotOpen 未打开&lt;/p&gt;
&lt;p&gt;QIODevice::ReadOnly 以只读方式打开&lt;/p&gt;
&lt;p&gt;QIODevice::WriteOnly 以只写方式打开&lt;/p&gt;
&lt;p&gt;QIODevice::ReadWrite 以读写方式打开&lt;/p&gt;
&lt;p&gt;QIODevice::Append 以追加的方式打开，新增加的内容将被追加到文件末尾&lt;/p&gt;
&lt;p&gt;QIODevice::Truncate 以重写的方式打开，在写入新的数据时会将原有数据全部清除，游标设置在文件开头。&lt;/p&gt;
&lt;p&gt;QIODevice::Text 在读取时，将行结束符转换成 \n；&lt;/p&gt;
&lt;p&gt;QIODevice::Unbuffered 忽略缓存&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;socket通信&#34;&gt;Socket通信&lt;/h1&gt;
&lt;p&gt;Qt中提供的所有的Socket类都是非阻塞的。&lt;/p&gt;
&lt;p&gt;Qt中常用的用于socket通信的套接字类:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;QTcpServer
用于TCP/IP通信, 作为服务器端套接字使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;QTcpSocket
用于TCP/IP通信，作为客户端套接字使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;QUdpSocket
用于UDP通信，服务器，客户端均使用此套接字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tcpip&#34;&gt;TCP/IP&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在Qt中实现TCP/IP服务器端通信的流程:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建套接字&lt;/li&gt;
&lt;li&gt;将套接字设置为监听模式&lt;/li&gt;
&lt;li&gt;等待并接受客户端请求&lt;/li&gt;
&lt;li&gt;接收或者向客户端发送数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以通过QTcpServer提供的void newConnection()***&lt;em&gt;信号来检测是否有连接请求，如果有可以在对应的槽函数中调用nextPendingConnection函数获取到客户端的Socket信息（返回值为QTcpSocket&lt;/em&gt;类型指针），通过此套接字与客户端之间进行通信。&lt;/p&gt;
&lt;p&gt;接收数据：使用read（）或者readAll（）函数
发送数据：用write（）函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端通信流程:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建套接字&lt;/li&gt;
&lt;li&gt;连接服务器&lt;/li&gt;
&lt;li&gt;可以使用QTcpSocket类的 &lt;strong&gt;connectToHost&lt;/strong&gt; 函数来连接服务器&lt;/li&gt;
&lt;li&gt;向服务器发送或者接收数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;服务器端&#34;&gt;服务器端&lt;/h3&gt;
&lt;p&gt;通过Qt提供的QTcpServer类实现服务器端的socket通信&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//---------- tcpserver.h ------------
class TCPServer : public QMainWindow
{
    Q_OBJECT

public:
    explicit TCPServer(QWidget *parent = 0);
    ~TCPServer();

public slots:

    void slotNewConnection();
    void slotReadyRead();

private:
    Ui::TCPServer *ui;
    // 负责监听的套接字
    QTcpServer* m_server;

    // 负责通信的套接字
    QTcpSocket* m_client;
};



//---------- tcpserver.cpp ------------
TCPServer::TCPServer(QWidget *parent) :

    QMainWindow(parent),
    ui(new Ui::TCPServer),
    m_server(NULL),
    m_client(NULL)
{

    ui-&amp;gt;setupUi(this);
        
    //创建套接字对象
    m_server = new QTcpServer(this);

    //将套接字设置为监听模式
    m_server-&amp;gt;listen(QHostAddress::Any, 9999);

    //通过信号接收客户端请求
    connect(m_server, &amp;amp;QTcpServer::newConnection, this, &amp;amp;TCPServer::slotNewConnection);
}

TCPServer::~TCPServer()
{
    delete ui;
}

void TCPServer::slotNewConnection()
{
    if(m_client == NULL)
    {

        //处理客户端的连接请求
        m_client = m_server-&amp;gt;nextPendingConnection();

        //发送数据
        m_client-&amp;gt;write(&amp;quot;服务器连接成功!!!&amp;quot;);

        //连接信号, 接收客户端数据
        connect(m_client, &amp;amp;QTcpSocket::readyRead, this, &amp;amp;TCPServer::slotReadyRead);
    }
}


void TCPServer::slotReadyRead()
{
    //接收数据
    QByteArray array = m_client-&amp;gt;readAll();
    QMessageBox::information(this, &amp;quot;Client Message&amp;quot;, array);
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;客户端&#34;&gt;客户端&lt;/h3&gt;
&lt;p&gt;客户端通过使用Qt提供的QTcpSocket类可以方便的实现与服务器端的通信&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//------------- tcpclient.h ------------

class TCPClient : public QMainWindow
{
    Q_OBJECT

public:

    explicit TCPClient(QWidget *parent = 0);
    ~TCPClient();

 
public slots:
    void slotReadyRead();
    void slotSendMsg();

private:
    Ui::TCPClient *ui;
    QTcpSocket* m_client;
};

//------------- tcpclient.cpp --------------

TCPClient::TCPClient(QWidget *parent) :

    QMainWindow(parent),
    ui(new Ui::TCPClient)

{

    ui-&amp;gt;setupUi(this);

    //创建套接字
    m_client = new QTcpSocket(this);

    //连接服务器
    m_client-&amp;gt;connectToHost(QHostAddress(&amp;quot;127.0.0.1&amp;quot;), 9999);

    //通过信号接收服务器数据
    connect(m_client, &amp;amp;QTcpSocket::readyRead, this, &amp;amp;TCPClient::slotReadyRead);

    //发送按钮
    connect(ui-&amp;gt;btnSend, &amp;amp;QPushButton::clicked, this, &amp;amp;TCPClient::slotSendMsg);

}

 

TCPClient::~TCPClient()
{
    delete ui;
}

void TCPClient::slotReadyRead()

{
    //接收数据
    QByteArray array = m_client-&amp;gt;readAll();
    QMessageBox::information(this, &amp;quot;Server Message&amp;quot;, array);
}

void TCPClient::slotSendMsg()
{
    QString text = ui-&amp;gt;textEdit-&amp;gt;toPlainText();

    //发送数据
    m_client-&amp;gt;write(text.toUtf8());
    ui-&amp;gt;textEdit-&amp;gt;clear();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;udp&#34;&gt;UDP&lt;/h2&gt;
&lt;p&gt;使用Qt提供的QUdpSocket进行UDP通信.
&lt;strong&gt;在UDP方式下,客户端并不与服务器建立连接,它只负责调用发送函数向服务器发送数据.&lt;/strong&gt;
在UDP方式下，客户端并不与服务器建立连接，它只负责调用发送函数向服务器发送数据。类似的服务器也不从客户端接收连接，只负责调用接收函数，等待来自客户端的数据的到达。&lt;/p&gt;
&lt;p&gt;两部分的工作大致相同:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建套接字&lt;/li&gt;
&lt;li&gt;绑定套接字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在UDP中如果需要接收数据则需要对套接字进行绑定，只发送数据则不需要对套接字进行绑定。&lt;/p&gt;
&lt;p&gt;通过调用bind（）函数将套接字绑定到指定端口上。&lt;/p&gt;
&lt;p&gt;接收或者发送数据&lt;/p&gt;
&lt;p&gt;接收数据：使用readDatagram()接收数据,函数声明如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qint64 readDatagram(char * data, qint64 maxSize, QHostAddress * address = 0, quint16 * port = 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数
data: 接收数据的缓存地址
maxSize: 缓存接收的最大字节数
address: 数据发送方的地址（一般使用提供的默认值）
port: 数据发送方的端口号（一般使用提供的默认值）&lt;/p&gt;
&lt;p&gt;发送数据:使用writeDatagram()函数发送数据，函数声明如下：
&lt;code&gt;qint64 writeDatagram(const QByteArray &amp;amp; datagram, const QHostAddress &amp;amp; host, quint16 port)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数:
datagram：要发送的字符串
host：数据接收方的地址
port：数据接收方的端口号&lt;/p&gt;
&lt;h3 id=&#34;广播&#34;&gt;广播&lt;/h3&gt;
&lt;p&gt;在使用QUdpSocket类的writeDatagram()函数发送数据的时候，其中第二个参数host应该指定为广播地址：QHostAddress：：Broadcast此设置相当于QHostAddress(&amp;quot;255.255.255.255&amp;quot;)使用UDP广播的的特点：&lt;/p&gt;
&lt;p&gt;使用UDP进行广播，局域网内的其他的UDP用户全部可以收到广播的消息
UDP广播只能在局域网范围内使用&lt;/p&gt;
&lt;h2 id=&#34;tcp和udp&#34;&gt;Tcp和UDP&lt;/h2&gt;
&lt;p&gt;TCP/IP  UDP
是否连接    面向连接    无连接
传输方式    基于流 基于数据报
传输可靠性   可靠  不可靠
传输效率    效率低 效率高
能否广播&lt;/p&gt;
&lt;h1 id=&#34;多线程&#34;&gt;多线程&lt;/h1&gt;
&lt;p&gt;通常情况下，应用程序都是在一个线程中执行操作。但是，当调用一个耗时操作（例如，大批量I/O或大量矩阵变换等CPU密集操作）时，用户界面常常会冻结。而使用多线程可以解决这一问题。&lt;/p&gt;
&lt;p&gt;多线程的几个优势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高应用程序响应速度&lt;/li&gt;
&lt;li&gt;使用CUP系统更加有效&lt;/li&gt;
&lt;li&gt;改善程序结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程程序有以下几个特点：&lt;/p&gt;
&lt;p&gt;多线程程序的行为无法预期，当多次执行程序时，每一次的结果都可能不同。
多线程的执行顺序无法保证，它与操作系统的调度策略和线程优先级等因素有关。
多线程的切换可能发生在任何时刻、任何地点。
多线程对代码的敏感度高，对代码的细微修改都可能产生意想不到的结果。&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/coding/" term="coding" label="coding" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">性能评价</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/" />
            <id>https://chenbokaix250.github.io/tech/%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/</id>
            <updated>2020-04-11T09:10:36&#43;08:00</updated>
            <published>2020-04-09T01:16:59&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">detecter 参考yolo评价 mAP(mean Averge Precision) 作为object detection中衡量检测精度的指标 &amp;gt;45% FPS(Frames Per……</summary>
            
                <content type="html">&lt;h2 id=&#34;detecter&#34;&gt;detecter&lt;/h2&gt;
&lt;h4 id=&#34;参考yolo评价&#34;&gt;参考yolo评价&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;mAP(mean Averge Precision) 作为object detection中衡量检测精度的指标 &amp;gt;45%&lt;/li&gt;
&lt;li&gt;FPS(Frames Per Second) 每秒传输帧数 &amp;gt;35&lt;/li&gt;
&lt;li&gt;IOU(交并比) 计算两个边界框交集和并集之比  &amp;gt;85%&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参考kitti&#34;&gt;参考kitti&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;moderate &amp;gt;70%&lt;/li&gt;
&lt;li&gt;Easy &amp;gt;80%&lt;/li&gt;
&lt;li&gt;Hard &amp;gt;60%&lt;/li&gt;
&lt;li&gt;Runtime &amp;lt;0.25s&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tracking&#34;&gt;tracking&lt;/h2&gt;
&lt;h4 id=&#34;vot评价体系----主要有eao指标和efo指标&#34;&gt;VOT评价体系 -- 主要有EAO指标和EFO指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;EAO是Expect Average Overlaprate(平均重叠率) &amp;gt;85%&lt;/li&gt;
&lt;li&gt;EFO是Equivalent Filter Operations(过滤器等效操作数) &amp;gt;30&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mota16-评价体系参考kitti&#34;&gt;MOTA16 评价体系(参考kitti)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MOTA(Multiple Object Tracking Accuracy) &amp;gt;75%&lt;/li&gt;
&lt;li&gt;MOTP(Multiple Object Tracking Precision) &amp;gt;75%&lt;/li&gt;
&lt;li&gt;MT(Mostly Tracked) 满足Ground Truth至少在80%的时间内都匹配成功的track 在所有追踪目标中所占的比例。&amp;gt;65%&lt;/li&gt;
&lt;li&gt;ML(Mostly Lost) 满足Ground Truth在小于20%的时间内匹配成功的track 在所有追踪目标中所占的比例。&amp;lt;15%&lt;/li&gt;
&lt;li&gt;Runtime 运行周期 &amp;lt;0.25s&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/deeplearning/" term="DeepLearning" label="DeepLearning" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Git_learn</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/tech/git_learn/" />
            <id>https://chenbokaix250.github.io/tech/git_learn/</id>
            <updated>2020-04-09T16:17:11&#43;08:00</updated>
            <published>2020-04-09T00:46:40&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Git 使用中的一些记录 今年需要输出一下相关的内容 准备用github托管一下 所以准备在gi……</summary>
            
                <content type="html">&lt;h1 id=&#34;git-使用中的一些记录&#34;&gt;Git 使用中的一些记录&lt;/h1&gt;
&lt;p&gt;今年需要输出一下相关的内容 准备用github托管一下&lt;/p&gt;
&lt;p&gt;所以准备在git上记录相关内容&lt;/p&gt;
&lt;p&gt;简要的Git入门一下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先要生成ssh key&lt;/li&gt;
&lt;li&gt;在github上配置ssh key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ ssh -T git@github.com&lt;/code&gt;来验证是否成功&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;要将本地仓库传到github上去,需要设置username和email&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;your name&amp;#34;&lt;/span&gt;
$ git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_email@youremail.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;提交/上传&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在本地仓库里添加一些文件,比如README&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git add README
$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;上传到github&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果需要强行上传本地文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push -f
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/tech/" term="tech" label="tech" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/coding/" term="coding" label="coding" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">第一篇 -&gt; 搭建</title>
            <link rel="alternate" type="text/html" href="https://chenbokaix250.github.io/life/blog/" />
            <id>https://chenbokaix250.github.io/life/blog/</id>
            <updated>2020-04-18T15:56:53&#43;08:00</updated>
            <published>2020-04-08T23:52:51&#43;08:00</published>
            <author>
                    <name>chenbokai</name>
                    <uri>https://chenbokai.work</uri>
                    <email>chenbokais3@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">利用hugo搭建博客 并挂载github pages 利用chenbokai.run 域名挂博客 算是……</summary>
            
                <content type="html">&lt;h2 id=&#34;利用hugo搭建博客-并挂载github-pages&#34;&gt;利用hugo搭建博客 并挂载github pages&lt;/h2&gt;
&lt;p&gt;利用&lt;code&gt;chenbokai.run&lt;/code&gt; 域名挂博客&lt;/p&gt;
&lt;p&gt;算是从30岁开始输出技术资料&lt;/p&gt;
&lt;p&gt;不断提高自己&lt;/p&gt;
&lt;p&gt;GoGoGo&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://chenbokaix250.github.io/life/" term="life" label="life" />
                        
                    
                
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://chenbokaix250.github.io/tags/introduce/" term="introduce" label="introduce" />
                            
                        
                    
                
            
        </entry>
    
</feed>
